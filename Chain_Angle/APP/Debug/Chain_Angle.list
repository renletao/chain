
Chain_Angle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005898  080020c0  080020c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007958  08007958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a94  08007a94  00007124  2**0
                  CONTENTS
  4 .ARM          00000000  08007a94  08007a94  00007124  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a94  08007a94  00007124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a98  08007a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  200000c0  08007a9c  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001118  20000124  08007b00  00007124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08007b00  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d5f  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480b  00000000  00000000  0001eeab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00006808  00000000  00000000  000236b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00029ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1e  00000000  00000000  0002aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5b6  00000000  00000000  0002b6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001850c  00000000  00000000  00046c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b370  00000000  00000000  0005f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa4f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fd0  00000000  00000000  000fa53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000fc50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080020c0 <__do_global_dtors_aux>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4c06      	ldr	r4, [pc, #24]	@ (80020dc <__do_global_dtors_aux+0x1c>)
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <__do_global_dtors_aux+0x1a>
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <__do_global_dtors_aux+0x20>)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <__do_global_dtors_aux+0x24>)
 80020d2:	e000      	b.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d4:	bf00      	nop
 80020d6:	2301      	movs	r3, #1
 80020d8:	7023      	strb	r3, [r4, #0]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	20000124 	.word	0x20000124
 80020e0:	00000000 	.word	0x00000000
 80020e4:	08007930 	.word	0x08007930

080020e8 <frame_dummy>:
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <frame_dummy+0x14>)
 80020ea:	b510      	push	{r4, lr}
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <frame_dummy+0x10>
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <frame_dummy+0x18>)
 80020f2:	4804      	ldr	r0, [pc, #16]	@ (8002104 <frame_dummy+0x1c>)
 80020f4:	e000      	b.n	80020f8 <frame_dummy+0x10>
 80020f6:	bf00      	nop
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	00000000 	.word	0x00000000
 8002100:	20000128 	.word	0x20000128
 8002104:	08007930 	.word	0x08007930

08002108 <__udivsi3>:
 8002108:	2200      	movs	r2, #0
 800210a:	0843      	lsrs	r3, r0, #1
 800210c:	428b      	cmp	r3, r1
 800210e:	d374      	bcc.n	80021fa <__udivsi3+0xf2>
 8002110:	0903      	lsrs	r3, r0, #4
 8002112:	428b      	cmp	r3, r1
 8002114:	d35f      	bcc.n	80021d6 <__udivsi3+0xce>
 8002116:	0a03      	lsrs	r3, r0, #8
 8002118:	428b      	cmp	r3, r1
 800211a:	d344      	bcc.n	80021a6 <__udivsi3+0x9e>
 800211c:	0b03      	lsrs	r3, r0, #12
 800211e:	428b      	cmp	r3, r1
 8002120:	d328      	bcc.n	8002174 <__udivsi3+0x6c>
 8002122:	0c03      	lsrs	r3, r0, #16
 8002124:	428b      	cmp	r3, r1
 8002126:	d30d      	bcc.n	8002144 <__udivsi3+0x3c>
 8002128:	22ff      	movs	r2, #255	@ 0xff
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	ba12      	rev	r2, r2
 800212e:	0c03      	lsrs	r3, r0, #16
 8002130:	428b      	cmp	r3, r1
 8002132:	d302      	bcc.n	800213a <__udivsi3+0x32>
 8002134:	1212      	asrs	r2, r2, #8
 8002136:	0209      	lsls	r1, r1, #8
 8002138:	d065      	beq.n	8002206 <__udivsi3+0xfe>
 800213a:	0b03      	lsrs	r3, r0, #12
 800213c:	428b      	cmp	r3, r1
 800213e:	d319      	bcc.n	8002174 <__udivsi3+0x6c>
 8002140:	e000      	b.n	8002144 <__udivsi3+0x3c>
 8002142:	0a09      	lsrs	r1, r1, #8
 8002144:	0bc3      	lsrs	r3, r0, #15
 8002146:	428b      	cmp	r3, r1
 8002148:	d301      	bcc.n	800214e <__udivsi3+0x46>
 800214a:	03cb      	lsls	r3, r1, #15
 800214c:	1ac0      	subs	r0, r0, r3
 800214e:	4152      	adcs	r2, r2
 8002150:	0b83      	lsrs	r3, r0, #14
 8002152:	428b      	cmp	r3, r1
 8002154:	d301      	bcc.n	800215a <__udivsi3+0x52>
 8002156:	038b      	lsls	r3, r1, #14
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	4152      	adcs	r2, r2
 800215c:	0b43      	lsrs	r3, r0, #13
 800215e:	428b      	cmp	r3, r1
 8002160:	d301      	bcc.n	8002166 <__udivsi3+0x5e>
 8002162:	034b      	lsls	r3, r1, #13
 8002164:	1ac0      	subs	r0, r0, r3
 8002166:	4152      	adcs	r2, r2
 8002168:	0b03      	lsrs	r3, r0, #12
 800216a:	428b      	cmp	r3, r1
 800216c:	d301      	bcc.n	8002172 <__udivsi3+0x6a>
 800216e:	030b      	lsls	r3, r1, #12
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	4152      	adcs	r2, r2
 8002174:	0ac3      	lsrs	r3, r0, #11
 8002176:	428b      	cmp	r3, r1
 8002178:	d301      	bcc.n	800217e <__udivsi3+0x76>
 800217a:	02cb      	lsls	r3, r1, #11
 800217c:	1ac0      	subs	r0, r0, r3
 800217e:	4152      	adcs	r2, r2
 8002180:	0a83      	lsrs	r3, r0, #10
 8002182:	428b      	cmp	r3, r1
 8002184:	d301      	bcc.n	800218a <__udivsi3+0x82>
 8002186:	028b      	lsls	r3, r1, #10
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	4152      	adcs	r2, r2
 800218c:	0a43      	lsrs	r3, r0, #9
 800218e:	428b      	cmp	r3, r1
 8002190:	d301      	bcc.n	8002196 <__udivsi3+0x8e>
 8002192:	024b      	lsls	r3, r1, #9
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	4152      	adcs	r2, r2
 8002198:	0a03      	lsrs	r3, r0, #8
 800219a:	428b      	cmp	r3, r1
 800219c:	d301      	bcc.n	80021a2 <__udivsi3+0x9a>
 800219e:	020b      	lsls	r3, r1, #8
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	4152      	adcs	r2, r2
 80021a4:	d2cd      	bcs.n	8002142 <__udivsi3+0x3a>
 80021a6:	09c3      	lsrs	r3, r0, #7
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d301      	bcc.n	80021b0 <__udivsi3+0xa8>
 80021ac:	01cb      	lsls	r3, r1, #7
 80021ae:	1ac0      	subs	r0, r0, r3
 80021b0:	4152      	adcs	r2, r2
 80021b2:	0983      	lsrs	r3, r0, #6
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d301      	bcc.n	80021bc <__udivsi3+0xb4>
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	4152      	adcs	r2, r2
 80021be:	0943      	lsrs	r3, r0, #5
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d301      	bcc.n	80021c8 <__udivsi3+0xc0>
 80021c4:	014b      	lsls	r3, r1, #5
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	4152      	adcs	r2, r2
 80021ca:	0903      	lsrs	r3, r0, #4
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d301      	bcc.n	80021d4 <__udivsi3+0xcc>
 80021d0:	010b      	lsls	r3, r1, #4
 80021d2:	1ac0      	subs	r0, r0, r3
 80021d4:	4152      	adcs	r2, r2
 80021d6:	08c3      	lsrs	r3, r0, #3
 80021d8:	428b      	cmp	r3, r1
 80021da:	d301      	bcc.n	80021e0 <__udivsi3+0xd8>
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	1ac0      	subs	r0, r0, r3
 80021e0:	4152      	adcs	r2, r2
 80021e2:	0883      	lsrs	r3, r0, #2
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d301      	bcc.n	80021ec <__udivsi3+0xe4>
 80021e8:	008b      	lsls	r3, r1, #2
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	4152      	adcs	r2, r2
 80021ee:	0843      	lsrs	r3, r0, #1
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d301      	bcc.n	80021f8 <__udivsi3+0xf0>
 80021f4:	004b      	lsls	r3, r1, #1
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	4152      	adcs	r2, r2
 80021fa:	1a41      	subs	r1, r0, r1
 80021fc:	d200      	bcs.n	8002200 <__udivsi3+0xf8>
 80021fe:	4601      	mov	r1, r0
 8002200:	4152      	adcs	r2, r2
 8002202:	4610      	mov	r0, r2
 8002204:	4770      	bx	lr
 8002206:	e7ff      	b.n	8002208 <__udivsi3+0x100>
 8002208:	b501      	push	{r0, lr}
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f8f0 	bl	80023f0 <__aeabi_idiv0>
 8002210:	bd02      	pop	{r1, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)

08002214 <__aeabi_uidivmod>:
 8002214:	2900      	cmp	r1, #0
 8002216:	d0f7      	beq.n	8002208 <__udivsi3+0x100>
 8002218:	e776      	b.n	8002108 <__udivsi3>
 800221a:	4770      	bx	lr

0800221c <__divsi3>:
 800221c:	4603      	mov	r3, r0
 800221e:	430b      	orrs	r3, r1
 8002220:	d47f      	bmi.n	8002322 <__divsi3+0x106>
 8002222:	2200      	movs	r2, #0
 8002224:	0843      	lsrs	r3, r0, #1
 8002226:	428b      	cmp	r3, r1
 8002228:	d374      	bcc.n	8002314 <__divsi3+0xf8>
 800222a:	0903      	lsrs	r3, r0, #4
 800222c:	428b      	cmp	r3, r1
 800222e:	d35f      	bcc.n	80022f0 <__divsi3+0xd4>
 8002230:	0a03      	lsrs	r3, r0, #8
 8002232:	428b      	cmp	r3, r1
 8002234:	d344      	bcc.n	80022c0 <__divsi3+0xa4>
 8002236:	0b03      	lsrs	r3, r0, #12
 8002238:	428b      	cmp	r3, r1
 800223a:	d328      	bcc.n	800228e <__divsi3+0x72>
 800223c:	0c03      	lsrs	r3, r0, #16
 800223e:	428b      	cmp	r3, r1
 8002240:	d30d      	bcc.n	800225e <__divsi3+0x42>
 8002242:	22ff      	movs	r2, #255	@ 0xff
 8002244:	0209      	lsls	r1, r1, #8
 8002246:	ba12      	rev	r2, r2
 8002248:	0c03      	lsrs	r3, r0, #16
 800224a:	428b      	cmp	r3, r1
 800224c:	d302      	bcc.n	8002254 <__divsi3+0x38>
 800224e:	1212      	asrs	r2, r2, #8
 8002250:	0209      	lsls	r1, r1, #8
 8002252:	d065      	beq.n	8002320 <__divsi3+0x104>
 8002254:	0b03      	lsrs	r3, r0, #12
 8002256:	428b      	cmp	r3, r1
 8002258:	d319      	bcc.n	800228e <__divsi3+0x72>
 800225a:	e000      	b.n	800225e <__divsi3+0x42>
 800225c:	0a09      	lsrs	r1, r1, #8
 800225e:	0bc3      	lsrs	r3, r0, #15
 8002260:	428b      	cmp	r3, r1
 8002262:	d301      	bcc.n	8002268 <__divsi3+0x4c>
 8002264:	03cb      	lsls	r3, r1, #15
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	4152      	adcs	r2, r2
 800226a:	0b83      	lsrs	r3, r0, #14
 800226c:	428b      	cmp	r3, r1
 800226e:	d301      	bcc.n	8002274 <__divsi3+0x58>
 8002270:	038b      	lsls	r3, r1, #14
 8002272:	1ac0      	subs	r0, r0, r3
 8002274:	4152      	adcs	r2, r2
 8002276:	0b43      	lsrs	r3, r0, #13
 8002278:	428b      	cmp	r3, r1
 800227a:	d301      	bcc.n	8002280 <__divsi3+0x64>
 800227c:	034b      	lsls	r3, r1, #13
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	4152      	adcs	r2, r2
 8002282:	0b03      	lsrs	r3, r0, #12
 8002284:	428b      	cmp	r3, r1
 8002286:	d301      	bcc.n	800228c <__divsi3+0x70>
 8002288:	030b      	lsls	r3, r1, #12
 800228a:	1ac0      	subs	r0, r0, r3
 800228c:	4152      	adcs	r2, r2
 800228e:	0ac3      	lsrs	r3, r0, #11
 8002290:	428b      	cmp	r3, r1
 8002292:	d301      	bcc.n	8002298 <__divsi3+0x7c>
 8002294:	02cb      	lsls	r3, r1, #11
 8002296:	1ac0      	subs	r0, r0, r3
 8002298:	4152      	adcs	r2, r2
 800229a:	0a83      	lsrs	r3, r0, #10
 800229c:	428b      	cmp	r3, r1
 800229e:	d301      	bcc.n	80022a4 <__divsi3+0x88>
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	1ac0      	subs	r0, r0, r3
 80022a4:	4152      	adcs	r2, r2
 80022a6:	0a43      	lsrs	r3, r0, #9
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d301      	bcc.n	80022b0 <__divsi3+0x94>
 80022ac:	024b      	lsls	r3, r1, #9
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	4152      	adcs	r2, r2
 80022b2:	0a03      	lsrs	r3, r0, #8
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d301      	bcc.n	80022bc <__divsi3+0xa0>
 80022b8:	020b      	lsls	r3, r1, #8
 80022ba:	1ac0      	subs	r0, r0, r3
 80022bc:	4152      	adcs	r2, r2
 80022be:	d2cd      	bcs.n	800225c <__divsi3+0x40>
 80022c0:	09c3      	lsrs	r3, r0, #7
 80022c2:	428b      	cmp	r3, r1
 80022c4:	d301      	bcc.n	80022ca <__divsi3+0xae>
 80022c6:	01cb      	lsls	r3, r1, #7
 80022c8:	1ac0      	subs	r0, r0, r3
 80022ca:	4152      	adcs	r2, r2
 80022cc:	0983      	lsrs	r3, r0, #6
 80022ce:	428b      	cmp	r3, r1
 80022d0:	d301      	bcc.n	80022d6 <__divsi3+0xba>
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1ac0      	subs	r0, r0, r3
 80022d6:	4152      	adcs	r2, r2
 80022d8:	0943      	lsrs	r3, r0, #5
 80022da:	428b      	cmp	r3, r1
 80022dc:	d301      	bcc.n	80022e2 <__divsi3+0xc6>
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	1ac0      	subs	r0, r0, r3
 80022e2:	4152      	adcs	r2, r2
 80022e4:	0903      	lsrs	r3, r0, #4
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d301      	bcc.n	80022ee <__divsi3+0xd2>
 80022ea:	010b      	lsls	r3, r1, #4
 80022ec:	1ac0      	subs	r0, r0, r3
 80022ee:	4152      	adcs	r2, r2
 80022f0:	08c3      	lsrs	r3, r0, #3
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d301      	bcc.n	80022fa <__divsi3+0xde>
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	1ac0      	subs	r0, r0, r3
 80022fa:	4152      	adcs	r2, r2
 80022fc:	0883      	lsrs	r3, r0, #2
 80022fe:	428b      	cmp	r3, r1
 8002300:	d301      	bcc.n	8002306 <__divsi3+0xea>
 8002302:	008b      	lsls	r3, r1, #2
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	4152      	adcs	r2, r2
 8002308:	0843      	lsrs	r3, r0, #1
 800230a:	428b      	cmp	r3, r1
 800230c:	d301      	bcc.n	8002312 <__divsi3+0xf6>
 800230e:	004b      	lsls	r3, r1, #1
 8002310:	1ac0      	subs	r0, r0, r3
 8002312:	4152      	adcs	r2, r2
 8002314:	1a41      	subs	r1, r0, r1
 8002316:	d200      	bcs.n	800231a <__divsi3+0xfe>
 8002318:	4601      	mov	r1, r0
 800231a:	4152      	adcs	r2, r2
 800231c:	4610      	mov	r0, r2
 800231e:	4770      	bx	lr
 8002320:	e05d      	b.n	80023de <__divsi3+0x1c2>
 8002322:	0fca      	lsrs	r2, r1, #31
 8002324:	d000      	beq.n	8002328 <__divsi3+0x10c>
 8002326:	4249      	negs	r1, r1
 8002328:	1003      	asrs	r3, r0, #32
 800232a:	d300      	bcc.n	800232e <__divsi3+0x112>
 800232c:	4240      	negs	r0, r0
 800232e:	4053      	eors	r3, r2
 8002330:	2200      	movs	r2, #0
 8002332:	469c      	mov	ip, r3
 8002334:	0903      	lsrs	r3, r0, #4
 8002336:	428b      	cmp	r3, r1
 8002338:	d32d      	bcc.n	8002396 <__divsi3+0x17a>
 800233a:	0a03      	lsrs	r3, r0, #8
 800233c:	428b      	cmp	r3, r1
 800233e:	d312      	bcc.n	8002366 <__divsi3+0x14a>
 8002340:	22fc      	movs	r2, #252	@ 0xfc
 8002342:	0189      	lsls	r1, r1, #6
 8002344:	ba12      	rev	r2, r2
 8002346:	0a03      	lsrs	r3, r0, #8
 8002348:	428b      	cmp	r3, r1
 800234a:	d30c      	bcc.n	8002366 <__divsi3+0x14a>
 800234c:	0189      	lsls	r1, r1, #6
 800234e:	1192      	asrs	r2, r2, #6
 8002350:	428b      	cmp	r3, r1
 8002352:	d308      	bcc.n	8002366 <__divsi3+0x14a>
 8002354:	0189      	lsls	r1, r1, #6
 8002356:	1192      	asrs	r2, r2, #6
 8002358:	428b      	cmp	r3, r1
 800235a:	d304      	bcc.n	8002366 <__divsi3+0x14a>
 800235c:	0189      	lsls	r1, r1, #6
 800235e:	d03a      	beq.n	80023d6 <__divsi3+0x1ba>
 8002360:	1192      	asrs	r2, r2, #6
 8002362:	e000      	b.n	8002366 <__divsi3+0x14a>
 8002364:	0989      	lsrs	r1, r1, #6
 8002366:	09c3      	lsrs	r3, r0, #7
 8002368:	428b      	cmp	r3, r1
 800236a:	d301      	bcc.n	8002370 <__divsi3+0x154>
 800236c:	01cb      	lsls	r3, r1, #7
 800236e:	1ac0      	subs	r0, r0, r3
 8002370:	4152      	adcs	r2, r2
 8002372:	0983      	lsrs	r3, r0, #6
 8002374:	428b      	cmp	r3, r1
 8002376:	d301      	bcc.n	800237c <__divsi3+0x160>
 8002378:	018b      	lsls	r3, r1, #6
 800237a:	1ac0      	subs	r0, r0, r3
 800237c:	4152      	adcs	r2, r2
 800237e:	0943      	lsrs	r3, r0, #5
 8002380:	428b      	cmp	r3, r1
 8002382:	d301      	bcc.n	8002388 <__divsi3+0x16c>
 8002384:	014b      	lsls	r3, r1, #5
 8002386:	1ac0      	subs	r0, r0, r3
 8002388:	4152      	adcs	r2, r2
 800238a:	0903      	lsrs	r3, r0, #4
 800238c:	428b      	cmp	r3, r1
 800238e:	d301      	bcc.n	8002394 <__divsi3+0x178>
 8002390:	010b      	lsls	r3, r1, #4
 8002392:	1ac0      	subs	r0, r0, r3
 8002394:	4152      	adcs	r2, r2
 8002396:	08c3      	lsrs	r3, r0, #3
 8002398:	428b      	cmp	r3, r1
 800239a:	d301      	bcc.n	80023a0 <__divsi3+0x184>
 800239c:	00cb      	lsls	r3, r1, #3
 800239e:	1ac0      	subs	r0, r0, r3
 80023a0:	4152      	adcs	r2, r2
 80023a2:	0883      	lsrs	r3, r0, #2
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d301      	bcc.n	80023ac <__divsi3+0x190>
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	4152      	adcs	r2, r2
 80023ae:	d2d9      	bcs.n	8002364 <__divsi3+0x148>
 80023b0:	0843      	lsrs	r3, r0, #1
 80023b2:	428b      	cmp	r3, r1
 80023b4:	d301      	bcc.n	80023ba <__divsi3+0x19e>
 80023b6:	004b      	lsls	r3, r1, #1
 80023b8:	1ac0      	subs	r0, r0, r3
 80023ba:	4152      	adcs	r2, r2
 80023bc:	1a41      	subs	r1, r0, r1
 80023be:	d200      	bcs.n	80023c2 <__divsi3+0x1a6>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4663      	mov	r3, ip
 80023c4:	4152      	adcs	r2, r2
 80023c6:	105b      	asrs	r3, r3, #1
 80023c8:	4610      	mov	r0, r2
 80023ca:	d301      	bcc.n	80023d0 <__divsi3+0x1b4>
 80023cc:	4240      	negs	r0, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d500      	bpl.n	80023d4 <__divsi3+0x1b8>
 80023d2:	4249      	negs	r1, r1
 80023d4:	4770      	bx	lr
 80023d6:	4663      	mov	r3, ip
 80023d8:	105b      	asrs	r3, r3, #1
 80023da:	d300      	bcc.n	80023de <__divsi3+0x1c2>
 80023dc:	4240      	negs	r0, r0
 80023de:	b501      	push	{r0, lr}
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f805 	bl	80023f0 <__aeabi_idiv0>
 80023e6:	bd02      	pop	{r1, pc}

080023e8 <__aeabi_idivmod>:
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0f8      	beq.n	80023de <__divsi3+0x1c2>
 80023ec:	e716      	b.n	800221c <__divsi3>
 80023ee:	4770      	bx	lr

080023f0 <__aeabi_idiv0>:
 80023f0:	4770      	bx	lr
 80023f2:	46c0      	nop			@ (mov r8, r8)

080023f4 <__aeabi_d2uiz>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	2200      	movs	r2, #0
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__aeabi_d2uiz+0x38>)
 80023fa:	0004      	movs	r4, r0
 80023fc:	000d      	movs	r5, r1
 80023fe:	f001 fa33 	bl	8003868 <__aeabi_dcmpge>
 8002402:	2800      	cmp	r0, #0
 8002404:	d104      	bne.n	8002410 <__aeabi_d2uiz+0x1c>
 8002406:	0020      	movs	r0, r4
 8002408:	0029      	movs	r1, r5
 800240a:	f001 f98f 	bl	800372c <__aeabi_d2iz>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <__aeabi_d2uiz+0x38>)
 8002412:	2200      	movs	r2, #0
 8002414:	0020      	movs	r0, r4
 8002416:	0029      	movs	r1, r5
 8002418:	f000 fdec 	bl	8002ff4 <__aeabi_dsub>
 800241c:	f001 f986 	bl	800372c <__aeabi_d2iz>
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	469c      	mov	ip, r3
 8002426:	4460      	add	r0, ip
 8002428:	e7f1      	b.n	800240e <__aeabi_d2uiz+0x1a>
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	41e00000 	.word	0x41e00000

08002430 <__aeabi_ddiv>:
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	46de      	mov	lr, fp
 8002434:	4645      	mov	r5, r8
 8002436:	4657      	mov	r7, sl
 8002438:	464e      	mov	r6, r9
 800243a:	b5e0      	push	{r5, r6, r7, lr}
 800243c:	b087      	sub	sp, #28
 800243e:	9200      	str	r2, [sp, #0]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	030b      	lsls	r3, r1, #12
 8002444:	0b1b      	lsrs	r3, r3, #12
 8002446:	469b      	mov	fp, r3
 8002448:	0fca      	lsrs	r2, r1, #31
 800244a:	004b      	lsls	r3, r1, #1
 800244c:	0004      	movs	r4, r0
 800244e:	4680      	mov	r8, r0
 8002450:	0d5b      	lsrs	r3, r3, #21
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	d100      	bne.n	8002458 <__aeabi_ddiv+0x28>
 8002456:	e16a      	b.n	800272e <__aeabi_ddiv+0x2fe>
 8002458:	4ad4      	ldr	r2, [pc, #848]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d100      	bne.n	8002460 <__aeabi_ddiv+0x30>
 800245e:	e18c      	b.n	800277a <__aeabi_ddiv+0x34a>
 8002460:	4659      	mov	r1, fp
 8002462:	0f42      	lsrs	r2, r0, #29
 8002464:	00c9      	lsls	r1, r1, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	0409      	lsls	r1, r1, #16
 800246c:	4311      	orrs	r1, r2
 800246e:	00c2      	lsls	r2, r0, #3
 8002470:	4690      	mov	r8, r2
 8002472:	4acf      	ldr	r2, [pc, #828]	@ (80027b0 <__aeabi_ddiv+0x380>)
 8002474:	4689      	mov	r9, r1
 8002476:	4692      	mov	sl, r2
 8002478:	449a      	add	sl, r3
 800247a:	2300      	movs	r3, #0
 800247c:	2400      	movs	r4, #0
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	9e00      	ldr	r6, [sp, #0]
 8002482:	9f01      	ldr	r7, [sp, #4]
 8002484:	033b      	lsls	r3, r7, #12
 8002486:	0b1b      	lsrs	r3, r3, #12
 8002488:	469b      	mov	fp, r3
 800248a:	007b      	lsls	r3, r7, #1
 800248c:	0030      	movs	r0, r6
 800248e:	0d5b      	lsrs	r3, r3, #21
 8002490:	0ffd      	lsrs	r5, r7, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d100      	bne.n	8002498 <__aeabi_ddiv+0x68>
 8002496:	e128      	b.n	80026ea <__aeabi_ddiv+0x2ba>
 8002498:	4ac4      	ldr	r2, [pc, #784]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d100      	bne.n	80024a0 <__aeabi_ddiv+0x70>
 800249e:	e177      	b.n	8002790 <__aeabi_ddiv+0x360>
 80024a0:	4659      	mov	r1, fp
 80024a2:	0f72      	lsrs	r2, r6, #29
 80024a4:	00c9      	lsls	r1, r1, #3
 80024a6:	430a      	orrs	r2, r1
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0409      	lsls	r1, r1, #16
 80024ac:	4311      	orrs	r1, r2
 80024ae:	468b      	mov	fp, r1
 80024b0:	49bf      	ldr	r1, [pc, #764]	@ (80027b0 <__aeabi_ddiv+0x380>)
 80024b2:	00f2      	lsls	r2, r6, #3
 80024b4:	468c      	mov	ip, r1
 80024b6:	4651      	mov	r1, sl
 80024b8:	4463      	add	r3, ip
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	469a      	mov	sl, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	9e02      	ldr	r6, [sp, #8]
 80024c2:	406e      	eors	r6, r5
 80024c4:	2c0f      	cmp	r4, #15
 80024c6:	d827      	bhi.n	8002518 <__aeabi_ddiv+0xe8>
 80024c8:	49ba      	ldr	r1, [pc, #744]	@ (80027b4 <__aeabi_ddiv+0x384>)
 80024ca:	00a4      	lsls	r4, r4, #2
 80024cc:	5909      	ldr	r1, [r1, r4]
 80024ce:	468f      	mov	pc, r1
 80024d0:	46cb      	mov	fp, r9
 80024d2:	4642      	mov	r2, r8
 80024d4:	9e02      	ldr	r6, [sp, #8]
 80024d6:	9b03      	ldr	r3, [sp, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d016      	beq.n	800250a <__aeabi_ddiv+0xda>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d100      	bne.n	80024e2 <__aeabi_ddiv+0xb2>
 80024e0:	e2a6      	b.n	8002a30 <__aeabi_ddiv+0x600>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d000      	beq.n	80024e8 <__aeabi_ddiv+0xb8>
 80024e6:	e0df      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	2400      	movs	r4, #0
 80024ee:	4690      	mov	r8, r2
 80024f0:	051b      	lsls	r3, r3, #20
 80024f2:	4323      	orrs	r3, r4
 80024f4:	07f6      	lsls	r6, r6, #31
 80024f6:	4333      	orrs	r3, r6
 80024f8:	4640      	mov	r0, r8
 80024fa:	0019      	movs	r1, r3
 80024fc:	b007      	add	sp, #28
 80024fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002500:	46bb      	mov	fp, r7
 8002502:	46b2      	mov	sl, r6
 8002504:	46a9      	mov	r9, r5
 8002506:	46a0      	mov	r8, r4
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250a:	2200      	movs	r2, #0
 800250c:	2400      	movs	r4, #0
 800250e:	4690      	mov	r8, r2
 8002510:	4ba6      	ldr	r3, [pc, #664]	@ (80027ac <__aeabi_ddiv+0x37c>)
 8002512:	e7ed      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002514:	002e      	movs	r6, r5
 8002516:	e7df      	b.n	80024d8 <__aeabi_ddiv+0xa8>
 8002518:	45cb      	cmp	fp, r9
 800251a:	d200      	bcs.n	800251e <__aeabi_ddiv+0xee>
 800251c:	e1d4      	b.n	80028c8 <__aeabi_ddiv+0x498>
 800251e:	d100      	bne.n	8002522 <__aeabi_ddiv+0xf2>
 8002520:	e1cf      	b.n	80028c2 <__aeabi_ddiv+0x492>
 8002522:	2301      	movs	r3, #1
 8002524:	425b      	negs	r3, r3
 8002526:	469c      	mov	ip, r3
 8002528:	4644      	mov	r4, r8
 800252a:	4648      	mov	r0, r9
 800252c:	2700      	movs	r7, #0
 800252e:	44e2      	add	sl, ip
 8002530:	465b      	mov	r3, fp
 8002532:	0e15      	lsrs	r5, r2, #24
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	431d      	orrs	r5, r3
 8002538:	0c19      	lsrs	r1, r3, #16
 800253a:	042b      	lsls	r3, r5, #16
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	9500      	str	r5, [sp, #0]
 8002540:	0c1d      	lsrs	r5, r3, #16
 8002542:	4691      	mov	r9, r2
 8002544:	9102      	str	r1, [sp, #8]
 8002546:	9503      	str	r5, [sp, #12]
 8002548:	f7ff fe64 	bl	8002214 <__aeabi_uidivmod>
 800254c:	0002      	movs	r2, r0
 800254e:	436a      	muls	r2, r5
 8002550:	040b      	lsls	r3, r1, #16
 8002552:	0c21      	lsrs	r1, r4, #16
 8002554:	4680      	mov	r8, r0
 8002556:	4319      	orrs	r1, r3
 8002558:	428a      	cmp	r2, r1
 800255a:	d909      	bls.n	8002570 <__aeabi_ddiv+0x140>
 800255c:	9d00      	ldr	r5, [sp, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	46ac      	mov	ip, r5
 8002562:	425b      	negs	r3, r3
 8002564:	4461      	add	r1, ip
 8002566:	469c      	mov	ip, r3
 8002568:	44e0      	add	r8, ip
 800256a:	428d      	cmp	r5, r1
 800256c:	d800      	bhi.n	8002570 <__aeabi_ddiv+0x140>
 800256e:	e1fb      	b.n	8002968 <__aeabi_ddiv+0x538>
 8002570:	1a88      	subs	r0, r1, r2
 8002572:	9902      	ldr	r1, [sp, #8]
 8002574:	f7ff fe4e 	bl	8002214 <__aeabi_uidivmod>
 8002578:	9a03      	ldr	r2, [sp, #12]
 800257a:	0424      	lsls	r4, r4, #16
 800257c:	4342      	muls	r2, r0
 800257e:	0409      	lsls	r1, r1, #16
 8002580:	0c24      	lsrs	r4, r4, #16
 8002582:	0003      	movs	r3, r0
 8002584:	430c      	orrs	r4, r1
 8002586:	42a2      	cmp	r2, r4
 8002588:	d906      	bls.n	8002598 <__aeabi_ddiv+0x168>
 800258a:	9900      	ldr	r1, [sp, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	468c      	mov	ip, r1
 8002590:	4464      	add	r4, ip
 8002592:	42a1      	cmp	r1, r4
 8002594:	d800      	bhi.n	8002598 <__aeabi_ddiv+0x168>
 8002596:	e1e1      	b.n	800295c <__aeabi_ddiv+0x52c>
 8002598:	1aa0      	subs	r0, r4, r2
 800259a:	4642      	mov	r2, r8
 800259c:	0412      	lsls	r2, r2, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	4693      	mov	fp, r2
 80025a2:	464b      	mov	r3, r9
 80025a4:	4659      	mov	r1, fp
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	001d      	movs	r5, r3
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	040b      	lsls	r3, r1, #16
 80025ae:	4649      	mov	r1, r9
 80025b0:	0409      	lsls	r1, r1, #16
 80025b2:	0c09      	lsrs	r1, r1, #16
 80025b4:	000c      	movs	r4, r1
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	435c      	muls	r4, r3
 80025ba:	0c12      	lsrs	r2, r2, #16
 80025bc:	436b      	muls	r3, r5
 80025be:	4688      	mov	r8, r1
 80025c0:	4351      	muls	r1, r2
 80025c2:	436a      	muls	r2, r5
 80025c4:	0c25      	lsrs	r5, r4, #16
 80025c6:	46ac      	mov	ip, r5
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	4463      	add	r3, ip
 80025cc:	4299      	cmp	r1, r3
 80025ce:	d903      	bls.n	80025d8 <__aeabi_ddiv+0x1a8>
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	0249      	lsls	r1, r1, #9
 80025d4:	468c      	mov	ip, r1
 80025d6:	4462      	add	r2, ip
 80025d8:	0c19      	lsrs	r1, r3, #16
 80025da:	0424      	lsls	r4, r4, #16
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c24      	lsrs	r4, r4, #16
 80025e0:	188a      	adds	r2, r1, r2
 80025e2:	191c      	adds	r4, r3, r4
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d302      	bcc.n	80025ee <__aeabi_ddiv+0x1be>
 80025e8:	d116      	bne.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ea:	42a7      	cmp	r7, r4
 80025ec:	d214      	bcs.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ee:	465b      	mov	r3, fp
 80025f0:	9d00      	ldr	r5, [sp, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	444f      	add	r7, r9
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	454f      	cmp	r7, r9
 80025fa:	419b      	sbcs	r3, r3
 80025fc:	46ac      	mov	ip, r5
 80025fe:	425b      	negs	r3, r3
 8002600:	4463      	add	r3, ip
 8002602:	18c0      	adds	r0, r0, r3
 8002604:	4285      	cmp	r5, r0
 8002606:	d300      	bcc.n	800260a <__aeabi_ddiv+0x1da>
 8002608:	e1a1      	b.n	800294e <__aeabi_ddiv+0x51e>
 800260a:	4282      	cmp	r2, r0
 800260c:	d900      	bls.n	8002610 <__aeabi_ddiv+0x1e0>
 800260e:	e1f6      	b.n	80029fe <__aeabi_ddiv+0x5ce>
 8002610:	d100      	bne.n	8002614 <__aeabi_ddiv+0x1e4>
 8002612:	e1f1      	b.n	80029f8 <__aeabi_ddiv+0x5c8>
 8002614:	9b05      	ldr	r3, [sp, #20]
 8002616:	469b      	mov	fp, r3
 8002618:	1b3c      	subs	r4, r7, r4
 800261a:	42a7      	cmp	r7, r4
 800261c:	41bf      	sbcs	r7, r7
 800261e:	9d00      	ldr	r5, [sp, #0]
 8002620:	1a80      	subs	r0, r0, r2
 8002622:	427f      	negs	r7, r7
 8002624:	1bc0      	subs	r0, r0, r7
 8002626:	4285      	cmp	r5, r0
 8002628:	d100      	bne.n	800262c <__aeabi_ddiv+0x1fc>
 800262a:	e1d0      	b.n	80029ce <__aeabi_ddiv+0x59e>
 800262c:	9902      	ldr	r1, [sp, #8]
 800262e:	f7ff fdf1 	bl	8002214 <__aeabi_uidivmod>
 8002632:	9a03      	ldr	r2, [sp, #12]
 8002634:	040b      	lsls	r3, r1, #16
 8002636:	4342      	muls	r2, r0
 8002638:	0c21      	lsrs	r1, r4, #16
 800263a:	0007      	movs	r7, r0
 800263c:	4319      	orrs	r1, r3
 800263e:	428a      	cmp	r2, r1
 8002640:	d900      	bls.n	8002644 <__aeabi_ddiv+0x214>
 8002642:	e178      	b.n	8002936 <__aeabi_ddiv+0x506>
 8002644:	1a88      	subs	r0, r1, r2
 8002646:	9902      	ldr	r1, [sp, #8]
 8002648:	f7ff fde4 	bl	8002214 <__aeabi_uidivmod>
 800264c:	9a03      	ldr	r2, [sp, #12]
 800264e:	0424      	lsls	r4, r4, #16
 8002650:	4342      	muls	r2, r0
 8002652:	0409      	lsls	r1, r1, #16
 8002654:	0c24      	lsrs	r4, r4, #16
 8002656:	0003      	movs	r3, r0
 8002658:	430c      	orrs	r4, r1
 800265a:	42a2      	cmp	r2, r4
 800265c:	d900      	bls.n	8002660 <__aeabi_ddiv+0x230>
 800265e:	e15d      	b.n	800291c <__aeabi_ddiv+0x4ec>
 8002660:	4641      	mov	r1, r8
 8002662:	1aa4      	subs	r4, r4, r2
 8002664:	043a      	lsls	r2, r7, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	9d04      	ldr	r5, [sp, #16]
 800266a:	0413      	lsls	r3, r2, #16
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	4359      	muls	r1, r3
 8002670:	4647      	mov	r7, r8
 8002672:	436b      	muls	r3, r5
 8002674:	469c      	mov	ip, r3
 8002676:	0c10      	lsrs	r0, r2, #16
 8002678:	4347      	muls	r7, r0
 800267a:	0c0b      	lsrs	r3, r1, #16
 800267c:	44bc      	add	ip, r7
 800267e:	4463      	add	r3, ip
 8002680:	4368      	muls	r0, r5
 8002682:	429f      	cmp	r7, r3
 8002684:	d903      	bls.n	800268e <__aeabi_ddiv+0x25e>
 8002686:	2580      	movs	r5, #128	@ 0x80
 8002688:	026d      	lsls	r5, r5, #9
 800268a:	46ac      	mov	ip, r5
 800268c:	4460      	add	r0, ip
 800268e:	0c1f      	lsrs	r7, r3, #16
 8002690:	0409      	lsls	r1, r1, #16
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	0c09      	lsrs	r1, r1, #16
 8002696:	183f      	adds	r7, r7, r0
 8002698:	185b      	adds	r3, r3, r1
 800269a:	42bc      	cmp	r4, r7
 800269c:	d200      	bcs.n	80026a0 <__aeabi_ddiv+0x270>
 800269e:	e102      	b.n	80028a6 <__aeabi_ddiv+0x476>
 80026a0:	d100      	bne.n	80026a4 <__aeabi_ddiv+0x274>
 80026a2:	e0fd      	b.n	80028a0 <__aeabi_ddiv+0x470>
 80026a4:	2301      	movs	r3, #1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <__aeabi_ddiv+0x388>)
 80026aa:	4453      	add	r3, sl
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_ddiv+0x282>
 80026b0:	e0ae      	b.n	8002810 <__aeabi_ddiv+0x3e0>
 80026b2:	0751      	lsls	r1, r2, #29
 80026b4:	d000      	beq.n	80026b8 <__aeabi_ddiv+0x288>
 80026b6:	e198      	b.n	80029ea <__aeabi_ddiv+0x5ba>
 80026b8:	4659      	mov	r1, fp
 80026ba:	01c9      	lsls	r1, r1, #7
 80026bc:	d506      	bpl.n	80026cc <__aeabi_ddiv+0x29c>
 80026be:	4659      	mov	r1, fp
 80026c0:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <__aeabi_ddiv+0x38c>)
 80026c2:	4019      	ands	r1, r3
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	468b      	mov	fp, r1
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4453      	add	r3, sl
 80026cc:	493c      	ldr	r1, [pc, #240]	@ (80027c0 <__aeabi_ddiv+0x390>)
 80026ce:	428b      	cmp	r3, r1
 80026d0:	dd00      	ble.n	80026d4 <__aeabi_ddiv+0x2a4>
 80026d2:	e71a      	b.n	800250a <__aeabi_ddiv+0xda>
 80026d4:	4659      	mov	r1, fp
 80026d6:	08d2      	lsrs	r2, r2, #3
 80026d8:	0749      	lsls	r1, r1, #29
 80026da:	4311      	orrs	r1, r2
 80026dc:	465a      	mov	r2, fp
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	0254      	lsls	r4, r2, #9
 80026e2:	4688      	mov	r8, r1
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	0d5b      	lsrs	r3, r3, #21
 80026e8:	e702      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80026ea:	465a      	mov	r2, fp
 80026ec:	9b00      	ldr	r3, [sp, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	d100      	bne.n	80026f4 <__aeabi_ddiv+0x2c4>
 80026f2:	e07e      	b.n	80027f2 <__aeabi_ddiv+0x3c2>
 80026f4:	465b      	mov	r3, fp
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_ddiv+0x2cc>
 80026fa:	e100      	b.n	80028fe <__aeabi_ddiv+0x4ce>
 80026fc:	4658      	mov	r0, fp
 80026fe:	f001 f8bd 	bl	800387c <__clzsi2>
 8002702:	0002      	movs	r2, r0
 8002704:	0003      	movs	r3, r0
 8002706:	3a0b      	subs	r2, #11
 8002708:	271d      	movs	r7, #29
 800270a:	9e00      	ldr	r6, [sp, #0]
 800270c:	1aba      	subs	r2, r7, r2
 800270e:	0019      	movs	r1, r3
 8002710:	4658      	mov	r0, fp
 8002712:	40d6      	lsrs	r6, r2
 8002714:	3908      	subs	r1, #8
 8002716:	4088      	lsls	r0, r1
 8002718:	0032      	movs	r2, r6
 800271a:	4302      	orrs	r2, r0
 800271c:	4693      	mov	fp, r2
 800271e:	9a00      	ldr	r2, [sp, #0]
 8002720:	408a      	lsls	r2, r1
 8002722:	4928      	ldr	r1, [pc, #160]	@ (80027c4 <__aeabi_ddiv+0x394>)
 8002724:	4453      	add	r3, sl
 8002726:	468a      	mov	sl, r1
 8002728:	449a      	add	sl, r3
 800272a:	2300      	movs	r3, #0
 800272c:	e6c8      	b.n	80024c0 <__aeabi_ddiv+0x90>
 800272e:	465b      	mov	r3, fp
 8002730:	4303      	orrs	r3, r0
 8002732:	4699      	mov	r9, r3
 8002734:	d056      	beq.n	80027e4 <__aeabi_ddiv+0x3b4>
 8002736:	465b      	mov	r3, fp
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <__aeabi_ddiv+0x30e>
 800273c:	e0cd      	b.n	80028da <__aeabi_ddiv+0x4aa>
 800273e:	4658      	mov	r0, fp
 8002740:	f001 f89c 	bl	800387c <__clzsi2>
 8002744:	230b      	movs	r3, #11
 8002746:	425b      	negs	r3, r3
 8002748:	469c      	mov	ip, r3
 800274a:	0002      	movs	r2, r0
 800274c:	4484      	add	ip, r0
 800274e:	4666      	mov	r6, ip
 8002750:	231d      	movs	r3, #29
 8002752:	1b9b      	subs	r3, r3, r6
 8002754:	0026      	movs	r6, r4
 8002756:	0011      	movs	r1, r2
 8002758:	4658      	mov	r0, fp
 800275a:	40de      	lsrs	r6, r3
 800275c:	3908      	subs	r1, #8
 800275e:	4088      	lsls	r0, r1
 8002760:	0033      	movs	r3, r6
 8002762:	4303      	orrs	r3, r0
 8002764:	4699      	mov	r9, r3
 8002766:	0023      	movs	r3, r4
 8002768:	408b      	lsls	r3, r1
 800276a:	4698      	mov	r8, r3
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <__aeabi_ddiv+0x398>)
 800276e:	2400      	movs	r4, #0
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	469a      	mov	sl, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	e682      	b.n	8002480 <__aeabi_ddiv+0x50>
 800277a:	465a      	mov	r2, fp
 800277c:	4302      	orrs	r2, r0
 800277e:	4691      	mov	r9, r2
 8002780:	d12a      	bne.n	80027d8 <__aeabi_ddiv+0x3a8>
 8002782:	2200      	movs	r2, #0
 8002784:	469a      	mov	sl, r3
 8002786:	2302      	movs	r3, #2
 8002788:	4690      	mov	r8, r2
 800278a:	2408      	movs	r4, #8
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	e677      	b.n	8002480 <__aeabi_ddiv+0x50>
 8002790:	465a      	mov	r2, fp
 8002792:	9b00      	ldr	r3, [sp, #0]
 8002794:	431a      	orrs	r2, r3
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <__aeabi_ddiv+0x39c>)
 8002798:	469c      	mov	ip, r3
 800279a:	44e2      	add	sl, ip
 800279c:	2a00      	cmp	r2, #0
 800279e:	d117      	bne.n	80027d0 <__aeabi_ddiv+0x3a0>
 80027a0:	2302      	movs	r3, #2
 80027a2:	431c      	orrs	r4, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	469b      	mov	fp, r3
 80027a8:	3302      	adds	r3, #2
 80027aa:	e689      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	08007958 	.word	0x08007958
 80027b8:	000003ff 	.word	0x000003ff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	000007fe 	.word	0x000007fe
 80027c4:	000003f3 	.word	0x000003f3
 80027c8:	fffffc0d 	.word	0xfffffc0d
 80027cc:	fffff801 	.word	0xfffff801
 80027d0:	2303      	movs	r3, #3
 80027d2:	0032      	movs	r2, r6
 80027d4:	431c      	orrs	r4, r3
 80027d6:	e673      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027d8:	469a      	mov	sl, r3
 80027da:	2303      	movs	r3, #3
 80027dc:	46d9      	mov	r9, fp
 80027de:	240c      	movs	r4, #12
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	e64d      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027e4:	2300      	movs	r3, #0
 80027e6:	4698      	mov	r8, r3
 80027e8:	469a      	mov	sl, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	2404      	movs	r4, #4
 80027ee:	9303      	str	r3, [sp, #12]
 80027f0:	e646      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027f2:	2301      	movs	r3, #1
 80027f4:	431c      	orrs	r4, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	469b      	mov	fp, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	e660      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027fe:	2300      	movs	r3, #0
 8002800:	2480      	movs	r4, #128	@ 0x80
 8002802:	4698      	mov	r8, r3
 8002804:	2600      	movs	r6, #0
 8002806:	4b92      	ldr	r3, [pc, #584]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	e671      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800280c:	2201      	movs	r2, #1
 800280e:	4252      	negs	r2, r2
 8002810:	2101      	movs	r1, #1
 8002812:	1ac9      	subs	r1, r1, r3
 8002814:	2938      	cmp	r1, #56	@ 0x38
 8002816:	dd00      	ble.n	800281a <__aeabi_ddiv+0x3ea>
 8002818:	e666      	b.n	80024e8 <__aeabi_ddiv+0xb8>
 800281a:	291f      	cmp	r1, #31
 800281c:	dc00      	bgt.n	8002820 <__aeabi_ddiv+0x3f0>
 800281e:	e0ab      	b.n	8002978 <__aeabi_ddiv+0x548>
 8002820:	201f      	movs	r0, #31
 8002822:	4240      	negs	r0, r0
 8002824:	1ac3      	subs	r3, r0, r3
 8002826:	4658      	mov	r0, fp
 8002828:	40d8      	lsrs	r0, r3
 800282a:	0003      	movs	r3, r0
 800282c:	2920      	cmp	r1, #32
 800282e:	d004      	beq.n	800283a <__aeabi_ddiv+0x40a>
 8002830:	4658      	mov	r0, fp
 8002832:	4988      	ldr	r1, [pc, #544]	@ (8002a54 <__aeabi_ddiv+0x624>)
 8002834:	4451      	add	r1, sl
 8002836:	4088      	lsls	r0, r1
 8002838:	4302      	orrs	r2, r0
 800283a:	1e51      	subs	r1, r2, #1
 800283c:	418a      	sbcs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	2307      	movs	r3, #7
 8002842:	0019      	movs	r1, r3
 8002844:	2400      	movs	r4, #0
 8002846:	4011      	ands	r1, r2
 8002848:	4213      	tst	r3, r2
 800284a:	d00c      	beq.n	8002866 <__aeabi_ddiv+0x436>
 800284c:	230f      	movs	r3, #15
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d100      	bne.n	8002856 <__aeabi_ddiv+0x426>
 8002854:	e0f9      	b.n	8002a4a <__aeabi_ddiv+0x61a>
 8002856:	1d11      	adds	r1, r2, #4
 8002858:	4291      	cmp	r1, r2
 800285a:	419b      	sbcs	r3, r3
 800285c:	000a      	movs	r2, r1
 800285e:	425b      	negs	r3, r3
 8002860:	0759      	lsls	r1, r3, #29
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	0b1c      	lsrs	r4, r3, #12
 8002866:	08d2      	lsrs	r2, r2, #3
 8002868:	430a      	orrs	r2, r1
 800286a:	4690      	mov	r8, r2
 800286c:	2300      	movs	r3, #0
 800286e:	e63f      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002870:	2480      	movs	r4, #128	@ 0x80
 8002872:	464b      	mov	r3, r9
 8002874:	0324      	lsls	r4, r4, #12
 8002876:	4223      	tst	r3, r4
 8002878:	d009      	beq.n	800288e <__aeabi_ddiv+0x45e>
 800287a:	465b      	mov	r3, fp
 800287c:	4223      	tst	r3, r4
 800287e:	d106      	bne.n	800288e <__aeabi_ddiv+0x45e>
 8002880:	431c      	orrs	r4, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	002e      	movs	r6, r5
 8002886:	4690      	mov	r8, r2
 8002888:	4b71      	ldr	r3, [pc, #452]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	e630      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800288e:	2480      	movs	r4, #128	@ 0x80
 8002890:	464b      	mov	r3, r9
 8002892:	0324      	lsls	r4, r4, #12
 8002894:	431c      	orrs	r4, r3
 8002896:	0324      	lsls	r4, r4, #12
 8002898:	9e02      	ldr	r6, [sp, #8]
 800289a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	e627      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d100      	bne.n	80028a6 <__aeabi_ddiv+0x476>
 80028a4:	e700      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80028a6:	9800      	ldr	r0, [sp, #0]
 80028a8:	1e51      	subs	r1, r2, #1
 80028aa:	4684      	mov	ip, r0
 80028ac:	4464      	add	r4, ip
 80028ae:	4284      	cmp	r4, r0
 80028b0:	d200      	bcs.n	80028b4 <__aeabi_ddiv+0x484>
 80028b2:	e084      	b.n	80029be <__aeabi_ddiv+0x58e>
 80028b4:	42bc      	cmp	r4, r7
 80028b6:	d200      	bcs.n	80028ba <__aeabi_ddiv+0x48a>
 80028b8:	e0ae      	b.n	8002a18 <__aeabi_ddiv+0x5e8>
 80028ba:	d100      	bne.n	80028be <__aeabi_ddiv+0x48e>
 80028bc:	e0c1      	b.n	8002a42 <__aeabi_ddiv+0x612>
 80028be:	000a      	movs	r2, r1
 80028c0:	e6f0      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80028c2:	4542      	cmp	r2, r8
 80028c4:	d900      	bls.n	80028c8 <__aeabi_ddiv+0x498>
 80028c6:	e62c      	b.n	8002522 <__aeabi_ddiv+0xf2>
 80028c8:	464b      	mov	r3, r9
 80028ca:	07dc      	lsls	r4, r3, #31
 80028cc:	0858      	lsrs	r0, r3, #1
 80028ce:	4643      	mov	r3, r8
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	431c      	orrs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	07df      	lsls	r7, r3, #31
 80028d8:	e62a      	b.n	8002530 <__aeabi_ddiv+0x100>
 80028da:	f000 ffcf 	bl	800387c <__clzsi2>
 80028de:	2315      	movs	r3, #21
 80028e0:	469c      	mov	ip, r3
 80028e2:	4484      	add	ip, r0
 80028e4:	0002      	movs	r2, r0
 80028e6:	4663      	mov	r3, ip
 80028e8:	3220      	adds	r2, #32
 80028ea:	2b1c      	cmp	r3, #28
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_ddiv+0x4c0>
 80028ee:	e72e      	b.n	800274e <__aeabi_ddiv+0x31e>
 80028f0:	0023      	movs	r3, r4
 80028f2:	3808      	subs	r0, #8
 80028f4:	4083      	lsls	r3, r0
 80028f6:	4699      	mov	r9, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	4698      	mov	r8, r3
 80028fc:	e736      	b.n	800276c <__aeabi_ddiv+0x33c>
 80028fe:	f000 ffbd 	bl	800387c <__clzsi2>
 8002902:	0002      	movs	r2, r0
 8002904:	0003      	movs	r3, r0
 8002906:	3215      	adds	r2, #21
 8002908:	3320      	adds	r3, #32
 800290a:	2a1c      	cmp	r2, #28
 800290c:	dc00      	bgt.n	8002910 <__aeabi_ddiv+0x4e0>
 800290e:	e6fb      	b.n	8002708 <__aeabi_ddiv+0x2d8>
 8002910:	9900      	ldr	r1, [sp, #0]
 8002912:	3808      	subs	r0, #8
 8002914:	4081      	lsls	r1, r0
 8002916:	2200      	movs	r2, #0
 8002918:	468b      	mov	fp, r1
 800291a:	e702      	b.n	8002722 <__aeabi_ddiv+0x2f2>
 800291c:	9900      	ldr	r1, [sp, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	468c      	mov	ip, r1
 8002922:	4464      	add	r4, ip
 8002924:	42a1      	cmp	r1, r4
 8002926:	d900      	bls.n	800292a <__aeabi_ddiv+0x4fa>
 8002928:	e69a      	b.n	8002660 <__aeabi_ddiv+0x230>
 800292a:	42a2      	cmp	r2, r4
 800292c:	d800      	bhi.n	8002930 <__aeabi_ddiv+0x500>
 800292e:	e697      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002930:	1e83      	subs	r3, r0, #2
 8002932:	4464      	add	r4, ip
 8002934:	e694      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002936:	46ac      	mov	ip, r5
 8002938:	4461      	add	r1, ip
 800293a:	3f01      	subs	r7, #1
 800293c:	428d      	cmp	r5, r1
 800293e:	d900      	bls.n	8002942 <__aeabi_ddiv+0x512>
 8002940:	e680      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002942:	428a      	cmp	r2, r1
 8002944:	d800      	bhi.n	8002948 <__aeabi_ddiv+0x518>
 8002946:	e67d      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002948:	1e87      	subs	r7, r0, #2
 800294a:	4461      	add	r1, ip
 800294c:	e67a      	b.n	8002644 <__aeabi_ddiv+0x214>
 800294e:	4285      	cmp	r5, r0
 8002950:	d000      	beq.n	8002954 <__aeabi_ddiv+0x524>
 8002952:	e65f      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 8002954:	45b9      	cmp	r9, r7
 8002956:	d900      	bls.n	800295a <__aeabi_ddiv+0x52a>
 8002958:	e65c      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 800295a:	e656      	b.n	800260a <__aeabi_ddiv+0x1da>
 800295c:	42a2      	cmp	r2, r4
 800295e:	d800      	bhi.n	8002962 <__aeabi_ddiv+0x532>
 8002960:	e61a      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002962:	1e83      	subs	r3, r0, #2
 8002964:	4464      	add	r4, ip
 8002966:	e617      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002968:	428a      	cmp	r2, r1
 800296a:	d800      	bhi.n	800296e <__aeabi_ddiv+0x53e>
 800296c:	e600      	b.n	8002570 <__aeabi_ddiv+0x140>
 800296e:	46ac      	mov	ip, r5
 8002970:	1e83      	subs	r3, r0, #2
 8002972:	4698      	mov	r8, r3
 8002974:	4461      	add	r1, ip
 8002976:	e5fb      	b.n	8002570 <__aeabi_ddiv+0x140>
 8002978:	4837      	ldr	r0, [pc, #220]	@ (8002a58 <__aeabi_ddiv+0x628>)
 800297a:	0014      	movs	r4, r2
 800297c:	4450      	add	r0, sl
 800297e:	4082      	lsls	r2, r0
 8002980:	465b      	mov	r3, fp
 8002982:	0017      	movs	r7, r2
 8002984:	4083      	lsls	r3, r0
 8002986:	40cc      	lsrs	r4, r1
 8002988:	1e7a      	subs	r2, r7, #1
 800298a:	4197      	sbcs	r7, r2
 800298c:	4323      	orrs	r3, r4
 800298e:	433b      	orrs	r3, r7
 8002990:	001a      	movs	r2, r3
 8002992:	465b      	mov	r3, fp
 8002994:	40cb      	lsrs	r3, r1
 8002996:	0751      	lsls	r1, r2, #29
 8002998:	d009      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 800299a:	210f      	movs	r1, #15
 800299c:	4011      	ands	r1, r2
 800299e:	2904      	cmp	r1, #4
 80029a0:	d005      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 80029a2:	1d11      	adds	r1, r2, #4
 80029a4:	4291      	cmp	r1, r2
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	4252      	negs	r2, r2
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	0219      	lsls	r1, r3, #8
 80029b0:	d400      	bmi.n	80029b4 <__aeabi_ddiv+0x584>
 80029b2:	e755      	b.n	8002860 <__aeabi_ddiv+0x430>
 80029b4:	2200      	movs	r2, #0
 80029b6:	2301      	movs	r3, #1
 80029b8:	2400      	movs	r4, #0
 80029ba:	4690      	mov	r8, r2
 80029bc:	e598      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80029be:	000a      	movs	r2, r1
 80029c0:	42bc      	cmp	r4, r7
 80029c2:	d000      	beq.n	80029c6 <__aeabi_ddiv+0x596>
 80029c4:	e66e      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029c6:	454b      	cmp	r3, r9
 80029c8:	d000      	beq.n	80029cc <__aeabi_ddiv+0x59c>
 80029ca:	e66b      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029cc:	e66c      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <__aeabi_ddiv+0x62c>)
 80029d0:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <__aeabi_ddiv+0x630>)
 80029d2:	4453      	add	r3, sl
 80029d4:	4592      	cmp	sl, r2
 80029d6:	da00      	bge.n	80029da <__aeabi_ddiv+0x5aa>
 80029d8:	e718      	b.n	800280c <__aeabi_ddiv+0x3dc>
 80029da:	2101      	movs	r1, #1
 80029dc:	4249      	negs	r1, r1
 80029de:	1d0a      	adds	r2, r1, #4
 80029e0:	428a      	cmp	r2, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	4249      	negs	r1, r1
 80029e6:	448b      	add	fp, r1
 80029e8:	e666      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029ea:	210f      	movs	r1, #15
 80029ec:	4011      	ands	r1, r2
 80029ee:	2904      	cmp	r1, #4
 80029f0:	d100      	bne.n	80029f4 <__aeabi_ddiv+0x5c4>
 80029f2:	e661      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029f4:	0011      	movs	r1, r2
 80029f6:	e7f2      	b.n	80029de <__aeabi_ddiv+0x5ae>
 80029f8:	42bc      	cmp	r4, r7
 80029fa:	d800      	bhi.n	80029fe <__aeabi_ddiv+0x5ce>
 80029fc:	e60a      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 80029fe:	2302      	movs	r3, #2
 8002a00:	425b      	negs	r3, r3
 8002a02:	469c      	mov	ip, r3
 8002a04:	9900      	ldr	r1, [sp, #0]
 8002a06:	444f      	add	r7, r9
 8002a08:	454f      	cmp	r7, r9
 8002a0a:	419b      	sbcs	r3, r3
 8002a0c:	44e3      	add	fp, ip
 8002a0e:	468c      	mov	ip, r1
 8002a10:	425b      	negs	r3, r3
 8002a12:	4463      	add	r3, ip
 8002a14:	18c0      	adds	r0, r0, r3
 8002a16:	e5ff      	b.n	8002618 <__aeabi_ddiv+0x1e8>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	9d00      	ldr	r5, [sp, #0]
 8002a1c:	0048      	lsls	r0, r1, #1
 8002a1e:	4548      	cmp	r0, r9
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	46ac      	mov	ip, r5
 8002a24:	4249      	negs	r1, r1
 8002a26:	4461      	add	r1, ip
 8002a28:	4681      	mov	r9, r0
 8002a2a:	3a02      	subs	r2, #2
 8002a2c:	1864      	adds	r4, r4, r1
 8002a2e:	e7c7      	b.n	80029c0 <__aeabi_ddiv+0x590>
 8002a30:	2480      	movs	r4, #128	@ 0x80
 8002a32:	465b      	mov	r3, fp
 8002a34:	0324      	lsls	r4, r4, #12
 8002a36:	431c      	orrs	r4, r3
 8002a38:	0324      	lsls	r4, r4, #12
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002a3e:	0b24      	lsrs	r4, r4, #12
 8002a40:	e556      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002a42:	4599      	cmp	r9, r3
 8002a44:	d3e8      	bcc.n	8002a18 <__aeabi_ddiv+0x5e8>
 8002a46:	000a      	movs	r2, r1
 8002a48:	e7bd      	b.n	80029c6 <__aeabi_ddiv+0x596>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e708      	b.n	8002860 <__aeabi_ddiv+0x430>
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	000007ff 	.word	0x000007ff
 8002a54:	0000043e 	.word	0x0000043e
 8002a58:	0000041e 	.word	0x0000041e
 8002a5c:	000003ff 	.word	0x000003ff
 8002a60:	fffffc02 	.word	0xfffffc02

08002a64 <__aeabi_dmul>:
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	4657      	mov	r7, sl
 8002a68:	46de      	mov	lr, fp
 8002a6a:	464e      	mov	r6, r9
 8002a6c:	4645      	mov	r5, r8
 8002a6e:	b5e0      	push	{r5, r6, r7, lr}
 8002a70:	001f      	movs	r7, r3
 8002a72:	030b      	lsls	r3, r1, #12
 8002a74:	0b1b      	lsrs	r3, r3, #12
 8002a76:	0016      	movs	r6, r2
 8002a78:	469a      	mov	sl, r3
 8002a7a:	0fca      	lsrs	r2, r1, #31
 8002a7c:	004b      	lsls	r3, r1, #1
 8002a7e:	0004      	movs	r4, r0
 8002a80:	4693      	mov	fp, r2
 8002a82:	b087      	sub	sp, #28
 8002a84:	0d5b      	lsrs	r3, r3, #21
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dmul+0x26>
 8002a88:	e0d5      	b.n	8002c36 <__aeabi_dmul+0x1d2>
 8002a8a:	4abb      	ldr	r2, [pc, #748]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dmul+0x2e>
 8002a90:	e0f8      	b.n	8002c84 <__aeabi_dmul+0x220>
 8002a92:	4651      	mov	r1, sl
 8002a94:	0f42      	lsrs	r2, r0, #29
 8002a96:	00c9      	lsls	r1, r1, #3
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0409      	lsls	r1, r1, #16
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	00c2      	lsls	r2, r0, #3
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	4ab5      	ldr	r2, [pc, #724]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002aa6:	468a      	mov	sl, r1
 8002aa8:	189d      	adds	r5, r3, r2
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4698      	mov	r8, r3
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	033c      	lsls	r4, r7, #12
 8002ab2:	007b      	lsls	r3, r7, #1
 8002ab4:	0ffa      	lsrs	r2, r7, #31
 8002ab6:	0030      	movs	r0, r6
 8002ab8:	0b24      	lsrs	r4, r4, #12
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dmul+0x5e>
 8002ac0:	e096      	b.n	8002bf0 <__aeabi_dmul+0x18c>
 8002ac2:	4aad      	ldr	r2, [pc, #692]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <__aeabi_dmul+0xc8>
 8002ac8:	0f72      	lsrs	r2, r6, #29
 8002aca:	00e4      	lsls	r4, r4, #3
 8002acc:	4322      	orrs	r2, r4
 8002ace:	2480      	movs	r4, #128	@ 0x80
 8002ad0:	0424      	lsls	r4, r4, #16
 8002ad2:	4314      	orrs	r4, r2
 8002ad4:	4aa9      	ldr	r2, [pc, #676]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002ad6:	00f0      	lsls	r0, r6, #3
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	195b      	adds	r3, r3, r5
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	2a0a      	cmp	r2, #10
 8002ae8:	dc42      	bgt.n	8002b70 <__aeabi_dmul+0x10c>
 8002aea:	465a      	mov	r2, fp
 8002aec:	9900      	ldr	r1, [sp, #0]
 8002aee:	404a      	eors	r2, r1
 8002af0:	4693      	mov	fp, r2
 8002af2:	4642      	mov	r2, r8
 8002af4:	2a02      	cmp	r2, #2
 8002af6:	dc32      	bgt.n	8002b5e <__aeabi_dmul+0xfa>
 8002af8:	3a01      	subs	r2, #1
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d900      	bls.n	8002b00 <__aeabi_dmul+0x9c>
 8002afe:	e149      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002b00:	2e02      	cmp	r6, #2
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dmul+0xa2>
 8002b04:	e0ca      	b.n	8002c9c <__aeabi_dmul+0x238>
 8002b06:	2e01      	cmp	r6, #1
 8002b08:	d13d      	bne.n	8002b86 <__aeabi_dmul+0x122>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	0010      	movs	r0, r2
 8002b12:	465a      	mov	r2, fp
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	4323      	orrs	r3, r4
 8002b18:	07d2      	lsls	r2, r2, #31
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	b007      	add	sp, #28
 8002b20:	bcf0      	pop	{r4, r5, r6, r7}
 8002b22:	46bb      	mov	fp, r7
 8002b24:	46b2      	mov	sl, r6
 8002b26:	46a9      	mov	r9, r5
 8002b28:	46a0      	mov	r8, r4
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2c:	4b92      	ldr	r3, [pc, #584]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002b2e:	4326      	orrs	r6, r4
 8002b30:	18eb      	adds	r3, r5, r3
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dmul+0xd4>
 8002b36:	e0bb      	b.n	8002cb0 <__aeabi_dmul+0x24c>
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	465a      	mov	r2, fp
 8002b40:	4688      	mov	r8, r1
 8002b42:	9900      	ldr	r1, [sp, #0]
 8002b44:	404a      	eors	r2, r1
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0109      	lsls	r1, r1, #4
 8002b4a:	468c      	mov	ip, r1
 8002b4c:	0029      	movs	r1, r5
 8002b4e:	4461      	add	r1, ip
 8002b50:	9101      	str	r1, [sp, #4]
 8002b52:	4641      	mov	r1, r8
 8002b54:	290a      	cmp	r1, #10
 8002b56:	dd00      	ble.n	8002b5a <__aeabi_dmul+0xf6>
 8002b58:	e233      	b.n	8002fc2 <__aeabi_dmul+0x55e>
 8002b5a:	4693      	mov	fp, r2
 8002b5c:	2603      	movs	r6, #3
 8002b5e:	4642      	mov	r2, r8
 8002b60:	2701      	movs	r7, #1
 8002b62:	4097      	lsls	r7, r2
 8002b64:	21a6      	movs	r1, #166	@ 0xa6
 8002b66:	003a      	movs	r2, r7
 8002b68:	00c9      	lsls	r1, r1, #3
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	420f      	tst	r7, r1
 8002b6e:	d031      	beq.n	8002bd4 <__aeabi_dmul+0x170>
 8002b70:	9e02      	ldr	r6, [sp, #8]
 8002b72:	2e02      	cmp	r6, #2
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dmul+0x114>
 8002b76:	e235      	b.n	8002fe4 <__aeabi_dmul+0x580>
 8002b78:	2e03      	cmp	r6, #3
 8002b7a:	d100      	bne.n	8002b7e <__aeabi_dmul+0x11a>
 8002b7c:	e1d2      	b.n	8002f24 <__aeabi_dmul+0x4c0>
 8002b7e:	4654      	mov	r4, sl
 8002b80:	4648      	mov	r0, r9
 8002b82:	2e01      	cmp	r6, #1
 8002b84:	d0c1      	beq.n	8002b0a <__aeabi_dmul+0xa6>
 8002b86:	9a01      	ldr	r2, [sp, #4]
 8002b88:	4b7d      	ldr	r3, [pc, #500]	@ (8002d80 <__aeabi_dmul+0x31c>)
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	4463      	add	r3, ip
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc00      	bgt.n	8002b94 <__aeabi_dmul+0x130>
 8002b92:	e0c0      	b.n	8002d16 <__aeabi_dmul+0x2b2>
 8002b94:	0742      	lsls	r2, r0, #29
 8002b96:	d009      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002b98:	220f      	movs	r2, #15
 8002b9a:	4002      	ands	r2, r0
 8002b9c:	2a04      	cmp	r2, #4
 8002b9e:	d005      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002ba0:	1d02      	adds	r2, r0, #4
 8002ba2:	4282      	cmp	r2, r0
 8002ba4:	4180      	sbcs	r0, r0
 8002ba6:	4240      	negs	r0, r0
 8002ba8:	1824      	adds	r4, r4, r0
 8002baa:	0010      	movs	r0, r2
 8002bac:	01e2      	lsls	r2, r4, #7
 8002bae:	d506      	bpl.n	8002bbe <__aeabi_dmul+0x15a>
 8002bb0:	4b74      	ldr	r3, [pc, #464]	@ (8002d84 <__aeabi_dmul+0x320>)
 8002bb2:	9a01      	ldr	r2, [sp, #4]
 8002bb4:	401c      	ands	r4, r3
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	4694      	mov	ip, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4463      	add	r3, ip
 8002bbe:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <__aeabi_dmul+0x324>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	dc6b      	bgt.n	8002c9c <__aeabi_dmul+0x238>
 8002bc4:	0762      	lsls	r2, r4, #29
 8002bc6:	08c0      	lsrs	r0, r0, #3
 8002bc8:	0264      	lsls	r4, r4, #9
 8002bca:	055b      	lsls	r3, r3, #21
 8002bcc:	4302      	orrs	r2, r0
 8002bce:	0b24      	lsrs	r4, r4, #12
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	e79d      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002bd4:	2190      	movs	r1, #144	@ 0x90
 8002bd6:	0089      	lsls	r1, r1, #2
 8002bd8:	420f      	tst	r7, r1
 8002bda:	d163      	bne.n	8002ca4 <__aeabi_dmul+0x240>
 8002bdc:	2288      	movs	r2, #136	@ 0x88
 8002bde:	423a      	tst	r2, r7
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dmul+0x180>
 8002be2:	e0d7      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002be4:	9b00      	ldr	r3, [sp, #0]
 8002be6:	46a2      	mov	sl, r4
 8002be8:	469b      	mov	fp, r3
 8002bea:	4681      	mov	r9, r0
 8002bec:	9602      	str	r6, [sp, #8]
 8002bee:	e7bf      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002bf0:	0023      	movs	r3, r4
 8002bf2:	4333      	orrs	r3, r6
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dmul+0x194>
 8002bf6:	e07f      	b.n	8002cf8 <__aeabi_dmul+0x294>
 8002bf8:	2c00      	cmp	r4, #0
 8002bfa:	d100      	bne.n	8002bfe <__aeabi_dmul+0x19a>
 8002bfc:	e1ad      	b.n	8002f5a <__aeabi_dmul+0x4f6>
 8002bfe:	0020      	movs	r0, r4
 8002c00:	f000 fe3c 	bl	800387c <__clzsi2>
 8002c04:	0002      	movs	r2, r0
 8002c06:	0003      	movs	r3, r0
 8002c08:	3a0b      	subs	r2, #11
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	1a82      	subs	r2, r0, r2
 8002c10:	0030      	movs	r0, r6
 8002c12:	3908      	subs	r1, #8
 8002c14:	40d0      	lsrs	r0, r2
 8002c16:	408c      	lsls	r4, r1
 8002c18:	4304      	orrs	r4, r0
 8002c1a:	0030      	movs	r0, r6
 8002c1c:	4088      	lsls	r0, r1
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c20:	1aeb      	subs	r3, r5, r3
 8002c22:	4694      	mov	ip, r2
 8002c24:	4463      	add	r3, ip
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	2a0a      	cmp	r2, #10
 8002c30:	dc00      	bgt.n	8002c34 <__aeabi_dmul+0x1d0>
 8002c32:	e75a      	b.n	8002aea <__aeabi_dmul+0x86>
 8002c34:	e79c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002c36:	4653      	mov	r3, sl
 8002c38:	4303      	orrs	r3, r0
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	d054      	beq.n	8002ce8 <__aeabi_dmul+0x284>
 8002c3e:	4653      	mov	r3, sl
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dmul+0x1e2>
 8002c44:	e177      	b.n	8002f36 <__aeabi_dmul+0x4d2>
 8002c46:	4650      	mov	r0, sl
 8002c48:	f000 fe18 	bl	800387c <__clzsi2>
 8002c4c:	230b      	movs	r3, #11
 8002c4e:	425b      	negs	r3, r3
 8002c50:	469c      	mov	ip, r3
 8002c52:	0002      	movs	r2, r0
 8002c54:	4484      	add	ip, r0
 8002c56:	0011      	movs	r1, r2
 8002c58:	4650      	mov	r0, sl
 8002c5a:	3908      	subs	r1, #8
 8002c5c:	4088      	lsls	r0, r1
 8002c5e:	231d      	movs	r3, #29
 8002c60:	4680      	mov	r8, r0
 8002c62:	4660      	mov	r0, ip
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	0020      	movs	r0, r4
 8002c68:	40d8      	lsrs	r0, r3
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4303      	orrs	r3, r0
 8002c70:	469a      	mov	sl, r3
 8002c72:	0023      	movs	r3, r4
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4699      	mov	r9, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4d44      	ldr	r5, [pc, #272]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c7c:	4698      	mov	r8, r3
 8002c7e:	1aad      	subs	r5, r5, r2
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	e715      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c84:	4652      	mov	r2, sl
 8002c86:	4302      	orrs	r2, r0
 8002c88:	4691      	mov	r9, r2
 8002c8a:	d126      	bne.n	8002cda <__aeabi_dmul+0x276>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	001d      	movs	r5, r3
 8002c90:	2302      	movs	r3, #2
 8002c92:	4692      	mov	sl, r2
 8002c94:	3208      	adds	r2, #8
 8002c96:	4690      	mov	r8, r2
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	e709      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ca2:	e735      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2480      	movs	r4, #128	@ 0x80
 8002ca8:	469b      	mov	fp, r3
 8002caa:	0324      	lsls	r4, r4, #12
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002cae:	e72f      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4694      	mov	ip, r2
 8002cbc:	002a      	movs	r2, r5
 8002cbe:	4462      	add	r2, ip
 8002cc0:	4688      	mov	r8, r1
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	290a      	cmp	r1, #10
 8002cc6:	dd00      	ble.n	8002cca <__aeabi_dmul+0x266>
 8002cc8:	e752      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002cca:	465a      	mov	r2, fp
 8002ccc:	2000      	movs	r0, #0
 8002cce:	9900      	ldr	r1, [sp, #0]
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	404a      	eors	r2, r1
 8002cd4:	4693      	mov	fp, r2
 8002cd6:	2602      	movs	r6, #2
 8002cd8:	e70b      	b.n	8002af2 <__aeabi_dmul+0x8e>
 8002cda:	220c      	movs	r2, #12
 8002cdc:	001d      	movs	r5, r3
 8002cde:	2303      	movs	r3, #3
 8002ce0:	4681      	mov	r9, r0
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	e6e3      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	469a      	mov	sl, r3
 8002cec:	3304      	adds	r3, #4
 8002cee:	4698      	mov	r8, r3
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	e6db      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	002b      	movs	r3, r5
 8002d00:	4690      	mov	r8, r2
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	4642      	mov	r2, r8
 8002d08:	2400      	movs	r4, #0
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	2601      	movs	r6, #1
 8002d0e:	2a0a      	cmp	r2, #10
 8002d10:	dc00      	bgt.n	8002d14 <__aeabi_dmul+0x2b0>
 8002d12:	e6ea      	b.n	8002aea <__aeabi_dmul+0x86>
 8002d14:	e72c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002d16:	2201      	movs	r2, #1
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	2a38      	cmp	r2, #56	@ 0x38
 8002d1c:	dd00      	ble.n	8002d20 <__aeabi_dmul+0x2bc>
 8002d1e:	e6f4      	b.n	8002b0a <__aeabi_dmul+0xa6>
 8002d20:	2a1f      	cmp	r2, #31
 8002d22:	dc00      	bgt.n	8002d26 <__aeabi_dmul+0x2c2>
 8002d24:	e12a      	b.n	8002f7c <__aeabi_dmul+0x518>
 8002d26:	211f      	movs	r1, #31
 8002d28:	4249      	negs	r1, r1
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	40d9      	lsrs	r1, r3
 8002d30:	000b      	movs	r3, r1
 8002d32:	2a20      	cmp	r2, #32
 8002d34:	d005      	beq.n	8002d42 <__aeabi_dmul+0x2de>
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <__aeabi_dmul+0x32c>)
 8002d38:	9d01      	ldr	r5, [sp, #4]
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	4465      	add	r5, ip
 8002d3e:	40ac      	lsls	r4, r5
 8002d40:	4320      	orrs	r0, r4
 8002d42:	1e42      	subs	r2, r0, #1
 8002d44:	4190      	sbcs	r0, r2
 8002d46:	4318      	orrs	r0, r3
 8002d48:	2307      	movs	r3, #7
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	4001      	ands	r1, r0
 8002d50:	4203      	tst	r3, r0
 8002d52:	d00c      	beq.n	8002d6e <__aeabi_dmul+0x30a>
 8002d54:	230f      	movs	r3, #15
 8002d56:	4003      	ands	r3, r0
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dmul+0x2fa>
 8002d5c:	e140      	b.n	8002fe0 <__aeabi_dmul+0x57c>
 8002d5e:	1d03      	adds	r3, r0, #4
 8002d60:	4283      	cmp	r3, r0
 8002d62:	41a4      	sbcs	r4, r4
 8002d64:	0018      	movs	r0, r3
 8002d66:	4264      	negs	r4, r4
 8002d68:	0761      	lsls	r1, r4, #29
 8002d6a:	0264      	lsls	r4, r4, #9
 8002d6c:	0b24      	lsrs	r4, r4, #12
 8002d6e:	08c2      	lsrs	r2, r0, #3
 8002d70:	2300      	movs	r3, #0
 8002d72:	430a      	orrs	r2, r1
 8002d74:	e6cc      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	fffffc01 	.word	0xfffffc01
 8002d80:	000003ff 	.word	0x000003ff
 8002d84:	feffffff 	.word	0xfeffffff
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	fffffc0d 	.word	0xfffffc0d
 8002d90:	0000043e 	.word	0x0000043e
 8002d94:	4649      	mov	r1, r9
 8002d96:	464a      	mov	r2, r9
 8002d98:	0409      	lsls	r1, r1, #16
 8002d9a:	0c09      	lsrs	r1, r1, #16
 8002d9c:	000d      	movs	r5, r1
 8002d9e:	0c16      	lsrs	r6, r2, #16
 8002da0:	0c02      	lsrs	r2, r0, #16
 8002da2:	0400      	lsls	r0, r0, #16
 8002da4:	0c00      	lsrs	r0, r0, #16
 8002da6:	4345      	muls	r5, r0
 8002da8:	46ac      	mov	ip, r5
 8002daa:	0005      	movs	r5, r0
 8002dac:	4375      	muls	r5, r6
 8002dae:	46a8      	mov	r8, r5
 8002db0:	0015      	movs	r5, r2
 8002db2:	000f      	movs	r7, r1
 8002db4:	4375      	muls	r5, r6
 8002db6:	9200      	str	r2, [sp, #0]
 8002db8:	9502      	str	r5, [sp, #8]
 8002dba:	002a      	movs	r2, r5
 8002dbc:	9d00      	ldr	r5, [sp, #0]
 8002dbe:	436f      	muls	r7, r5
 8002dc0:	4665      	mov	r5, ip
 8002dc2:	0c2d      	lsrs	r5, r5, #16
 8002dc4:	46a9      	mov	r9, r5
 8002dc6:	4447      	add	r7, r8
 8002dc8:	444f      	add	r7, r9
 8002dca:	45b8      	cmp	r8, r7
 8002dcc:	d905      	bls.n	8002dda <__aeabi_dmul+0x376>
 8002dce:	0015      	movs	r5, r2
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	0252      	lsls	r2, r2, #9
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4445      	add	r5, r8
 8002dd8:	9502      	str	r5, [sp, #8]
 8002dda:	0c3d      	lsrs	r5, r7, #16
 8002ddc:	9503      	str	r5, [sp, #12]
 8002dde:	4665      	mov	r5, ip
 8002de0:	042d      	lsls	r5, r5, #16
 8002de2:	043f      	lsls	r7, r7, #16
 8002de4:	0c2d      	lsrs	r5, r5, #16
 8002de6:	46ac      	mov	ip, r5
 8002de8:	003d      	movs	r5, r7
 8002dea:	4465      	add	r5, ip
 8002dec:	9504      	str	r5, [sp, #16]
 8002dee:	0c25      	lsrs	r5, r4, #16
 8002df0:	0424      	lsls	r4, r4, #16
 8002df2:	0c24      	lsrs	r4, r4, #16
 8002df4:	46ac      	mov	ip, r5
 8002df6:	0025      	movs	r5, r4
 8002df8:	4375      	muls	r5, r6
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	4665      	mov	r5, ip
 8002dfe:	000f      	movs	r7, r1
 8002e00:	4369      	muls	r1, r5
 8002e02:	4441      	add	r1, r8
 8002e04:	4689      	mov	r9, r1
 8002e06:	4367      	muls	r7, r4
 8002e08:	0c39      	lsrs	r1, r7, #16
 8002e0a:	4449      	add	r1, r9
 8002e0c:	436e      	muls	r6, r5
 8002e0e:	4588      	cmp	r8, r1
 8002e10:	d903      	bls.n	8002e1a <__aeabi_dmul+0x3b6>
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	0252      	lsls	r2, r2, #9
 8002e16:	4690      	mov	r8, r2
 8002e18:	4446      	add	r6, r8
 8002e1a:	0c0d      	lsrs	r5, r1, #16
 8002e1c:	46a8      	mov	r8, r5
 8002e1e:	0035      	movs	r5, r6
 8002e20:	4445      	add	r5, r8
 8002e22:	9505      	str	r5, [sp, #20]
 8002e24:	9d03      	ldr	r5, [sp, #12]
 8002e26:	043f      	lsls	r7, r7, #16
 8002e28:	46a8      	mov	r8, r5
 8002e2a:	0c3f      	lsrs	r7, r7, #16
 8002e2c:	0409      	lsls	r1, r1, #16
 8002e2e:	19c9      	adds	r1, r1, r7
 8002e30:	4488      	add	r8, r1
 8002e32:	4645      	mov	r5, r8
 8002e34:	9503      	str	r5, [sp, #12]
 8002e36:	4655      	mov	r5, sl
 8002e38:	042e      	lsls	r6, r5, #16
 8002e3a:	0c36      	lsrs	r6, r6, #16
 8002e3c:	0c2f      	lsrs	r7, r5, #16
 8002e3e:	0035      	movs	r5, r6
 8002e40:	4345      	muls	r5, r0
 8002e42:	4378      	muls	r0, r7
 8002e44:	4681      	mov	r9, r0
 8002e46:	0038      	movs	r0, r7
 8002e48:	46a8      	mov	r8, r5
 8002e4a:	0c2d      	lsrs	r5, r5, #16
 8002e4c:	46aa      	mov	sl, r5
 8002e4e:	9a00      	ldr	r2, [sp, #0]
 8002e50:	4350      	muls	r0, r2
 8002e52:	4372      	muls	r2, r6
 8002e54:	444a      	add	r2, r9
 8002e56:	4452      	add	r2, sl
 8002e58:	4591      	cmp	r9, r2
 8002e5a:	d903      	bls.n	8002e64 <__aeabi_dmul+0x400>
 8002e5c:	2580      	movs	r5, #128	@ 0x80
 8002e5e:	026d      	lsls	r5, r5, #9
 8002e60:	46a9      	mov	r9, r5
 8002e62:	4448      	add	r0, r9
 8002e64:	0c15      	lsrs	r5, r2, #16
 8002e66:	46a9      	mov	r9, r5
 8002e68:	4645      	mov	r5, r8
 8002e6a:	042d      	lsls	r5, r5, #16
 8002e6c:	0c2d      	lsrs	r5, r5, #16
 8002e6e:	46a8      	mov	r8, r5
 8002e70:	4665      	mov	r5, ip
 8002e72:	437d      	muls	r5, r7
 8002e74:	0412      	lsls	r2, r2, #16
 8002e76:	4448      	add	r0, r9
 8002e78:	4490      	add	r8, r2
 8002e7a:	46a9      	mov	r9, r5
 8002e7c:	0032      	movs	r2, r6
 8002e7e:	4665      	mov	r5, ip
 8002e80:	4362      	muls	r2, r4
 8002e82:	436e      	muls	r6, r5
 8002e84:	437c      	muls	r4, r7
 8002e86:	0c17      	lsrs	r7, r2, #16
 8002e88:	1936      	adds	r6, r6, r4
 8002e8a:	19bf      	adds	r7, r7, r6
 8002e8c:	42bc      	cmp	r4, r7
 8002e8e:	d903      	bls.n	8002e98 <__aeabi_dmul+0x434>
 8002e90:	2480      	movs	r4, #128	@ 0x80
 8002e92:	0264      	lsls	r4, r4, #9
 8002e94:	46a4      	mov	ip, r4
 8002e96:	44e1      	add	r9, ip
 8002e98:	9c02      	ldr	r4, [sp, #8]
 8002e9a:	9e03      	ldr	r6, [sp, #12]
 8002e9c:	46a4      	mov	ip, r4
 8002e9e:	9d05      	ldr	r5, [sp, #20]
 8002ea0:	4466      	add	r6, ip
 8002ea2:	428e      	cmp	r6, r1
 8002ea4:	4189      	sbcs	r1, r1
 8002ea6:	46ac      	mov	ip, r5
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	043c      	lsls	r4, r7, #16
 8002eac:	0c12      	lsrs	r2, r2, #16
 8002eae:	18a2      	adds	r2, r4, r2
 8002eb0:	4462      	add	r2, ip
 8002eb2:	4249      	negs	r1, r1
 8002eb4:	1854      	adds	r4, r2, r1
 8002eb6:	4446      	add	r6, r8
 8002eb8:	46a4      	mov	ip, r4
 8002eba:	4546      	cmp	r6, r8
 8002ebc:	41a4      	sbcs	r4, r4
 8002ebe:	4682      	mov	sl, r0
 8002ec0:	4264      	negs	r4, r4
 8002ec2:	46a0      	mov	r8, r4
 8002ec4:	42aa      	cmp	r2, r5
 8002ec6:	4192      	sbcs	r2, r2
 8002ec8:	458c      	cmp	ip, r1
 8002eca:	4189      	sbcs	r1, r1
 8002ecc:	44e2      	add	sl, ip
 8002ece:	44d0      	add	r8, sl
 8002ed0:	4249      	negs	r1, r1
 8002ed2:	4252      	negs	r2, r2
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	45a0      	cmp	r8, r4
 8002ed8:	41a4      	sbcs	r4, r4
 8002eda:	4582      	cmp	sl, r0
 8002edc:	4189      	sbcs	r1, r1
 8002ede:	4264      	negs	r4, r4
 8002ee0:	4249      	negs	r1, r1
 8002ee2:	430c      	orrs	r4, r1
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	0c3f      	lsrs	r7, r7, #16
 8002ee8:	19d2      	adds	r2, r2, r7
 8002eea:	1912      	adds	r2, r2, r4
 8002eec:	0dcc      	lsrs	r4, r1, #23
 8002eee:	9904      	ldr	r1, [sp, #16]
 8002ef0:	0270      	lsls	r0, r6, #9
 8002ef2:	4308      	orrs	r0, r1
 8002ef4:	1e41      	subs	r1, r0, #1
 8002ef6:	4188      	sbcs	r0, r1
 8002ef8:	4641      	mov	r1, r8
 8002efa:	444a      	add	r2, r9
 8002efc:	0df6      	lsrs	r6, r6, #23
 8002efe:	0252      	lsls	r2, r2, #9
 8002f00:	4330      	orrs	r0, r6
 8002f02:	0249      	lsls	r1, r1, #9
 8002f04:	4314      	orrs	r4, r2
 8002f06:	4308      	orrs	r0, r1
 8002f08:	01d2      	lsls	r2, r2, #7
 8002f0a:	d535      	bpl.n	8002f78 <__aeabi_dmul+0x514>
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	0843      	lsrs	r3, r0, #1
 8002f10:	4002      	ands	r2, r0
 8002f12:	4313      	orrs	r3, r2
 8002f14:	07e0      	lsls	r0, r4, #31
 8002f16:	4318      	orrs	r0, r3
 8002f18:	0864      	lsrs	r4, r4, #1
 8002f1a:	e634      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	46a2      	mov	sl, r4
 8002f20:	469b      	mov	fp, r3
 8002f22:	4681      	mov	r9, r0
 8002f24:	2480      	movs	r4, #128	@ 0x80
 8002f26:	4653      	mov	r3, sl
 8002f28:	0324      	lsls	r4, r4, #12
 8002f2a:	431c      	orrs	r4, r3
 8002f2c:	0324      	lsls	r4, r4, #12
 8002f2e:	464a      	mov	r2, r9
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <__aeabi_dmul+0x588>)
 8002f32:	0b24      	lsrs	r4, r4, #12
 8002f34:	e5ec      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002f36:	f000 fca1 	bl	800387c <__clzsi2>
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	469c      	mov	ip, r3
 8002f3e:	4484      	add	ip, r0
 8002f40:	0002      	movs	r2, r0
 8002f42:	4663      	mov	r3, ip
 8002f44:	3220      	adds	r2, #32
 8002f46:	2b1c      	cmp	r3, #28
 8002f48:	dc00      	bgt.n	8002f4c <__aeabi_dmul+0x4e8>
 8002f4a:	e684      	b.n	8002c56 <__aeabi_dmul+0x1f2>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4699      	mov	r9, r3
 8002f50:	0023      	movs	r3, r4
 8002f52:	3808      	subs	r0, #8
 8002f54:	4083      	lsls	r3, r0
 8002f56:	469a      	mov	sl, r3
 8002f58:	e68e      	b.n	8002c78 <__aeabi_dmul+0x214>
 8002f5a:	f000 fc8f 	bl	800387c <__clzsi2>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	0003      	movs	r3, r0
 8002f62:	3215      	adds	r2, #21
 8002f64:	3320      	adds	r3, #32
 8002f66:	2a1c      	cmp	r2, #28
 8002f68:	dc00      	bgt.n	8002f6c <__aeabi_dmul+0x508>
 8002f6a:	e64e      	b.n	8002c0a <__aeabi_dmul+0x1a6>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	0034      	movs	r4, r6
 8002f70:	3a08      	subs	r2, #8
 8002f72:	2000      	movs	r0, #0
 8002f74:	4094      	lsls	r4, r2
 8002f76:	e652      	b.n	8002c1e <__aeabi_dmul+0x1ba>
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	e604      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <__aeabi_dmul+0x58c>)
 8002f7e:	0021      	movs	r1, r4
 8002f80:	469c      	mov	ip, r3
 8002f82:	0003      	movs	r3, r0
 8002f84:	9d01      	ldr	r5, [sp, #4]
 8002f86:	40d3      	lsrs	r3, r2
 8002f88:	4465      	add	r5, ip
 8002f8a:	40a9      	lsls	r1, r5
 8002f8c:	4319      	orrs	r1, r3
 8002f8e:	0003      	movs	r3, r0
 8002f90:	40ab      	lsls	r3, r5
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	4183      	sbcs	r3, r0
 8002f96:	4319      	orrs	r1, r3
 8002f98:	0008      	movs	r0, r1
 8002f9a:	40d4      	lsrs	r4, r2
 8002f9c:	074b      	lsls	r3, r1, #29
 8002f9e:	d009      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa8:	1d0b      	adds	r3, r1, #4
 8002faa:	428b      	cmp	r3, r1
 8002fac:	4180      	sbcs	r0, r0
 8002fae:	4240      	negs	r0, r0
 8002fb0:	1824      	adds	r4, r4, r0
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	0223      	lsls	r3, r4, #8
 8002fb6:	d400      	bmi.n	8002fba <__aeabi_dmul+0x556>
 8002fb8:	e6d6      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	e5a6      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fc2:	290f      	cmp	r1, #15
 8002fc4:	d1aa      	bne.n	8002f1c <__aeabi_dmul+0x4b8>
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	4652      	mov	r2, sl
 8002fca:	031b      	lsls	r3, r3, #12
 8002fcc:	421a      	tst	r2, r3
 8002fce:	d0a9      	beq.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd0:	421c      	tst	r4, r3
 8002fd2:	d1a7      	bne.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd4:	431c      	orrs	r4, r3
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	0002      	movs	r2, r0
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fde:	e597      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	e6c1      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	4b01      	ldr	r3, [pc, #4]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fe8:	0022      	movs	r2, r4
 8002fea:	e591      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fec:	000007ff 	.word	0x000007ff
 8002ff0:	0000041e 	.word	0x0000041e

08002ff4 <__aeabi_dsub>:
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	464e      	mov	r6, r9
 8002ff8:	4645      	mov	r5, r8
 8002ffa:	46de      	mov	lr, fp
 8002ffc:	4657      	mov	r7, sl
 8002ffe:	b5e0      	push	{r5, r6, r7, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	9000      	str	r0, [sp, #0]
 8003004:	9101      	str	r1, [sp, #4]
 8003006:	030c      	lsls	r4, r1, #12
 8003008:	004f      	lsls	r7, r1, #1
 800300a:	0fce      	lsrs	r6, r1, #31
 800300c:	0a61      	lsrs	r1, r4, #9
 800300e:	9c00      	ldr	r4, [sp, #0]
 8003010:	46b0      	mov	r8, r6
 8003012:	0f64      	lsrs	r4, r4, #29
 8003014:	430c      	orrs	r4, r1
 8003016:	9900      	ldr	r1, [sp, #0]
 8003018:	0d7f      	lsrs	r7, r7, #21
 800301a:	00c8      	lsls	r0, r1, #3
 800301c:	0011      	movs	r1, r2
 800301e:	001a      	movs	r2, r3
 8003020:	031b      	lsls	r3, r3, #12
 8003022:	469c      	mov	ip, r3
 8003024:	9100      	str	r1, [sp, #0]
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	0051      	lsls	r1, r2, #1
 800302a:	0d4b      	lsrs	r3, r1, #21
 800302c:	4699      	mov	r9, r3
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	9d00      	ldr	r5, [sp, #0]
 8003032:	0fd9      	lsrs	r1, r3, #31
 8003034:	4663      	mov	r3, ip
 8003036:	0f6a      	lsrs	r2, r5, #29
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	4313      	orrs	r3, r2
 800303c:	00ea      	lsls	r2, r5, #3
 800303e:	4694      	mov	ip, r2
 8003040:	4693      	mov	fp, r2
 8003042:	4ac1      	ldr	r2, [pc, #772]	@ (8003348 <__aeabi_dsub+0x354>)
 8003044:	9003      	str	r0, [sp, #12]
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	4591      	cmp	r9, r2
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x5a>
 800304c:	e0cd      	b.n	80031ea <__aeabi_dsub+0x1f6>
 800304e:	2501      	movs	r5, #1
 8003050:	4069      	eors	r1, r5
 8003052:	464d      	mov	r5, r9
 8003054:	1b7d      	subs	r5, r7, r5
 8003056:	46aa      	mov	sl, r5
 8003058:	428e      	cmp	r6, r1
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x6a>
 800305c:	e080      	b.n	8003160 <__aeabi_dsub+0x16c>
 800305e:	2d00      	cmp	r5, #0
 8003060:	dc00      	bgt.n	8003064 <__aeabi_dsub+0x70>
 8003062:	e335      	b.n	80036d0 <__aeabi_dsub+0x6dc>
 8003064:	4649      	mov	r1, r9
 8003066:	2900      	cmp	r1, #0
 8003068:	d100      	bne.n	800306c <__aeabi_dsub+0x78>
 800306a:	e0df      	b.n	800322c <__aeabi_dsub+0x238>
 800306c:	4297      	cmp	r7, r2
 800306e:	d100      	bne.n	8003072 <__aeabi_dsub+0x7e>
 8003070:	e194      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003072:	4652      	mov	r2, sl
 8003074:	2501      	movs	r5, #1
 8003076:	2a38      	cmp	r2, #56	@ 0x38
 8003078:	dc19      	bgt.n	80030ae <__aeabi_dsub+0xba>
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	0412      	lsls	r2, r2, #16
 8003080:	4313      	orrs	r3, r2
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	4652      	mov	r2, sl
 8003086:	2a1f      	cmp	r2, #31
 8003088:	dd00      	ble.n	800308c <__aeabi_dsub+0x98>
 800308a:	e1e3      	b.n	8003454 <__aeabi_dsub+0x460>
 800308c:	4653      	mov	r3, sl
 800308e:	2220      	movs	r2, #32
 8003090:	4661      	mov	r1, ip
 8003092:	9d02      	ldr	r5, [sp, #8]
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	4095      	lsls	r5, r2
 8003098:	40d9      	lsrs	r1, r3
 800309a:	430d      	orrs	r5, r1
 800309c:	4661      	mov	r1, ip
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	1e51      	subs	r1, r2, #1
 80030a4:	418a      	sbcs	r2, r1
 80030a6:	4315      	orrs	r5, r2
 80030a8:	9a02      	ldr	r2, [sp, #8]
 80030aa:	40da      	lsrs	r2, r3
 80030ac:	1aa4      	subs	r4, r4, r2
 80030ae:	1b45      	subs	r5, r0, r5
 80030b0:	42a8      	cmp	r0, r5
 80030b2:	4180      	sbcs	r0, r0
 80030b4:	4240      	negs	r0, r0
 80030b6:	1a24      	subs	r4, r4, r0
 80030b8:	0223      	lsls	r3, r4, #8
 80030ba:	d400      	bmi.n	80030be <__aeabi_dsub+0xca>
 80030bc:	e13d      	b.n	800333a <__aeabi_dsub+0x346>
 80030be:	0264      	lsls	r4, r4, #9
 80030c0:	0a64      	lsrs	r4, r4, #9
 80030c2:	2c00      	cmp	r4, #0
 80030c4:	d100      	bne.n	80030c8 <__aeabi_dsub+0xd4>
 80030c6:	e147      	b.n	8003358 <__aeabi_dsub+0x364>
 80030c8:	0020      	movs	r0, r4
 80030ca:	f000 fbd7 	bl	800387c <__clzsi2>
 80030ce:	0003      	movs	r3, r0
 80030d0:	3b08      	subs	r3, #8
 80030d2:	2120      	movs	r1, #32
 80030d4:	0028      	movs	r0, r5
 80030d6:	1aca      	subs	r2, r1, r3
 80030d8:	40d0      	lsrs	r0, r2
 80030da:	409c      	lsls	r4, r3
 80030dc:	0002      	movs	r2, r0
 80030de:	409d      	lsls	r5, r3
 80030e0:	4322      	orrs	r2, r4
 80030e2:	429f      	cmp	r7, r3
 80030e4:	dd00      	ble.n	80030e8 <__aeabi_dsub+0xf4>
 80030e6:	e177      	b.n	80033d8 <__aeabi_dsub+0x3e4>
 80030e8:	1bd8      	subs	r0, r3, r7
 80030ea:	3001      	adds	r0, #1
 80030ec:	1a09      	subs	r1, r1, r0
 80030ee:	002c      	movs	r4, r5
 80030f0:	408d      	lsls	r5, r1
 80030f2:	40c4      	lsrs	r4, r0
 80030f4:	1e6b      	subs	r3, r5, #1
 80030f6:	419d      	sbcs	r5, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	40c2      	lsrs	r2, r0
 80030fc:	408b      	lsls	r3, r1
 80030fe:	4325      	orrs	r5, r4
 8003100:	2700      	movs	r7, #0
 8003102:	0014      	movs	r4, r2
 8003104:	431d      	orrs	r5, r3
 8003106:	076b      	lsls	r3, r5, #29
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x12a>
 800310a:	230f      	movs	r3, #15
 800310c:	402b      	ands	r3, r5
 800310e:	2b04      	cmp	r3, #4
 8003110:	d005      	beq.n	800311e <__aeabi_dsub+0x12a>
 8003112:	1d2b      	adds	r3, r5, #4
 8003114:	42ab      	cmp	r3, r5
 8003116:	41ad      	sbcs	r5, r5
 8003118:	426d      	negs	r5, r5
 800311a:	1964      	adds	r4, r4, r5
 800311c:	001d      	movs	r5, r3
 800311e:	0223      	lsls	r3, r4, #8
 8003120:	d400      	bmi.n	8003124 <__aeabi_dsub+0x130>
 8003122:	e140      	b.n	80033a6 <__aeabi_dsub+0x3b2>
 8003124:	4a88      	ldr	r2, [pc, #544]	@ (8003348 <__aeabi_dsub+0x354>)
 8003126:	3701      	adds	r7, #1
 8003128:	4297      	cmp	r7, r2
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x13a>
 800312c:	e101      	b.n	8003332 <__aeabi_dsub+0x33e>
 800312e:	2601      	movs	r6, #1
 8003130:	4643      	mov	r3, r8
 8003132:	4986      	ldr	r1, [pc, #536]	@ (800334c <__aeabi_dsub+0x358>)
 8003134:	08ed      	lsrs	r5, r5, #3
 8003136:	4021      	ands	r1, r4
 8003138:	074a      	lsls	r2, r1, #29
 800313a:	432a      	orrs	r2, r5
 800313c:	057c      	lsls	r4, r7, #21
 800313e:	024d      	lsls	r5, r1, #9
 8003140:	0b2d      	lsrs	r5, r5, #12
 8003142:	0d64      	lsrs	r4, r4, #21
 8003144:	401e      	ands	r6, r3
 8003146:	0524      	lsls	r4, r4, #20
 8003148:	432c      	orrs	r4, r5
 800314a:	07f6      	lsls	r6, r6, #31
 800314c:	4334      	orrs	r4, r6
 800314e:	0010      	movs	r0, r2
 8003150:	0021      	movs	r1, r4
 8003152:	b005      	add	sp, #20
 8003154:	bcf0      	pop	{r4, r5, r6, r7}
 8003156:	46bb      	mov	fp, r7
 8003158:	46b2      	mov	sl, r6
 800315a:	46a9      	mov	r9, r5
 800315c:	46a0      	mov	r8, r4
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003160:	2d00      	cmp	r5, #0
 8003162:	dc00      	bgt.n	8003166 <__aeabi_dsub+0x172>
 8003164:	e2d0      	b.n	8003708 <__aeabi_dsub+0x714>
 8003166:	4649      	mov	r1, r9
 8003168:	2900      	cmp	r1, #0
 800316a:	d000      	beq.n	800316e <__aeabi_dsub+0x17a>
 800316c:	e0d4      	b.n	8003318 <__aeabi_dsub+0x324>
 800316e:	4661      	mov	r1, ip
 8003170:	9b02      	ldr	r3, [sp, #8]
 8003172:	4319      	orrs	r1, r3
 8003174:	d100      	bne.n	8003178 <__aeabi_dsub+0x184>
 8003176:	e12b      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003178:	1e69      	subs	r1, r5, #1
 800317a:	2d01      	cmp	r5, #1
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x18c>
 800317e:	e1d9      	b.n	8003534 <__aeabi_dsub+0x540>
 8003180:	4295      	cmp	r5, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x192>
 8003184:	e10a      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003186:	2501      	movs	r5, #1
 8003188:	2938      	cmp	r1, #56	@ 0x38
 800318a:	dc17      	bgt.n	80031bc <__aeabi_dsub+0x1c8>
 800318c:	468a      	mov	sl, r1
 800318e:	4653      	mov	r3, sl
 8003190:	2b1f      	cmp	r3, #31
 8003192:	dd00      	ble.n	8003196 <__aeabi_dsub+0x1a2>
 8003194:	e1e7      	b.n	8003566 <__aeabi_dsub+0x572>
 8003196:	2220      	movs	r2, #32
 8003198:	1ad2      	subs	r2, r2, r3
 800319a:	9b02      	ldr	r3, [sp, #8]
 800319c:	4661      	mov	r1, ip
 800319e:	4093      	lsls	r3, r2
 80031a0:	001d      	movs	r5, r3
 80031a2:	4653      	mov	r3, sl
 80031a4:	40d9      	lsrs	r1, r3
 80031a6:	4663      	mov	r3, ip
 80031a8:	4093      	lsls	r3, r2
 80031aa:	001a      	movs	r2, r3
 80031ac:	430d      	orrs	r5, r1
 80031ae:	1e51      	subs	r1, r2, #1
 80031b0:	418a      	sbcs	r2, r1
 80031b2:	4653      	mov	r3, sl
 80031b4:	4315      	orrs	r5, r2
 80031b6:	9a02      	ldr	r2, [sp, #8]
 80031b8:	40da      	lsrs	r2, r3
 80031ba:	18a4      	adds	r4, r4, r2
 80031bc:	182d      	adds	r5, r5, r0
 80031be:	4285      	cmp	r5, r0
 80031c0:	4180      	sbcs	r0, r0
 80031c2:	4240      	negs	r0, r0
 80031c4:	1824      	adds	r4, r4, r0
 80031c6:	0223      	lsls	r3, r4, #8
 80031c8:	d400      	bmi.n	80031cc <__aeabi_dsub+0x1d8>
 80031ca:	e0b6      	b.n	800333a <__aeabi_dsub+0x346>
 80031cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003348 <__aeabi_dsub+0x354>)
 80031ce:	3701      	adds	r7, #1
 80031d0:	429f      	cmp	r7, r3
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x1e2>
 80031d4:	e0ad      	b.n	8003332 <__aeabi_dsub+0x33e>
 80031d6:	2101      	movs	r1, #1
 80031d8:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <__aeabi_dsub+0x358>)
 80031da:	086a      	lsrs	r2, r5, #1
 80031dc:	401c      	ands	r4, r3
 80031de:	4029      	ands	r1, r5
 80031e0:	430a      	orrs	r2, r1
 80031e2:	07e5      	lsls	r5, r4, #31
 80031e4:	4315      	orrs	r5, r2
 80031e6:	0864      	lsrs	r4, r4, #1
 80031e8:	e78d      	b.n	8003106 <__aeabi_dsub+0x112>
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <__aeabi_dsub+0x35c>)
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	4692      	mov	sl, r2
 80031f0:	4662      	mov	r2, ip
 80031f2:	44ba      	add	sl, r7
 80031f4:	431a      	orrs	r2, r3
 80031f6:	d02c      	beq.n	8003252 <__aeabi_dsub+0x25e>
 80031f8:	428e      	cmp	r6, r1
 80031fa:	d02e      	beq.n	800325a <__aeabi_dsub+0x266>
 80031fc:	4652      	mov	r2, sl
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d060      	beq.n	80032c4 <__aeabi_dsub+0x2d0>
 8003202:	2f00      	cmp	r7, #0
 8003204:	d100      	bne.n	8003208 <__aeabi_dsub+0x214>
 8003206:	e0db      	b.n	80033c0 <__aeabi_dsub+0x3cc>
 8003208:	4663      	mov	r3, ip
 800320a:	000e      	movs	r6, r1
 800320c:	9c02      	ldr	r4, [sp, #8]
 800320e:	08d8      	lsrs	r0, r3, #3
 8003210:	0762      	lsls	r2, r4, #29
 8003212:	4302      	orrs	r2, r0
 8003214:	08e4      	lsrs	r4, r4, #3
 8003216:	0013      	movs	r3, r2
 8003218:	4323      	orrs	r3, r4
 800321a:	d100      	bne.n	800321e <__aeabi_dsub+0x22a>
 800321c:	e254      	b.n	80036c8 <__aeabi_dsub+0x6d4>
 800321e:	2580      	movs	r5, #128	@ 0x80
 8003220:	032d      	lsls	r5, r5, #12
 8003222:	4325      	orrs	r5, r4
 8003224:	032d      	lsls	r5, r5, #12
 8003226:	4c48      	ldr	r4, [pc, #288]	@ (8003348 <__aeabi_dsub+0x354>)
 8003228:	0b2d      	lsrs	r5, r5, #12
 800322a:	e78c      	b.n	8003146 <__aeabi_dsub+0x152>
 800322c:	4661      	mov	r1, ip
 800322e:	9b02      	ldr	r3, [sp, #8]
 8003230:	4319      	orrs	r1, r3
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x242>
 8003234:	e0cc      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003236:	0029      	movs	r1, r5
 8003238:	3901      	subs	r1, #1
 800323a:	2d01      	cmp	r5, #1
 800323c:	d100      	bne.n	8003240 <__aeabi_dsub+0x24c>
 800323e:	e188      	b.n	8003552 <__aeabi_dsub+0x55e>
 8003240:	4295      	cmp	r5, r2
 8003242:	d100      	bne.n	8003246 <__aeabi_dsub+0x252>
 8003244:	e0aa      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003246:	2501      	movs	r5, #1
 8003248:	2938      	cmp	r1, #56	@ 0x38
 800324a:	dd00      	ble.n	800324e <__aeabi_dsub+0x25a>
 800324c:	e72f      	b.n	80030ae <__aeabi_dsub+0xba>
 800324e:	468a      	mov	sl, r1
 8003250:	e718      	b.n	8003084 <__aeabi_dsub+0x90>
 8003252:	2201      	movs	r2, #1
 8003254:	4051      	eors	r1, r2
 8003256:	428e      	cmp	r6, r1
 8003258:	d1d0      	bne.n	80031fc <__aeabi_dsub+0x208>
 800325a:	4653      	mov	r3, sl
 800325c:	2b00      	cmp	r3, #0
 800325e:	d100      	bne.n	8003262 <__aeabi_dsub+0x26e>
 8003260:	e0be      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 8003262:	2f00      	cmp	r7, #0
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x274>
 8003266:	e138      	b.n	80034da <__aeabi_dsub+0x4e6>
 8003268:	46ca      	mov	sl, r9
 800326a:	0022      	movs	r2, r4
 800326c:	4302      	orrs	r2, r0
 800326e:	d100      	bne.n	8003272 <__aeabi_dsub+0x27e>
 8003270:	e1e2      	b.n	8003638 <__aeabi_dsub+0x644>
 8003272:	4653      	mov	r3, sl
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d100      	bne.n	800327c <__aeabi_dsub+0x288>
 800327a:	e20d      	b.n	8003698 <__aeabi_dsub+0x6a4>
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <__aeabi_dsub+0x354>)
 800327e:	4592      	cmp	sl, r2
 8003280:	d100      	bne.n	8003284 <__aeabi_dsub+0x290>
 8003282:	e1d2      	b.n	800362a <__aeabi_dsub+0x636>
 8003284:	2701      	movs	r7, #1
 8003286:	2938      	cmp	r1, #56	@ 0x38
 8003288:	dc13      	bgt.n	80032b2 <__aeabi_dsub+0x2be>
 800328a:	291f      	cmp	r1, #31
 800328c:	dd00      	ble.n	8003290 <__aeabi_dsub+0x29c>
 800328e:	e1ee      	b.n	800366e <__aeabi_dsub+0x67a>
 8003290:	2220      	movs	r2, #32
 8003292:	9b02      	ldr	r3, [sp, #8]
 8003294:	1a52      	subs	r2, r2, r1
 8003296:	0025      	movs	r5, r4
 8003298:	0007      	movs	r7, r0
 800329a:	469a      	mov	sl, r3
 800329c:	40cc      	lsrs	r4, r1
 800329e:	4090      	lsls	r0, r2
 80032a0:	4095      	lsls	r5, r2
 80032a2:	40cf      	lsrs	r7, r1
 80032a4:	44a2      	add	sl, r4
 80032a6:	1e42      	subs	r2, r0, #1
 80032a8:	4190      	sbcs	r0, r2
 80032aa:	4653      	mov	r3, sl
 80032ac:	432f      	orrs	r7, r5
 80032ae:	4307      	orrs	r7, r0
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	003d      	movs	r5, r7
 80032b4:	4465      	add	r5, ip
 80032b6:	4565      	cmp	r5, ip
 80032b8:	4192      	sbcs	r2, r2
 80032ba:	9b02      	ldr	r3, [sp, #8]
 80032bc:	4252      	negs	r2, r2
 80032be:	464f      	mov	r7, r9
 80032c0:	18d4      	adds	r4, r2, r3
 80032c2:	e780      	b.n	80031c6 <__aeabi_dsub+0x1d2>
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <__aeabi_dsub+0x360>)
 80032c6:	1c7d      	adds	r5, r7, #1
 80032c8:	4215      	tst	r5, r2
 80032ca:	d000      	beq.n	80032ce <__aeabi_dsub+0x2da>
 80032cc:	e0aa      	b.n	8003424 <__aeabi_dsub+0x430>
 80032ce:	4662      	mov	r2, ip
 80032d0:	0025      	movs	r5, r4
 80032d2:	9b02      	ldr	r3, [sp, #8]
 80032d4:	4305      	orrs	r5, r0
 80032d6:	431a      	orrs	r2, r3
 80032d8:	2f00      	cmp	r7, #0
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x2ea>
 80032dc:	e0f5      	b.n	80034ca <__aeabi_dsub+0x4d6>
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d100      	bne.n	80032e4 <__aeabi_dsub+0x2f0>
 80032e2:	e16b      	b.n	80035bc <__aeabi_dsub+0x5c8>
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d100      	bne.n	80032ea <__aeabi_dsub+0x2f6>
 80032e8:	e152      	b.n	8003590 <__aeabi_dsub+0x59c>
 80032ea:	4663      	mov	r3, ip
 80032ec:	1ac5      	subs	r5, r0, r3
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	1ae2      	subs	r2, r4, r3
 80032f2:	42a8      	cmp	r0, r5
 80032f4:	419b      	sbcs	r3, r3
 80032f6:	425b      	negs	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	d400      	bmi.n	8003300 <__aeabi_dsub+0x30c>
 80032fe:	e1d5      	b.n	80036ac <__aeabi_dsub+0x6b8>
 8003300:	4663      	mov	r3, ip
 8003302:	1a1d      	subs	r5, r3, r0
 8003304:	45ac      	cmp	ip, r5
 8003306:	4192      	sbcs	r2, r2
 8003308:	2601      	movs	r6, #1
 800330a:	9b02      	ldr	r3, [sp, #8]
 800330c:	4252      	negs	r2, r2
 800330e:	1b1c      	subs	r4, r3, r4
 8003310:	4688      	mov	r8, r1
 8003312:	1aa4      	subs	r4, r4, r2
 8003314:	400e      	ands	r6, r1
 8003316:	e6f6      	b.n	8003106 <__aeabi_dsub+0x112>
 8003318:	4297      	cmp	r7, r2
 800331a:	d03f      	beq.n	800339c <__aeabi_dsub+0x3a8>
 800331c:	4652      	mov	r2, sl
 800331e:	2501      	movs	r5, #1
 8003320:	2a38      	cmp	r2, #56	@ 0x38
 8003322:	dd00      	ble.n	8003326 <__aeabi_dsub+0x332>
 8003324:	e74a      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	9b02      	ldr	r3, [sp, #8]
 800332a:	0412      	lsls	r2, r2, #16
 800332c:	4313      	orrs	r3, r2
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	e72d      	b.n	800318e <__aeabi_dsub+0x19a>
 8003332:	003c      	movs	r4, r7
 8003334:	2500      	movs	r5, #0
 8003336:	2200      	movs	r2, #0
 8003338:	e705      	b.n	8003146 <__aeabi_dsub+0x152>
 800333a:	2307      	movs	r3, #7
 800333c:	402b      	ands	r3, r5
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <__aeabi_dsub+0x350>
 8003342:	e6e2      	b.n	800310a <__aeabi_dsub+0x116>
 8003344:	e06b      	b.n	800341e <__aeabi_dsub+0x42a>
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	000007ff 	.word	0x000007ff
 800334c:	ff7fffff 	.word	0xff7fffff
 8003350:	fffff801 	.word	0xfffff801
 8003354:	000007fe 	.word	0x000007fe
 8003358:	0028      	movs	r0, r5
 800335a:	f000 fa8f 	bl	800387c <__clzsi2>
 800335e:	0003      	movs	r3, r0
 8003360:	3318      	adds	r3, #24
 8003362:	2b1f      	cmp	r3, #31
 8003364:	dc00      	bgt.n	8003368 <__aeabi_dsub+0x374>
 8003366:	e6b4      	b.n	80030d2 <__aeabi_dsub+0xde>
 8003368:	002a      	movs	r2, r5
 800336a:	3808      	subs	r0, #8
 800336c:	4082      	lsls	r2, r0
 800336e:	429f      	cmp	r7, r3
 8003370:	dd00      	ble.n	8003374 <__aeabi_dsub+0x380>
 8003372:	e0b9      	b.n	80034e8 <__aeabi_dsub+0x4f4>
 8003374:	1bdb      	subs	r3, r3, r7
 8003376:	1c58      	adds	r0, r3, #1
 8003378:	281f      	cmp	r0, #31
 800337a:	dc00      	bgt.n	800337e <__aeabi_dsub+0x38a>
 800337c:	e1a0      	b.n	80036c0 <__aeabi_dsub+0x6cc>
 800337e:	0015      	movs	r5, r2
 8003380:	3b1f      	subs	r3, #31
 8003382:	40dd      	lsrs	r5, r3
 8003384:	2820      	cmp	r0, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x3a0>
 8003388:	2340      	movs	r3, #64	@ 0x40
 800338a:	1a1b      	subs	r3, r3, r0
 800338c:	409a      	lsls	r2, r3
 800338e:	1e53      	subs	r3, r2, #1
 8003390:	419a      	sbcs	r2, r3
 8003392:	4315      	orrs	r5, r2
 8003394:	2307      	movs	r3, #7
 8003396:	2700      	movs	r7, #0
 8003398:	402b      	ands	r3, r5
 800339a:	e7d0      	b.n	800333e <__aeabi_dsub+0x34a>
 800339c:	08c0      	lsrs	r0, r0, #3
 800339e:	0762      	lsls	r2, r4, #29
 80033a0:	4302      	orrs	r2, r0
 80033a2:	08e4      	lsrs	r4, r4, #3
 80033a4:	e737      	b.n	8003216 <__aeabi_dsub+0x222>
 80033a6:	08ea      	lsrs	r2, r5, #3
 80033a8:	0763      	lsls	r3, r4, #29
 80033aa:	431a      	orrs	r2, r3
 80033ac:	4bd3      	ldr	r3, [pc, #844]	@ (80036fc <__aeabi_dsub+0x708>)
 80033ae:	08e4      	lsrs	r4, r4, #3
 80033b0:	429f      	cmp	r7, r3
 80033b2:	d100      	bne.n	80033b6 <__aeabi_dsub+0x3c2>
 80033b4:	e72f      	b.n	8003216 <__aeabi_dsub+0x222>
 80033b6:	0324      	lsls	r4, r4, #12
 80033b8:	0b25      	lsrs	r5, r4, #12
 80033ba:	057c      	lsls	r4, r7, #21
 80033bc:	0d64      	lsrs	r4, r4, #21
 80033be:	e6c2      	b.n	8003146 <__aeabi_dsub+0x152>
 80033c0:	46ca      	mov	sl, r9
 80033c2:	0022      	movs	r2, r4
 80033c4:	4302      	orrs	r2, r0
 80033c6:	d158      	bne.n	800347a <__aeabi_dsub+0x486>
 80033c8:	4663      	mov	r3, ip
 80033ca:	000e      	movs	r6, r1
 80033cc:	9c02      	ldr	r4, [sp, #8]
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	4657      	mov	r7, sl
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	e7e7      	b.n	80033a8 <__aeabi_dsub+0x3b4>
 80033d8:	4cc9      	ldr	r4, [pc, #804]	@ (8003700 <__aeabi_dsub+0x70c>)
 80033da:	1aff      	subs	r7, r7, r3
 80033dc:	4014      	ands	r4, r2
 80033de:	e692      	b.n	8003106 <__aeabi_dsub+0x112>
 80033e0:	4dc8      	ldr	r5, [pc, #800]	@ (8003704 <__aeabi_dsub+0x710>)
 80033e2:	1c7a      	adds	r2, r7, #1
 80033e4:	422a      	tst	r2, r5
 80033e6:	d000      	beq.n	80033ea <__aeabi_dsub+0x3f6>
 80033e8:	e084      	b.n	80034f4 <__aeabi_dsub+0x500>
 80033ea:	0022      	movs	r2, r4
 80033ec:	4302      	orrs	r2, r0
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d000      	beq.n	80033f4 <__aeabi_dsub+0x400>
 80033f2:	e0ef      	b.n	80035d4 <__aeabi_dsub+0x5e0>
 80033f4:	2a00      	cmp	r2, #0
 80033f6:	d100      	bne.n	80033fa <__aeabi_dsub+0x406>
 80033f8:	e0e5      	b.n	80035c6 <__aeabi_dsub+0x5d2>
 80033fa:	4662      	mov	r2, ip
 80033fc:	9902      	ldr	r1, [sp, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x410>
 8003402:	e0c5      	b.n	8003590 <__aeabi_dsub+0x59c>
 8003404:	4663      	mov	r3, ip
 8003406:	18c5      	adds	r5, r0, r3
 8003408:	468c      	mov	ip, r1
 800340a:	4285      	cmp	r5, r0
 800340c:	4180      	sbcs	r0, r0
 800340e:	4464      	add	r4, ip
 8003410:	4240      	negs	r0, r0
 8003412:	1824      	adds	r4, r4, r0
 8003414:	0223      	lsls	r3, r4, #8
 8003416:	d502      	bpl.n	800341e <__aeabi_dsub+0x42a>
 8003418:	4bb9      	ldr	r3, [pc, #740]	@ (8003700 <__aeabi_dsub+0x70c>)
 800341a:	3701      	adds	r7, #1
 800341c:	401c      	ands	r4, r3
 800341e:	46ba      	mov	sl, r7
 8003420:	9503      	str	r5, [sp, #12]
 8003422:	e7d5      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003424:	4662      	mov	r2, ip
 8003426:	1a85      	subs	r5, r0, r2
 8003428:	42a8      	cmp	r0, r5
 800342a:	4192      	sbcs	r2, r2
 800342c:	4252      	negs	r2, r2
 800342e:	4691      	mov	r9, r2
 8003430:	9b02      	ldr	r3, [sp, #8]
 8003432:	1ae3      	subs	r3, r4, r3
 8003434:	001a      	movs	r2, r3
 8003436:	464b      	mov	r3, r9
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	4691      	mov	r9, r2
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	d46c      	bmi.n	800351c <__aeabi_dsub+0x528>
 8003442:	464a      	mov	r2, r9
 8003444:	464c      	mov	r4, r9
 8003446:	432a      	orrs	r2, r5
 8003448:	d000      	beq.n	800344c <__aeabi_dsub+0x458>
 800344a:	e63a      	b.n	80030c2 <__aeabi_dsub+0xce>
 800344c:	2600      	movs	r6, #0
 800344e:	2400      	movs	r4, #0
 8003450:	2500      	movs	r5, #0
 8003452:	e678      	b.n	8003146 <__aeabi_dsub+0x152>
 8003454:	9902      	ldr	r1, [sp, #8]
 8003456:	4653      	mov	r3, sl
 8003458:	000d      	movs	r5, r1
 800345a:	3a20      	subs	r2, #32
 800345c:	40d5      	lsrs	r5, r2
 800345e:	2b20      	cmp	r3, #32
 8003460:	d006      	beq.n	8003470 <__aeabi_dsub+0x47c>
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	000b      	movs	r3, r1
 8003468:	4093      	lsls	r3, r2
 800346a:	4662      	mov	r2, ip
 800346c:	431a      	orrs	r2, r3
 800346e:	4693      	mov	fp, r2
 8003470:	465b      	mov	r3, fp
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	4193      	sbcs	r3, r2
 8003476:	431d      	orrs	r5, r3
 8003478:	e619      	b.n	80030ae <__aeabi_dsub+0xba>
 800347a:	4653      	mov	r3, sl
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d100      	bne.n	8003484 <__aeabi_dsub+0x490>
 8003482:	e0c6      	b.n	8003612 <__aeabi_dsub+0x61e>
 8003484:	4e9d      	ldr	r6, [pc, #628]	@ (80036fc <__aeabi_dsub+0x708>)
 8003486:	45b2      	cmp	sl, r6
 8003488:	d100      	bne.n	800348c <__aeabi_dsub+0x498>
 800348a:	e6bd      	b.n	8003208 <__aeabi_dsub+0x214>
 800348c:	4688      	mov	r8, r1
 800348e:	000e      	movs	r6, r1
 8003490:	2501      	movs	r5, #1
 8003492:	2a38      	cmp	r2, #56	@ 0x38
 8003494:	dc10      	bgt.n	80034b8 <__aeabi_dsub+0x4c4>
 8003496:	2a1f      	cmp	r2, #31
 8003498:	dc7f      	bgt.n	800359a <__aeabi_dsub+0x5a6>
 800349a:	2120      	movs	r1, #32
 800349c:	0025      	movs	r5, r4
 800349e:	1a89      	subs	r1, r1, r2
 80034a0:	0007      	movs	r7, r0
 80034a2:	4088      	lsls	r0, r1
 80034a4:	408d      	lsls	r5, r1
 80034a6:	40d7      	lsrs	r7, r2
 80034a8:	40d4      	lsrs	r4, r2
 80034aa:	1e41      	subs	r1, r0, #1
 80034ac:	4188      	sbcs	r0, r1
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	433d      	orrs	r5, r7
 80034b2:	1b1b      	subs	r3, r3, r4
 80034b4:	4305      	orrs	r5, r0
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	4662      	mov	r2, ip
 80034ba:	1b55      	subs	r5, r2, r5
 80034bc:	45ac      	cmp	ip, r5
 80034be:	4192      	sbcs	r2, r2
 80034c0:	9b02      	ldr	r3, [sp, #8]
 80034c2:	4252      	negs	r2, r2
 80034c4:	464f      	mov	r7, r9
 80034c6:	1a9c      	subs	r4, r3, r2
 80034c8:	e5f6      	b.n	80030b8 <__aeabi_dsub+0xc4>
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	d000      	beq.n	80034d0 <__aeabi_dsub+0x4dc>
 80034ce:	e0b7      	b.n	8003640 <__aeabi_dsub+0x64c>
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x4e2>
 80034d4:	e0f0      	b.n	80036b8 <__aeabi_dsub+0x6c4>
 80034d6:	2601      	movs	r6, #1
 80034d8:	400e      	ands	r6, r1
 80034da:	4663      	mov	r3, ip
 80034dc:	9802      	ldr	r0, [sp, #8]
 80034de:	08d9      	lsrs	r1, r3, #3
 80034e0:	0742      	lsls	r2, r0, #29
 80034e2:	430a      	orrs	r2, r1
 80034e4:	08c4      	lsrs	r4, r0, #3
 80034e6:	e696      	b.n	8003216 <__aeabi_dsub+0x222>
 80034e8:	4c85      	ldr	r4, [pc, #532]	@ (8003700 <__aeabi_dsub+0x70c>)
 80034ea:	1aff      	subs	r7, r7, r3
 80034ec:	4014      	ands	r4, r2
 80034ee:	0762      	lsls	r2, r4, #29
 80034f0:	08e4      	lsrs	r4, r4, #3
 80034f2:	e760      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80034f4:	4981      	ldr	r1, [pc, #516]	@ (80036fc <__aeabi_dsub+0x708>)
 80034f6:	428a      	cmp	r2, r1
 80034f8:	d100      	bne.n	80034fc <__aeabi_dsub+0x508>
 80034fa:	e0c9      	b.n	8003690 <__aeabi_dsub+0x69c>
 80034fc:	4663      	mov	r3, ip
 80034fe:	18c1      	adds	r1, r0, r3
 8003500:	4281      	cmp	r1, r0
 8003502:	4180      	sbcs	r0, r0
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	4240      	negs	r0, r0
 8003508:	18e3      	adds	r3, r4, r3
 800350a:	181b      	adds	r3, r3, r0
 800350c:	07dd      	lsls	r5, r3, #31
 800350e:	085c      	lsrs	r4, r3, #1
 8003510:	2307      	movs	r3, #7
 8003512:	0849      	lsrs	r1, r1, #1
 8003514:	430d      	orrs	r5, r1
 8003516:	0017      	movs	r7, r2
 8003518:	402b      	ands	r3, r5
 800351a:	e710      	b.n	800333e <__aeabi_dsub+0x34a>
 800351c:	4663      	mov	r3, ip
 800351e:	1a1d      	subs	r5, r3, r0
 8003520:	45ac      	cmp	ip, r5
 8003522:	4192      	sbcs	r2, r2
 8003524:	2601      	movs	r6, #1
 8003526:	9b02      	ldr	r3, [sp, #8]
 8003528:	4252      	negs	r2, r2
 800352a:	1b1c      	subs	r4, r3, r4
 800352c:	4688      	mov	r8, r1
 800352e:	1aa4      	subs	r4, r4, r2
 8003530:	400e      	ands	r6, r1
 8003532:	e5c6      	b.n	80030c2 <__aeabi_dsub+0xce>
 8003534:	4663      	mov	r3, ip
 8003536:	18c5      	adds	r5, r0, r3
 8003538:	9b02      	ldr	r3, [sp, #8]
 800353a:	4285      	cmp	r5, r0
 800353c:	4180      	sbcs	r0, r0
 800353e:	469c      	mov	ip, r3
 8003540:	4240      	negs	r0, r0
 8003542:	4464      	add	r4, ip
 8003544:	1824      	adds	r4, r4, r0
 8003546:	2701      	movs	r7, #1
 8003548:	0223      	lsls	r3, r4, #8
 800354a:	d400      	bmi.n	800354e <__aeabi_dsub+0x55a>
 800354c:	e6f5      	b.n	800333a <__aeabi_dsub+0x346>
 800354e:	2702      	movs	r7, #2
 8003550:	e641      	b.n	80031d6 <__aeabi_dsub+0x1e2>
 8003552:	4663      	mov	r3, ip
 8003554:	1ac5      	subs	r5, r0, r3
 8003556:	42a8      	cmp	r0, r5
 8003558:	4180      	sbcs	r0, r0
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	4240      	negs	r0, r0
 800355e:	1ae4      	subs	r4, r4, r3
 8003560:	2701      	movs	r7, #1
 8003562:	1a24      	subs	r4, r4, r0
 8003564:	e5a8      	b.n	80030b8 <__aeabi_dsub+0xc4>
 8003566:	9d02      	ldr	r5, [sp, #8]
 8003568:	4652      	mov	r2, sl
 800356a:	002b      	movs	r3, r5
 800356c:	3a20      	subs	r2, #32
 800356e:	40d3      	lsrs	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	4653      	mov	r3, sl
 8003574:	2b20      	cmp	r3, #32
 8003576:	d006      	beq.n	8003586 <__aeabi_dsub+0x592>
 8003578:	2240      	movs	r2, #64	@ 0x40
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	002b      	movs	r3, r5
 800357e:	4093      	lsls	r3, r2
 8003580:	4662      	mov	r2, ip
 8003582:	431a      	orrs	r2, r3
 8003584:	4693      	mov	fp, r2
 8003586:	465d      	mov	r5, fp
 8003588:	1e6b      	subs	r3, r5, #1
 800358a:	419d      	sbcs	r5, r3
 800358c:	430d      	orrs	r5, r1
 800358e:	e615      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003590:	0762      	lsls	r2, r4, #29
 8003592:	08c0      	lsrs	r0, r0, #3
 8003594:	4302      	orrs	r2, r0
 8003596:	08e4      	lsrs	r4, r4, #3
 8003598:	e70d      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 800359a:	0011      	movs	r1, r2
 800359c:	0027      	movs	r7, r4
 800359e:	3920      	subs	r1, #32
 80035a0:	40cf      	lsrs	r7, r1
 80035a2:	2a20      	cmp	r2, #32
 80035a4:	d005      	beq.n	80035b2 <__aeabi_dsub+0x5be>
 80035a6:	2140      	movs	r1, #64	@ 0x40
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	4094      	lsls	r4, r2
 80035ac:	0025      	movs	r5, r4
 80035ae:	4305      	orrs	r5, r0
 80035b0:	9503      	str	r5, [sp, #12]
 80035b2:	9d03      	ldr	r5, [sp, #12]
 80035b4:	1e6a      	subs	r2, r5, #1
 80035b6:	4195      	sbcs	r5, r2
 80035b8:	433d      	orrs	r5, r7
 80035ba:	e77d      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d100      	bne.n	80035c2 <__aeabi_dsub+0x5ce>
 80035c0:	e744      	b.n	800344c <__aeabi_dsub+0x458>
 80035c2:	2601      	movs	r6, #1
 80035c4:	400e      	ands	r6, r1
 80035c6:	4663      	mov	r3, ip
 80035c8:	08d9      	lsrs	r1, r3, #3
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	075a      	lsls	r2, r3, #29
 80035ce:	430a      	orrs	r2, r1
 80035d0:	08dc      	lsrs	r4, r3, #3
 80035d2:	e6f0      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	d028      	beq.n	800362a <__aeabi_dsub+0x636>
 80035d8:	4662      	mov	r2, ip
 80035da:	9f02      	ldr	r7, [sp, #8]
 80035dc:	08c0      	lsrs	r0, r0, #3
 80035de:	433a      	orrs	r2, r7
 80035e0:	d100      	bne.n	80035e4 <__aeabi_dsub+0x5f0>
 80035e2:	e6dc      	b.n	800339e <__aeabi_dsub+0x3aa>
 80035e4:	0762      	lsls	r2, r4, #29
 80035e6:	4310      	orrs	r0, r2
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	08e4      	lsrs	r4, r4, #3
 80035ec:	0312      	lsls	r2, r2, #12
 80035ee:	4214      	tst	r4, r2
 80035f0:	d009      	beq.n	8003606 <__aeabi_dsub+0x612>
 80035f2:	08fd      	lsrs	r5, r7, #3
 80035f4:	4215      	tst	r5, r2
 80035f6:	d106      	bne.n	8003606 <__aeabi_dsub+0x612>
 80035f8:	4663      	mov	r3, ip
 80035fa:	2601      	movs	r6, #1
 80035fc:	002c      	movs	r4, r5
 80035fe:	08d8      	lsrs	r0, r3, #3
 8003600:	077b      	lsls	r3, r7, #29
 8003602:	4318      	orrs	r0, r3
 8003604:	400e      	ands	r6, r1
 8003606:	0f42      	lsrs	r2, r0, #29
 8003608:	00c0      	lsls	r0, r0, #3
 800360a:	08c0      	lsrs	r0, r0, #3
 800360c:	0752      	lsls	r2, r2, #29
 800360e:	4302      	orrs	r2, r0
 8003610:	e601      	b.n	8003216 <__aeabi_dsub+0x222>
 8003612:	4663      	mov	r3, ip
 8003614:	1a1d      	subs	r5, r3, r0
 8003616:	45ac      	cmp	ip, r5
 8003618:	4192      	sbcs	r2, r2
 800361a:	9b02      	ldr	r3, [sp, #8]
 800361c:	4252      	negs	r2, r2
 800361e:	1b1c      	subs	r4, r3, r4
 8003620:	000e      	movs	r6, r1
 8003622:	4688      	mov	r8, r1
 8003624:	2701      	movs	r7, #1
 8003626:	1aa4      	subs	r4, r4, r2
 8003628:	e546      	b.n	80030b8 <__aeabi_dsub+0xc4>
 800362a:	4663      	mov	r3, ip
 800362c:	08d9      	lsrs	r1, r3, #3
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	075a      	lsls	r2, r3, #29
 8003632:	430a      	orrs	r2, r1
 8003634:	08dc      	lsrs	r4, r3, #3
 8003636:	e5ee      	b.n	8003216 <__aeabi_dsub+0x222>
 8003638:	4663      	mov	r3, ip
 800363a:	9c02      	ldr	r4, [sp, #8]
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	e6c7      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003640:	08c0      	lsrs	r0, r0, #3
 8003642:	2a00      	cmp	r2, #0
 8003644:	d100      	bne.n	8003648 <__aeabi_dsub+0x654>
 8003646:	e6aa      	b.n	800339e <__aeabi_dsub+0x3aa>
 8003648:	0762      	lsls	r2, r4, #29
 800364a:	4310      	orrs	r0, r2
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	08e4      	lsrs	r4, r4, #3
 8003650:	0312      	lsls	r2, r2, #12
 8003652:	4214      	tst	r4, r2
 8003654:	d0d7      	beq.n	8003606 <__aeabi_dsub+0x612>
 8003656:	9f02      	ldr	r7, [sp, #8]
 8003658:	08fd      	lsrs	r5, r7, #3
 800365a:	4215      	tst	r5, r2
 800365c:	d1d3      	bne.n	8003606 <__aeabi_dsub+0x612>
 800365e:	4663      	mov	r3, ip
 8003660:	2601      	movs	r6, #1
 8003662:	08d8      	lsrs	r0, r3, #3
 8003664:	077b      	lsls	r3, r7, #29
 8003666:	002c      	movs	r4, r5
 8003668:	4318      	orrs	r0, r3
 800366a:	400e      	ands	r6, r1
 800366c:	e7cb      	b.n	8003606 <__aeabi_dsub+0x612>
 800366e:	000a      	movs	r2, r1
 8003670:	0027      	movs	r7, r4
 8003672:	3a20      	subs	r2, #32
 8003674:	40d7      	lsrs	r7, r2
 8003676:	2920      	cmp	r1, #32
 8003678:	d005      	beq.n	8003686 <__aeabi_dsub+0x692>
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	1a52      	subs	r2, r2, r1
 800367e:	4094      	lsls	r4, r2
 8003680:	0025      	movs	r5, r4
 8003682:	4305      	orrs	r5, r0
 8003684:	9503      	str	r5, [sp, #12]
 8003686:	9d03      	ldr	r5, [sp, #12]
 8003688:	1e6a      	subs	r2, r5, #1
 800368a:	4195      	sbcs	r5, r2
 800368c:	432f      	orrs	r7, r5
 800368e:	e610      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003690:	0014      	movs	r4, r2
 8003692:	2500      	movs	r5, #0
 8003694:	2200      	movs	r2, #0
 8003696:	e556      	b.n	8003146 <__aeabi_dsub+0x152>
 8003698:	9b02      	ldr	r3, [sp, #8]
 800369a:	4460      	add	r0, ip
 800369c:	4699      	mov	r9, r3
 800369e:	4560      	cmp	r0, ip
 80036a0:	4192      	sbcs	r2, r2
 80036a2:	444c      	add	r4, r9
 80036a4:	4252      	negs	r2, r2
 80036a6:	0005      	movs	r5, r0
 80036a8:	18a4      	adds	r4, r4, r2
 80036aa:	e74c      	b.n	8003546 <__aeabi_dsub+0x552>
 80036ac:	001a      	movs	r2, r3
 80036ae:	001c      	movs	r4, r3
 80036b0:	432a      	orrs	r2, r5
 80036b2:	d000      	beq.n	80036b6 <__aeabi_dsub+0x6c2>
 80036b4:	e6b3      	b.n	800341e <__aeabi_dsub+0x42a>
 80036b6:	e6c9      	b.n	800344c <__aeabi_dsub+0x458>
 80036b8:	2480      	movs	r4, #128	@ 0x80
 80036ba:	2600      	movs	r6, #0
 80036bc:	0324      	lsls	r4, r4, #12
 80036be:	e5ae      	b.n	800321e <__aeabi_dsub+0x22a>
 80036c0:	2120      	movs	r1, #32
 80036c2:	2500      	movs	r5, #0
 80036c4:	1a09      	subs	r1, r1, r0
 80036c6:	e517      	b.n	80030f8 <__aeabi_dsub+0x104>
 80036c8:	2200      	movs	r2, #0
 80036ca:	2500      	movs	r5, #0
 80036cc:	4c0b      	ldr	r4, [pc, #44]	@ (80036fc <__aeabi_dsub+0x708>)
 80036ce:	e53a      	b.n	8003146 <__aeabi_dsub+0x152>
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	d100      	bne.n	80036d6 <__aeabi_dsub+0x6e2>
 80036d4:	e5f6      	b.n	80032c4 <__aeabi_dsub+0x2d0>
 80036d6:	464b      	mov	r3, r9
 80036d8:	1bda      	subs	r2, r3, r7
 80036da:	4692      	mov	sl, r2
 80036dc:	2f00      	cmp	r7, #0
 80036de:	d100      	bne.n	80036e2 <__aeabi_dsub+0x6ee>
 80036e0:	e66f      	b.n	80033c2 <__aeabi_dsub+0x3ce>
 80036e2:	2a38      	cmp	r2, #56	@ 0x38
 80036e4:	dc05      	bgt.n	80036f2 <__aeabi_dsub+0x6fe>
 80036e6:	2680      	movs	r6, #128	@ 0x80
 80036e8:	0436      	lsls	r6, r6, #16
 80036ea:	4334      	orrs	r4, r6
 80036ec:	4688      	mov	r8, r1
 80036ee:	000e      	movs	r6, r1
 80036f0:	e6d1      	b.n	8003496 <__aeabi_dsub+0x4a2>
 80036f2:	4688      	mov	r8, r1
 80036f4:	000e      	movs	r6, r1
 80036f6:	2501      	movs	r5, #1
 80036f8:	e6de      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	000007ff 	.word	0x000007ff
 8003700:	ff7fffff 	.word	0xff7fffff
 8003704:	000007fe 	.word	0x000007fe
 8003708:	2d00      	cmp	r5, #0
 800370a:	d100      	bne.n	800370e <__aeabi_dsub+0x71a>
 800370c:	e668      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 800370e:	464b      	mov	r3, r9
 8003710:	1bd9      	subs	r1, r3, r7
 8003712:	2f00      	cmp	r7, #0
 8003714:	d101      	bne.n	800371a <__aeabi_dsub+0x726>
 8003716:	468a      	mov	sl, r1
 8003718:	e5a7      	b.n	800326a <__aeabi_dsub+0x276>
 800371a:	2701      	movs	r7, #1
 800371c:	2938      	cmp	r1, #56	@ 0x38
 800371e:	dd00      	ble.n	8003722 <__aeabi_dsub+0x72e>
 8003720:	e5c7      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	0412      	lsls	r2, r2, #16
 8003726:	4314      	orrs	r4, r2
 8003728:	e5af      	b.n	800328a <__aeabi_dsub+0x296>
 800372a:	46c0      	nop			@ (mov r8, r8)

0800372c <__aeabi_d2iz>:
 800372c:	000b      	movs	r3, r1
 800372e:	0002      	movs	r2, r0
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d16      	ldr	r5, [pc, #88]	@ (800378c <__aeabi_d2iz+0x60>)
 8003734:	030c      	lsls	r4, r1, #12
 8003736:	b082      	sub	sp, #8
 8003738:	0049      	lsls	r1, r1, #1
 800373a:	2000      	movs	r0, #0
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	0b24      	lsrs	r4, r4, #12
 8003742:	0d49      	lsrs	r1, r1, #21
 8003744:	0fde      	lsrs	r6, r3, #31
 8003746:	42a9      	cmp	r1, r5
 8003748:	dd04      	ble.n	8003754 <__aeabi_d2iz+0x28>
 800374a:	4811      	ldr	r0, [pc, #68]	@ (8003790 <__aeabi_d2iz+0x64>)
 800374c:	4281      	cmp	r1, r0
 800374e:	dd03      	ble.n	8003758 <__aeabi_d2iz+0x2c>
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <__aeabi_d2iz+0x68>)
 8003752:	18f0      	adds	r0, r6, r3
 8003754:	b002      	add	sp, #8
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	2080      	movs	r0, #128	@ 0x80
 800375a:	0340      	lsls	r0, r0, #13
 800375c:	4320      	orrs	r0, r4
 800375e:	4c0e      	ldr	r4, [pc, #56]	@ (8003798 <__aeabi_d2iz+0x6c>)
 8003760:	1a64      	subs	r4, r4, r1
 8003762:	2c1f      	cmp	r4, #31
 8003764:	dd08      	ble.n	8003778 <__aeabi_d2iz+0x4c>
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <__aeabi_d2iz+0x70>)
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	40d8      	lsrs	r0, r3
 800376c:	0003      	movs	r3, r0
 800376e:	4258      	negs	r0, r3
 8003770:	2e00      	cmp	r6, #0
 8003772:	d1ef      	bne.n	8003754 <__aeabi_d2iz+0x28>
 8003774:	0018      	movs	r0, r3
 8003776:	e7ed      	b.n	8003754 <__aeabi_d2iz+0x28>
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <__aeabi_d2iz+0x74>)
 800377a:	9a00      	ldr	r2, [sp, #0]
 800377c:	469c      	mov	ip, r3
 800377e:	0003      	movs	r3, r0
 8003780:	4461      	add	r1, ip
 8003782:	408b      	lsls	r3, r1
 8003784:	40e2      	lsrs	r2, r4
 8003786:	4313      	orrs	r3, r2
 8003788:	e7f1      	b.n	800376e <__aeabi_d2iz+0x42>
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	000003fe 	.word	0x000003fe
 8003790:	0000041d 	.word	0x0000041d
 8003794:	7fffffff 	.word	0x7fffffff
 8003798:	00000433 	.word	0x00000433
 800379c:	00000413 	.word	0x00000413
 80037a0:	fffffbed 	.word	0xfffffbed

080037a4 <__aeabi_i2d>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d016      	beq.n	80037d8 <__aeabi_i2d+0x34>
 80037aa:	17c3      	asrs	r3, r0, #31
 80037ac:	18c5      	adds	r5, r0, r3
 80037ae:	405d      	eors	r5, r3
 80037b0:	0fc4      	lsrs	r4, r0, #31
 80037b2:	0028      	movs	r0, r5
 80037b4:	f000 f862 	bl	800387c <__clzsi2>
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <__aeabi_i2d+0x58>)
 80037ba:	1a1b      	subs	r3, r3, r0
 80037bc:	055b      	lsls	r3, r3, #21
 80037be:	0d5b      	lsrs	r3, r3, #21
 80037c0:	280a      	cmp	r0, #10
 80037c2:	dc14      	bgt.n	80037ee <__aeabi_i2d+0x4a>
 80037c4:	0002      	movs	r2, r0
 80037c6:	002e      	movs	r6, r5
 80037c8:	3215      	adds	r2, #21
 80037ca:	4096      	lsls	r6, r2
 80037cc:	220b      	movs	r2, #11
 80037ce:	1a12      	subs	r2, r2, r0
 80037d0:	40d5      	lsrs	r5, r2
 80037d2:	032d      	lsls	r5, r5, #12
 80037d4:	0b2d      	lsrs	r5, r5, #12
 80037d6:	e003      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037d8:	2400      	movs	r4, #0
 80037da:	2300      	movs	r3, #0
 80037dc:	2500      	movs	r5, #0
 80037de:	2600      	movs	r6, #0
 80037e0:	051b      	lsls	r3, r3, #20
 80037e2:	432b      	orrs	r3, r5
 80037e4:	07e4      	lsls	r4, r4, #31
 80037e6:	4323      	orrs	r3, r4
 80037e8:	0030      	movs	r0, r6
 80037ea:	0019      	movs	r1, r3
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	380b      	subs	r0, #11
 80037f0:	4085      	lsls	r5, r0
 80037f2:	032d      	lsls	r5, r5, #12
 80037f4:	2600      	movs	r6, #0
 80037f6:	0b2d      	lsrs	r5, r5, #12
 80037f8:	e7f2      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	0000041e 	.word	0x0000041e

08003800 <__aeabi_cdrcmple>:
 8003800:	4684      	mov	ip, r0
 8003802:	0010      	movs	r0, r2
 8003804:	4662      	mov	r2, ip
 8003806:	468c      	mov	ip, r1
 8003808:	0019      	movs	r1, r3
 800380a:	4663      	mov	r3, ip
 800380c:	e000      	b.n	8003810 <__aeabi_cdcmpeq>
 800380e:	46c0      	nop			@ (mov r8, r8)

08003810 <__aeabi_cdcmpeq>:
 8003810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003812:	f000 f909 	bl	8003a28 <__ledf2>
 8003816:	2800      	cmp	r0, #0
 8003818:	d401      	bmi.n	800381e <__aeabi_cdcmpeq+0xe>
 800381a:	2100      	movs	r1, #0
 800381c:	42c8      	cmn	r0, r1
 800381e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003820 <__aeabi_dcmpeq>:
 8003820:	b510      	push	{r4, lr}
 8003822:	f000 f849 	bl	80038b8 <__eqdf2>
 8003826:	4240      	negs	r0, r0
 8003828:	3001      	adds	r0, #1
 800382a:	bd10      	pop	{r4, pc}

0800382c <__aeabi_dcmplt>:
 800382c:	b510      	push	{r4, lr}
 800382e:	f000 f8fb 	bl	8003a28 <__ledf2>
 8003832:	2800      	cmp	r0, #0
 8003834:	db01      	blt.n	800383a <__aeabi_dcmplt+0xe>
 8003836:	2000      	movs	r0, #0
 8003838:	bd10      	pop	{r4, pc}
 800383a:	2001      	movs	r0, #1
 800383c:	bd10      	pop	{r4, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)

08003840 <__aeabi_dcmple>:
 8003840:	b510      	push	{r4, lr}
 8003842:	f000 f8f1 	bl	8003a28 <__ledf2>
 8003846:	2800      	cmp	r0, #0
 8003848:	dd01      	ble.n	800384e <__aeabi_dcmple+0xe>
 800384a:	2000      	movs	r0, #0
 800384c:	bd10      	pop	{r4, pc}
 800384e:	2001      	movs	r0, #1
 8003850:	bd10      	pop	{r4, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)

08003854 <__aeabi_dcmpgt>:
 8003854:	b510      	push	{r4, lr}
 8003856:	f000 f873 	bl	8003940 <__gedf2>
 800385a:	2800      	cmp	r0, #0
 800385c:	dc01      	bgt.n	8003862 <__aeabi_dcmpgt+0xe>
 800385e:	2000      	movs	r0, #0
 8003860:	bd10      	pop	{r4, pc}
 8003862:	2001      	movs	r0, #1
 8003864:	bd10      	pop	{r4, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)

08003868 <__aeabi_dcmpge>:
 8003868:	b510      	push	{r4, lr}
 800386a:	f000 f869 	bl	8003940 <__gedf2>
 800386e:	2800      	cmp	r0, #0
 8003870:	da01      	bge.n	8003876 <__aeabi_dcmpge+0xe>
 8003872:	2000      	movs	r0, #0
 8003874:	bd10      	pop	{r4, pc}
 8003876:	2001      	movs	r0, #1
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)

0800387c <__clzsi2>:
 800387c:	211c      	movs	r1, #28
 800387e:	2301      	movs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4298      	cmp	r0, r3
 8003884:	d301      	bcc.n	800388a <__clzsi2+0xe>
 8003886:	0c00      	lsrs	r0, r0, #16
 8003888:	3910      	subs	r1, #16
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	4298      	cmp	r0, r3
 800388e:	d301      	bcc.n	8003894 <__clzsi2+0x18>
 8003890:	0a00      	lsrs	r0, r0, #8
 8003892:	3908      	subs	r1, #8
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	4298      	cmp	r0, r3
 8003898:	d301      	bcc.n	800389e <__clzsi2+0x22>
 800389a:	0900      	lsrs	r0, r0, #4
 800389c:	3904      	subs	r1, #4
 800389e:	a202      	add	r2, pc, #8	@ (adr r2, 80038a8 <__clzsi2+0x2c>)
 80038a0:	5c10      	ldrb	r0, [r2, r0]
 80038a2:	1840      	adds	r0, r0, r1
 80038a4:	4770      	bx	lr
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	02020304 	.word	0x02020304
 80038ac:	01010101 	.word	0x01010101
	...

080038b8 <__eqdf2>:
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	4657      	mov	r7, sl
 80038bc:	46de      	mov	lr, fp
 80038be:	464e      	mov	r6, r9
 80038c0:	4645      	mov	r5, r8
 80038c2:	b5e0      	push	{r5, r6, r7, lr}
 80038c4:	000d      	movs	r5, r1
 80038c6:	0004      	movs	r4, r0
 80038c8:	0fe8      	lsrs	r0, r5, #31
 80038ca:	4683      	mov	fp, r0
 80038cc:	0309      	lsls	r1, r1, #12
 80038ce:	0fd8      	lsrs	r0, r3, #31
 80038d0:	0b09      	lsrs	r1, r1, #12
 80038d2:	4682      	mov	sl, r0
 80038d4:	4819      	ldr	r0, [pc, #100]	@ (800393c <__eqdf2+0x84>)
 80038d6:	468c      	mov	ip, r1
 80038d8:	031f      	lsls	r7, r3, #12
 80038da:	0069      	lsls	r1, r5, #1
 80038dc:	005e      	lsls	r6, r3, #1
 80038de:	0d49      	lsrs	r1, r1, #21
 80038e0:	0b3f      	lsrs	r7, r7, #12
 80038e2:	0d76      	lsrs	r6, r6, #21
 80038e4:	4281      	cmp	r1, r0
 80038e6:	d018      	beq.n	800391a <__eqdf2+0x62>
 80038e8:	4286      	cmp	r6, r0
 80038ea:	d00f      	beq.n	800390c <__eqdf2+0x54>
 80038ec:	2001      	movs	r0, #1
 80038ee:	42b1      	cmp	r1, r6
 80038f0:	d10d      	bne.n	800390e <__eqdf2+0x56>
 80038f2:	45bc      	cmp	ip, r7
 80038f4:	d10b      	bne.n	800390e <__eqdf2+0x56>
 80038f6:	4294      	cmp	r4, r2
 80038f8:	d109      	bne.n	800390e <__eqdf2+0x56>
 80038fa:	45d3      	cmp	fp, sl
 80038fc:	d01c      	beq.n	8003938 <__eqdf2+0x80>
 80038fe:	2900      	cmp	r1, #0
 8003900:	d105      	bne.n	800390e <__eqdf2+0x56>
 8003902:	4660      	mov	r0, ip
 8003904:	4320      	orrs	r0, r4
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	4198      	sbcs	r0, r3
 800390a:	e000      	b.n	800390e <__eqdf2+0x56>
 800390c:	2001      	movs	r0, #1
 800390e:	bcf0      	pop	{r4, r5, r6, r7}
 8003910:	46bb      	mov	fp, r7
 8003912:	46b2      	mov	sl, r6
 8003914:	46a9      	mov	r9, r5
 8003916:	46a0      	mov	r8, r4
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	2001      	movs	r0, #1
 800391c:	428e      	cmp	r6, r1
 800391e:	d1f6      	bne.n	800390e <__eqdf2+0x56>
 8003920:	4661      	mov	r1, ip
 8003922:	4339      	orrs	r1, r7
 8003924:	000f      	movs	r7, r1
 8003926:	4317      	orrs	r7, r2
 8003928:	4327      	orrs	r7, r4
 800392a:	d1f0      	bne.n	800390e <__eqdf2+0x56>
 800392c:	465b      	mov	r3, fp
 800392e:	4652      	mov	r2, sl
 8003930:	1a98      	subs	r0, r3, r2
 8003932:	1e43      	subs	r3, r0, #1
 8003934:	4198      	sbcs	r0, r3
 8003936:	e7ea      	b.n	800390e <__eqdf2+0x56>
 8003938:	2000      	movs	r0, #0
 800393a:	e7e8      	b.n	800390e <__eqdf2+0x56>
 800393c:	000007ff 	.word	0x000007ff

08003940 <__gedf2>:
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	4657      	mov	r7, sl
 8003944:	464e      	mov	r6, r9
 8003946:	4645      	mov	r5, r8
 8003948:	46de      	mov	lr, fp
 800394a:	b5e0      	push	{r5, r6, r7, lr}
 800394c:	000d      	movs	r5, r1
 800394e:	030f      	lsls	r7, r1, #12
 8003950:	0b39      	lsrs	r1, r7, #12
 8003952:	b083      	sub	sp, #12
 8003954:	0004      	movs	r4, r0
 8003956:	4680      	mov	r8, r0
 8003958:	9101      	str	r1, [sp, #4]
 800395a:	0058      	lsls	r0, r3, #1
 800395c:	0fe9      	lsrs	r1, r5, #31
 800395e:	4f31      	ldr	r7, [pc, #196]	@ (8003a24 <__gedf2+0xe4>)
 8003960:	0d40      	lsrs	r0, r0, #21
 8003962:	468c      	mov	ip, r1
 8003964:	006e      	lsls	r6, r5, #1
 8003966:	0319      	lsls	r1, r3, #12
 8003968:	4682      	mov	sl, r0
 800396a:	4691      	mov	r9, r2
 800396c:	0d76      	lsrs	r6, r6, #21
 800396e:	0b09      	lsrs	r1, r1, #12
 8003970:	0fd8      	lsrs	r0, r3, #31
 8003972:	42be      	cmp	r6, r7
 8003974:	d01f      	beq.n	80039b6 <__gedf2+0x76>
 8003976:	45ba      	cmp	sl, r7
 8003978:	d00f      	beq.n	800399a <__gedf2+0x5a>
 800397a:	2e00      	cmp	r6, #0
 800397c:	d12f      	bne.n	80039de <__gedf2+0x9e>
 800397e:	4655      	mov	r5, sl
 8003980:	9e01      	ldr	r6, [sp, #4]
 8003982:	4334      	orrs	r4, r6
 8003984:	2d00      	cmp	r5, #0
 8003986:	d127      	bne.n	80039d8 <__gedf2+0x98>
 8003988:	430a      	orrs	r2, r1
 800398a:	d03a      	beq.n	8003a02 <__gedf2+0xc2>
 800398c:	2c00      	cmp	r4, #0
 800398e:	d145      	bne.n	8003a1c <__gedf2+0xdc>
 8003990:	2800      	cmp	r0, #0
 8003992:	d11a      	bne.n	80039ca <__gedf2+0x8a>
 8003994:	2001      	movs	r0, #1
 8003996:	4240      	negs	r0, r0
 8003998:	e017      	b.n	80039ca <__gedf2+0x8a>
 800399a:	4311      	orrs	r1, r2
 800399c:	d13b      	bne.n	8003a16 <__gedf2+0xd6>
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d102      	bne.n	80039a8 <__gedf2+0x68>
 80039a2:	9f01      	ldr	r7, [sp, #4]
 80039a4:	4327      	orrs	r7, r4
 80039a6:	d0f3      	beq.n	8003990 <__gedf2+0x50>
 80039a8:	4584      	cmp	ip, r0
 80039aa:	d109      	bne.n	80039c0 <__gedf2+0x80>
 80039ac:	4663      	mov	r3, ip
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <__gedf2+0x54>
 80039b2:	4660      	mov	r0, ip
 80039b4:	e009      	b.n	80039ca <__gedf2+0x8a>
 80039b6:	9f01      	ldr	r7, [sp, #4]
 80039b8:	4327      	orrs	r7, r4
 80039ba:	d12c      	bne.n	8003a16 <__gedf2+0xd6>
 80039bc:	45b2      	cmp	sl, r6
 80039be:	d024      	beq.n	8003a0a <__gedf2+0xca>
 80039c0:	4663      	mov	r3, ip
 80039c2:	2002      	movs	r0, #2
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4018      	ands	r0, r3
 80039c8:	3801      	subs	r0, #1
 80039ca:	b003      	add	sp, #12
 80039cc:	bcf0      	pop	{r4, r5, r6, r7}
 80039ce:	46bb      	mov	fp, r7
 80039d0:	46b2      	mov	sl, r6
 80039d2:	46a9      	mov	r9, r5
 80039d4:	46a0      	mov	r8, r4
 80039d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d0d9      	beq.n	8003990 <__gedf2+0x50>
 80039dc:	e7e4      	b.n	80039a8 <__gedf2+0x68>
 80039de:	4654      	mov	r4, sl
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	d0ed      	beq.n	80039c0 <__gedf2+0x80>
 80039e4:	4584      	cmp	ip, r0
 80039e6:	d1eb      	bne.n	80039c0 <__gedf2+0x80>
 80039e8:	4556      	cmp	r6, sl
 80039ea:	dce9      	bgt.n	80039c0 <__gedf2+0x80>
 80039ec:	dbde      	blt.n	80039ac <__gedf2+0x6c>
 80039ee:	9b01      	ldr	r3, [sp, #4]
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d8e5      	bhi.n	80039c0 <__gedf2+0x80>
 80039f4:	d1da      	bne.n	80039ac <__gedf2+0x6c>
 80039f6:	45c8      	cmp	r8, r9
 80039f8:	d8e2      	bhi.n	80039c0 <__gedf2+0x80>
 80039fa:	2000      	movs	r0, #0
 80039fc:	45c8      	cmp	r8, r9
 80039fe:	d2e4      	bcs.n	80039ca <__gedf2+0x8a>
 8003a00:	e7d4      	b.n	80039ac <__gedf2+0x6c>
 8003a02:	2000      	movs	r0, #0
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d0e0      	beq.n	80039ca <__gedf2+0x8a>
 8003a08:	e7da      	b.n	80039c0 <__gedf2+0x80>
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	d103      	bne.n	8003a16 <__gedf2+0xd6>
 8003a0e:	4584      	cmp	ip, r0
 8003a10:	d1d6      	bne.n	80039c0 <__gedf2+0x80>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e7d9      	b.n	80039ca <__gedf2+0x8a>
 8003a16:	2002      	movs	r0, #2
 8003a18:	4240      	negs	r0, r0
 8003a1a:	e7d6      	b.n	80039ca <__gedf2+0x8a>
 8003a1c:	4584      	cmp	ip, r0
 8003a1e:	d0e6      	beq.n	80039ee <__gedf2+0xae>
 8003a20:	e7ce      	b.n	80039c0 <__gedf2+0x80>
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	000007ff 	.word	0x000007ff

08003a28 <__ledf2>:
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	4657      	mov	r7, sl
 8003a2c:	464e      	mov	r6, r9
 8003a2e:	4645      	mov	r5, r8
 8003a30:	46de      	mov	lr, fp
 8003a32:	b5e0      	push	{r5, r6, r7, lr}
 8003a34:	000d      	movs	r5, r1
 8003a36:	030f      	lsls	r7, r1, #12
 8003a38:	0004      	movs	r4, r0
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	0fe8      	lsrs	r0, r5, #31
 8003a3e:	0b39      	lsrs	r1, r7, #12
 8003a40:	4684      	mov	ip, r0
 8003a42:	b083      	sub	sp, #12
 8003a44:	0058      	lsls	r0, r3, #1
 8003a46:	4f30      	ldr	r7, [pc, #192]	@ (8003b08 <__ledf2+0xe0>)
 8003a48:	0d40      	lsrs	r0, r0, #21
 8003a4a:	9101      	str	r1, [sp, #4]
 8003a4c:	031e      	lsls	r6, r3, #12
 8003a4e:	0069      	lsls	r1, r5, #1
 8003a50:	4682      	mov	sl, r0
 8003a52:	4691      	mov	r9, r2
 8003a54:	0d49      	lsrs	r1, r1, #21
 8003a56:	0b36      	lsrs	r6, r6, #12
 8003a58:	0fd8      	lsrs	r0, r3, #31
 8003a5a:	42b9      	cmp	r1, r7
 8003a5c:	d020      	beq.n	8003aa0 <__ledf2+0x78>
 8003a5e:	45ba      	cmp	sl, r7
 8003a60:	d00f      	beq.n	8003a82 <__ledf2+0x5a>
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d12b      	bne.n	8003abe <__ledf2+0x96>
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	430c      	orrs	r4, r1
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d137      	bne.n	8003ae0 <__ledf2+0xb8>
 8003a70:	4332      	orrs	r2, r6
 8003a72:	d038      	beq.n	8003ae6 <__ledf2+0xbe>
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d144      	bne.n	8003b02 <__ledf2+0xda>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d119      	bne.n	8003ab0 <__ledf2+0x88>
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	4240      	negs	r0, r0
 8003a80:	e016      	b.n	8003ab0 <__ledf2+0x88>
 8003a82:	4316      	orrs	r6, r2
 8003a84:	d113      	bne.n	8003aae <__ledf2+0x86>
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d102      	bne.n	8003a90 <__ledf2+0x68>
 8003a8a:	9f01      	ldr	r7, [sp, #4]
 8003a8c:	4327      	orrs	r7, r4
 8003a8e:	d0f3      	beq.n	8003a78 <__ledf2+0x50>
 8003a90:	4584      	cmp	ip, r0
 8003a92:	d020      	beq.n	8003ad6 <__ledf2+0xae>
 8003a94:	4663      	mov	r3, ip
 8003a96:	2002      	movs	r0, #2
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4018      	ands	r0, r3
 8003a9c:	3801      	subs	r0, #1
 8003a9e:	e007      	b.n	8003ab0 <__ledf2+0x88>
 8003aa0:	9f01      	ldr	r7, [sp, #4]
 8003aa2:	4327      	orrs	r7, r4
 8003aa4:	d103      	bne.n	8003aae <__ledf2+0x86>
 8003aa6:	458a      	cmp	sl, r1
 8003aa8:	d1f4      	bne.n	8003a94 <__ledf2+0x6c>
 8003aaa:	4316      	orrs	r6, r2
 8003aac:	d01f      	beq.n	8003aee <__ledf2+0xc6>
 8003aae:	2002      	movs	r0, #2
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ab4:	46bb      	mov	fp, r7
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	46a9      	mov	r9, r5
 8003aba:	46a0      	mov	r8, r4
 8003abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003abe:	4654      	mov	r4, sl
 8003ac0:	2c00      	cmp	r4, #0
 8003ac2:	d0e7      	beq.n	8003a94 <__ledf2+0x6c>
 8003ac4:	4584      	cmp	ip, r0
 8003ac6:	d1e5      	bne.n	8003a94 <__ledf2+0x6c>
 8003ac8:	4551      	cmp	r1, sl
 8003aca:	dce3      	bgt.n	8003a94 <__ledf2+0x6c>
 8003acc:	db03      	blt.n	8003ad6 <__ledf2+0xae>
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	42b3      	cmp	r3, r6
 8003ad2:	d8df      	bhi.n	8003a94 <__ledf2+0x6c>
 8003ad4:	d00f      	beq.n	8003af6 <__ledf2+0xce>
 8003ad6:	4663      	mov	r3, ip
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0cf      	beq.n	8003a7c <__ledf2+0x54>
 8003adc:	4660      	mov	r0, ip
 8003ade:	e7e7      	b.n	8003ab0 <__ledf2+0x88>
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d0c9      	beq.n	8003a78 <__ledf2+0x50>
 8003ae4:	e7d4      	b.n	8003a90 <__ledf2+0x68>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d0e1      	beq.n	8003ab0 <__ledf2+0x88>
 8003aec:	e7d2      	b.n	8003a94 <__ledf2+0x6c>
 8003aee:	4584      	cmp	ip, r0
 8003af0:	d1d0      	bne.n	8003a94 <__ledf2+0x6c>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e7dc      	b.n	8003ab0 <__ledf2+0x88>
 8003af6:	45c8      	cmp	r8, r9
 8003af8:	d8cc      	bhi.n	8003a94 <__ledf2+0x6c>
 8003afa:	2000      	movs	r0, #0
 8003afc:	45c8      	cmp	r8, r9
 8003afe:	d2d7      	bcs.n	8003ab0 <__ledf2+0x88>
 8003b00:	e7e9      	b.n	8003ad6 <__ledf2+0xae>
 8003b02:	4584      	cmp	ip, r0
 8003b04:	d0e3      	beq.n	8003ace <__ledf2+0xa6>
 8003b06:	e7c5      	b.n	8003a94 <__ledf2+0x6c>
 8003b08:	000007ff 	.word	0x000007ff

08003b0c <map12_to8>:
 *       to an 8-bit range (0 to 255).
 *
 * @param input The 12-bit ADC value (0 to 4095).
 * @retval The corresponding 8-bit value (0 to 255).
 */
uint8_t map12_to8(uint16_t input) {
 8003b0c:	b510      	push	{r4, lr}
    return (uint8_t)((input * 255) / 4095); // Map 12-bit value to 8-bit value
 8003b0e:	0203      	lsls	r3, r0, #8
 8003b10:	1a18      	subs	r0, r3, r0
 8003b12:	4902      	ldr	r1, [pc, #8]	@ (8003b1c <map12_to8+0x10>)
 8003b14:	f7fe fb82 	bl	800221c <__divsi3>
 8003b18:	b2c0      	uxtb	r0, r0
}
 8003b1a:	bd10      	pop	{r4, pc}
 8003b1c:	00000fff 	.word	0x00000fff

08003b20 <adc_get_value>:
 *       clockwise status.
 *
 * @param None
 * @retval None
 */
static void adc_get_value(void) {
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t adc_convert_success_nums = 0; ///< Counter for successful ADC conversions
    uint32_t adc_sum = 0;                  ///< Sum of successful ADC readings

    for (uint8_t i = 0; i < 10; i++) {
 8003b22:	2400      	movs	r4, #0
    uint32_t adc_sum = 0;                  ///< Sum of successful ADC readings
 8003b24:	2700      	movs	r7, #0
    uint8_t adc_convert_success_nums = 0; ///< Counter for successful ADC conversions
 8003b26:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 10; i++) {
 8003b28:	e004      	b.n	8003b34 <adc_get_value+0x14>
            if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)) {
                adc_sum += HAL_ADC_GetValue(&hadc1); // Accumulate ADC value
                adc_convert_success_nums++;          // Increment success counter
            }
        }
        HAL_ADC_Stop(&hadc1); // Stop ADC conversion
 8003b2a:	481e      	ldr	r0, [pc, #120]	@ (8003ba4 <adc_get_value+0x84>)
 8003b2c:	f002 fac4 	bl	80060b8 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < 10; i++) {
 8003b30:	3401      	adds	r4, #1
 8003b32:	b2e4      	uxtb	r4, r4
 8003b34:	2c09      	cmp	r4, #9
 8003b36:	d818      	bhi.n	8003b6a <adc_get_value+0x4a>
        HAL_ADCEx_Calibration_Start(&hadc1); // Start ADC calibration
 8003b38:	4d1a      	ldr	r5, [pc, #104]	@ (8003ba4 <adc_get_value+0x84>)
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	f002 fade 	bl	80060fc <HAL_ADCEx_Calibration_Start>
        HAL_ADC_Start(&hadc1);                // Start ADC conversion
 8003b40:	0028      	movs	r0, r5
 8003b42:	f002 fa3b 	bl	8005fbc <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 8003b46:	2101      	movs	r1, #1
 8003b48:	0028      	movs	r0, r5
 8003b4a:	f001 ffeb 	bl	8005b24 <HAL_ADC_PollForConversion>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d1eb      	bne.n	8003b2a <adc_get_value+0xa>
            if (HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)) {
 8003b52:	4814      	ldr	r0, [pc, #80]	@ (8003ba4 <adc_get_value+0x84>)
 8003b54:	f002 f99a 	bl	8005e8c <HAL_ADC_GetState>
 8003b58:	0580      	lsls	r0, r0, #22
 8003b5a:	d5e6      	bpl.n	8003b2a <adc_get_value+0xa>
                adc_sum += HAL_ADC_GetValue(&hadc1); // Accumulate ADC value
 8003b5c:	4811      	ldr	r0, [pc, #68]	@ (8003ba4 <adc_get_value+0x84>)
 8003b5e:	f002 f841 	bl	8005be4 <HAL_ADC_GetValue>
 8003b62:	183f      	adds	r7, r7, r0
                adc_convert_success_nums++;          // Increment success counter
 8003b64:	3601      	adds	r6, #1
 8003b66:	b2f6      	uxtb	r6, r6
 8003b68:	e7df      	b.n	8003b2a <adc_get_value+0xa>
    }

    // Calculate the average ADC value and map to 8-bit based on clockwise status
    s_angle_adc_12value = adc_sum / adc_convert_success_nums; // Average value
 8003b6a:	0031      	movs	r1, r6
 8003b6c:	0038      	movs	r0, r7
 8003b6e:	f7fe facb 	bl	8002108 <__udivsi3>
 8003b72:	b284      	uxth	r4, r0
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <adc_get_value+0x88>)
 8003b76:	801c      	strh	r4, [r3, #0]
    s_angle_adc_8value = (g_clockwise_status == CHAIN_ANGLE_CLOCKWISE_DEC)
 8003b78:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <adc_get_value+0x8c>)
 8003b7a:	781d      	ldrb	r5, [r3, #0]
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	d10b      	bne.n	8003b98 <adc_get_value+0x78>
                         ? map12_to8(s_angle_adc_12value)
 8003b80:	0020      	movs	r0, r4
 8003b82:	f7ff ffc3 	bl	8003b0c <map12_to8>
    s_angle_adc_8value = (g_clockwise_status == CHAIN_ANGLE_CLOCKWISE_DEC)
 8003b86:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <adc_get_value+0x90>)
 8003b88:	7018      	strb	r0, [r3, #0]
                         : (255 - map12_to8(s_angle_adc_12value));

    if (g_clockwise_status != CHAIN_ANGLE_CLOCKWISE_DEC) {
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	d003      	beq.n	8003b96 <adc_get_value+0x76>
        s_angle_adc_12value = 4095 - s_angle_adc_12value; // Invert 12-bit value for counter-clockwise
 8003b8e:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <adc_get_value+0x94>)
 8003b90:	1b1b      	subs	r3, r3, r4
 8003b92:	4a05      	ldr	r2, [pc, #20]	@ (8003ba8 <adc_get_value+0x88>)
 8003b94:	8013      	strh	r3, [r2, #0]
    }
}
 8003b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                         : (255 - map12_to8(s_angle_adc_12value));
 8003b98:	0020      	movs	r0, r4
 8003b9a:	f7ff ffb7 	bl	8003b0c <map12_to8>
    s_angle_adc_8value = (g_clockwise_status == CHAIN_ANGLE_CLOCKWISE_DEC)
 8003b9e:	43c0      	mvns	r0, r0
 8003ba0:	b2c0      	uxtb	r0, r0
 8003ba2:	e7f0      	b.n	8003b86 <adc_get_value+0x66>
 8003ba4:	20000294 	.word	0x20000294
 8003ba8:	20000142 	.word	0x20000142
 8003bac:	200002f8 	.word	0x200002f8
 8003bb0:	20000141 	.word	0x20000141
 8003bb4:	00000fff 	.word	0x00000fff

08003bb8 <chain_angle_get_12value>:
 * @note This function retrieves the ADC value and sends it back through a chain command.
 *
 * @param None
 * @retval None
 */
void chain_angle_get_12value(void) {
 8003bb8:	b510      	push	{r4, lr}
    adc_get_value(); // Fetch the latest ADC values
 8003bba:	f7ff ffb1 	bl	8003b20 <adc_get_value>
    chain_command_complete_return(CHAIN_ANGLE_GET_12ADC, (uint8_t *)&s_angle_adc_12value, 2);
 8003bbe:	4903      	ldr	r1, [pc, #12]	@ (8003bcc <chain_angle_get_12value+0x14>)
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	2030      	movs	r0, #48	@ 0x30
 8003bc4:	f000 f942 	bl	8003e4c <chain_command_complete_return>
}
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	20000142 	.word	0x20000142

08003bd0 <chain_angle_get_8value>:
 * @note This function retrieves the ADC value and sends it back through a chain command.
 *
 * @param None
 * @retval None
 */
void chain_angle_get_8value(void) {
 8003bd0:	b510      	push	{r4, lr}
    adc_get_value(); // Fetch the latest ADC values
 8003bd2:	f7ff ffa5 	bl	8003b20 <adc_get_value>
    chain_command_complete_return(CHAIN_ANGLE_PGET_8ADC, (uint8_t *)&s_angle_adc_8value, 1);
 8003bd6:	4903      	ldr	r1, [pc, #12]	@ (8003be4 <chain_angle_get_8value+0x14>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2031      	movs	r0, #49	@ 0x31
 8003bdc:	f000 f936 	bl	8003e4c <chain_command_complete_return>
}
 8003be0:	bd10      	pop	{r4, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	20000141 	.word	0x20000141

08003be8 <chain_angle_set_clockwise>:
 * @note This function updates the clockwise status and sends back the result of the operation.
 *
 * @param sta The desired status to set (either CHAIN_ANGLE_CLOCKWISE_DEC or CHAIN_ANGLE_CLOCKWISE_INC).
 * @retval None
 */
void chain_angle_set_clockwise(uint8_t sta) {
 8003be8:	b510      	push	{r4, lr}
    if (sta == CHAIN_ANGLE_CLOCKWISE_DEC || sta == CHAIN_ANGLE_CLOCKWISE_INC) {
 8003bea:	2801      	cmp	r0, #1
 8003bec:	d908      	bls.n	8003c00 <chain_angle_set_clockwise+0x18>
        g_clockwise_status = sta; // Update the global clockwise status
        set_clockwise_status(g_clockwise_status); // Persist status to flash
        s_return_status = 1; // Success
    } else {
        s_return_status = 0; // Failure
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <chain_angle_set_clockwise+0x28>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
    }
    chain_command_complete_return(CHAIN_ANGLE_SET_CLOCKWISE_STATUS, (uint8_t *)&s_return_status, 1);
 8003bf4:	4906      	ldr	r1, [pc, #24]	@ (8003c10 <chain_angle_set_clockwise+0x28>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2033      	movs	r0, #51	@ 0x33
 8003bfa:	f000 f927 	bl	8003e4c <chain_command_complete_return>
}
 8003bfe:	bd10      	pop	{r4, pc}
        g_clockwise_status = sta; // Update the global clockwise status
 8003c00:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <chain_angle_set_clockwise+0x2c>)
 8003c02:	7018      	strb	r0, [r3, #0]
        set_clockwise_status(g_clockwise_status); // Persist status to flash
 8003c04:	f001 fde6 	bl	80057d4 <set_clockwise_status>
        s_return_status = 1; // Success
 8003c08:	4b01      	ldr	r3, [pc, #4]	@ (8003c10 <chain_angle_set_clockwise+0x28>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e7f1      	b.n	8003bf4 <chain_angle_set_clockwise+0xc>
 8003c10:	20000140 	.word	0x20000140
 8003c14:	200002f8 	.word	0x200002f8

08003c18 <chain_angle_get_clockwise>:
 * @note This function retrieves the current clockwise status and sends it back through a chain command.
 *
 * @param None
 * @retval None
 */
void chain_angle_get_clockwise(void) {
 8003c18:	b510      	push	{r4, lr}
    chain_command_complete_return(CHAIN_ANGLE_GET_CLOCKWISE_STATUS, (uint8_t *)&g_clockwise_status, 1);
 8003c1a:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <chain_angle_get_clockwise+0x10>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2032      	movs	r0, #50	@ 0x32
 8003c20:	f000 f914 	bl	8003e4c <chain_command_complete_return>
}
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	200002f8 	.word	0x200002f8

08003c2c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c2c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <__NVIC_SystemReset+0x14>)
 8003c32:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <__NVIC_SystemReset+0x18>)
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c3a:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003c3c:	e7fd      	b.n	8003c3a <__NVIC_SystemReset+0xe>
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	e000ed00 	.word	0xe000ed00
 8003c44:	05fa0004 	.word	0x05fa0004

08003c48 <iap_gpio_init>:
 * 
 * @param  None
 * @retval None
 */
static void iap_gpio_init(void)
{
 8003c48:	b500      	push	{lr}
 8003c4a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	2214      	movs	r2, #20
 8003c4e:	2100      	movs	r1, #0
 8003c50:	a801      	add	r0, sp, #4
 8003c52:	f003 fe37 	bl	80078c4 <memset>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003c56:	4a09      	ldr	r2, [pc, #36]	@ (8003c7c <iap_gpio_init+0x34>)
 8003c58:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4319      	orrs	r1, r3
 8003c5e:	6351      	str	r1, [r2, #52]	@ 0x34
 8003c60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c62:	401a      	ands	r2, r3
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	9a00      	ldr	r2, [sp, #0]

	/* Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003c68:	22c0      	movs	r2, #192	@ 0xc0
 8003c6a:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Configure pull-up resistors
 8003c6c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // Initialize GPIOB with the configuration
 8003c6e:	a901      	add	r1, sp, #4
 8003c70:	4803      	ldr	r0, [pc, #12]	@ (8003c80 <iap_gpio_init+0x38>)
 8003c72:	f002 fcc1 	bl	80065f8 <HAL_GPIO_Init>
}
 8003c76:	b007      	add	sp, #28
 8003c78:	bd00      	pop	{pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	50000400 	.word	0x50000400

08003c84 <add_pack_head>:
{
 8003c84:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_HEAD_HIGH; // Add high byte of header
 8003c86:	4806      	ldr	r0, [pc, #24]	@ (8003ca0 <add_pack_head+0x1c>)
 8003c88:	7803      	ldrb	r3, [r0, #0]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	7002      	strb	r2, [r0, #0]
 8003c90:	4904      	ldr	r1, [pc, #16]	@ (8003ca4 <add_pack_head+0x20>)
 8003c92:	24aa      	movs	r4, #170	@ 0xaa
 8003c94:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_HEAD_LOW;  // Add low byte of header
 8003c96:	3302      	adds	r3, #2
 8003c98:	7003      	strb	r3, [r0, #0]
 8003c9a:	2355      	movs	r3, #85	@ 0x55
 8003c9c:	548b      	strb	r3, [r1, r2]
}
 8003c9e:	bd10      	pop	{r4, pc}
 8003ca0:	20000144 	.word	0x20000144
 8003ca4:	20000148 	.word	0x20000148

08003ca8 <add_pack_end>:
{
 8003ca8:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_END_HIGH; // Add high byte of footer
 8003caa:	4806      	ldr	r0, [pc, #24]	@ (8003cc4 <add_pack_end+0x1c>)
 8003cac:	7803      	ldrb	r3, [r0, #0]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	7002      	strb	r2, [r0, #0]
 8003cb4:	4904      	ldr	r1, [pc, #16]	@ (8003cc8 <add_pack_end+0x20>)
 8003cb6:	2455      	movs	r4, #85	@ 0x55
 8003cb8:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_END_LOW;  // Add low byte of footer
 8003cba:	3302      	adds	r3, #2
 8003cbc:	7003      	strb	r3, [r0, #0]
 8003cbe:	23aa      	movs	r3, #170	@ 0xaa
 8003cc0:	548b      	strb	r3, [r1, r2]
}
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	20000144 	.word	0x20000144
 8003cc8:	20000148 	.word	0x20000148

08003ccc <head_end_check>:
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003ccc:	7803      	ldrb	r3, [r0, #0]
 8003cce:	2baa      	cmp	r3, #170	@ 0xaa
 8003cd0:	d001      	beq.n	8003cd6 <head_end_check+0xa>
    return CHECK_ERROR; // Return error if checks fail
 8003cd2:	2000      	movs	r0, #0
}
 8003cd4:	4770      	bx	lr
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003cd6:	7843      	ldrb	r3, [r0, #1]
 8003cd8:	2b55      	cmp	r3, #85	@ 0x55
 8003cda:	d001      	beq.n	8003ce0 <head_end_check+0x14>
    return CHECK_ERROR; // Return error if checks fail
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e7f9      	b.n	8003cd4 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003ce0:	1843      	adds	r3, r0, r1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	781b      	ldrb	r3, [r3, #0]
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003ce6:	2baa      	cmp	r3, #170	@ 0xaa
 8003ce8:	d001      	beq.n	8003cee <head_end_check+0x22>
    return CHECK_ERROR; // Return error if checks fail
 8003cea:	2000      	movs	r0, #0
 8003cec:	e7f2      	b.n	8003cd4 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003cee:	1840      	adds	r0, r0, r1
 8003cf0:	3802      	subs	r0, #2
 8003cf2:	7803      	ldrb	r3, [r0, #0]
 8003cf4:	2b55      	cmp	r3, #85	@ 0x55
 8003cf6:	d001      	beq.n	8003cfc <head_end_check+0x30>
    return CHECK_ERROR; // Return error if checks fail
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	e7eb      	b.n	8003cd4 <head_end_check+0x8>
        return CHECK_PASS; // Return success if checks pass
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	e7e9      	b.n	8003cd4 <head_end_check+0x8>

08003d00 <crc_check>:
{
 8003d00:	b530      	push	{r4, r5, lr}
    uint8_t crc = buffer[size - 3]; // Extract the CRC from the packet
 8003d02:	3903      	subs	r1, #3
 8003d04:	5c45      	ldrb	r5, [r0, r1]
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003d06:	2200      	movs	r2, #0
    uint8_t temp = 0;
 8003d08:	2100      	movs	r1, #0
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003d0a:	e005      	b.n	8003d18 <crc_check+0x18>
        temp += buffer[i + 4]; // Start after header, offset by 4
 8003d0c:	1883      	adds	r3, r0, r2
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	1859      	adds	r1, r3, r1
 8003d12:	b2c9      	uxtb	r1, r1
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003d14:	3201      	adds	r2, #1
 8003d16:	b292      	uxth	r2, r2
 8003d18:	78c3      	ldrb	r3, [r0, #3]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	7884      	ldrb	r4, [r0, #2]
 8003d1e:	4323      	orrs	r3, r4
 8003d20:	3b01      	subs	r3, #1
 8003d22:	429a      	cmp	r2, r3
 8003d24:	dbf2      	blt.n	8003d0c <crc_check+0xc>
    if (crc == temp)
 8003d26:	42a9      	cmp	r1, r5
 8003d28:	d001      	beq.n	8003d2e <crc_check+0x2e>
    return CHECK_ERROR; // CRC does not match
 8003d2a:	2000      	movs	r0, #0
}
 8003d2c:	bd30      	pop	{r4, r5, pc}
        return CHECK_PASS; // CRC matches
 8003d2e:	2001      	movs	r0, #1
 8003d30:	e7fc      	b.n	8003d2c <crc_check+0x2c>

08003d32 <pack_check>:
{
 8003d32:	b570      	push	{r4, r5, r6, lr}
 8003d34:	0005      	movs	r5, r0
 8003d36:	000c      	movs	r4, r1
    if (size <= 4)
 8003d38:	2904      	cmp	r1, #4
 8003d3a:	d90d      	bls.n	8003d58 <pack_check+0x26>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003d3c:	f7ff ffc6 	bl	8003ccc <head_end_check>
 8003d40:	2801      	cmp	r0, #1
 8003d42:	d001      	beq.n	8003d48 <pack_check+0x16>
    return CHECK_ERROR; // Packet is invalid
 8003d44:	2000      	movs	r0, #0
}
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
        crc_check(buffer, size) == CHECK_PASS)
 8003d48:	0021      	movs	r1, r4
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	f7ff ffd8 	bl	8003d00 <crc_check>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003d50:	2801      	cmp	r0, #1
 8003d52:	d0f8      	beq.n	8003d46 <pack_check+0x14>
    return CHECK_ERROR; // Packet is invalid
 8003d54:	2000      	movs	r0, #0
 8003d56:	e7f6      	b.n	8003d46 <pack_check+0x14>
        return CHECK_ERROR; // Packet is too small
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e7f4      	b.n	8003d46 <pack_check+0x14>

08003d5c <crc_construct>:
{
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	0004      	movs	r4, r0
    for (uint16_t i = 0; i < size; i++)
 8003d60:	2300      	movs	r3, #0
    uint8_t temp = 0;
 8003d62:	2000      	movs	r0, #0
    for (uint16_t i = 0; i < size; i++)
 8003d64:	e004      	b.n	8003d70 <crc_construct+0x14>
        temp += buffer[i];
 8003d66:	5ce2      	ldrb	r2, [r4, r3]
 8003d68:	1810      	adds	r0, r2, r0
 8003d6a:	b2c0      	uxtb	r0, r0
    for (uint16_t i = 0; i < size; i++)
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	428b      	cmp	r3, r1
 8003d72:	d3f8      	bcc.n	8003d66 <crc_construct+0xa>
}
 8003d74:	bd10      	pop	{r4, pc}

08003d76 <uart_in_send>:
{
 8003d76:	b510      	push	{r4, lr}
    usart1_transmit_dma(buffer, size); // Send data using USART1 in DMA mode
 8003d78:	f001 fbe4 	bl	8005544 <usart1_transmit_dma>
}
 8003d7c:	bd10      	pop	{r4, pc}

08003d7e <uart_out_send>:
{
 8003d7e:	b510      	push	{r4, lr}
    usart2_transmit_dma(buffer, size); // Send data using USART2 in DMA mode
 8003d80:	f001 fc28 	bl	80055d4 <usart2_transmit_dma>
}
 8003d84:	bd10      	pop	{r4, pc}
	...

08003d88 <chain_enum_handle>:
{
 8003d88:	b510      	push	{r4, lr}
	buffer[6]++;
 8003d8a:	7983      	ldrb	r3, [r0, #6]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	7183      	strb	r3, [r0, #6]
	buffer[7]++;
 8003d90:	79c3      	ldrb	r3, [r0, #7]
 8003d92:	3301      	adds	r3, #1
 8003d94:	71c3      	strb	r3, [r0, #7]
	if (g_tail_status == CHAIN_TAIL_DEVICE)
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <chain_enum_handle+0x24>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <chain_enum_handle+0x1c>
		uart_out_send(buffer, size); // Forward to the master
 8003d9e:	f7ff ffee 	bl	8003d7e <uart_out_send>
}
 8003da2:	bd10      	pop	{r4, pc}
		uart_in_send(buffer, size); // Forward to the slave
 8003da4:	f7ff ffe7 	bl	8003d76 <uart_in_send>
 8003da8:	e7fb      	b.n	8003da2 <chain_enum_handle+0x1a>
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	200000c3 	.word	0x200000c3

08003db0 <chain_enum_return_handle>:
{
 8003db0:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003db2:	f7ff ffe0 	bl	8003d76 <uart_in_send>
}
 8003db6:	bd10      	pop	{r4, pc}

08003db8 <chain_enum_please_handle>:
{
 8003db8:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003dba:	f7ff ffdc 	bl	8003d76 <uart_in_send>
}
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <chain_heartbeat_in_receive_handle>:
{
 8003dc0:	b510      	push	{r4, lr}
	uart_in_send(g_heartbeat_data_pack_buf, sizeof(g_heartbeat_data_pack_buf)); // Send heartbeat data
 8003dc2:	4802      	ldr	r0, [pc, #8]	@ (8003dcc <chain_heartbeat_in_receive_handle+0xc>)
 8003dc4:	2109      	movs	r1, #9
 8003dc6:	f7ff ffd6 	bl	8003d76 <uart_in_send>
}
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	200000c8 	.word	0x200000c8

08003dd0 <chain_deal_data_packet_handle>:
{
 8003dd0:	b510      	push	{r4, lr}
	if (g_cmd_status == CMD_SPACE_IDLE_STATUS)
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <chain_deal_data_packet_handle+0x44>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d119      	bne.n	8003e10 <chain_deal_data_packet_handle+0x40>
		g_cmd_size = 0;						  // Reset command size
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <chain_deal_data_packet_handle+0x48>)
 8003dde:	2100      	movs	r1, #0
 8003de0:	7019      	strb	r1, [r3, #0]
		g_cmd_status = CMD_SPACE_BUSY_STATUS; // Set command status to busy
 8003de2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <chain_deal_data_packet_handle+0x44>)
 8003de4:	3101      	adds	r1, #1
 8003de6:	7019      	strb	r1, [r3, #0]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003de8:	e00b      	b.n	8003e02 <chain_deal_data_packet_handle+0x32>
			g_cmd_buf[g_cmd_size++] = buffer[i + 5]; // Copy data from the buffer
 8003dea:	490b      	ldr	r1, [pc, #44]	@ (8003e18 <chain_deal_data_packet_handle+0x48>)
 8003dec:	780b      	ldrb	r3, [r1, #0]
 8003dee:	b2dc      	uxtb	r4, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	700b      	strb	r3, [r1, #0]
 8003df6:	1883      	adds	r3, r0, r2
 8003df8:	7959      	ldrb	r1, [r3, #5]
 8003dfa:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <chain_deal_data_packet_handle+0x4c>)
 8003dfc:	5519      	strb	r1, [r3, r4]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003dfe:	3201      	adds	r2, #1
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	78c3      	ldrb	r3, [r0, #3]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	7881      	ldrb	r1, [r0, #2]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	3b02      	subs	r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dbec      	blt.n	8003dea <chain_deal_data_packet_handle+0x1a>
}
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	200002fb 	.word	0x200002fb
 8003e18:	200002fc 	.word	0x200002fc
 8003e1c:	20000300 	.word	0x20000300

08003e20 <chain_out_relay_handle>:
{
 8003e20:	b510      	push	{r4, lr}
	buffer[4]--;				 // Index decrement
 8003e22:	7903      	ldrb	r3, [r0, #4]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]--;			 // CRC update
 8003e28:	1eca      	subs	r2, r1, #3
 8003e2a:	5c83      	ldrb	r3, [r0, r2]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	5483      	strb	r3, [r0, r2]
	uart_out_send(buffer, size); // Forward to the lower level
 8003e30:	f7ff ffa5 	bl	8003d7e <uart_out_send>
}
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <chain_in_relay_handle>:
{
 8003e36:	b510      	push	{r4, lr}
	buffer[4]++;				// Index increment
 8003e38:	7903      	ldrb	r3, [r0, #4]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]++;			// CRC update
 8003e3e:	1eca      	subs	r2, r1, #3
 8003e40:	5c83      	ldrb	r3, [r0, r2]
 8003e42:	3301      	adds	r3, #1
 8003e44:	5483      	strb	r3, [r0, r2]
	uart_in_send(buffer, size); // Forward to the upper level
 8003e46:	f7ff ff96 	bl	8003d76 <uart_in_send>
}
 8003e4a:	bd10      	pop	{r4, pc}

08003e4c <chain_command_complete_return>:
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	46c6      	mov	lr, r8
 8003e50:	b500      	push	{lr}
 8003e52:	4680      	mov	r8, r0
 8003e54:	000f      	movs	r7, r1
 8003e56:	0016      	movs	r6, r2
	s_send_len = 0;
 8003e58:	4c1e      	ldr	r4, [pc, #120]	@ (8003ed4 <chain_command_complete_return+0x88>)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	7023      	strb	r3, [r4, #0]
	uint16_t len = size + 3;
 8003e5e:	1cd5      	adds	r5, r2, #3
 8003e60:	b2ad      	uxth	r5, r5
	add_pack_head();
 8003e62:	f7ff ff0f 	bl	8003c84 <add_pack_head>
	s_send_buf[s_send_len++] = (uint8_t)(len & 0xFF);
 8003e66:	7823      	ldrb	r3, [r4, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	7022      	strb	r2, [r4, #0]
 8003e6e:	491a      	ldr	r1, [pc, #104]	@ (8003ed8 <chain_command_complete_return+0x8c>)
 8003e70:	54cd      	strb	r5, [r1, r3]
	s_send_buf[s_send_len++] = (uint8_t)((len >> 8) & 0xFF);
 8003e72:	1c98      	adds	r0, r3, #2
 8003e74:	b2c0      	uxtb	r0, r0
 8003e76:	7020      	strb	r0, [r4, #0]
 8003e78:	0a2d      	lsrs	r5, r5, #8
 8003e7a:	548d      	strb	r5, [r1, r2]
	s_send_buf[s_send_len++] = DEFAULT_INDEX;
 8003e7c:	1cda      	adds	r2, r3, #3
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	7022      	strb	r2, [r4, #0]
 8003e82:	2501      	movs	r5, #1
 8003e84:	540d      	strb	r5, [r1, r0]
	s_send_buf[s_send_len++] = cmd;
 8003e86:	3304      	adds	r3, #4
 8003e88:	7023      	strb	r3, [r4, #0]
 8003e8a:	4643      	mov	r3, r8
 8003e8c:	548b      	strb	r3, [r1, r2]
	for (uint8_t i = 0; i < size; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e008      	b.n	8003ea4 <chain_command_complete_return+0x58>
		s_send_buf[s_send_len++] = buffer[i]; // Add data from buffer
 8003e92:	4c10      	ldr	r4, [pc, #64]	@ (8003ed4 <chain_command_complete_return+0x88>)
 8003e94:	7820      	ldrb	r0, [r4, #0]
 8003e96:	1c42      	adds	r2, r0, #1
 8003e98:	7022      	strb	r2, [r4, #0]
 8003e9a:	5cfd      	ldrb	r5, [r7, r3]
 8003e9c:	4c0e      	ldr	r4, [pc, #56]	@ (8003ed8 <chain_command_complete_return+0x8c>)
 8003e9e:	5425      	strb	r5, [r4, r0]
	for (uint8_t i = 0; i < size; i++)
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	42b3      	cmp	r3, r6
 8003ea6:	d3f4      	bcc.n	8003e92 <chain_command_complete_return+0x46>
	s_send_buf[s_send_len] = crc_construct((uint8_t *)(s_send_buf + 4),
 8003ea8:	4e0a      	ldr	r6, [pc, #40]	@ (8003ed4 <chain_command_complete_return+0x88>)
 8003eaa:	7835      	ldrb	r5, [r6, #0]
 8003eac:	1f29      	subs	r1, r5, #4
 8003eae:	b289      	uxth	r1, r1
 8003eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003edc <chain_command_complete_return+0x90>)
 8003eb2:	0020      	movs	r0, r4
 8003eb4:	f7ff ff52 	bl	8003d5c <crc_construct>
 8003eb8:	3c04      	subs	r4, #4
 8003eba:	5560      	strb	r0, [r4, r5]
	s_send_len++;
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	7035      	strb	r5, [r6, #0]
	add_pack_end();
 8003ec0:	f7ff fef2 	bl	8003ca8 <add_pack_end>
	uart_in_send(s_send_buf, s_send_len); // Send the complete packet
 8003ec4:	7831      	ldrb	r1, [r6, #0]
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	f7ff ff55 	bl	8003d76 <uart_in_send>
}
 8003ecc:	bc80      	pop	{r7}
 8003ece:	46b8      	mov	r8, r7
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	20000144 	.word	0x20000144
 8003ed8:	20000148 	.word	0x20000148
 8003edc:	2000014c 	.word	0x2000014c

08003ee0 <chain_get_bootloader_version_handle>:
{
 8003ee0:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_BOOTLOADER_VERSION,
 8003ee2:	4903      	ldr	r1, [pc, #12]	@ (8003ef0 <chain_get_bootloader_version_handle+0x10>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	20f9      	movs	r0, #249	@ 0xf9
 8003ee8:	f7ff ffb0 	bl	8003e4c <chain_command_complete_return>
}
 8003eec:	bd10      	pop	{r4, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	200002fa 	.word	0x200002fa

08003ef4 <chain_get_firmware_version_handle>:
{
 8003ef4:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_VERSION_DEVICE,
 8003ef6:	4903      	ldr	r1, [pc, #12]	@ (8003f04 <chain_get_firmware_version_handle+0x10>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	20fa      	movs	r0, #250	@ 0xfa
 8003efc:	f7ff ffa6 	bl	8003e4c <chain_command_complete_return>
}
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	200000c2 	.word	0x200000c2

08003f08 <chain_get_device_type_handle>:
{
 8003f08:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_DEVICE_TYPE,
 8003f0a:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <chain_get_device_type_handle+0x10>)
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	20fb      	movs	r0, #251	@ 0xfb
 8003f10:	f7ff ff9c 	bl	8003e4c <chain_command_complete_return>
}
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	200000c0 	.word	0x200000c0

08003f1c <chain_iap_update_handle>:
 * 
 * @param  data Verification bit
 * @retval None
 */
void chain_iap_update_handle(uint8_t data)
{
 8003f1c:	b530      	push	{r4, r5, lr}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	466b      	mov	r3, sp
 8003f22:	1ddd      	adds	r5, r3, #7
 8003f24:	71d8      	strb	r0, [r3, #7]
	uint32_t reset_wait_start = HAL_GetTick(); // Get the current tick count
 8003f26:	f001 fcc3 	bl	80058b0 <HAL_GetTick>
 8003f2a:	0004      	movs	r4, r0
	if (data == 0x86) // Check for expected data
 8003f2c:	782b      	ldrb	r3, [r5, #0]
 8003f2e:	2b86      	cmp	r3, #134	@ 0x86
 8003f30:	d001      	beq.n	8003f36 <chain_iap_update_handle+0x1a>
		{
			NVIC_SystemReset(); // Reset the microcontroller
		}
		NVIC_SystemReset(); // Reset the microcontroller again
	}
}
 8003f32:	b003      	add	sp, #12
 8003f34:	bd30      	pop	{r4, r5, pc}
		chain_command_complete_return(CHAIN_IAP_UPDATE,
 8003f36:	2201      	movs	r2, #1
 8003f38:	0029      	movs	r1, r5
 8003f3a:	20ff      	movs	r0, #255	@ 0xff
 8003f3c:	f7ff ff86 	bl	8003e4c <chain_command_complete_return>
		HAL_Delay(10); // Delay to ensure packet is sent
 8003f40:	200a      	movs	r0, #10
 8003f42:	f001 fcbb 	bl	80058bc <HAL_Delay>
		LL_USART_DeInit(USART1); // Deinitialize USART1
 8003f46:	4d1a      	ldr	r5, [pc, #104]	@ (8003fb0 <chain_iap_update_handle+0x94>)
 8003f48:	0028      	movs	r0, r5
 8003f4a:	f003 fc3b 	bl	80077c4 <LL_USART_DeInit>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4393      	bics	r3, r2
 8003f54:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f56:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	321f      	adds	r2, #31
 8003f62:	4393      	bics	r3, r2
 8003f64:	602b      	str	r3, [r5, #0]
 8003f66:	f381 8810 	msr	PRIMASK, r1
		iap_gpio_init(); // Initialize GPIO for IAP
 8003f6a:	f7ff fe6d 	bl	8003c48 <iap_gpio_init>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8003f6e:	e006      	b.n	8003f7e <chain_iap_update_handle+0x62>
			if (HAL_GetTick() - reset_wait_start > 1000) // Check timeout
 8003f70:	f001 fc9e 	bl	80058b0 <HAL_GetTick>
 8003f74:	1b00      	subs	r0, r0, r4
 8003f76:	22fa      	movs	r2, #250	@ 0xfa
 8003f78:	0092      	lsls	r2, r2, #2
 8003f7a:	4290      	cmp	r0, r2
 8003f7c:	d80b      	bhi.n	8003f96 <chain_iap_update_handle+0x7a>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8003f7e:	2140      	movs	r1, #64	@ 0x40
 8003f80:	480c      	ldr	r0, [pc, #48]	@ (8003fb4 <chain_iap_update_handle+0x98>)
 8003f82:	f002 fbf3 	bl	800676c <HAL_GPIO_ReadPin>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d1f2      	bne.n	8003f70 <chain_iap_update_handle+0x54>
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	4809      	ldr	r0, [pc, #36]	@ (8003fb4 <chain_iap_update_handle+0x98>)
 8003f8e:	f002 fbed 	bl	800676c <HAL_GPIO_ReadPin>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d1ec      	bne.n	8003f70 <chain_iap_update_handle+0x54>
		if (HAL_GetTick() - reset_wait_start > 1000) // Check if timed out
 8003f96:	f001 fc8b 	bl	80058b0 <HAL_GetTick>
 8003f9a:	1b00      	subs	r0, r0, r4
 8003f9c:	23fa      	movs	r3, #250	@ 0xfa
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	d903      	bls.n	8003fac <chain_iap_update_handle+0x90>
			MX_USART1_UART_Init(); // Reinitialize USART1 if no reset occurred
 8003fa4:	f001 f892 	bl	80050cc <MX_USART1_UART_Init>
		NVIC_SystemReset(); // Reset the microcontroller again
 8003fa8:	f7ff fe40 	bl	8003c2c <__NVIC_SystemReset>
			NVIC_SystemReset(); // Reset the microcontroller
 8003fac:	f7ff fe3e 	bl	8003c2c <__NVIC_SystemReset>
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	50000400 	.word	0x50000400

08003fb8 <activate_tim1_dma>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <activate_tim1_dma+0x54>)
 8003fba:	6853      	ldr	r3, [r2, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	2130      	movs	r1, #48	@ 0x30
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	6053      	str	r3, [r2, #4]
 */
static void activate_tim1_dma(void) {
    // Set the DMA data length for RGB_NUM LEDs, each requiring 24 bits.
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (RGB_NUM + 1) * 24);
    // Set the memory address for the DMA buffer.
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t) s_rgb_buf);
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <activate_tim1_dma+0x58>)
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8003fc8:	60d3      	str	r3, [r2, #12]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <activate_tim1_dma+0x5c>)
 8003fcc:	6093      	str	r3, [r2, #8]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <activate_tim1_dma+0x60>)
 8003fd0:	2180      	movs	r1, #128	@ 0x80
 8003fd2:	0249      	lsls	r1, r1, #9
 8003fd4:	6059      	str	r1, [r3, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	0289      	lsls	r1, r1, #10
 8003fda:	6059      	str	r1, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	2102      	movs	r1, #2
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6013      	str	r3, [r2, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <activate_tim1_dma+0x64>)
 8003fe6:	68d9      	ldr	r1, [r3, #12]
 8003fe8:	2280      	movs	r2, #128	@ 0x80
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	430a      	orrs	r2, r1
 8003fee:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003ff0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	0212      	lsls	r2, r2, #8
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	2108      	movs	r1, #8
 8003ffe:	438a      	bics	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	3907      	subs	r1, #7
 8004006:	430a      	orrs	r2, r1
 8004008:	621a      	str	r2, [r3, #32]
    LL_TIM_EnableAllOutputs(TIM1);
    // Set the TIM1 DMA request trigger to CC.
    LL_TIM_CC_SetDMAReqTrigger(TIM1, LL_TIM_CCDMAREQUEST_CC);
    // Enable TIM1 channel 1.
    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}
 800400a:	4770      	bx	lr
 800400c:	40020058 	.word	0x40020058
 8004010:	20000260 	.word	0x20000260
 8004014:	40012c34 	.word	0x40012c34
 8004018:	40020000 	.word	0x40020000
 800401c:	40012c00 	.word	0x40012c00

08004020 <rgb_setcolor>:
 *
 * @param led_id The index of the LED to be set.
 * @param color The color structure containing RGB values.
 * @retval None
 */
static void rgb_setcolor(uint8_t led_id, RGB_Color_TypeDef color) {
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	46d6      	mov	lr, sl
 8004024:	464f      	mov	r7, r9
 8004026:	4646      	mov	r6, r8
 8004028:	b5c0      	push	{r6, r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	0005      	movs	r5, r0
 800402e:	ac03      	add	r4, sp, #12
 8004030:	9103      	str	r1, [sp, #12]
    // Adjust RGB values based on global light intensity.
    color.R = color.R * (g_light / 100.0);
 8004032:	7823      	ldrb	r3, [r4, #0]
 8004034:	4698      	mov	r8, r3
 8004036:	4b48      	ldr	r3, [pc, #288]	@ (8004158 <rgb_setcolor+0x138>)
 8004038:	469a      	mov	sl, r3
 800403a:	7818      	ldrb	r0, [r3, #0]
 800403c:	b2c0      	uxtb	r0, r0
 800403e:	f7ff fbb1 	bl	80037a4 <__aeabi_i2d>
 8004042:	2200      	movs	r2, #0
 8004044:	4b45      	ldr	r3, [pc, #276]	@ (800415c <rgb_setcolor+0x13c>)
 8004046:	f7fe f9f3 	bl	8002430 <__aeabi_ddiv>
 800404a:	0006      	movs	r6, r0
 800404c:	000f      	movs	r7, r1
 800404e:	4640      	mov	r0, r8
 8004050:	f7ff fba8 	bl	80037a4 <__aeabi_i2d>
 8004054:	0032      	movs	r2, r6
 8004056:	003b      	movs	r3, r7
 8004058:	f7fe fd04 	bl	8002a64 <__aeabi_dmul>
 800405c:	f7fe f9ca 	bl	80023f4 <__aeabi_d2uiz>
 8004060:	b2c7      	uxtb	r7, r0
 8004062:	7027      	strb	r7, [r4, #0]
    color.G = color.G * (g_light / 100.0);
 8004064:	7866      	ldrb	r6, [r4, #1]
 8004066:	4653      	mov	r3, sl
 8004068:	7818      	ldrb	r0, [r3, #0]
 800406a:	b2c0      	uxtb	r0, r0
 800406c:	f7ff fb9a 	bl	80037a4 <__aeabi_i2d>
 8004070:	2200      	movs	r2, #0
 8004072:	4b3a      	ldr	r3, [pc, #232]	@ (800415c <rgb_setcolor+0x13c>)
 8004074:	f7fe f9dc 	bl	8002430 <__aeabi_ddiv>
 8004078:	9000      	str	r0, [sp, #0]
 800407a:	9101      	str	r1, [sp, #4]
 800407c:	0030      	movs	r0, r6
 800407e:	f7ff fb91 	bl	80037a4 <__aeabi_i2d>
 8004082:	9a00      	ldr	r2, [sp, #0]
 8004084:	9b01      	ldr	r3, [sp, #4]
 8004086:	f7fe fced 	bl	8002a64 <__aeabi_dmul>
 800408a:	f7fe f9b3 	bl	80023f4 <__aeabi_d2uiz>
 800408e:	b2c3      	uxtb	r3, r0
 8004090:	4699      	mov	r9, r3
 8004092:	7063      	strb	r3, [r4, #1]
    color.B = color.B * (g_light / 100.0);
 8004094:	78a6      	ldrb	r6, [r4, #2]
 8004096:	4653      	mov	r3, sl
 8004098:	7818      	ldrb	r0, [r3, #0]
 800409a:	b2c0      	uxtb	r0, r0
 800409c:	f7ff fb82 	bl	80037a4 <__aeabi_i2d>
 80040a0:	2200      	movs	r2, #0
 80040a2:	4b2e      	ldr	r3, [pc, #184]	@ (800415c <rgb_setcolor+0x13c>)
 80040a4:	f7fe f9c4 	bl	8002430 <__aeabi_ddiv>
 80040a8:	9000      	str	r0, [sp, #0]
 80040aa:	9101      	str	r1, [sp, #4]
 80040ac:	0030      	movs	r0, r6
 80040ae:	f7ff fb79 	bl	80037a4 <__aeabi_i2d>
 80040b2:	9a00      	ldr	r2, [sp, #0]
 80040b4:	9b01      	ldr	r3, [sp, #4]
 80040b6:	f7fe fcd5 	bl	8002a64 <__aeabi_dmul>
 80040ba:	f7fe f99b 	bl	80023f4 <__aeabi_d2uiz>
 80040be:	b2c0      	uxtb	r0, r0
 80040c0:	70a0      	strb	r0, [r4, #2]

    // Convert the green component to binary and store in the buffer.
    for (uint8_t i = 0; i < 8; i++) {
 80040c2:	2300      	movs	r3, #0
 80040c4:	e008      	b.n	80040d8 <rgb_setcolor+0xb8>
        s_rgb_buf[led_id][i] = ((color.G & (1 << (7 - i))) ? (CODE_1) : CODE_0);
 80040c6:	2619      	movs	r6, #25
 80040c8:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <rgb_setcolor+0x140>)
 80040ca:	0069      	lsls	r1, r5, #1
 80040cc:	1949      	adds	r1, r1, r5
 80040ce:	00c9      	lsls	r1, r1, #3
 80040d0:	1852      	adds	r2, r2, r1
 80040d2:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 0; i < 8; i++) {
 80040d4:	3301      	adds	r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d809      	bhi.n	80040f0 <rgb_setcolor+0xd0>
        s_rgb_buf[led_id][i] = ((color.G & (1 << (7 - i))) ? (CODE_1) : CODE_0);
 80040dc:	001c      	movs	r4, r3
 80040de:	2207      	movs	r2, #7
 80040e0:	1ad2      	subs	r2, r2, r3
 80040e2:	4649      	mov	r1, r9
 80040e4:	4111      	asrs	r1, r2
 80040e6:	000a      	movs	r2, r1
 80040e8:	07d2      	lsls	r2, r2, #31
 80040ea:	d5ec      	bpl.n	80040c6 <rgb_setcolor+0xa6>
 80040ec:	2634      	movs	r6, #52	@ 0x34
 80040ee:	e7eb      	b.n	80040c8 <rgb_setcolor+0xa8>
    }
    // Convert the red component to binary and store in the buffer.
    for (uint8_t i = 8; i < 16; i++) {
 80040f0:	2308      	movs	r3, #8
 80040f2:	e008      	b.n	8004106 <rgb_setcolor+0xe6>
        s_rgb_buf[led_id][i] = ((color.R & (1 << (15 - i))) ? (CODE_1) : CODE_0);
 80040f4:	2619      	movs	r6, #25
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <rgb_setcolor+0x140>)
 80040f8:	0069      	lsls	r1, r5, #1
 80040fa:	1949      	adds	r1, r1, r5
 80040fc:	00c9      	lsls	r1, r1, #3
 80040fe:	1852      	adds	r2, r2, r1
 8004100:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 8; i < 16; i++) {
 8004102:	3301      	adds	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d809      	bhi.n	800411e <rgb_setcolor+0xfe>
        s_rgb_buf[led_id][i] = ((color.R & (1 << (15 - i))) ? (CODE_1) : CODE_0);
 800410a:	001c      	movs	r4, r3
 800410c:	220f      	movs	r2, #15
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	0039      	movs	r1, r7
 8004112:	4111      	asrs	r1, r2
 8004114:	000a      	movs	r2, r1
 8004116:	07d2      	lsls	r2, r2, #31
 8004118:	d5ec      	bpl.n	80040f4 <rgb_setcolor+0xd4>
 800411a:	2634      	movs	r6, #52	@ 0x34
 800411c:	e7eb      	b.n	80040f6 <rgb_setcolor+0xd6>
    }
    // Convert the blue component to binary and store in the buffer.
    for (uint8_t i = 16; i < 24; i++) {
 800411e:	2310      	movs	r3, #16
 8004120:	e008      	b.n	8004134 <rgb_setcolor+0x114>
        s_rgb_buf[led_id][i] = ((color.B & (1 << (23 - i))) ? (CODE_1) : CODE_0);
 8004122:	2619      	movs	r6, #25
 8004124:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <rgb_setcolor+0x140>)
 8004126:	0069      	lsls	r1, r5, #1
 8004128:	1949      	adds	r1, r1, r5
 800412a:	00c9      	lsls	r1, r1, #3
 800412c:	1852      	adds	r2, r2, r1
 800412e:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 16; i < 24; i++) {
 8004130:	3301      	adds	r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b17      	cmp	r3, #23
 8004136:	d809      	bhi.n	800414c <rgb_setcolor+0x12c>
        s_rgb_buf[led_id][i] = ((color.B & (1 << (23 - i))) ? (CODE_1) : CODE_0);
 8004138:	001c      	movs	r4, r3
 800413a:	2217      	movs	r2, #23
 800413c:	1ad2      	subs	r2, r2, r3
 800413e:	0001      	movs	r1, r0
 8004140:	4111      	asrs	r1, r2
 8004142:	000a      	movs	r2, r1
 8004144:	07d2      	lsls	r2, r2, #31
 8004146:	d5ec      	bpl.n	8004122 <rgb_setcolor+0x102>
 8004148:	2634      	movs	r6, #52	@ 0x34
 800414a:	e7eb      	b.n	8004124 <rgb_setcolor+0x104>
    }
}
 800414c:	b004      	add	sp, #16
 800414e:	bce0      	pop	{r5, r6, r7}
 8004150:	46ba      	mov	sl, r7
 8004152:	46b1      	mov	r9, r6
 8004154:	46a8      	mov	r8, r5
 8004156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004158:	200002f9 	.word	0x200002f9
 800415c:	40590000 	.word	0x40590000
 8004160:	20000260 	.word	0x20000260

08004164 <reset_load>:
 * @param None
 * @retval None
 */
static void reset_load(void) {
    // Clear the RGB buffer for the last LED (RGB_NUM) by setting all bits to 0.
    for (uint8_t i = 0; i < 24; i++) {
 8004164:	2300      	movs	r3, #0
 8004166:	e005      	b.n	8004174 <reset_load+0x10>
        s_rgb_buf[RGB_NUM][i] = 0;
 8004168:	4a04      	ldr	r2, [pc, #16]	@ (800417c <reset_load+0x18>)
 800416a:	18d2      	adds	r2, r2, r3
 800416c:	2100      	movs	r1, #0
 800416e:	7611      	strb	r1, [r2, #24]
    for (uint8_t i = 0; i < 24; i++) {
 8004170:	3301      	adds	r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b17      	cmp	r3, #23
 8004176:	d9f7      	bls.n	8004168 <reset_load+0x4>
    }
}
 8004178:	4770      	bx	lr
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	20000260 	.word	0x20000260

08004180 <rgb_send_array>:
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <rgb_send_array+0x20>)
 8004182:	6853      	ldr	r3, [r2, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	2130      	movs	r1, #48	@ 0x30
 800418a:	430b      	orrs	r3, r1
 800418c:	6053      	str	r3, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	392f      	subs	r1, #47	@ 0x2f
 8004192:	430b      	orrs	r3, r1
 8004194:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004196:	4a03      	ldr	r2, [pc, #12]	@ (80041a4 <rgb_send_array+0x24>)
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	430b      	orrs	r3, r1
 800419c:	6013      	str	r3, [r2, #0]
    // Enable the DMA channel for transferring the RGB data
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);

    // Start the timer to enable sending data to the RGB LEDs
    LL_TIM_EnableCounter(TIM1);
}
 800419e:	4770      	bx	lr
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <turn_off_all_handle>:
 *       the load, and sends the updated array to turn off the LEDs.
 *
 * @param None
 * @retval None
 */
static void turn_off_all_handle(void) {
 80041a8:	b510      	push	{r4, lr}
    // Set the first RGB LED color to black (off)
    rgb_setcolor(0, BLACK);
 80041aa:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <turn_off_all_handle+0x18>)
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7ff ff36 	bl	8004020 <rgb_setcolor>

    // Reset the load for the RGB LED control
    reset_load();
 80041b4:	f7ff ffd6 	bl	8004164 <reset_load>

    // Send the updated RGB array to turn off the LEDs
    rgb_send_array();
 80041b8:	f7ff ffe2 	bl	8004180 <rgb_send_array>
}
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	08007998 	.word	0x08007998

080041c4 <rgb_init>:
 *       all RGB LEDs to initialize the system properly.
 *
 * @param None
 * @retval None
 */
void rgb_init(void) {
 80041c4:	b510      	push	{r4, lr}
    // Activate DMA settings for TIM1 to prepare for RGB control
    activate_tim1_dma();
 80041c6:	f7ff fef7 	bl	8003fb8 <activate_tim1_dma>

    // Turn off all RGB LEDs during initialization
    turn_off_all_handle();
 80041ca:	f7ff ffed 	bl	80041a8 <turn_off_all_handle>

    // Delay for a short period to allow for stabilization
    HAL_Delay(1);
 80041ce:	2001      	movs	r0, #1
 80041d0:	f001 fb74 	bl	80058bc <HAL_Delay>
}
 80041d4:	bd10      	pop	{r4, pc}
	...

080041d8 <chain_set_rgb_value>:
 * @brief Set RGB values based on the provided buffer.
 * @param buffer Pointer to an array containing RGB values.
 * @param size The size of the RGB data (should be 3 for R, G, B).
 * @retval None
 */
void chain_set_rgb_value(uint8_t *buffer, uint16_t size) {
 80041d8:	b510      	push	{r4, lr}
    // Check if the provided size is exactly 3 (R, G, B)
    if (size == 3) {
 80041da:	2903      	cmp	r1, #3
 80041dc:	d00b      	beq.n	80041f6 <chain_set_rgb_value+0x1e>
        // Send a command complete response
        chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
                                      s_ret_buf_size);
    } else {
        // Prepare the response buffer indicating failure due to incorrect size
        s_ret_buf_size = 0;
 80041de:	4b13      	ldr	r3, [pc, #76]	@ (800422c <chain_set_rgb_value+0x54>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;
 80041e4:	2101      	movs	r1, #1
 80041e6:	7019      	strb	r1, [r3, #0]
 80041e8:	4911      	ldr	r1, [pc, #68]	@ (8004230 <chain_set_rgb_value+0x58>)
 80041ea:	700a      	strb	r2, [r1, #0]

        // Send a command complete response for failure
        chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 80041ec:	3201      	adds	r2, #1
 80041ee:	2020      	movs	r0, #32
 80041f0:	f7ff fe2c 	bl	8003e4c <chain_command_complete_return>
                                      s_ret_buf_size);
    }
}
 80041f4:	bd10      	pop	{r4, pc}
        color.R = buffer[0];
 80041f6:	7802      	ldrb	r2, [r0, #0]
 80041f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <chain_set_rgb_value+0x5c>)
 80041fa:	701a      	strb	r2, [r3, #0]
        color.G = buffer[1];
 80041fc:	7842      	ldrb	r2, [r0, #1]
 80041fe:	705a      	strb	r2, [r3, #1]
        color.B = buffer[2];
 8004200:	7882      	ldrb	r2, [r0, #2]
 8004202:	709a      	strb	r2, [r3, #2]
        rgb_setcolor(0, color);
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	2000      	movs	r0, #0
 8004208:	f7ff ff0a 	bl	8004020 <rgb_setcolor>
        reset_load();
 800420c:	f7ff ffaa 	bl	8004164 <reset_load>
        rgb_send_array();
 8004210:	f7ff ffb6 	bl	8004180 <rgb_send_array>
        s_ret_buf_size = 0;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <chain_set_rgb_value+0x54>)
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS;
 800421a:	3201      	adds	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	4904      	ldr	r1, [pc, #16]	@ (8004230 <chain_set_rgb_value+0x58>)
 8004220:	700a      	strb	r2, [r1, #0]
        chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 8004222:	2020      	movs	r0, #32
 8004224:	f7ff fe12 	bl	8003e4c <chain_command_complete_return>
 8004228:	e7e4      	b.n	80041f4 <chain_set_rgb_value+0x1c>
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	20000248 	.word	0x20000248
 8004230:	2000024c 	.word	0x2000024c
 8004234:	20000290 	.word	0x20000290

08004238 <chain_get_rgb_value>:
/**
 * @brief  Get the current RGB values
 * @param  None
 * @retval None
 */
void chain_get_rgb_value(void) {
 8004238:	b510      	push	{r4, lr}
    // Clear the size of the return buffer
    s_ret_buf_size = 0;
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <chain_get_rgb_value+0x30>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]

    // Store the current RGB values into the return buffer
    s_ret_buf[s_ret_buf_size++] = color.R;  // Get the red component
 8004240:	3201      	adds	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	4a09      	ldr	r2, [pc, #36]	@ (800426c <chain_get_rgb_value+0x34>)
 8004246:	7810      	ldrb	r0, [r2, #0]
 8004248:	4909      	ldr	r1, [pc, #36]	@ (8004270 <chain_get_rgb_value+0x38>)
 800424a:	7008      	strb	r0, [r1, #0]
    s_ret_buf[s_ret_buf_size++] = color.G;  // Get the green component
 800424c:	2002      	movs	r0, #2
 800424e:	7018      	strb	r0, [r3, #0]
 8004250:	7850      	ldrb	r0, [r2, #1]
 8004252:	7048      	strb	r0, [r1, #1]
    s_ret_buf[s_ret_buf_size++] = color.B;  // Get the blue component
 8004254:	2003      	movs	r0, #3
 8004256:	7018      	strb	r0, [r3, #0]
 8004258:	7893      	ldrb	r3, [r2, #2]
 800425a:	708b      	strb	r3, [r1, #2]

    // Send command complete response with current RGB values
    chain_command_complete_return(CHAIN_GET_RGB_VALUE, s_ret_buf, s_ret_buf_size);
 800425c:	2203      	movs	r2, #3
 800425e:	301e      	adds	r0, #30
 8004260:	f7ff fdf4 	bl	8003e4c <chain_command_complete_return>
}
 8004264:	bd10      	pop	{r4, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	20000248 	.word	0x20000248
 800426c:	20000290 	.word	0x20000290
 8004270:	2000024c 	.word	0x2000024c

08004274 <chain_set_light_value>:
/**
 * @brief  Set the brightness of the RGB light
 * @param  g_light_value New brightness value, range from 0 to 100
 * @retval None
 */
void chain_set_light_value(uint8_t g_light_value) {
 8004274:	b510      	push	{r4, lr}
    // Check if the new brightness value is within the valid range (0-100)
    if (g_light_value <= 100) {
 8004276:	2864      	cmp	r0, #100	@ 0x64
 8004278:	d819      	bhi.n	80042ae <chain_set_light_value+0x3a>
        // Update the global brightness value
        g_light = g_light_value;
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <chain_set_light_value+0x54>)
 800427c:	7018      	strb	r0, [r3, #0]

        // Set the brightness of the RGB light
        set_rgb_light(g_light);
 800427e:	7818      	ldrb	r0, [r3, #0]
 8004280:	b2c0      	uxtb	r0, r0
 8004282:	f001 fa79 	bl	8005778 <set_rgb_light>

        // Set the current color to the first LED
        rgb_setcolor(0, color);
 8004286:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <chain_set_light_value+0x58>)
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	2000      	movs	r0, #0
 800428c:	f7ff fec8 	bl	8004020 <rgb_setcolor>

        // Reset loading status to prepare for sending data
        reset_load();
 8004290:	f7ff ff68 	bl	8004164 <reset_load>

        // Send RGB data
        rgb_send_array();
 8004294:	f7ff ff74 	bl	8004180 <rgb_send_array>

        // Clear the return buffer and mark the operation as successful
        s_ret_buf_size = 0;
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <chain_set_light_value+0x5c>)
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS;
 800429e:	3201      	adds	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	490c      	ldr	r1, [pc, #48]	@ (80042d4 <chain_set_light_value+0x60>)
 80042a4:	700a      	strb	r2, [r1, #0]

        // Send command complete response indicating success
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80042a6:	2022      	movs	r0, #34	@ 0x22
 80042a8:	f7ff fdd0 	bl	8003e4c <chain_command_complete_return>
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;

        // Send command complete response indicating failure
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
    }
}
 80042ac:	bd10      	pop	{r4, pc}
        s_ret_buf_size = 0;
 80042ae:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <chain_set_light_value+0x5c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;
 80042b4:	2101      	movs	r1, #1
 80042b6:	7019      	strb	r1, [r3, #0]
 80042b8:	4906      	ldr	r1, [pc, #24]	@ (80042d4 <chain_set_light_value+0x60>)
 80042ba:	700a      	strb	r2, [r1, #0]
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80042bc:	3201      	adds	r2, #1
 80042be:	2022      	movs	r0, #34	@ 0x22
 80042c0:	f7ff fdc4 	bl	8003e4c <chain_command_complete_return>
}
 80042c4:	e7f2      	b.n	80042ac <chain_set_light_value+0x38>
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	200002f9 	.word	0x200002f9
 80042cc:	20000290 	.word	0x20000290
 80042d0:	20000248 	.word	0x20000248
 80042d4:	2000024c 	.word	0x2000024c

080042d8 <chain_get_light_value>:
/**
 * @brief  Get the current brightness of the RGB light
 * @param  None
 * @retval None
 */
void chain_get_light_value(void) {
 80042d8:	b510      	push	{r4, lr}
    // Clear the size of the return buffer
    s_ret_buf_size = 0;
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <chain_get_light_value+0x1c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]

    // Store the current brightness value into the return buffer
    s_ret_buf[s_ret_buf_size++] = g_light;
 80042e0:	3201      	adds	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <chain_get_light_value+0x20>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4904      	ldr	r1, [pc, #16]	@ (80042fc <chain_get_light_value+0x24>)
 80042ea:	700b      	strb	r3, [r1, #0]

    // Send command complete response with the current brightness value
    chain_command_complete_return(CHAIN_GET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80042ec:	2023      	movs	r0, #35	@ 0x23
 80042ee:	f7ff fdad 	bl	8003e4c <chain_command_complete_return>
}
 80042f2:	bd10      	pop	{r4, pc}
 80042f4:	20000248 	.word	0x20000248
 80042f8:	200002f9 	.word	0x200002f9
 80042fc:	2000024c 	.word	0x2000024c

08004300 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004300:	b500      	push	{lr}
 8004302:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004304:	220c      	movs	r2, #12
 8004306:	2100      	movs	r1, #0
 8004308:	a801      	add	r0, sp, #4
 800430a:	f003 fadb 	bl	80078c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800430e:	4819      	ldr	r0, [pc, #100]	@ (8004374 <MX_ADC1_Init+0x74>)
 8004310:	4b19      	ldr	r3, [pc, #100]	@ (8004378 <MX_ADC1_Init+0x78>)
 8004312:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	05db      	lsls	r3, r3, #23
 8004318:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800431a:	2300      	movs	r3, #0
 800431c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800431e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004320:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004322:	2204      	movs	r2, #4
 8004324:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004326:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004328:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800432a:	3a03      	subs	r2, #3
 800432c:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 800432e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004330:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004332:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004334:	322b      	adds	r2, #43	@ 0x2b
 8004336:	5483      	strb	r3, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004338:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800433a:	3a27      	subs	r2, #39	@ 0x27
 800433c:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 800433e:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004340:	3237      	adds	r2, #55	@ 0x37
 8004342:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004344:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004346:	f001 facb 	bl	80058e0 <HAL_ADC_Init>
 800434a:	2800      	cmp	r0, #0
 800434c:	d10c      	bne.n	8004368 <MX_ADC1_Init+0x68>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <MX_ADC1_Init+0x7c>)
 8004350:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004352:	2300      	movs	r3, #0
 8004354:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004356:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004358:	4806      	ldr	r0, [pc, #24]	@ (8004374 <MX_ADC1_Init+0x74>)
 800435a:	a901      	add	r1, sp, #4
 800435c:	f001 fc46 	bl	8005bec <HAL_ADC_ConfigChannel>
 8004360:	2800      	cmp	r0, #0
 8004362:	d104      	bne.n	800436e <MX_ADC1_Init+0x6e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004364:	b005      	add	sp, #20
 8004366:	bd00      	pop	{pc}
    Error_Handler();
 8004368:	f000 f8f8 	bl	800455c <Error_Handler>
 800436c:	e7ef      	b.n	800434e <MX_ADC1_Init+0x4e>
    Error_Handler();
 800436e:	f000 f8f5 	bl	800455c <Error_Handler>
}
 8004372:	e7f7      	b.n	8004364 <MX_ADC1_Init+0x64>
 8004374:	20000294 	.word	0x20000294
 8004378:	40012400 	.word	0x40012400
 800437c:	20000100 	.word	0x20000100

08004380 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004380:	b510      	push	{r4, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004386:	2214      	movs	r2, #20
 8004388:	2100      	movs	r1, #0
 800438a:	a803      	add	r0, sp, #12
 800438c:	f003 fa9a 	bl	80078c4 <memset>
  if(adcHandle->Instance==ADC1)
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <HAL_ADC_MspInit+0x54>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004398:	b008      	add	sp, #32
 800439a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800439c:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <HAL_ADC_MspInit+0x58>)
 800439e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	0349      	lsls	r1, r1, #13
 80043a4:	430a      	orrs	r2, r1
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80043a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043aa:	400a      	ands	r2, r1
 80043ac:	9201      	str	r2, [sp, #4]
 80043ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043b2:	2202      	movs	r2, #2
 80043b4:	4311      	orrs	r1, r2
 80043b6:	6359      	str	r1, [r3, #52]	@ 0x34
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	401a      	ands	r2, r3
 80043bc:	9202      	str	r2, [sp, #8]
 80043be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043c0:	2301      	movs	r3, #1
 80043c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043c4:	3302      	adds	r3, #2
 80043c6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c8:	a903      	add	r1, sp, #12
 80043ca:	4804      	ldr	r0, [pc, #16]	@ (80043dc <HAL_ADC_MspInit+0x5c>)
 80043cc:	f002 f914 	bl	80065f8 <HAL_GPIO_Init>
}
 80043d0:	e7e2      	b.n	8004398 <HAL_ADC_MspInit+0x18>
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	40012400 	.word	0x40012400
 80043d8:	40021000 	.word	0x40021000
 80043dc:	50000400 	.word	0x50000400

080043e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80043e0:	b500      	push	{lr}
 80043e2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043e4:	4a14      	ldr	r2, [pc, #80]	@ (8004438 <MX_DMA_Init+0x58>)
 80043e6:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80043e8:	2301      	movs	r3, #1
 80043ea:	4319      	orrs	r1, r3
 80043ec:	6391      	str	r1, [r2, #56]	@ 0x38
 80043ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043f0:	4013      	ands	r3, r2
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043f6:	4b11      	ldr	r3, [pc, #68]	@ (800443c <MX_DMA_Init+0x5c>)
 80043f8:	22c2      	movs	r2, #194	@ 0xc2
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	5898      	ldr	r0, [r3, r2]
 80043fe:	4910      	ldr	r1, [pc, #64]	@ (8004440 <MX_DMA_Init+0x60>)
 8004400:	4008      	ands	r0, r1
 8004402:	2180      	movs	r1, #128	@ 0x80
 8004404:	01c9      	lsls	r1, r1, #7
 8004406:	4301      	orrs	r1, r0
 8004408:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	0089      	lsls	r1, r1, #2
 800440e:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004410:	5898      	ldr	r0, [r3, r2]
 8004412:	490c      	ldr	r1, [pc, #48]	@ (8004444 <MX_DMA_Init+0x64>)
 8004414:	4008      	ands	r0, r1
 8004416:	2180      	movs	r1, #128	@ 0x80
 8004418:	03c9      	lsls	r1, r1, #15
 800441a:	4301      	orrs	r1, r0
 800441c:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	32f8      	adds	r2, #248	@ 0xf8
 8004420:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 1, 0);
 8004422:	2200      	movs	r2, #0
 8004424:	2101      	movs	r1, #1
 8004426:	200b      	movs	r0, #11
 8004428:	f001 ff70 	bl	800630c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 800442c:	200b      	movs	r0, #11
 800442e:	f001 ff71 	bl	8006314 <HAL_NVIC_EnableIRQ>

}
 8004432:	b003      	add	sp, #12
 8004434:	bd00      	pop	{pc}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	40021000 	.word	0x40021000
 800443c:	e000e100 	.word	0xe000e100
 8004440:	ffff00ff 	.word	0xffff00ff
 8004444:	ff00ffff 	.word	0xff00ffff

08004448 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8004448:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <MX_GPIO_Init+0x28>)
 800444c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800444e:	2201      	movs	r2, #1
 8004450:	4311      	orrs	r1, r2
 8004452:	6359      	str	r1, [r3, #52]	@ 0x34
 8004454:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004456:	400a      	ands	r2, r1
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800445c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800445e:	2202      	movs	r2, #2
 8004460:	4311      	orrs	r1, r2
 8004462:	6359      	str	r1, [r3, #52]	@ 0x34
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004466:	401a      	ands	r2, r3
 8004468:	9201      	str	r2, [sp, #4]
 800446a:	9b01      	ldr	r3, [sp, #4]

}
 800446c:	b002      	add	sp, #8
 800446e:	4770      	bx	lr
 8004470:	40021000 	.word	0x40021000

08004474 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <MX_IWDG_Init+0x30>)
 8004476:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <MX_IWDG_Init+0x34>)
 8004478:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800447a:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <MX_IWDG_Init+0x38>)
 800447c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800447e:	2202      	movs	r2, #2
 8004480:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8004482:	4a0b      	ldr	r2, [pc, #44]	@ (80044b0 <MX_IWDG_Init+0x3c>)
 8004484:	609a      	str	r2, [r3, #8]
}
 8004486:	e002      	b.n	800448e <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8004488:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_16);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 800448a:	2b01      	cmp	r3, #1
 800448c:	d005      	beq.n	800449a <MX_IWDG_Init+0x26>
 800448e:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <MX_IWDG_Init+0x30>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	075b      	lsls	r3, r3, #29
 8004494:	d1f8      	bne.n	8004488 <MX_IWDG_Init+0x14>
 8004496:	2301      	movs	r3, #1
 8004498:	e7f7      	b.n	800448a <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800449a:	4b02      	ldr	r3, [pc, #8]	@ (80044a4 <MX_IWDG_Init+0x30>)
 800449c:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <MX_IWDG_Init+0x40>)
 800449e:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80044a0:	4770      	bx	lr
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	40003000 	.word	0x40003000
 80044a8:	0000cccc 	.word	0x0000cccc
 80044ac:	00005555 	.word	0x00005555
 80044b0:	00000fff 	.word	0x00000fff
 80044b4:	0000aaaa 	.word	0x0000aaaa

080044b8 <iap_set>:
/**
 * @brief Set the Interrupt Vector Table for the application in SRAM.
 * @param None
 * @retval None
 */
void iap_set(void) {
 80044b8:	b082      	sub	sp, #8
  uint8_t i; // Loop index
  uint32_t *pVecTab =
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	0592      	lsls	r2, r2, #22
      (uint32_t *)(0x20000000); // Pointer to the vector table in SRAM

  // Copy the interrupt vector table from the application address to SRAM
  for (i = 0; i < 48; i++) {
 80044be:	2300      	movs	r3, #0
 80044c0:	e007      	b.n	80044d2 <iap_set+0x1a>
    // Copy each vector entry to the SRAM vector table
    *(pVecTab++) = *(__IO uint32_t *)(APPLICATION_ADDRESS + (i << 2));
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <iap_set+0x40>)
 80044c6:	4684      	mov	ip, r0
 80044c8:	4461      	add	r1, ip
 80044ca:	6809      	ldr	r1, [r1, #0]
 80044cc:	c202      	stmia	r2!, {r1}
  for (i = 0; i < 48; i++) {
 80044ce:	3301      	adds	r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80044d4:	d9f5      	bls.n	80044c2 <iap_set+0xa>
  }

  // Enable the SYSCFG peripheral clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <iap_set+0x44>)
 80044d8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80044da:	2301      	movs	r3, #1
 80044dc:	4319      	orrs	r1, r3
 80044de:	6411      	str	r1, [r2, #64]	@ 0x40
 80044e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044e2:	4013      	ands	r3, r2
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	9b01      	ldr	r3, [sp, #4]

  // Remap the memory to use SRAM for the vector table
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 80044e8:	4a05      	ldr	r2, [pc, #20]	@ (8004500 <iap_set+0x48>)
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	2103      	movs	r1, #3
 80044ee:	430b      	orrs	r3, r1
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	b002      	add	sp, #8
 80044f4:	4770      	bx	lr
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	08002000 	.word	0x08002000
 80044fc:	40021000 	.word	0x40021000
 8004500:	40010000 	.word	0x40010000

08004504 <chain_init>:
/**
 * @brief Initialize the chain device settings.
 * @param None
 * @retval None
 */
void chain_init(void) {
 8004504:	b510      	push	{r4, lr}
  // Retrieve bootloader version number
  g_bootloader_version = get_bootloader_version();
 8004506:	f001 f959 	bl	80057bc <get_bootloader_version>
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <chain_init+0x4c>)
 800450c:	7018      	strb	r0, [r3, #0]

  // Check the clockwise status
  if (get_clockwise_status() == 0xFF) { // If the status is not set
 800450e:	f001 f95b 	bl	80057c8 <get_clockwise_status>
 8004512:	28ff      	cmp	r0, #255	@ 0xff
 8004514:	d00c      	beq.n	8004530 <chain_init+0x2c>
    g_clockwise_status =
        CHAIN_ANGLE_CLOCKWISE_INC; // Set to default clockwise increment value
    set_clockwise_status(g_clockwise_status); // Update the status in the system
  } else {
    g_clockwise_status =
        get_clockwise_status(); // Retrieve the current clockwise status
 8004516:	f001 f957 	bl	80057c8 <get_clockwise_status>
    g_clockwise_status =
 800451a:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <chain_init+0x50>)
 800451c:	7018      	strb	r0, [r3, #0]
  }

  // Check the RGB light status
  if (get_rgb_light() == 0xFF) { // If the RGB light status is not set
 800451e:	f001 f925 	bl	800576c <get_rgb_light>
 8004522:	28ff      	cmp	r0, #255	@ 0xff
 8004524:	d00b      	beq.n	800453e <chain_init+0x3a>
    g_light = RGB_LIGHT_BASE;    // Set to the base light value
    set_rgb_light(g_light);      // Update the light status in the system
  } else {
    g_light = get_rgb_light(); // Retrieve the current RGB light status
 8004526:	f001 f921 	bl	800576c <get_rgb_light>
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <chain_init+0x54>)
 800452c:	7018      	strb	r0, [r3, #0]
  }
}
 800452e:	bd10      	pop	{r4, pc}
    g_clockwise_status =
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <chain_init+0x50>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
    set_clockwise_status(g_clockwise_status); // Update the status in the system
 8004536:	38fe      	subs	r0, #254	@ 0xfe
 8004538:	f001 f94c 	bl	80057d4 <set_clockwise_status>
 800453c:	e7ef      	b.n	800451e <chain_init+0x1a>
    g_light = RGB_LIGHT_BASE;    // Set to the base light value
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <chain_init+0x54>)
 8004540:	2228      	movs	r2, #40	@ 0x28
 8004542:	701a      	strb	r2, [r3, #0]
    set_rgb_light(g_light);      // Update the light status in the system
 8004544:	7818      	ldrb	r0, [r3, #0]
 8004546:	b2c0      	uxtb	r0, r0
 8004548:	f001 f916 	bl	8005778 <set_rgb_light>
 800454c:	e7ef      	b.n	800452e <chain_init+0x2a>
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	200002fa 	.word	0x200002fa
 8004554:	200002f8 	.word	0x200002f8
 8004558:	200002f9 	.word	0x200002f9

0800455c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800455c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800455e:	e7fe      	b.n	800455e <Error_Handler+0x2>

08004560 <SystemClock_Config>:
{
 8004560:	b500      	push	{lr}
 8004562:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004564:	2238      	movs	r2, #56	@ 0x38
 8004566:	2100      	movs	r1, #0
 8004568:	a804      	add	r0, sp, #16
 800456a:	f003 f9ab 	bl	80078c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800456e:	2210      	movs	r2, #16
 8004570:	2100      	movs	r1, #0
 8004572:	4668      	mov	r0, sp
 8004574:	f003 f9a6 	bl	80078c4 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004578:	2080      	movs	r0, #128	@ 0x80
 800457a:	0080      	lsls	r0, r0, #2
 800457c:	f002 f8fe 	bl	800677c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004580:	230a      	movs	r3, #10
 8004582:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004584:	33f6      	adds	r3, #246	@ 0xf6
 8004586:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004588:	2300      	movs	r3, #0
 800458a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800458c:	2240      	movs	r2, #64	@ 0x40
 800458e:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004590:	3a3f      	subs	r2, #63	@ 0x3f
 8004592:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004594:	3201      	adds	r2, #1
 8004596:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004598:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800459a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 800459c:	3308      	adds	r3, #8
 800459e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80045a6:	23c0      	movs	r3, #192	@ 0xc0
 80045a8:	04db      	lsls	r3, r3, #19
 80045aa:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	059b      	lsls	r3, r3, #22
 80045b0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045b2:	a804      	add	r0, sp, #16
 80045b4:	f002 f90c 	bl	80067d0 <HAL_RCC_OscConfig>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d10e      	bne.n	80045da <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045bc:	2307      	movs	r3, #7
 80045be:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045c0:	3b05      	subs	r3, #5
 80045c2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045c4:	2300      	movs	r3, #0
 80045c6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045c8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045ca:	2102      	movs	r1, #2
 80045cc:	4668      	mov	r0, sp
 80045ce:	f002 fbb7 	bl	8006d40 <HAL_RCC_ClockConfig>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d103      	bne.n	80045de <SystemClock_Config+0x7e>
}
 80045d6:	b013      	add	sp, #76	@ 0x4c
 80045d8:	bd00      	pop	{pc}
    Error_Handler();
 80045da:	f7ff ffbf 	bl	800455c <Error_Handler>
    Error_Handler();
 80045de:	f7ff ffbd 	bl	800455c <Error_Handler>
	...

080045e4 <main>:
{
 80045e4:	b570      	push	{r4, r5, r6, lr}
  iap_set();
 80045e6:	f7ff ff67 	bl	80044b8 <iap_set>
  chain_init();
 80045ea:	f7ff ff8b 	bl	8004504 <chain_init>
  HAL_Init();
 80045ee:	f001 f93f 	bl	8005870 <HAL_Init>
  SystemClock_Config();
 80045f2:	f7ff ffb5 	bl	8004560 <SystemClock_Config>
  MX_GPIO_Init();
 80045f6:	f7ff ff27 	bl	8004448 <MX_GPIO_Init>
  MX_DMA_Init();
 80045fa:	f7ff fef1 	bl	80043e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80045fe:	f000 fd65 	bl	80050cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004602:	f000 fec7 	bl	8005394 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8004606:	f7ff ff35 	bl	8004474 <MX_IWDG_Init>
  MX_TIM14_Init();
 800460a:	f000 fc4b 	bl	8004ea4 <MX_TIM14_Init>
  MX_TIM1_Init();
 800460e:	f000 fb6b 	bl	8004ce8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8004612:	f000 fc83 	bl	8004f1c <MX_TIM16_Init>
  MX_ADC1_Init();
 8004616:	f7ff fe73 	bl	8004300 <MX_ADC1_Init>
  MX_TIM17_Init();
 800461a:	f000 fcbd 	bl	8004f98 <MX_TIM17_Init>
  rgb_init();
 800461e:	f7ff fdd1 	bl	80041c4 <rgb_init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8004622:	483f      	ldr	r0, [pc, #252]	@ (8004720 <main+0x13c>)
 8004624:	f001 fd6a 	bl	80060fc <HAL_ADCEx_Calibration_Start>
  HAL_Delay(1);
 8004628:	2001      	movs	r0, #1
 800462a:	f001 f947 	bl	80058bc <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800462e:	4b3d      	ldr	r3, [pc, #244]	@ (8004724 <main+0x140>)
 8004630:	2502      	movs	r5, #2
 8004632:	426d      	negs	r5, r5
 8004634:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	2401      	movs	r4, #1
 800463a:	4322      	orrs	r2, r4
 800463c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4322      	orrs	r2, r4
 8004642:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f001 f939 	bl	80058bc <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800464a:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <main+0x144>)
 800464c:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	4322      	orrs	r2, r4
 8004652:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4322      	orrs	r2, r4
 8004658:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 800465a:	2001      	movs	r0, #1
 800465c:	f001 f92e 	bl	80058bc <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004660:	4b32      	ldr	r3, [pc, #200]	@ (800472c <main+0x148>)
 8004662:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	4322      	orrs	r2, r4
 8004668:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4322      	orrs	r2, r4
 800466e:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8004670:	2001      	movs	r0, #1
 8004672:	f001 f923 	bl	80058bc <HAL_Delay>
 8004676:	e019      	b.n	80046ac <main+0xc8>
      switch (g_cmd_buf[0]) {
 8004678:	2bfb      	cmp	r3, #251	@ 0xfb
 800467a:	d04d      	beq.n	8004718 <main+0x134>
 800467c:	d907      	bls.n	800468e <main+0xaa>
 800467e:	2bff      	cmp	r3, #255	@ 0xff
 8004680:	d10e      	bne.n	80046a0 <main+0xbc>
        chain_iap_update_handle(g_cmd_buf[1]);
 8004682:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <main+0x14c>)
 8004684:	7858      	ldrb	r0, [r3, #1]
 8004686:	b2c0      	uxtb	r0, r0
 8004688:	f7ff fc48 	bl	8003f1c <chain_iap_update_handle>
        break;
 800468c:	e008      	b.n	80046a0 <main+0xbc>
      switch (g_cmd_buf[0]) {
 800468e:	2bf9      	cmp	r3, #249	@ 0xf9
 8004690:	d03f      	beq.n	8004712 <main+0x12e>
 8004692:	2bfa      	cmp	r3, #250	@ 0xfa
 8004694:	d104      	bne.n	80046a0 <main+0xbc>
        chain_get_firmware_version_handle();
 8004696:	f7ff fc2d 	bl	8003ef4 <chain_get_firmware_version_handle>
        break;
 800469a:	e001      	b.n	80046a0 <main+0xbc>
        chain_angle_get_8value();
 800469c:	f7ff fa98 	bl	8003bd0 <chain_angle_get_8value>
      g_cmd_status = CMD_SPACE_IDLE_STATUS;
 80046a0:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <main+0x150>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	4b24      	ldr	r3, [pc, #144]	@ (8004738 <main+0x154>)
 80046a8:	4a24      	ldr	r2, [pc, #144]	@ (800473c <main+0x158>)
 80046aa:	601a      	str	r2, [r3, #0]
    if (g_cmd_status == CMD_SPACE_BUSY_STATUS) {
 80046ac:	4b21      	ldr	r3, [pc, #132]	@ (8004734 <main+0x150>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d1f8      	bne.n	80046a6 <main+0xc2>
      switch (g_cmd_buf[0]) {
 80046b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <main+0x14c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b33      	cmp	r3, #51	@ 0x33
 80046bc:	d8dc      	bhi.n	8004678 <main+0x94>
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d3ee      	bcc.n	80046a0 <main+0xbc>
 80046c2:	3b20      	subs	r3, #32
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	2a13      	cmp	r2, #19
 80046c8:	d8ea      	bhi.n	80046a0 <main+0xbc>
 80046ca:	0093      	lsls	r3, r2, #2
 80046cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004740 <main+0x15c>)
 80046ce:	58d3      	ldr	r3, [r2, r3]
 80046d0:	469f      	mov	pc, r3
        chain_angle_get_12value();
 80046d2:	f7ff fa71 	bl	8003bb8 <chain_angle_get_12value>
        break;
 80046d6:	e7e3      	b.n	80046a0 <main+0xbc>
        chain_angle_get_clockwise();
 80046d8:	f7ff fa9e 	bl	8003c18 <chain_angle_get_clockwise>
        break;
 80046dc:	e7e0      	b.n	80046a0 <main+0xbc>
        chain_angle_set_clockwise(g_cmd_buf[1]);
 80046de:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <main+0x14c>)
 80046e0:	7858      	ldrb	r0, [r3, #1]
 80046e2:	b2c0      	uxtb	r0, r0
 80046e4:	f7ff fa80 	bl	8003be8 <chain_angle_set_clockwise>
        break;
 80046e8:	e7da      	b.n	80046a0 <main+0xbc>
        chain_set_rgb_value((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 80046ea:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <main+0x160>)
 80046ec:	7819      	ldrb	r1, [r3, #0]
 80046ee:	3901      	subs	r1, #1
 80046f0:	b289      	uxth	r1, r1
 80046f2:	4815      	ldr	r0, [pc, #84]	@ (8004748 <main+0x164>)
 80046f4:	f7ff fd70 	bl	80041d8 <chain_set_rgb_value>
        break;
 80046f8:	e7d2      	b.n	80046a0 <main+0xbc>
        chain_get_rgb_value();
 80046fa:	f7ff fd9d 	bl	8004238 <chain_get_rgb_value>
        break;
 80046fe:	e7cf      	b.n	80046a0 <main+0xbc>
        chain_set_light_value(g_cmd_buf[1]);
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <main+0x14c>)
 8004702:	7858      	ldrb	r0, [r3, #1]
 8004704:	b2c0      	uxtb	r0, r0
 8004706:	f7ff fdb5 	bl	8004274 <chain_set_light_value>
        break;
 800470a:	e7c9      	b.n	80046a0 <main+0xbc>
        chain_get_light_value();
 800470c:	f7ff fde4 	bl	80042d8 <chain_get_light_value>
        break;
 8004710:	e7c6      	b.n	80046a0 <main+0xbc>
        chain_get_bootloader_version_handle();
 8004712:	f7ff fbe5 	bl	8003ee0 <chain_get_bootloader_version_handle>
        break;
 8004716:	e7c3      	b.n	80046a0 <main+0xbc>
        chain_get_device_type_handle();
 8004718:	f7ff fbf6 	bl	8003f08 <chain_get_device_type_handle>
        break;
 800471c:	e7c0      	b.n	80046a0 <main+0xbc>
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	20000294 	.word	0x20000294
 8004724:	40002000 	.word	0x40002000
 8004728:	40014800 	.word	0x40014800
 800472c:	40014400 	.word	0x40014400
 8004730:	20000300 	.word	0x20000300
 8004734:	200002fb 	.word	0x200002fb
 8004738:	40003000 	.word	0x40003000
 800473c:	0000aaaa 	.word	0x0000aaaa
 8004740:	0800799c 	.word	0x0800799c
 8004744:	200002fc 	.word	0x200002fc
 8004748:	20000301 	.word	0x20000301

0800474c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800474c:	b500      	push	{lr}
 800474e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <HAL_MspInit+0x3c>)
 8004752:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004754:	2201      	movs	r2, #1
 8004756:	4311      	orrs	r1, r2
 8004758:	6419      	str	r1, [r3, #64]	@ 0x40
 800475a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800475c:	400a      	ands	r2, r1
 800475e:	9200      	str	r2, [sp, #0]
 8004760:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004764:	2180      	movs	r1, #128	@ 0x80
 8004766:	0549      	lsls	r1, r1, #21
 8004768:	430a      	orrs	r2, r1
 800476a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476e:	400b      	ands	r3, r1
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8004774:	2200      	movs	r2, #0
 8004776:	2101      	movs	r1, #1
 8004778:	2003      	movs	r0, #3
 800477a:	f001 fdc7 	bl	800630c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800477e:	2003      	movs	r0, #3
 8004780:	f001 fdc8 	bl	8006314 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004784:	b003      	add	sp, #12
 8004786:	bd00      	pop	{pc}
 8004788:	40021000 	.word	0x40021000

0800478c <NMI_Handler>:
void NMI_Handler(void) {
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 800478c:	e7fe      	b.n	800478c <NMI_Handler>

0800478e <HardFault_Handler>:
  */
void HardFault_Handler(void) {
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 800478e:	e7fe      	b.n	800478e <HardFault_Handler>

08004790 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004790:	4770      	bx	lr

08004792 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004792:	4770      	bx	lr

08004794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8004794:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004796:	f001 f87f 	bl	8005898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800479a:	bd10      	pop	{r4, pc}

0800479c <FLASH_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void) {
 800479c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800479e:	f001 fdd9 	bl	8006354 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80047a4:	4770      	bx	lr
	...

080047a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void) {
 80047a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047aa:	46c6      	mov	lr, r8
 80047ac:	b500      	push	{lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 80047ae:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <DMA1_Channel2_3_IRQHandler+0x90>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	069b      	lsls	r3, r3, #26
 80047b4:	d536      	bpl.n	8004824 <DMA1_Channel2_3_IRQHandler+0x7c>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80047b6:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <DMA1_Channel2_3_IRQHandler+0x90>)
 80047b8:	2220      	movs	r2, #32
 80047ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80047bc:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <DMA1_Channel2_3_IRQHandler+0x94>)
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	438b      	bics	r3, r1
 80047c4:	6013      	str	r3, [r2, #0]
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2); // Disable DMA Channel 2 to
                                                   // prevent further data
                                                   // transfer until the next
                                                   // setup
    // If there are packets in the input transmission buffer queue
    if (tx_in_buffer.packet_count > 0) {
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <DMA1_Channel2_3_IRQHandler+0x98>)
 80047c8:	22c2      	movs	r2, #194	@ 0xc2
 80047ca:	0092      	lsls	r2, r2, #2
 80047cc:	5c9b      	ldrb	r3, [r3, r2]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02b      	beq.n	800482a <DMA1_Channel2_3_IRQHandler+0x82>
 80047d2:	b672      	cpsid	i
      __disable_irq();
      uint8_t index =
 80047d4:	4d1a      	ldr	r5, [pc, #104]	@ (8004840 <DMA1_Channel2_3_IRQHandler+0x98>)
 80047d6:	4f1b      	ldr	r7, [pc, #108]	@ (8004844 <DMA1_Channel2_3_IRQHandler+0x9c>)
 80047d8:	5dee      	ldrb	r6, [r5, r7]
          tx_in_buffer.head; // Get the current head index of the queue
      uint16_t length =
 80047da:	01f4      	lsls	r4, r6, #7
 80047dc:	19a3      	adds	r3, r4, r6
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	18eb      	adds	r3, r5, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	33ff      	adds	r3, #255	@ 0xff
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	4698      	mov	r8, r3
          tx_in_buffer.send_queue[index]
              .length; // Get the length of the data packet at the head

      // Update the head of the queue and decrement the packet count
      tx_in_buffer.head =
          (tx_in_buffer.head + 1) %
 80047ea:	1c70      	adds	r0, r6, #1
 80047ec:	3102      	adds	r1, #2
 80047ee:	f7fd fdfb 	bl	80023e8 <__aeabi_idivmod>
      tx_in_buffer.head =
 80047f2:	55e9      	strb	r1, [r5, r7]
          MAX_QUEUE_SIZE; // Move to the next packet in the circular buffer
      tx_in_buffer.packet_count--;
 80047f4:	22c2      	movs	r2, #194	@ 0xc2
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	5cab      	ldrb	r3, [r5, r2]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	54ab      	strb	r3, [r5, r2]

      // Set up the DMA memory address for the next transmission and the data
      // length
      LL_DMA_SetMemoryAddress(
          DMA1, LL_DMA_CHANNEL_2,
          (uint32_t)tx_in_buffer.send_queue[index]
 80047fe:	19a4      	adds	r4, r4, r6
 8004800:	0064      	lsls	r4, r4, #1
 8004802:	1964      	adds	r4, r4, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004804:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <DMA1_Channel2_3_IRQHandler+0x94>)
 8004806:	60dc      	str	r4, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	0c12      	lsrs	r2, r2, #16
 800480c:	0412      	lsls	r2, r2, #16
 800480e:	4641      	mov	r1, r8
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	2101      	movs	r1, #1
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
                           length); // Set the data length for this DMA transfer
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2); // Re-enable DMA Channel2 to
                                                    // start transferringthe
                                                    // next packet

      g_uart_in_transmit_complete =
 800481c:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <DMA1_Channel2_3_IRQHandler+0xa0>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004822:	b662      	cpsie	i
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004824:	bc80      	pop	{r7}
 8004826:	46b8      	mov	r8, r7
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800482a:	b672      	cpsid	i
      g_uart_in_transmit_complete = 1; // Mark transmission as complete if no
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <DMA1_Channel2_3_IRQHandler+0xa0>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004832:	b662      	cpsie	i
}
 8004834:	e7f6      	b.n	8004824 <DMA1_Channel2_3_IRQHandler+0x7c>
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	40020000 	.word	0x40020000
 800483c:	4002001c 	.word	0x4002001c
 8004840:	20000f10 	.word	0x20000f10
 8004844:	00000306 	.word	0x00000306
 8004848:	200000c5 	.word	0x200000c5

0800484c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1
 * interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void) {
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484e:	46c6      	mov	lr, r8
 8004850:	b500      	push	{lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	049b      	lsls	r3, r3, #18
 8004858:	d537      	bpl.n	80048ca <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x7e>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 800485a:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 800485c:	2280      	movs	r2, #128	@ 0x80
 800485e:	0192      	lsls	r2, r2, #6
 8004860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004862:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xbc>)
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	2101      	movs	r1, #1
 8004868:	438b      	bics	r3, r1
 800486a:	6013      	str	r3, [r2, #0]
  if (LL_DMA_IsActiveFlag_TC4(DMA1)) {
    LL_DMA_ClearFlag_TC4(DMA1); // Clear transfer complete flag for Channel 4
    LL_DMA_DisableChannel(
        DMA1, LL_DMA_CHANNEL_4); // Disable DMA Channel 4 to halt transmission
    // If there are packets in the output transmission buffer queue
    if (tx_out_buffer.packet_count > 0) {
 800486c:	4b27      	ldr	r3, [pc, #156]	@ (800490c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc0>)
 800486e:	22c2      	movs	r2, #194	@ 0xc2
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d03f      	beq.n	80048f8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xac>
  __ASM volatile ("cpsid i" : : : "memory");
 8004878:	b672      	cpsid	i
      __disable_irq();
      uint8_t index =
 800487a:	4d24      	ldr	r5, [pc, #144]	@ (800490c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc0>)
 800487c:	4f24      	ldr	r7, [pc, #144]	@ (8004910 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc4>)
 800487e:	5dee      	ldrb	r6, [r5, r7]
          tx_out_buffer.head; // Get the current head index of the queue
      uint16_t length =
 8004880:	01f4      	lsls	r4, r6, #7
 8004882:	19a3      	adds	r3, r4, r6
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	18eb      	adds	r3, r5, r3
 8004888:	3301      	adds	r3, #1
 800488a:	33ff      	adds	r3, #255	@ 0xff
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	4698      	mov	r8, r3
          tx_out_buffer.send_queue[index]
              .length; // Get the length of the data packet at the head

      // Update the head of the queue and decrement the packet count
      tx_out_buffer.head =
          (tx_out_buffer.head + 1) %
 8004890:	1c70      	adds	r0, r6, #1
 8004892:	3102      	adds	r1, #2
 8004894:	f7fd fda8 	bl	80023e8 <__aeabi_idivmod>
      tx_out_buffer.head =
 8004898:	55e9      	strb	r1, [r5, r7]
          MAX_QUEUE_SIZE; // Move to the next packet in the circular buffer
      tx_out_buffer.packet_count--;
 800489a:	22c2      	movs	r2, #194	@ 0xc2
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	5cab      	ldrb	r3, [r5, r2]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	54ab      	strb	r3, [r5, r2]

      // Set up the DMA memory address for the next transmission and the data
      // length
      LL_DMA_SetMemoryAddress(
          DMA1, LL_DMA_CHANNEL_4,
          (uint32_t)tx_out_buffer.send_queue[index]
 80048a4:	19a4      	adds	r4, r4, r6
 80048a6:	0064      	lsls	r4, r4, #1
 80048a8:	1964      	adds	r4, r4, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80048aa:	4b17      	ldr	r3, [pc, #92]	@ (8004908 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xbc>)
 80048ac:	60dc      	str	r4, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	0c12      	lsrs	r2, r2, #16
 80048b2:	0412      	lsls	r2, r2, #16
 80048b4:	4641      	mov	r1, r8
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4); // Re-enable DMA Channel4 to
                                                    // start transferring next
                                                    // packet

      g_uart_out_transmit_complete =
 80048c2:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc8>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048c8:	b662      	cpsie	i
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 80048ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	039b      	lsls	r3, r3, #14
 80048d0:	d50f      	bpl.n	80048f2 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xa6>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	0252      	lsls	r2, r2, #9
 80048d8:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	0292      	lsls	r2, r2, #10
 80048de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80048e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004918 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xcc>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	438b      	bics	r3, r1
 80048e8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80048ea:	4a0c      	ldr	r2, [pc, #48]	@ (800491c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xd0>)
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	438b      	bics	r3, r1
 80048f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 80048f2:	bc80      	pop	{r7}
 80048f4:	46b8      	mov	r8, r7
 80048f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80048f8:	b672      	cpsid	i
      g_uart_out_transmit_complete = 1; // Mark transmission as complete if no
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc8>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004900:	b662      	cpsie	i
}
 8004902:	e7e2      	b.n	80048ca <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x7e>
 8004904:	40020000 	.word	0x40020000
 8004908:	40020044 	.word	0x40020044
 800490c:	20000c04 	.word	0x20000c04
 8004910:	00000306 	.word	0x00000306
 8004914:	200000c4 	.word	0x200000c4
 8004918:	40020058 	.word	0x40020058
 800491c:	40012c00 	.word	0x40012c00

08004920 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void) {
 8004920:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <TIM14_IRQHandler+0x3c>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	07db      	lsls	r3, r3, #31
 8004928:	d516      	bpl.n	8004958 <TIM14_IRQHandler+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800492a:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <TIM14_IRQHandler+0x3c>)
 800492c:	2202      	movs	r2, #2
 800492e:	4252      	negs	r2, r2
 8004930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN TIM14_IRQn 0 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM14) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM14); // Clear the update interrupt flag for TIM14

    // Decrement the count for the "enum please" packets to send
    g_enum_please_nums--;
 8004932:	4c0b      	ldr	r4, [pc, #44]	@ (8004960 <TIM14_IRQHandler+0x40>)
 8004934:	7823      	ldrb	r3, [r4, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	7023      	strb	r3, [r4, #0]

    // Trigger a DMA transmission for the "enum please" data packet
    usart1_transmit_dma(s_enum_please_data_packet_buf,
 800493a:	480a      	ldr	r0, [pc, #40]	@ (8004964 <TIM14_IRQHandler+0x44>)
 800493c:	2109      	movs	r1, #9
 800493e:	f000 fe01 	bl	8005544 <usart1_transmit_dma>
                        sizeof(s_enum_please_data_packet_buf));

    // Check if the number of packets to send has reached zero
    if (g_enum_please_nums == 0) {
 8004942:	7823      	ldrb	r3, [r4, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <TIM14_IRQHandler+0x38>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <TIM14_IRQHandler+0x3c>)
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	2101      	movs	r1, #1
 800494e:	438a      	bics	r2, r1
 8004950:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	438a      	bics	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004958:	bd10      	pop	{r4, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	40002000 	.word	0x40002000
 8004960:	200000dd 	.word	0x200000dd
 8004964:	200000d4 	.word	0x200000d4

08004968 <TIM16_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004968:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <TIM16_IRQHandler+0x34>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	07db      	lsls	r3, r3, #31
 800496e:	d514      	bpl.n	800499a <TIM16_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004970:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <TIM16_IRQHandler+0x34>)
 8004972:	2202      	movs	r2, #2
 8004974:	4252      	negs	r2, r2
 8004976:	611a      	str	r2, [r3, #16]
  // Check if the update interrupt flag is set for TIM16
  if (LL_TIM_IsActiveFlag_UPDATE(TIM16) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM16); // Clear the update interrupt flag for TIM16

    // Check if the device is currently not the tail in the chain
    if (g_tail_status == CHAIN_NON_TAIL_DEVICE) {
 8004978:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <TIM16_IRQHandler+0x38>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10c      	bne.n	800499a <TIM16_IRQHandler+0x32>
      // Update the tail status to indicate that this device is now the tail
      g_tail_status = CHAIN_TAIL_DEVICE;
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <TIM16_IRQHandler+0x38>)
 8004982:	2101      	movs	r1, #1
 8004984:	7019      	strb	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <TIM16_IRQHandler+0x3c>)
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	430a      	orrs	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
      // Enable TIM14 to start sending "enum please" packets
      LL_TIM_EnableIT_UPDATE(TIM14); // Enable update interrupt for TIM14
      LL_TIM_EnableCounter(TIM14);   // Start the TIM14 counter

      // Set the number of "enum please" packets to send
      g_enum_please_nums = ENUM_PLEASE_NUM;
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <TIM16_IRQHandler+0x40>)
 8004996:	2203      	movs	r2, #3
 8004998:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM16_IRQn 0 */
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800499a:	4770      	bx	lr
 800499c:	40014400 	.word	0x40014400
 80049a0:	200000c3 	.word	0x200000c3
 80049a4:	40002000 	.word	0x40002000
 80049a8:	200000dd 	.word	0x200000dd

080049ac <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void) {
 80049ac:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <TIM17_IRQHandler+0x1c>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	07db      	lsls	r3, r3, #31
 80049b4:	d507      	bpl.n	80049c6 <TIM17_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049b6:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <TIM17_IRQHandler+0x1c>)
 80049b8:	2202      	movs	r2, #2
 80049ba:	4252      	negs	r2, r2
 80049bc:	611a      	str	r2, [r3, #16]
  // Check if the update interrupt flag is set for TIM17
  if (LL_TIM_IsActiveFlag_UPDATE(TIM17) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM17); // Clear the update interrupt flag for TIM17

    // Transmit the heartbeat data packet using USART2 with DMA
    usart2_transmit_dma(g_heartbeat_data_pack_buf,
 80049be:	4803      	ldr	r0, [pc, #12]	@ (80049cc <TIM17_IRQHandler+0x20>)
 80049c0:	2109      	movs	r1, #9
 80049c2:	f000 fe07 	bl	80055d4 <usart2_transmit_dma>

  /* USER CODE END TIM17_IRQn 0 */
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	40014800 	.word	0x40014800
 80049cc:	200000c8 	.word	0x200000c8

080049d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up
 * interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void) {
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	46ce      	mov	lr, r9
 80049d4:	4647      	mov	r7, r8
 80049d6:	b580      	push	{r7, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80049d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004b10 <USART1_IRQHandler+0x140>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	06db      	lsls	r3, r3, #27
 80049de:	d53e      	bpl.n	8004a5e <USART1_IRQHandler+0x8e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80049e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004b10 <USART1_IRQHandler+0x140>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	06db      	lsls	r3, r3, #27
 80049e6:	d53a      	bpl.n	8004a5e <USART1_IRQHandler+0x8e>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80049e8:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <USART1_IRQHandler+0x140>)
 80049ea:	2210      	movs	r2, #16
 80049ec:	621a      	str	r2, [r3, #32]
 80049ee:	4b49      	ldr	r3, [pc, #292]	@ (8004b14 <USART1_IRQHandler+0x144>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2101      	movs	r1, #1
 80049f4:	438a      	bics	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80049f8:	685b      	ldr	r3, [r3, #4]
    LL_USART_ClearFlag_IDLE(USART1); // Clear the idle flag
    LL_DMA_DisableChannel(
        DMA1, LL_DMA_CHANNEL_1); // Temporarily disable DMA channel for RX

    // Calculate received data length
    uint16_t s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2580      	movs	r5, #128	@ 0x80
 80049fe:	006d      	lsls	r5, r5, #1
 8004a00:	1aed      	subs	r5, r5, r3
 8004a02:	b2ad      	uxth	r5, r5

    // Prevent buffer overflow by checking if buffer is full
    if (s_len == 0) {
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d026      	beq.n	8004a56 <USART1_IRQHandler+0x86>
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1); // Re-enable DMA reception
      return;
    }

    // Save current buffer index for processing and update to next index for DMA
    uint8_t current_index = g_uart_in_rx_index;
 8004a08:	4a43      	ldr	r2, [pc, #268]	@ (8004b18 <USART1_IRQHandler+0x148>)
 8004a0a:	7816      	ldrb	r6, [r2, #0]
 8004a0c:	b2f6      	uxtb	r6, r6
    g_uart_in_rx_index = (g_uart_in_rx_index + 1) % UART_BUFFER_SIZE;
 8004a0e:	7813      	ldrb	r3, [r2, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	2101      	movs	r1, #1
 8004a14:	400b      	ands	r3, r1
 8004a16:	7013      	strb	r3, [r2, #0]

    // Set new buffer address and size for next DMA transfer
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                            (uint32_t)g_uart_in_rx_buf[g_uart_in_rx_index]);
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	0252      	lsls	r2, r2, #9
 8004a1c:	483f      	ldr	r0, [pc, #252]	@ (8004b1c <USART1_IRQHandler+0x14c>)
 8004a1e:	1812      	adds	r2, r2, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004a20:	4b3c      	ldr	r3, [pc, #240]	@ (8004b14 <USART1_IRQHandler+0x144>)
 8004a22:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	0c12      	lsrs	r2, r2, #16
 8004a28:	0412      	lsls	r2, r2, #16
 8004a2a:	2480      	movs	r4, #128	@ 0x80
 8004a2c:	0064      	lsls	r4, r4, #1
 8004a2e:	4322      	orrs	r2, r4
 8004a30:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a38:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004a40:	4a33      	ldr	r2, [pc, #204]	@ (8004b10 <USART1_IRQHandler+0x140>)
 8004a42:	6893      	ldr	r3, [r2, #8]
 8004a44:	313f      	adds	r1, #63	@ 0x3f
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6093      	str	r3, [r2, #8]
 8004a4a:	f384 8810 	msr	PRIMASK, r4
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1); // Re-enable DMA
    LL_USART_EnableDMAReq_RX(USART1); // Re-enable DMA request for USART1 RX

    // Process received data if length is greater than 0
    if (s_len > 0) {
      uint8_t *incoming_buffer = (uint8_t *)g_uart_in_rx_buf[current_index];
 8004a4e:	0276      	lsls	r6, r6, #9
 8004a50:	1836      	adds	r6, r6, r0
      uint16_t i = 0;
 8004a52:	2400      	movs	r4, #0

      // Parse incoming buffer data
      while (i < s_len) {
 8004a54:	e023      	b.n	8004a9e <USART1_IRQHandler+0xce>
 8004a56:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <USART1_IRQHandler+0x144>)
 8004a58:	6813      	ldr	r3, [r2, #0]
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a5e:	bcc0      	pop	{r6, r7}
 8004a60:	46b9      	mov	r9, r7
 8004a62:	46b0      	mov	r8, r6
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i++;
 8004a66:	3401      	adds	r4, #1
 8004a68:	b2a4      	uxth	r4, r4
            continue;
 8004a6a:	e018      	b.n	8004a9e <USART1_IRQHandler+0xce>
              chain_heartbeat_in_receive_handle();
 8004a6c:	f7ff f9a8 	bl	8003dc0 <chain_heartbeat_in_receive_handle>
              break;
 8004a70:	e04b      	b.n	8004b0a <USART1_IRQHandler+0x13a>
              if (incoming_buffer[i + 4] != 1) {
 8004a72:	1933      	adds	r3, r6, r4
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d004      	beq.n	8004a84 <USART1_IRQHandler+0xb4>
                chain_out_relay_handle(&incoming_buffer[i], total_length);
 8004a7a:	0001      	movs	r1, r0
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	f7ff f9cf 	bl	8003e20 <chain_out_relay_handle>
 8004a82:	e042      	b.n	8004b0a <USART1_IRQHandler+0x13a>
              } else if (pack_check(&incoming_buffer[i], total_length) ==
 8004a84:	0001      	movs	r1, r0
 8004a86:	4648      	mov	r0, r9
 8004a88:	f7ff f953 	bl	8003d32 <pack_check>
 8004a8c:	2801      	cmp	r0, #1
 8004a8e:	d13c      	bne.n	8004b0a <USART1_IRQHandler+0x13a>
                chain_deal_data_packet_handle(&incoming_buffer[i],
 8004a90:	4641      	mov	r1, r8
 8004a92:	4648      	mov	r0, r9
 8004a94:	f7ff f99c 	bl	8003dd0 <chain_deal_data_packet_handle>
 8004a98:	e037      	b.n	8004b0a <USART1_IRQHandler+0x13a>
        i++;
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	b2a4      	uxth	r4, r4
      while (i < s_len) {
 8004a9e:	42ac      	cmp	r4, r5
 8004aa0:	d2dd      	bcs.n	8004a5e <USART1_IRQHandler+0x8e>
        if (i + 4 <= s_len && incoming_buffer[i] == 0xAA &&
 8004aa2:	0022      	movs	r2, r4
 8004aa4:	1ce3      	adds	r3, r4, #3
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	daf7      	bge.n	8004a9a <USART1_IRQHandler+0xca>
 8004aaa:	1930      	adds	r0, r6, r4
 8004aac:	4681      	mov	r9, r0
 8004aae:	5d30      	ldrb	r0, [r6, r4]
 8004ab0:	28aa      	cmp	r0, #170	@ 0xaa
 8004ab2:	d1f2      	bne.n	8004a9a <USART1_IRQHandler+0xca>
            incoming_buffer[i + 1] == 0x55) {
 8004ab4:	4648      	mov	r0, r9
 8004ab6:	7840      	ldrb	r0, [r0, #1]
        if (i + 4 <= s_len && incoming_buffer[i] == 0xAA &&
 8004ab8:	2855      	cmp	r0, #85	@ 0x55
 8004aba:	d1ee      	bne.n	8004a9a <USART1_IRQHandler+0xca>
          uint8_t len_low = incoming_buffer[i + 2];
 8004abc:	1ca0      	adds	r0, r4, #2
 8004abe:	5c30      	ldrb	r0, [r6, r0]
 8004ac0:	4680      	mov	r8, r0
          uint8_t len_high = incoming_buffer[i + 3];
 8004ac2:	1ce0      	adds	r0, r4, #3
 8004ac4:	5c30      	ldrb	r0, [r6, r0]
          uint16_t packet_length = len_low | (len_high << 8);
 8004ac6:	0200      	lsls	r0, r0, #8
 8004ac8:	4647      	mov	r7, r8
 8004aca:	4307      	orrs	r7, r0
          if (packet_length > BUFFER_SIZE) {
 8004acc:	2080      	movs	r0, #128	@ 0x80
 8004ace:	0040      	lsls	r0, r0, #1
 8004ad0:	4287      	cmp	r7, r0
 8004ad2:	d8c8      	bhi.n	8004a66 <USART1_IRQHandler+0x96>
          uint16_t total_length = 2 + 2 + packet_length + 2;
 8004ad4:	0038      	movs	r0, r7
 8004ad6:	3006      	adds	r0, #6
 8004ad8:	b280      	uxth	r0, r0
 8004ada:	4680      	mov	r8, r0
          if (i + total_length <= s_len &&
 8004adc:	4442      	add	r2, r8
 8004ade:	4295      	cmp	r5, r2
 8004ae0:	dbdb      	blt.n	8004a9a <USART1_IRQHandler+0xca>
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004ae2:	18b1      	adds	r1, r6, r2
 8004ae4:	3902      	subs	r1, #2
 8004ae6:	7809      	ldrb	r1, [r1, #0]
          if (i + total_length <= s_len &&
 8004ae8:	2955      	cmp	r1, #85	@ 0x55
 8004aea:	d1d6      	bne.n	8004a9a <USART1_IRQHandler+0xca>
              incoming_buffer[i + total_length - 1] == 0xAA) {
 8004aec:	18b2      	adds	r2, r6, r2
 8004aee:	3a01      	subs	r2, #1
 8004af0:	7812      	ldrb	r2, [r2, #0]
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004af2:	2aaa      	cmp	r2, #170	@ 0xaa
 8004af4:	d1d1      	bne.n	8004a9a <USART1_IRQHandler+0xca>
            uint8_t packet_type = incoming_buffer[i + 5];
 8004af6:	1d62      	adds	r2, r4, #5
 8004af8:	5cb2      	ldrb	r2, [r6, r2]
            switch (packet_type) {
 8004afa:	2afd      	cmp	r2, #253	@ 0xfd
 8004afc:	d0b6      	beq.n	8004a6c <USART1_IRQHandler+0x9c>
 8004afe:	2afe      	cmp	r2, #254	@ 0xfe
 8004b00:	d1b7      	bne.n	8004a72 <USART1_IRQHandler+0xa2>
              chain_enum_handle(&incoming_buffer[i], total_length);
 8004b02:	0001      	movs	r1, r0
 8004b04:	4648      	mov	r0, r9
 8004b06:	f7ff f93f 	bl	8003d88 <chain_enum_handle>
            i += total_length; // Move to the next packet in the buffer
 8004b0a:	4444      	add	r4, r8
 8004b0c:	b2a4      	uxth	r4, r4
            continue;
 8004b0e:	e7c6      	b.n	8004a9e <USART1_IRQHandler+0xce>
 8004b10:	40013800 	.word	0x40013800
 8004b14:	40020008 	.word	0x40020008
 8004b18:	20000401 	.word	0x20000401
 8004b1c:	20000804 	.word	0x20000804

08004b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up
 * interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void) {
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	46ce      	mov	lr, r9
 8004b24:	4647      	mov	r7, r8
 8004b26:	b580      	push	{r7, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004b28:	4b48      	ldr	r3, [pc, #288]	@ (8004c4c <USART2_IRQHandler+0x12c>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	06db      	lsls	r3, r3, #27
 8004b2e:	d543      	bpl.n	8004bb8 <USART2_IRQHandler+0x98>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004b30:	4b46      	ldr	r3, [pc, #280]	@ (8004c4c <USART2_IRQHandler+0x12c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	06db      	lsls	r3, r3, #27
 8004b36:	d53f      	bpl.n	8004bb8 <USART2_IRQHandler+0x98>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004b38:	4b44      	ldr	r3, [pc, #272]	@ (8004c4c <USART2_IRQHandler+0x12c>)
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004b3e:	4b44      	ldr	r3, [pc, #272]	@ (8004c50 <USART2_IRQHandler+0x130>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004b48:	685b      	ldr	r3, [r3, #4]

    // Temporarily disable DMA channel for USART2 RX
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);

    // Calculate length of received data
    uint16_t s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2580      	movs	r5, #128	@ 0x80
 8004b4e:	006d      	lsls	r5, r5, #1
 8004b50:	1aed      	subs	r5, r5, r3
 8004b52:	b2ad      	uxth	r5, r5

    // Prevent buffer overflow by checking if buffer is full
    if (s_len == 0) {
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	d02b      	beq.n	8004bb0 <USART2_IRQHandler+0x90>
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
      return;
    }

    // Save current buffer index for processing and update to next index for DMA
    uint8_t current_index = g_uart_out_rx_index;
 8004b58:	4a3e      	ldr	r2, [pc, #248]	@ (8004c54 <USART2_IRQHandler+0x134>)
 8004b5a:	7816      	ldrb	r6, [r2, #0]
 8004b5c:	b2f6      	uxtb	r6, r6
    g_uart_out_rx_index = (g_uart_out_rx_index + 1) % UART_BUFFER_SIZE;
 8004b5e:	7813      	ldrb	r3, [r2, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	2101      	movs	r1, #1
 8004b64:	400b      	ands	r3, r1
 8004b66:	7013      	strb	r3, [r2, #0]

    // Set new DMA receive buffer address and size
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                            (uint32_t)g_uart_out_rx_buf[g_uart_out_rx_index]);
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	0252      	lsls	r2, r2, #9
 8004b6c:	483a      	ldr	r0, [pc, #232]	@ (8004c58 <USART2_IRQHandler+0x138>)
 8004b6e:	1812      	adds	r2, r2, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004b70:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <USART2_IRQHandler+0x130>)
 8004b72:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	0c12      	lsrs	r2, r2, #16
 8004b78:	0412      	lsls	r2, r2, #16
 8004b7a:	2480      	movs	r4, #128	@ 0x80
 8004b7c:	0064      	lsls	r4, r4, #1
 8004b7e:	4322      	orrs	r2, r4
 8004b80:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004b90:	4a2e      	ldr	r2, [pc, #184]	@ (8004c4c <USART2_IRQHandler+0x12c>)
 8004b92:	6893      	ldr	r3, [r2, #8]
 8004b94:	313f      	adds	r1, #63	@ 0x3f
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6093      	str	r3, [r2, #8]
 8004b9a:	f384 8810 	msr	PRIMASK, r4
  WRITE_REG(TIMx->CNT, Counter);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c5c <USART2_IRQHandler+0x13c>)
 8004ba2:	6253      	str	r3, [r2, #36]	@ 0x24
    LL_USART_EnableDMAReq_RX(USART2);

    // Process received data if length is greater than 0
    if (s_len > 0) {
      LL_TIM_SetCounter(TIM16, 0);
      g_tail_status = CHAIN_NON_TAIL_DEVICE;
 8004ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8004c60 <USART2_IRQHandler+0x140>)
 8004ba6:	7013      	strb	r3, [r2, #0]
      uint8_t *incoming_buffer = (uint8_t *)g_uart_out_rx_buf[current_index];
 8004ba8:	0276      	lsls	r6, r6, #9
 8004baa:	1836      	adds	r6, r6, r0
      uint16_t i = 0;
 8004bac:	2400      	movs	r4, #0

      // Parse incoming buffer data
      while (i < s_len) {
 8004bae:	e018      	b.n	8004be2 <USART2_IRQHandler+0xc2>
 8004bb0:	4a27      	ldr	r2, [pc, #156]	@ (8004c50 <USART2_IRQHandler+0x130>)
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bb8:	bcc0      	pop	{r6, r7}
 8004bba:	46b9      	mov	r9, r7
 8004bbc:	46b0      	mov	r8, r6
 8004bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i++;
 8004bc0:	3401      	adds	r4, #1
 8004bc2:	b2a4      	uxth	r4, r4
            continue;
 8004bc4:	e00d      	b.n	8004be2 <USART2_IRQHandler+0xc2>
              chain_enum_return_handle(&incoming_buffer[i], total_length);
 8004bc6:	0039      	movs	r1, r7
 8004bc8:	4648      	mov	r0, r9
 8004bca:	f7ff f8f1 	bl	8003db0 <chain_enum_return_handle>
            i += total_length; // Move to the next packet in the buffer
 8004bce:	19e4      	adds	r4, r4, r7
 8004bd0:	b2a4      	uxth	r4, r4
            continue;
 8004bd2:	e006      	b.n	8004be2 <USART2_IRQHandler+0xc2>
              chain_enum_please_handle(&incoming_buffer[i], total_length);
 8004bd4:	0039      	movs	r1, r7
 8004bd6:	4648      	mov	r0, r9
 8004bd8:	f7ff f8ee 	bl	8003db8 <chain_enum_please_handle>
              break;
 8004bdc:	e7f7      	b.n	8004bce <USART2_IRQHandler+0xae>
        i++;
 8004bde:	3401      	adds	r4, #1
 8004be0:	b2a4      	uxth	r4, r4
      while (i < s_len) {
 8004be2:	42ac      	cmp	r4, r5
 8004be4:	d2e8      	bcs.n	8004bb8 <USART2_IRQHandler+0x98>
        if (i + 4 < s_len && incoming_buffer[i] == 0xAA &&
 8004be6:	1d23      	adds	r3, r4, #4
 8004be8:	42ab      	cmp	r3, r5
 8004bea:	daf8      	bge.n	8004bde <USART2_IRQHandler+0xbe>
 8004bec:	0023      	movs	r3, r4
 8004bee:	1930      	adds	r0, r6, r4
 8004bf0:	4681      	mov	r9, r0
 8004bf2:	5d37      	ldrb	r7, [r6, r4]
 8004bf4:	2faa      	cmp	r7, #170	@ 0xaa
 8004bf6:	d1f2      	bne.n	8004bde <USART2_IRQHandler+0xbe>
            incoming_buffer[i + 1] == 0x55) {
 8004bf8:	7847      	ldrb	r7, [r0, #1]
        if (i + 4 < s_len && incoming_buffer[i] == 0xAA &&
 8004bfa:	2f55      	cmp	r7, #85	@ 0x55
 8004bfc:	d1ef      	bne.n	8004bde <USART2_IRQHandler+0xbe>
          uint8_t len_low = incoming_buffer[i + 2];
 8004bfe:	1ca7      	adds	r7, r4, #2
 8004c00:	5df0      	ldrb	r0, [r6, r7]
          uint8_t len_high = incoming_buffer[i + 3];
 8004c02:	1ce7      	adds	r7, r4, #3
 8004c04:	5df7      	ldrb	r7, [r6, r7]
          uint16_t packet_length = len_low | (len_high << 8);
 8004c06:	023f      	lsls	r7, r7, #8
 8004c08:	4338      	orrs	r0, r7
          if (packet_length > BUFFER_SIZE) {
 8004c0a:	2780      	movs	r7, #128	@ 0x80
 8004c0c:	007f      	lsls	r7, r7, #1
 8004c0e:	42b8      	cmp	r0, r7
 8004c10:	d8d6      	bhi.n	8004bc0 <USART2_IRQHandler+0xa0>
          uint16_t total_length = 2 + 2 + packet_length + 2;
 8004c12:	0007      	movs	r7, r0
 8004c14:	3706      	adds	r7, #6
 8004c16:	b2bf      	uxth	r7, r7
          if (i + total_length <= s_len &&
 8004c18:	193a      	adds	r2, r7, r4
 8004c1a:	4295      	cmp	r5, r2
 8004c1c:	dbdf      	blt.n	8004bde <USART2_IRQHandler+0xbe>
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004c1e:	18b1      	adds	r1, r6, r2
 8004c20:	3902      	subs	r1, #2
 8004c22:	7809      	ldrb	r1, [r1, #0]
          if (i + total_length <= s_len &&
 8004c24:	2955      	cmp	r1, #85	@ 0x55
 8004c26:	d1da      	bne.n	8004bde <USART2_IRQHandler+0xbe>
              incoming_buffer[i + total_length - 1] == 0xAA) {
 8004c28:	18b2      	adds	r2, r6, r2
 8004c2a:	3a01      	subs	r2, #1
 8004c2c:	7812      	ldrb	r2, [r2, #0]
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004c2e:	2aaa      	cmp	r2, #170	@ 0xaa
 8004c30:	d1d5      	bne.n	8004bde <USART2_IRQHandler+0xbe>
            uint8_t packet_type = incoming_buffer[i + 5];
 8004c32:	3305      	adds	r3, #5
 8004c34:	5cf3      	ldrb	r3, [r6, r3]
            switch (packet_type) {
 8004c36:	2bfd      	cmp	r3, #253	@ 0xfd
 8004c38:	d0c9      	beq.n	8004bce <USART2_IRQHandler+0xae>
 8004c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004c3c:	d0c3      	beq.n	8004bc6 <USART2_IRQHandler+0xa6>
 8004c3e:	2bfc      	cmp	r3, #252	@ 0xfc
 8004c40:	d0c8      	beq.n	8004bd4 <USART2_IRQHandler+0xb4>
              chain_in_relay_handle(&incoming_buffer[i], total_length);
 8004c42:	0039      	movs	r1, r7
 8004c44:	4648      	mov	r0, r9
 8004c46:	f7ff f8f6 	bl	8003e36 <chain_in_relay_handle>
              break;
 8004c4a:	e7c0      	b.n	8004bce <USART2_IRQHandler+0xae>
 8004c4c:	40004400 	.word	0x40004400
 8004c50:	40020030 	.word	0x40020030
 8004c54:	20000400 	.word	0x20000400
 8004c58:	20000404 	.word	0x20000404
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	200000c3 	.word	0x200000c3

08004c64 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c64:	4770      	bx	lr
	...

08004c68 <LL_TIM_OC_DisableFast>:
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4299      	cmp	r1, r3
 8004c6e:	d028      	beq.n	8004cc2 <LL_TIM_OC_DisableFast+0x5a>
 8004c70:	d817      	bhi.n	8004ca2 <LL_TIM_OC_DisableFast+0x3a>
 8004c72:	2910      	cmp	r1, #16
 8004c74:	d027      	beq.n	8004cc6 <LL_TIM_OC_DisableFast+0x5e>
 8004c76:	d903      	bls.n	8004c80 <LL_TIM_OC_DisableFast+0x18>
 8004c78:	2940      	cmp	r1, #64	@ 0x40
 8004c7a:	d12a      	bne.n	8004cd2 <LL_TIM_OC_DisableFast+0x6a>
{
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e004      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004c80:	2901      	cmp	r1, #1
 8004c82:	d022      	beq.n	8004cca <LL_TIM_OC_DisableFast+0x62>
 8004c84:	2904      	cmp	r1, #4
 8004c86:	d122      	bne.n	8004cce <LL_TIM_OC_DisableFast+0x66>
 8004c88:	3bff      	subs	r3, #255	@ 0xff
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004c8a:	3018      	adds	r0, #24
 8004c8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ce0 <LL_TIM_OC_DisableFast+0x78>)
 8004c8e:	5cd2      	ldrb	r2, [r2, r3]
 8004c90:	1880      	adds	r0, r0, r2
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004c92:	6802      	ldr	r2, [r0, #0]
 8004c94:	4913      	ldr	r1, [pc, #76]	@ (8004ce4 <LL_TIM_OC_DisableFast+0x7c>)
 8004c96:	5cc9      	ldrb	r1, [r1, r3]
 8004c98:	2304      	movs	r3, #4
 8004c9a:	408b      	lsls	r3, r1
 8004c9c:	439a      	bics	r2, r3
 8004c9e:	6002      	str	r2, [r0, #0]
}
 8004ca0:	4770      	bx	lr
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	015b      	lsls	r3, r3, #5
 8004ca6:	4299      	cmp	r1, r3
 8004ca8:	d015      	beq.n	8004cd6 <LL_TIM_OC_DisableFast+0x6e>
 8004caa:	2380      	movs	r3, #128	@ 0x80
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	d101      	bne.n	8004cb6 <LL_TIM_OC_DisableFast+0x4e>
{
 8004cb2:	2307      	movs	r3, #7
 8004cb4:	e7e9      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	d10d      	bne.n	8004cda <LL_TIM_OC_DisableFast+0x72>
 8004cbe:	2305      	movs	r3, #5
 8004cc0:	e7e3      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	e7e1      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e7df      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e7dd      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	e7db      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	e7d9      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cd6:	2306      	movs	r3, #6
 8004cd8:	e7d7      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	e7d5      	b.n	8004c8a <LL_TIM_OC_DisableFast+0x22>
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	08007a58 	.word	0x08007a58
 8004ce4:	08007a4c 	.word	0x08007a4c

08004ce8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	46c6      	mov	lr, r8
 8004cec:	b500      	push	{lr}
 8004cee:	b0ac      	sub	sp, #176	@ 0xb0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004cf0:	2214      	movs	r2, #20
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	a827      	add	r0, sp, #156	@ 0x9c
 8004cf6:	f002 fde5 	bl	80078c4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	a81f      	add	r0, sp, #124	@ 0x7c
 8004d00:	f002 fde0 	bl	80078c4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004d04:	2230      	movs	r2, #48	@ 0x30
 8004d06:	2100      	movs	r1, #0
 8004d08:	a813      	add	r0, sp, #76	@ 0x4c
 8004d0a:	f002 fddb 	bl	80078c4 <memset>

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d0e:	2228      	movs	r2, #40	@ 0x28
 8004d10:	2100      	movs	r1, #0
 8004d12:	a809      	add	r0, sp, #36	@ 0x24
 8004d14:	f002 fdd6 	bl	80078c4 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	039b      	lsls	r3, r3, #14
 8004d1c:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d1e:	a809      	add	r0, sp, #36	@ 0x24
 8004d20:	f002 f8d4 	bl	8006ecc <HAL_RCCEx_PeriphCLKConfig>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d000      	beq.n	8004d2a <MX_TIM1_Init+0x42>
 8004d28:	e0a3      	b.n	8004e72 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
  }

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2a:	2218      	movs	r2, #24
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	a803      	add	r0, sp, #12
 8004d30:	f002 fdc8 	bl	80078c4 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8004d34:	4e50      	ldr	r6, [pc, #320]	@ (8004e78 <MX_TIM1_Init+0x190>)
 8004d36:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004d38:	2280      	movs	r2, #128	@ 0x80
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	6433      	str	r3, [r6, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004d40:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004d42:	4013      	ands	r3, r2
 8004d44:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004d46:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004d48:	4a4c      	ldr	r2, [pc, #304]	@ (8004e7c <MX_TIM1_Init+0x194>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	213f      	movs	r1, #63	@ 0x3f
 8004d4e:	438b      	bics	r3, r1
 8004d50:	392b      	subs	r1, #43	@ 0x2b
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <MX_TIM1_Init+0x198>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	494a      	ldr	r1, [pc, #296]	@ (8004e84 <MX_TIM1_Init+0x19c>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	2110      	movs	r1, #16
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4948      	ldr	r1, [pc, #288]	@ (8004e88 <MX_TIM1_Init+0x1a0>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	2120      	movs	r1, #32
 8004d70:	438a      	bics	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	3120      	adds	r1, #32
 8004d78:	438a      	bics	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	2780      	movs	r7, #128	@ 0x80
 8004d80:	43ba      	bics	r2, r7
 8004d82:	433a      	orrs	r2, r7
 8004d84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4940      	ldr	r1, [pc, #256]	@ (8004e8c <MX_TIM1_Init+0x1a4>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	2180      	movs	r1, #128	@ 0x80
 8004d8e:	0049      	lsls	r1, r1, #1
 8004d90:	4688      	mov	r8, r1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	493d      	ldr	r1, [pc, #244]	@ (8004e90 <MX_TIM1_Init+0x1a8>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004d9e:	a927      	add	r1, sp, #156	@ 0x9c
 8004da0:	2400      	movs	r4, #0
 8004da2:	800c      	strh	r4, [r1, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004da4:	604c      	str	r4, [r1, #4]
  TIM_InitStruct.Autoreload = 79;
 8004da6:	234f      	movs	r3, #79	@ 0x4f
 8004da8:	608b      	str	r3, [r1, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004daa:	60cc      	str	r4, [r1, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004dac:	610c      	str	r4, [r1, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004dae:	4d39      	ldr	r5, [pc, #228]	@ (8004e94 <MX_TIM1_Init+0x1ac>)
 8004db0:	0028      	movs	r0, r5
 8004db2:	f002 fc0b 	bl	80075cc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	43bb      	bics	r3, r7
 8004dba:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004dbc:	68ab      	ldr	r3, [r5, #8]
 8004dbe:	4a36      	ldr	r2, [pc, #216]	@ (8004e98 <MX_TIM1_Init+0x1b0>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004dc4:	4a35      	ldr	r2, [pc, #212]	@ (8004e9c <MX_TIM1_Init+0x1b4>)
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	2108      	movs	r1, #8
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6013      	str	r3, [r2, #0]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004dce:	2360      	movs	r3, #96	@ 0x60
 8004dd0:	931f      	str	r3, [sp, #124]	@ 0x7c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004dd2:	9420      	str	r4, [sp, #128]	@ 0x80
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004dd4:	9421      	str	r4, [sp, #132]	@ 0x84
  TIM_OC_InitStruct.CompareValue = 0;
 8004dd6:	9422      	str	r4, [sp, #136]	@ 0x88
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004dd8:	9423      	str	r4, [sp, #140]	@ 0x8c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004dda:	9424      	str	r4, [sp, #144]	@ 0x90
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004ddc:	9425      	str	r4, [sp, #148]	@ 0x94
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004dde:	9426      	str	r4, [sp, #152]	@ 0x98
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004de0:	aa1f      	add	r2, sp, #124	@ 0x7c
 8004de2:	3907      	subs	r1, #7
 8004de4:	0028      	movs	r0, r5
 8004de6:	f002 fc39 	bl	800765c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004dea:	2101      	movs	r1, #1
 8004dec:	0028      	movs	r0, r5
 8004dee:	f7ff ff3b 	bl	8004c68 <LL_TIM_OC_DisableFast>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004df2:	686b      	ldr	r3, [r5, #4]
 8004df4:	2270      	movs	r2, #112	@ 0x70
 8004df6:	4393      	bics	r3, r2
 8004df8:	606b      	str	r3, [r5, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004dfa:	686b      	ldr	r3, [r5, #4]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	@ (8004ea0 <MX_TIM1_Init+0x1b8>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004e02:	68ab      	ldr	r3, [r5, #8]
 8004e04:	43bb      	bics	r3, r7
 8004e06:	60ab      	str	r3, [r5, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM1);
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004e08:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004e0a:	9414      	str	r4, [sp, #80]	@ 0x50
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004e0c:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_BDTRInitStruct.DeadTime = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	466a      	mov	r2, sp
 8004e12:	2158      	movs	r1, #88	@ 0x58
 8004e14:	1852      	adds	r2, r2, r1
 8004e16:	7013      	strb	r3, [r2, #0]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004e18:	466b      	mov	r3, sp
 8004e1a:	225a      	movs	r2, #90	@ 0x5a
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	801c      	strh	r4, [r3, #0]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004e20:	2380      	movs	r3, #128	@ 0x80
 8004e22:	019b      	lsls	r3, r3, #6
 8004e24:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004e26:	9418      	str	r4, [sp, #96]	@ 0x60
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004e28:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004e2a:	941a      	str	r4, [sp, #104]	@ 0x68
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	049b      	lsls	r3, r3, #18
 8004e30:	931b      	str	r3, [sp, #108]	@ 0x6c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004e32:	941c      	str	r4, [sp, #112]	@ 0x70
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004e34:	941d      	str	r4, [sp, #116]	@ 0x74
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004e36:	941e      	str	r4, [sp, #120]	@ 0x78
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004e38:	a913      	add	r1, sp, #76	@ 0x4c
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	f002 fc3c 	bl	80076b8 <LL_TIM_BDTR_Init>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8004e40:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8004e42:	2301      	movs	r3, #1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	6372      	str	r2, [r6, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8004e48:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004e4e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END TIM1_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004e50:	4643      	mov	r3, r8
 8004e52:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e54:	3bfe      	subs	r3, #254	@ 0xfe
 8004e56:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e58:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e5a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e5c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004e5e:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e60:	20a0      	movs	r0, #160	@ 0xa0
 8004e62:	a903      	add	r1, sp, #12
 8004e64:	05c0      	lsls	r0, r0, #23
 8004e66:	f002 f92b 	bl	80070c0 <LL_GPIO_Init>

}
 8004e6a:	b02c      	add	sp, #176	@ 0xb0
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	46b8      	mov	r8, r7
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004e72:	f7ff fb73 	bl	800455c <Error_Handler>
 8004e76:	e758      	b.n	8004d2a <MX_TIM1_Init+0x42>
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40020810 	.word	0x40020810
 8004e80:	40020058 	.word	0x40020058
 8004e84:	ffffbfef 	.word	0xffffbfef
 8004e88:	ffffcfff 	.word	0xffffcfff
 8004e8c:	fffffcff 	.word	0xfffffcff
 8004e90:	fffff3ff 	.word	0xfffff3ff
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	fffebff8 	.word	0xfffebff8
 8004e9c:	40012c18 	.word	0x40012c18
 8004ea0:	ff0fffff 	.word	0xff0fffff

08004ea4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004ea4:	b530      	push	{r4, r5, lr}
 8004ea6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004ea8:	ac01      	add	r4, sp, #4
 8004eaa:	2214      	movs	r2, #20
 8004eac:	2100      	movs	r1, #0
 8004eae:	0020      	movs	r0, r4
 8004eb0:	f002 fd08 	bl	80078c4 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <MX_TIM14_Init+0x64>)
 8004eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eb8:	2180      	movs	r1, #128	@ 0x80
 8004eba:	0209      	lsls	r1, r1, #8
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	400b      	ands	r3, r1
 8004ec4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004ec6:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ec8:	4a10      	ldr	r2, [pc, #64]	@ (8004f0c <MX_TIM14_Init+0x68>)
 8004eca:	20c4      	movs	r0, #196	@ 0xc4
 8004ecc:	0080      	lsls	r0, r0, #2
 8004ece:	5813      	ldr	r3, [r2, r0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	05c9      	lsls	r1, r1, #23
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	031b      	lsls	r3, r3, #12
 8004ee0:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(TIM14_IRQn);

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <MX_TIM14_Init+0x6c>)
 8004ee4:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 1699;
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <MX_TIM14_Init+0x70>)
 8004eec:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004eee:	60e3      	str	r3, [r4, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004ef0:	4d09      	ldr	r5, [pc, #36]	@ (8004f18 <MX_TIM14_Init+0x74>)
 8004ef2:	0021      	movs	r1, r4
 8004ef4:	0028      	movs	r0, r5
 8004ef6:	f002 fb69 	bl	80075cc <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	4313      	orrs	r3, r2
 8004f00:	602b      	str	r3, [r5, #0]
  LL_TIM_EnableARRPreload(TIM14);
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004f02:	b007      	add	sp, #28
 8004f04:	bd30      	pop	{r4, r5, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	000018ff 	.word	0x000018ff
 8004f14:	000006a3 	.word	0x000006a3
 8004f18:	40002000 	.word	0x40002000

08004f1c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004f1c:	b530      	push	{r4, r5, lr}
 8004f1e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004f20:	ac01      	add	r4, sp, #4
 8004f22:	2214      	movs	r2, #20
 8004f24:	2100      	movs	r1, #0
 8004f26:	0020      	movs	r0, r4
 8004f28:	f002 fccc 	bl	80078c4 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <MX_TIM16_Init+0x64>)
 8004f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f30:	2180      	movs	r1, #128	@ 0x80
 8004f32:	0289      	lsls	r1, r1, #10
 8004f34:	430a      	orrs	r2, r1
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004f3e:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f40:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <MX_TIM16_Init+0x68>)
 8004f42:	20c5      	movs	r0, #197	@ 0xc5
 8004f44:	0080      	lsls	r0, r0, #2
 8004f46:	5819      	ldr	r1, [r3, r0]
 8004f48:	4a0f      	ldr	r2, [pc, #60]	@ (8004f88 <MX_TIM16_Init+0x6c>)
 8004f4a:	4011      	ands	r1, r2
 8004f4c:	2280      	movs	r2, #128	@ 0x80
 8004f4e:	01d2      	lsls	r2, r2, #7
 8004f50:	430a      	orrs	r2, r1
 8004f52:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	0392      	lsls	r2, r2, #14
 8004f58:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM16_IRQn);

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <MX_TIM16_Init+0x70>)
 8004f5c:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 29999;
 8004f62:	4a0b      	ldr	r2, [pc, #44]	@ (8004f90 <MX_TIM16_Init+0x74>)
 8004f64:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004f66:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004f68:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8004f6a:	4d0a      	ldr	r5, [pc, #40]	@ (8004f94 <MX_TIM16_Init+0x78>)
 8004f6c:	0021      	movs	r1, r4
 8004f6e:	0028      	movs	r0, r5
 8004f70:	f002 fb2c 	bl	80075cc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	2280      	movs	r2, #128	@ 0x80
 8004f78:	4393      	bics	r3, r2
 8004f7a:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM16);
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004f7c:	b007      	add	sp, #28
 8004f7e:	bd30      	pop	{r4, r5, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	e000e100 	.word	0xe000e100
 8004f88:	ffff00ff 	.word	0xffff00ff
 8004f8c:	000018ff 	.word	0x000018ff
 8004f90:	0000752f 	.word	0x0000752f
 8004f94:	40014400 	.word	0x40014400

08004f98 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004f98:	b530      	push	{r4, r5, lr}
 8004f9a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004f9c:	ac01      	add	r4, sp, #4
 8004f9e:	2214      	movs	r2, #20
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	f002 fc8e 	bl	80078c4 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <MX_TIM17_Init+0x60>)
 8004faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fac:	2180      	movs	r1, #128	@ 0x80
 8004fae:	02c9      	lsls	r1, r1, #11
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004fba:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004ffc <MX_TIM17_Init+0x64>)
 8004fbe:	20c5      	movs	r0, #197	@ 0xc5
 8004fc0:	0080      	lsls	r0, r0, #2
 8004fc2:	5813      	ldr	r3, [r2, r0]
 8004fc4:	490e      	ldr	r1, [pc, #56]	@ (8005000 <MX_TIM17_Init+0x68>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	2180      	movs	r1, #128	@ 0x80
 8004fca:	03c9      	lsls	r1, r1, #15
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd0:	6011      	str	r1, [r2, #0]
  NVIC_EnableIRQ(TIM17_IRQn);

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <MX_TIM17_Init+0x6c>)
 8004fd4:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 9999;
 8004fda:	4a0b      	ldr	r2, [pc, #44]	@ (8005008 <MX_TIM17_Init+0x70>)
 8004fdc:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004fde:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004fe0:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8004fe2:	4d0a      	ldr	r5, [pc, #40]	@ (800500c <MX_TIM17_Init+0x74>)
 8004fe4:	0021      	movs	r1, r4
 8004fe6:	0028      	movs	r0, r5
 8004fe8:	f002 faf0 	bl	80075cc <LL_TIM_Init>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	4393      	bics	r3, r2
 8004ff2:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM17);
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004ff4:	b007      	add	sp, #28
 8004ff6:	bd30      	pop	{r4, r5, pc}
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	e000e100 	.word	0xe000e100
 8005000:	ff00ffff 	.word	0xff00ffff
 8005004:	000018ff 	.word	0x000018ff
 8005008:	0000270f 	.word	0x0000270f
 800500c:	40014800 	.word	0x40014800

08005010 <usart1_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart1_hart_init(void) {
 8005010:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005012:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	2101      	movs	r1, #1
 8005018:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800501c:	4a24      	ldr	r2, [pc, #144]	@ (80050b0 <usart1_hart_init+0xa0>)
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	200c      	movs	r0, #12
 8005022:	4383      	bics	r3, r0
 8005024:	4303      	orrs	r3, r0
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005030:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	2410      	movs	r4, #16
 8005038:	4323      	orrs	r3, r4
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005040:	4b1c      	ldr	r3, [pc, #112]	@ (80050b4 <usart1_hart_init+0xa4>)
 8005042:	481d      	ldr	r0, [pc, #116]	@ (80050b8 <usart1_hart_init+0xa8>)
 8005044:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_1,
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address where received data will be stored
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                          (uint32_t)g_uart_in_rx_buf[g_uart_in_rx_index]);
 8005046:	481d      	ldr	r0, [pc, #116]	@ (80050bc <usart1_hart_init+0xac>)
 8005048:	7800      	ldrb	r0, [r0, #0]
 800504a:	0240      	lsls	r0, r0, #9
 800504c:	4d1c      	ldr	r5, [pc, #112]	@ (80050c0 <usart1_hart_init+0xb0>)
 800504e:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005050:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005052:	6858      	ldr	r0, [r3, #4]
 8005054:	0c00      	lsrs	r0, r0, #16
 8005056:	0400      	lsls	r0, r0, #16
 8005058:	2580      	movs	r5, #128	@ 0x80
 800505a:	006d      	lsls	r5, r5, #1
 800505c:	4328      	orrs	r0, r5
 800505e:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	3dfe      	subs	r5, #254	@ 0xfe
 8005064:	4328      	orrs	r0, r5
 8005066:	6018      	str	r0, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	2608      	movs	r6, #8
 800506c:	4330      	orrs	r0, r6
 800506e:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	4308      	orrs	r0, r1
 8005074:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800507e:	6893      	ldr	r3, [r2, #8]
 8005080:	3638      	adds	r6, #56	@ 0x38
 8005082:	4333      	orrs	r3, r6
 8005084:	6093      	str	r3, [r2, #8]
 8005086:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800508a:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800508c:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <usart1_hart_init+0xb4>)
 800508e:	480e      	ldr	r0, [pc, #56]	@ (80050c8 <usart1_hart_init+0xb8>)
 8005090:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005092:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800509a:	6891      	ldr	r1, [r2, #8]
 800509c:	3470      	adds	r4, #112	@ 0x70
 800509e:	4321      	orrs	r1, r4
 80050a0:	6091      	str	r1, [r2, #8]
 80050a2:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	432a      	orrs	r2, r5
 80050aa:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART1 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART1);
  // Enable DMA transfer complete interrupt for USART1 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
}
 80050ac:	bd70      	pop	{r4, r5, r6, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40020008 	.word	0x40020008
 80050b8:	40013824 	.word	0x40013824
 80050bc:	20000401 	.word	0x20000401
 80050c0:	20000804 	.word	0x20000804
 80050c4:	4002001c 	.word	0x4002001c
 80050c8:	40013828 	.word	0x40013828

080050cc <MX_USART1_UART_Init>:
void MX_USART1_UART_Init(void) {
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ce:	46de      	mov	lr, fp
 80050d0:	4657      	mov	r7, sl
 80050d2:	464e      	mov	r6, r9
 80050d4:	4645      	mov	r5, r8
 80050d6:	b5e0      	push	{r5, r6, r7, lr}
 80050d8:	b09b      	sub	sp, #108	@ 0x6c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80050da:	2220      	movs	r2, #32
 80050dc:	2100      	movs	r1, #0
 80050de:	a812      	add	r0, sp, #72	@ 0x48
 80050e0:	f002 fbf0 	bl	80078c4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	2218      	movs	r2, #24
 80050e6:	2100      	movs	r1, #0
 80050e8:	a80c      	add	r0, sp, #48	@ 0x30
 80050ea:	f002 fbeb 	bl	80078c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050ee:	2228      	movs	r2, #40	@ 0x28
 80050f0:	2100      	movs	r1, #0
 80050f2:	a802      	add	r0, sp, #8
 80050f4:	f002 fbe6 	bl	80078c4 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80050f8:	2301      	movs	r3, #1
 80050fa:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80050fc:	a802      	add	r0, sp, #8
 80050fe:	f001 fee5 	bl	8006ecc <HAL_RCCEx_PeriphCLKConfig>
 8005102:	2800      	cmp	r0, #0
 8005104:	d000      	beq.n	8005108 <MX_USART1_UART_Init+0x3c>
 8005106:	e0c6      	b.n	8005296 <MX_USART1_UART_Init+0x1ca>
  SET_BIT(RCC->APBENR2, Periphs);
 8005108:	4b64      	ldr	r3, [pc, #400]	@ (800529c <MX_USART1_UART_Init+0x1d0>)
 800510a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510c:	2180      	movs	r1, #128	@ 0x80
 800510e:	01c9      	lsls	r1, r1, #7
 8005110:	430a      	orrs	r2, r1
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005114:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005116:	400a      	ands	r2, r1
 8005118:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800511a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800511c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800511e:	2502      	movs	r5, #2
 8005120:	432a      	orrs	r2, r5
 8005122:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	402b      	ands	r3, r5
 8005128:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800512a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800512c:	2340      	movs	r3, #64	@ 0x40
 800512e:	4698      	mov	r8, r3
 8005130:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005132:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005134:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005136:	2400      	movs	r4, #0
 8005138:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800513a:	2601      	movs	r6, #1
 800513c:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800513e:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005140:	4b57      	ldr	r3, [pc, #348]	@ (80052a0 <MX_USART1_UART_Init+0x1d4>)
 8005142:	4699      	mov	r9, r3
 8005144:	a90c      	add	r1, sp, #48	@ 0x30
 8005146:	0018      	movs	r0, r3
 8005148:	f001 ffba 	bl	80070c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800514c:	2780      	movs	r7, #128	@ 0x80
 800514e:	970c      	str	r7, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005150:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005152:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005154:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005156:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8005158:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800515a:	a90c      	add	r1, sp, #48	@ 0x30
 800515c:	4648      	mov	r0, r9
 800515e:	f001 ffaf 	bl	80070c0 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005162:	4a50      	ldr	r2, [pc, #320]	@ (80052a4 <MX_USART1_UART_Init+0x1d8>)
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	213f      	movs	r1, #63	@ 0x3f
 8005168:	468a      	mov	sl, r1
 800516a:	438b      	bics	r3, r1
 800516c:	390d      	subs	r1, #13
 800516e:	430b      	orrs	r3, r1
 8005170:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005172:	4b4d      	ldr	r3, [pc, #308]	@ (80052a8 <MX_USART1_UART_Init+0x1dc>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	494d      	ldr	r1, [pc, #308]	@ (80052ac <MX_USART1_UART_Init+0x1e0>)
 8005178:	4689      	mov	r9, r1
 800517a:	400a      	ands	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	494b      	ldr	r1, [pc, #300]	@ (80052b0 <MX_USART1_UART_Init+0x1e4>)
 8005182:	468c      	mov	ip, r1
 8005184:	400a      	ands	r2, r1
 8005186:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	351e      	adds	r5, #30
 800518c:	43aa      	bics	r2, r5
 800518e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4641      	mov	r1, r8
 8005194:	438a      	bics	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	43ba      	bics	r2, r7
 800519c:	433a      	orrs	r2, r7
 800519e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4844      	ldr	r0, [pc, #272]	@ (80052b4 <MX_USART1_UART_Init+0x1e8>)
 80051a4:	4002      	ands	r2, r0
 80051a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4943      	ldr	r1, [pc, #268]	@ (80052b8 <MX_USART1_UART_Init+0x1ec>)
 80051ac:	468b      	mov	fp, r1
 80051ae:	400a      	ands	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80051b2:	4a42      	ldr	r2, [pc, #264]	@ (80052bc <MX_USART1_UART_Init+0x1f0>)
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	4651      	mov	r1, sl
 80051b8:	438b      	bics	r3, r1
 80051ba:	390c      	subs	r1, #12
 80051bc:	430b      	orrs	r3, r1
 80051be:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80051c0:	4b3f      	ldr	r3, [pc, #252]	@ (80052c0 <MX_USART1_UART_Init+0x1f4>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4649      	mov	r1, r9
 80051c6:	400a      	ands	r2, r1
 80051c8:	2110      	movs	r1, #16
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4661      	mov	r1, ip
 80051d2:	400a      	ands	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	43aa      	bics	r2, r5
 80051da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4641      	mov	r1, r8
 80051e0:	438a      	bics	r2, r1
 80051e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	43ba      	bics	r2, r7
 80051e8:	433a      	orrs	r2, r7
 80051ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4002      	ands	r2, r0
 80051f0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4659      	mov	r1, fp
 80051f6:	400a      	ands	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051fa:	4a32      	ldr	r2, [pc, #200]	@ (80052c4 <MX_USART1_UART_Init+0x1f8>)
 80051fc:	21c6      	movs	r1, #198	@ 0xc6
 80051fe:	0089      	lsls	r1, r1, #2
 8005200:	5853      	ldr	r3, [r2, r1]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	051b      	lsls	r3, r3, #20
 800520c:	6013      	str	r3, [r2, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800520e:	9412      	str	r4, [sp, #72]	@ 0x48
  USART_InitStruct.BaudRate = 115200;
 8005210:	23e1      	movs	r3, #225	@ 0xe1
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	9313      	str	r3, [sp, #76]	@ 0x4c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005216:	9414      	str	r4, [sp, #80]	@ 0x50
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005218:	9415      	str	r4, [sp, #84]	@ 0x54
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800521a:	9416      	str	r4, [sp, #88]	@ 0x58
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800521c:	230c      	movs	r3, #12
 800521e:	9317      	str	r3, [sp, #92]	@ 0x5c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005220:	9418      	str	r4, [sp, #96]	@ 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005222:	9419      	str	r4, [sp, #100]	@ 0x64
  LL_USART_Init(USART1, &USART_InitStruct);
 8005224:	4c28      	ldr	r4, [pc, #160]	@ (80052c8 <MX_USART1_UART_Init+0x1fc>)
 8005226:	a912      	add	r1, sp, #72	@ 0x48
 8005228:	0020      	movs	r0, r4
 800522a:	f002 faf5 	bl	8007818 <LL_USART_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	08db      	lsrs	r3, r3, #3
 800523c:	60a3      	str	r3, [r4, #8]
 800523e:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005242:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800524a:	68a3      	ldr	r3, [r4, #8]
 800524c:	491f      	ldr	r1, [pc, #124]	@ (80052cc <MX_USART1_UART_Init+0x200>)
 800524e:	400b      	ands	r3, r1
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <MX_USART1_UART_Init+0x204>)
 800525a:	4013      	ands	r3, r2
 800525c:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	4a1c      	ldr	r2, [pc, #112]	@ (80052d4 <MX_USART1_UART_Init+0x208>)
 8005262:	4013      	ands	r3, r2
 8005264:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	222a      	movs	r2, #42	@ 0x2a
 800526a:	4393      	bics	r3, r2
 800526c:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	4333      	orrs	r3, r6
 8005272:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005274:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <MX_USART1_UART_Init+0x1fc>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	d5fb      	bpl.n	8005274 <MX_USART1_UART_Init+0x1a8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <MX_USART1_UART_Init+0x1fc>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	025b      	lsls	r3, r3, #9
 8005282:	d5f7      	bpl.n	8005274 <MX_USART1_UART_Init+0x1a8>
  usart1_hart_init();
 8005284:	f7ff fec4 	bl	8005010 <usart1_hart_init>
}
 8005288:	b01b      	add	sp, #108	@ 0x6c
 800528a:	bcf0      	pop	{r4, r5, r6, r7}
 800528c:	46bb      	mov	fp, r7
 800528e:	46b2      	mov	sl, r6
 8005290:	46a9      	mov	r9, r5
 8005292:	46a0      	mov	r8, r4
 8005294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8005296:	f7ff f961 	bl	800455c <Error_Handler>
 800529a:	e735      	b.n	8005108 <MX_USART1_UART_Init+0x3c>
 800529c:	40021000 	.word	0x40021000
 80052a0:	50000400 	.word	0x50000400
 80052a4:	40020800 	.word	0x40020800
 80052a8:	40020008 	.word	0x40020008
 80052ac:	ffffbfef 	.word	0xffffbfef
 80052b0:	ffffcfff 	.word	0xffffcfff
 80052b4:	fffffcff 	.word	0xfffffcff
 80052b8:	fffff3ff 	.word	0xfffff3ff
 80052bc:	40020804 	.word	0x40020804
 80052c0:	4002001c 	.word	0x4002001c
 80052c4:	e000e100 	.word	0xe000e100
 80052c8:	40013800 	.word	0x40013800
 80052cc:	f1ffffff 	.word	0xf1ffffff
 80052d0:	dfffffff 	.word	0xdfffffff
 80052d4:	ffffb7ff 	.word	0xffffb7ff

080052d8 <usart2_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart2_hart_init(void) {
 80052d8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052de:	2101      	movs	r1, #1
 80052e0:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80052e4:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <usart2_hart_init+0xa0>)
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	200c      	movs	r0, #12
 80052ea:	4383      	bics	r3, r0
 80052ec:	4303      	orrs	r3, r0
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	2410      	movs	r4, #16
 8005300:	4323      	orrs	r3, r4
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005308:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <usart2_hart_init+0xa4>)
 800530a:	481d      	ldr	r0, [pc, #116]	@ (8005380 <usart2_hart_init+0xa8>)
 800530c:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_3,
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address for storing the received data
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                          (uint32_t)g_uart_out_rx_buf[g_uart_out_rx_index]);
 800530e:	481d      	ldr	r0, [pc, #116]	@ (8005384 <usart2_hart_init+0xac>)
 8005310:	7800      	ldrb	r0, [r0, #0]
 8005312:	0240      	lsls	r0, r0, #9
 8005314:	4d1c      	ldr	r5, [pc, #112]	@ (8005388 <usart2_hart_init+0xb0>)
 8005316:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005318:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800531a:	6858      	ldr	r0, [r3, #4]
 800531c:	0c00      	lsrs	r0, r0, #16
 800531e:	0400      	lsls	r0, r0, #16
 8005320:	2580      	movs	r5, #128	@ 0x80
 8005322:	006d      	lsls	r5, r5, #1
 8005324:	4328      	orrs	r0, r5
 8005326:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	3dfe      	subs	r5, #254	@ 0xfe
 800532c:	4328      	orrs	r0, r5
 800532e:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	2608      	movs	r6, #8
 8005334:	4330      	orrs	r0, r6
 8005336:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	4308      	orrs	r0, r1
 800533c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005342:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005346:	6893      	ldr	r3, [r2, #8]
 8005348:	3638      	adds	r6, #56	@ 0x38
 800534a:	4333      	orrs	r3, r6
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005352:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005354:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <usart2_hart_init+0xb4>)
 8005356:	480e      	ldr	r0, [pc, #56]	@ (8005390 <usart2_hart_init+0xb8>)
 8005358:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005362:	6891      	ldr	r1, [r2, #8]
 8005364:	3470      	adds	r4, #112	@ 0x70
 8005366:	4321      	orrs	r1, r4
 8005368:	6091      	str	r1, [r2, #8]
 800536a:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	432a      	orrs	r2, r5
 8005372:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART2 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART2);
  // Enable DMA transfer complete interrupt for USART2 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
}
 8005374:	bd70      	pop	{r4, r5, r6, pc}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	40004400 	.word	0x40004400
 800537c:	40020030 	.word	0x40020030
 8005380:	40004424 	.word	0x40004424
 8005384:	20000400 	.word	0x20000400
 8005388:	20000404 	.word	0x20000404
 800538c:	40020044 	.word	0x40020044
 8005390:	40004428 	.word	0x40004428

08005394 <MX_USART2_UART_Init>:
void MX_USART2_UART_Init(void) {
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005396:	46de      	mov	lr, fp
 8005398:	4657      	mov	r7, sl
 800539a:	464e      	mov	r6, r9
 800539c:	4645      	mov	r5, r8
 800539e:	b5e0      	push	{r5, r6, r7, lr}
 80053a0:	b091      	sub	sp, #68	@ 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80053a2:	2620      	movs	r6, #32
 80053a4:	2220      	movs	r2, #32
 80053a6:	2100      	movs	r1, #0
 80053a8:	a808      	add	r0, sp, #32
 80053aa:	f002 fa8b 	bl	80078c4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ae:	2218      	movs	r2, #24
 80053b0:	2100      	movs	r1, #0
 80053b2:	a802      	add	r0, sp, #8
 80053b4:	f002 fa86 	bl	80078c4 <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 80053b8:	4b56      	ldr	r3, [pc, #344]	@ (8005514 <MX_USART2_UART_Init+0x180>)
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	2180      	movs	r1, #128	@ 0x80
 80053be:	0289      	lsls	r1, r1, #10
 80053c0:	430a      	orrs	r2, r1
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80053c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053c6:	400a      	ands	r2, r1
 80053c8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80053ca:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80053cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ce:	2501      	movs	r5, #1
 80053d0:	432a      	orrs	r2, r5
 80053d2:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	402b      	ands	r3, r5
 80053d8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80053da:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80053dc:	2304      	movs	r3, #4
 80053de:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80053e0:	2402      	movs	r4, #2
 80053e2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80053e4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80053e6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80053e8:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ea:	27a0      	movs	r7, #160	@ 0xa0
 80053ec:	05ff      	lsls	r7, r7, #23
 80053ee:	a902      	add	r1, sp, #8
 80053f0:	0038      	movs	r0, r7
 80053f2:	f001 fe65 	bl	80070c0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80053f6:	2308      	movs	r3, #8
 80053f8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80053fa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80053fc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80053fe:	2400      	movs	r4, #0
 8005400:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005402:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005404:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005406:	a902      	add	r1, sp, #8
 8005408:	0038      	movs	r0, r7
 800540a:	f001 fe59 	bl	80070c0 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800540e:	4a42      	ldr	r2, [pc, #264]	@ (8005518 <MX_USART2_UART_Init+0x184>)
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	213f      	movs	r1, #63	@ 0x3f
 8005414:	468a      	mov	sl, r1
 8005416:	438b      	bics	r3, r1
 8005418:	390b      	subs	r1, #11
 800541a:	430b      	orrs	r3, r1
 800541c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800541e:	4b3f      	ldr	r3, [pc, #252]	@ (800551c <MX_USART2_UART_Init+0x188>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	493f      	ldr	r1, [pc, #252]	@ (8005520 <MX_USART2_UART_Init+0x18c>)
 8005424:	4689      	mov	r9, r1
 8005426:	400a      	ands	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	493d      	ldr	r1, [pc, #244]	@ (8005524 <MX_USART2_UART_Init+0x190>)
 800542e:	4688      	mov	r8, r1
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	43b2      	bics	r2, r6
 8005438:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2140      	movs	r1, #64	@ 0x40
 800543e:	468c      	mov	ip, r1
 8005440:	438a      	bics	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2780      	movs	r7, #128	@ 0x80
 8005448:	43ba      	bics	r2, r7
 800544a:	433a      	orrs	r2, r7
 800544c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4835      	ldr	r0, [pc, #212]	@ (8005528 <MX_USART2_UART_Init+0x194>)
 8005452:	4002      	ands	r2, r0
 8005454:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4934      	ldr	r1, [pc, #208]	@ (800552c <MX_USART2_UART_Init+0x198>)
 800545a:	468b      	mov	fp, r1
 800545c:	400a      	ands	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005460:	4a33      	ldr	r2, [pc, #204]	@ (8005530 <MX_USART2_UART_Init+0x19c>)
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	4651      	mov	r1, sl
 8005466:	438b      	bics	r3, r1
 8005468:	390a      	subs	r1, #10
 800546a:	430b      	orrs	r3, r1
 800546c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800546e:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <MX_USART2_UART_Init+0x1a0>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4649      	mov	r1, r9
 8005474:	400a      	ands	r2, r1
 8005476:	2110      	movs	r1, #16
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4641      	mov	r1, r8
 8005480:	400a      	ands	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	43b2      	bics	r2, r6
 8005488:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4661      	mov	r1, ip
 800548e:	438a      	bics	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	43ba      	bics	r2, r7
 8005496:	433a      	orrs	r2, r7
 8005498:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4002      	ands	r2, r0
 800549e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4659      	mov	r1, fp
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054a8:	4b23      	ldr	r3, [pc, #140]	@ (8005538 <MX_USART2_UART_Init+0x1a4>)
 80054aa:	21c7      	movs	r1, #199	@ 0xc7
 80054ac:	0089      	lsls	r1, r1, #2
 80054ae:	585a      	ldr	r2, [r3, r1]
 80054b0:	20ff      	movs	r0, #255	@ 0xff
 80054b2:	4382      	bics	r2, r0
 80054b4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b6:	2280      	movs	r2, #128	@ 0x80
 80054b8:	0552      	lsls	r2, r2, #21
 80054ba:	601a      	str	r2, [r3, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80054bc:	9408      	str	r4, [sp, #32]
  USART_InitStruct.BaudRate = 115200;
 80054be:	23e1      	movs	r3, #225	@ 0xe1
 80054c0:	025b      	lsls	r3, r3, #9
 80054c2:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80054c4:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80054c6:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80054c8:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80054ca:	230c      	movs	r3, #12
 80054cc:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80054ce:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80054d0:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80054d2:	4c1a      	ldr	r4, [pc, #104]	@ (800553c <MX_USART2_UART_Init+0x1a8>)
 80054d4:	a908      	add	r1, sp, #32
 80054d6:	0020      	movs	r0, r4
 80054d8:	f002 f99e 	bl	8007818 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <MX_USART2_UART_Init+0x1ac>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	222a      	movs	r2, #42	@ 0x2a
 80054e8:	4393      	bics	r3, r2
 80054ea:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	432b      	orrs	r3, r5
 80054f0:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <MX_USART2_UART_Init+0x1a8>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	029b      	lsls	r3, r3, #10
 80054f8:	d5fb      	bpl.n	80054f2 <MX_USART2_UART_Init+0x15e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80054fa:	4b10      	ldr	r3, [pc, #64]	@ (800553c <MX_USART2_UART_Init+0x1a8>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	025b      	lsls	r3, r3, #9
 8005500:	d5f7      	bpl.n	80054f2 <MX_USART2_UART_Init+0x15e>
  usart2_hart_init();
 8005502:	f7ff fee9 	bl	80052d8 <usart2_hart_init>
}
 8005506:	b011      	add	sp, #68	@ 0x44
 8005508:	bcf0      	pop	{r4, r5, r6, r7}
 800550a:	46bb      	mov	fp, r7
 800550c:	46b2      	mov	sl, r6
 800550e:	46a9      	mov	r9, r5
 8005510:	46a0      	mov	r8, r4
 8005512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	40020808 	.word	0x40020808
 800551c:	40020030 	.word	0x40020030
 8005520:	ffffbfef 	.word	0xffffbfef
 8005524:	ffffcfff 	.word	0xffffcfff
 8005528:	fffffcff 	.word	0xfffffcff
 800552c:	fffff3ff 	.word	0xfffff3ff
 8005530:	4002080c 	.word	0x4002080c
 8005534:	40020044 	.word	0x40020044
 8005538:	e000e100 	.word	0xe000e100
 800553c:	40004400 	.word	0x40004400
 8005540:	ffffb7ff 	.word	0xffffb7ff

08005544 <usart1_transmit_dma>:
 *            contain the data that you want to send over USART1.
 * @param size Size of the data to be transmitted, specifying the number of
 *             bytes in the buffer to send.
 * @retval None
 */
void usart1_transmit_dma(uint8_t *buf, uint16_t size) {
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	000c      	movs	r4, r1
  // Check if the previous transmission is complete
  if (g_uart_in_transmit_complete) {
 8005548:	4b1e      	ldr	r3, [pc, #120]	@ (80055c4 <usart1_transmit_dma+0x80>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <usart1_transmit_dma+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005550:	b672      	cpsid	i
    __disable_irq(); // Disable interrupts to protect the critical section
    g_uart_in_transmit_complete = 0; // Mark transmission as in progress
 8005552:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <usart1_transmit_dma+0x80>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005558:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <usart1_transmit_dma+0x84>)
 800555a:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800555c:	6853      	ldr	r3, [r2, #4]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	0419      	lsls	r1, r3, #16
 8005562:	4321      	orrs	r1, r4
 8005564:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	430b      	orrs	r3, r1
 800556c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800556e:	b662      	cpsie	i
      tx_in_buffer.packet_count++;

      __enable_irq(); // Re-enable interrupts after critical section
    }
  }
}
 8005570:	bd70      	pop	{r4, r5, r6, pc}
    if (tx_in_buffer.packet_count < MAX_QUEUE_SIZE && size < BUFFER_SIZE) {
 8005572:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <usart1_transmit_dma+0x88>)
 8005574:	22c2      	movs	r2, #194	@ 0xc2
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d8f8      	bhi.n	8005570 <usart1_transmit_dma+0x2c>
 800557e:	29ff      	cmp	r1, #255	@ 0xff
 8005580:	d8f6      	bhi.n	8005570 <usart1_transmit_dma+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8005582:	b672      	cpsid	i
      memcpy(tx_in_buffer.send_queue[tx_in_buffer.tail].data, buf, size);
 8005584:	4d11      	ldr	r5, [pc, #68]	@ (80055cc <usart1_transmit_dma+0x88>)
 8005586:	4e12      	ldr	r6, [pc, #72]	@ (80055d0 <usart1_transmit_dma+0x8c>)
 8005588:	5daa      	ldrb	r2, [r5, r6]
 800558a:	01d3      	lsls	r3, r2, #7
 800558c:	189b      	adds	r3, r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	195b      	adds	r3, r3, r5
 8005592:	000a      	movs	r2, r1
 8005594:	0001      	movs	r1, r0
 8005596:	0018      	movs	r0, r3
 8005598:	f002 f9c0 	bl	800791c <memcpy>
      tx_in_buffer.send_queue[tx_in_buffer.tail].length = size;
 800559c:	5da8      	ldrb	r0, [r5, r6]
 800559e:	01c3      	lsls	r3, r0, #7
 80055a0:	181b      	adds	r3, r3, r0
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	18eb      	adds	r3, r5, r3
 80055a6:	3301      	adds	r3, #1
 80055a8:	33ff      	adds	r3, #255	@ 0xff
 80055aa:	801c      	strh	r4, [r3, #0]
      tx_in_buffer.tail = (tx_in_buffer.tail + 1) % MAX_QUEUE_SIZE;
 80055ac:	3001      	adds	r0, #1
 80055ae:	2103      	movs	r1, #3
 80055b0:	f7fc ff1a 	bl	80023e8 <__aeabi_idivmod>
 80055b4:	55a9      	strb	r1, [r5, r6]
      tx_in_buffer.packet_count++;
 80055b6:	22c2      	movs	r2, #194	@ 0xc2
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	5cab      	ldrb	r3, [r5, r2]
 80055bc:	3301      	adds	r3, #1
 80055be:	54ab      	strb	r3, [r5, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 80055c0:	b662      	cpsie	i
}
 80055c2:	e7d5      	b.n	8005570 <usart1_transmit_dma+0x2c>
 80055c4:	200000c5 	.word	0x200000c5
 80055c8:	4002001c 	.word	0x4002001c
 80055cc:	20000f10 	.word	0x20000f10
 80055d0:	00000307 	.word	0x00000307

080055d4 <usart2_transmit_dma>:
 *            contain the data that you want to send over USART2.
 * @param size Size of the data to be transmitted, specifying the number of
 *             bytes in the buffer to send.
 * @retval None
 */
void usart2_transmit_dma(uint8_t *buf, uint16_t size) {
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	000c      	movs	r4, r1
  // Check if the previous transmission is complete
  if (g_uart_out_transmit_complete) {
 80055d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <usart2_transmit_dma+0x80>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <usart2_transmit_dma+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80055e0:	b672      	cpsid	i
    __disable_irq(); // Disable interrupts to protect the critical section
    g_uart_out_transmit_complete = 0; // Mark transmission as in progress
 80055e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <usart2_transmit_dma+0x80>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80055e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <usart2_transmit_dma+0x84>)
 80055ea:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80055ec:	6853      	ldr	r3, [r2, #4]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	0419      	lsls	r1, r3, #16
 80055f2:	4321      	orrs	r1, r4
 80055f4:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	2101      	movs	r1, #1
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055fe:	b662      	cpsie	i
      tx_out_buffer.packet_count++;

      __enable_irq(); // Re-enable interrupts after critical section
    }
  }
}
 8005600:	bd70      	pop	{r4, r5, r6, pc}
    if (tx_out_buffer.packet_count < MAX_QUEUE_SIZE && size < BUFFER_SIZE) {
 8005602:	4b16      	ldr	r3, [pc, #88]	@ (800565c <usart2_transmit_dma+0x88>)
 8005604:	22c2      	movs	r2, #194	@ 0xc2
 8005606:	0092      	lsls	r2, r2, #2
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d8f8      	bhi.n	8005600 <usart2_transmit_dma+0x2c>
 800560e:	29ff      	cmp	r1, #255	@ 0xff
 8005610:	d8f6      	bhi.n	8005600 <usart2_transmit_dma+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8005612:	b672      	cpsid	i
      memcpy(tx_out_buffer.send_queue[tx_out_buffer.tail].data, buf, size);
 8005614:	4d11      	ldr	r5, [pc, #68]	@ (800565c <usart2_transmit_dma+0x88>)
 8005616:	4e12      	ldr	r6, [pc, #72]	@ (8005660 <usart2_transmit_dma+0x8c>)
 8005618:	5daa      	ldrb	r2, [r5, r6]
 800561a:	01d3      	lsls	r3, r2, #7
 800561c:	189b      	adds	r3, r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	195b      	adds	r3, r3, r5
 8005622:	000a      	movs	r2, r1
 8005624:	0001      	movs	r1, r0
 8005626:	0018      	movs	r0, r3
 8005628:	f002 f978 	bl	800791c <memcpy>
      tx_out_buffer.send_queue[tx_out_buffer.tail].length = size;
 800562c:	5da8      	ldrb	r0, [r5, r6]
 800562e:	01c3      	lsls	r3, r0, #7
 8005630:	181b      	adds	r3, r3, r0
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	18eb      	adds	r3, r5, r3
 8005636:	3301      	adds	r3, #1
 8005638:	33ff      	adds	r3, #255	@ 0xff
 800563a:	801c      	strh	r4, [r3, #0]
      tx_out_buffer.tail = (tx_out_buffer.tail + 1) % MAX_QUEUE_SIZE;
 800563c:	3001      	adds	r0, #1
 800563e:	2103      	movs	r1, #3
 8005640:	f7fc fed2 	bl	80023e8 <__aeabi_idivmod>
 8005644:	55a9      	strb	r1, [r5, r6]
      tx_out_buffer.packet_count++;
 8005646:	22c2      	movs	r2, #194	@ 0xc2
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	5cab      	ldrb	r3, [r5, r2]
 800564c:	3301      	adds	r3, #1
 800564e:	54ab      	strb	r3, [r5, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 8005650:	b662      	cpsie	i
}
 8005652:	e7d5      	b.n	8005600 <usart2_transmit_dma+0x2c>
 8005654:	200000c4 	.word	0x200000c4
 8005658:	40020044 	.word	0x40020044
 800565c:	20000c04 	.word	0x20000c04
 8005660:	00000307 	.word	0x00000307

08005664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005664:	480d      	ldr	r0, [pc, #52]	@ (800569c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005666:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005668:	f7ff fafc 	bl	8004c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800566c:	480c      	ldr	r0, [pc, #48]	@ (80056a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800566e:	490d      	ldr	r1, [pc, #52]	@ (80056a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005670:	4a0d      	ldr	r2, [pc, #52]	@ (80056a8 <LoopForever+0xe>)
  movs r3, #0
 8005672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005674:	e002      	b.n	800567c <LoopCopyDataInit>

08005676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800567a:	3304      	adds	r3, #4

0800567c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800567c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800567e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005680:	d3f9      	bcc.n	8005676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005682:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8005684:	4c0a      	ldr	r4, [pc, #40]	@ (80056b0 <LoopForever+0x16>)
  movs r3, #0
 8005686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005688:	e001      	b.n	800568e <LoopFillZerobss>

0800568a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800568a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800568c:	3204      	adds	r2, #4

0800568e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800568e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005690:	d3fb      	bcc.n	800568a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005692:	f002 f91f 	bl	80078d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005696:	f7fe ffa5 	bl	80045e4 <main>

0800569a <LoopForever>:

LoopForever:
  b LoopForever
 800569a:	e7fe      	b.n	800569a <LoopForever>
  ldr   r0, =_estack
 800569c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80056a0:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 80056a4:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80056a8:	08007a9c 	.word	0x08007a9c
  ldr r2, =_sbss
 80056ac:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80056b0:	2000123c 	.word	0x2000123c

080056b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056b4:	e7fe      	b.n	80056b4 <ADC1_IRQHandler>

080056b6 <get_page>:
 * @param addr The memory address to check.
 * @retval The page number corresponding to the provided address.
 */
static uint32_t get_page(uint32_t addr)
{
    return (addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / STM32G0xx_PAGE_SIZE; // Return the page number
 80056b6:	23f8      	movs	r3, #248	@ 0xf8
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	469c      	mov	ip, r3
 80056bc:	4460      	add	r0, ip
 80056be:	0ac0      	lsrs	r0, r0, #11
}
 80056c0:	4770      	bx	lr

080056c2 <set_byte_in_uint64>:
 * @param byte_index The index of the byte to modify (0-7).
 * @param new_value The new byte value to set (0-255).
 * @retval None
 */
static void set_byte_in_uint64(uint64_t *data, uint8_t byte_index, uint8_t new_value)
{
 80056c2:	b570      	push	{r4, r5, r6, lr}
    // Clear the byte at the specified index
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 80056c4:	6804      	ldr	r4, [r0, #0]
 80056c6:	6843      	ldr	r3, [r0, #4]
 80056c8:	00c9      	lsls	r1, r1, #3
 80056ca:	000e      	movs	r6, r1
 80056cc:	3e20      	subs	r6, #32
 80056ce:	d413      	bmi.n	80056f8 <set_byte_in_uint64+0x36>
 80056d0:	25ff      	movs	r5, #255	@ 0xff
 80056d2:	40b5      	lsls	r5, r6
 80056d4:	26ff      	movs	r6, #255	@ 0xff
 80056d6:	408e      	lsls	r6, r1
 80056d8:	43b4      	bics	r4, r6
 80056da:	43ab      	bics	r3, r5
 80056dc:	6004      	str	r4, [r0, #0]
 80056de:	6043      	str	r3, [r0, #4]
    // Set the new byte value
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 80056e0:	000d      	movs	r5, r1
 80056e2:	3d20      	subs	r5, #32
 80056e4:	d40d      	bmi.n	8005702 <set_byte_in_uint64+0x40>
 80056e6:	0016      	movs	r6, r2
 80056e8:	40ae      	lsls	r6, r5
 80056ea:	0035      	movs	r5, r6
 80056ec:	408a      	lsls	r2, r1
 80056ee:	4314      	orrs	r4, r2
 80056f0:	6004      	str	r4, [r0, #0]
 80056f2:	432b      	orrs	r3, r5
 80056f4:	6043      	str	r3, [r0, #4]
}
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 80056f8:	2620      	movs	r6, #32
 80056fa:	1a76      	subs	r6, r6, r1
 80056fc:	25ff      	movs	r5, #255	@ 0xff
 80056fe:	40f5      	lsrs	r5, r6
 8005700:	e7e8      	b.n	80056d4 <set_byte_in_uint64+0x12>
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 8005702:	2520      	movs	r5, #32
 8005704:	1a6d      	subs	r5, r5, r1
 8005706:	0016      	movs	r6, r2
 8005708:	40ee      	lsrs	r6, r5
 800570a:	0035      	movs	r5, r6
 800570c:	e7ee      	b.n	80056ec <set_byte_in_uint64+0x2a>

0800570e <my_flash_read_double_word>:
 * @param address The memory address from which to read.
 * @retval The 64-bit value read from the memory address.
 */
static uint64_t my_flash_read_double_word(uint32_t address)
{
    return *((__IO uint64_t *)(address)); // Read and return the 64-bit value
 800570e:	6841      	ldr	r1, [r0, #4]
 8005710:	6800      	ldr	r0, [r0, #0]
}
 8005712:	4770      	bx	lr

08005714 <my_flash_earse_pages>:
 *
 * @param page_address The address of the page to be erased.
 * @retval Success status (true if successful, false otherwise).
 */
static bool my_flash_earse_pages(uint32_t page_address)
{
 8005714:	b510      	push	{r4, lr}
 8005716:	b086      	sub	sp, #24
    uint32_t page_error = 0; // Variable to hold error information if the erase fails
 8005718:	2300      	movs	r3, #0
 800571a:	9305      	str	r3, [sp, #20]
    FLASH_EraseInitTypeDef my_flash; // Structure for flash erase initialization

    my_flash.TypeErase = FLASH_TYPEERASE_PAGES; // Specify that we are erasing pages
 800571c:	3302      	adds	r3, #2
 800571e:	9301      	str	r3, [sp, #4]
    my_flash.Page = get_page(page_address); // Get the page number based on the address
 8005720:	f7ff ffc9 	bl	80056b6 <get_page>
 8005724:	9003      	str	r0, [sp, #12]
    my_flash.NbPages = 1; // Specify that we want to erase one page
 8005726:	2301      	movs	r3, #1
 8005728:	9304      	str	r3, [sp, #16]

    HAL_FLASH_Unlock(); // Unlock the flash memory for write access
 800572a:	f000 fe73 	bl	8006414 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&my_flash, &page_error); // Perform the erase operation
 800572e:	a905      	add	r1, sp, #20
 8005730:	a801      	add	r0, sp, #4
 8005732:	f000 ff1d 	bl	8006570 <HAL_FLASHEx_Erase>
 8005736:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 8005738:	f000 feec 	bl	8006514 <HAL_FLASH_Lock>

    // Return true if the erase was successful, false otherwise
    return (status == HAL_OK) ? true : false;
 800573c:	4263      	negs	r3, r4
 800573e:	415c      	adcs	r4, r3
 8005740:	b2e0      	uxtb	r0, r4
}
 8005742:	b006      	add	sp, #24
 8005744:	bd10      	pop	{r4, pc}

08005746 <my_flash_write_double_word>:
 * @param address The memory address to which the data will be written.
 * @param data The 64-bit data to be written.
 * @retval true if the write operation is successful, false otherwise.
 */
static bool my_flash_write_double_word(uint32_t address, uint64_t data)
{
 8005746:	b570      	push	{r4, r5, r6, lr}
 8005748:	0004      	movs	r4, r0
 800574a:	0016      	movs	r6, r2
 800574c:	001d      	movs	r5, r3
    HAL_FLASH_Unlock(); // Unlock the flash memory for writing
 800574e:	f000 fe61 	bl	8006414 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data); // Program the double word
 8005752:	0032      	movs	r2, r6
 8005754:	002b      	movs	r3, r5
 8005756:	0021      	movs	r1, r4
 8005758:	2001      	movs	r0, #1
 800575a:	f000 fea9 	bl	80064b0 <HAL_FLASH_Program>
 800575e:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 8005760:	f000 fed8 	bl	8006514 <HAL_FLASH_Lock>

    return (status == HAL_OK); // Return success status
 8005764:	4263      	negs	r3, r4
 8005766:	415c      	adcs	r4, r3
 8005768:	b2e0      	uxtb	r0, r4
}
 800576a:	bd70      	pop	{r4, r5, r6, pc}

0800576c <get_rgb_light>:
 * @param None
 * @retval The current RGB brightness value.
 */
uint8_t get_rgb_light(void)
{
    return *((__IO uint8_t *)(RGB_LIGHT_ADDR)); // Read and return the current RGB brightness value
 800576c:	4b01      	ldr	r3, [pc, #4]	@ (8005774 <get_rgb_light+0x8>)
 800576e:	7818      	ldrb	r0, [r3, #0]
 8005770:	b2c0      	uxtb	r0, r0
}
 8005772:	4770      	bx	lr
 8005774:	0800c001 	.word	0x0800c001

08005778 <set_rgb_light>:
{
 8005778:	b530      	push	{r4, r5, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	0004      	movs	r4, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR); // Read current RGB light data
 800577e:	4d0e      	ldr	r5, [pc, #56]	@ (80057b8 <set_rgb_light+0x40>)
 8005780:	0028      	movs	r0, r5
 8005782:	f7ff ffc4 	bl	800570e <my_flash_read_double_word>
 8005786:	9000      	str	r0, [sp, #0]
 8005788:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 1, data); // Modify the brightness byte
 800578a:	0022      	movs	r2, r4
 800578c:	2101      	movs	r1, #1
 800578e:	4668      	mov	r0, sp
 8005790:	f7ff ff97 	bl	80056c2 <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR); // Erase the flash page
 8005794:	0028      	movs	r0, r5
 8005796:	f7ff ffbd 	bl	8005714 <my_flash_earse_pages>
    while (!my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp))
 800579a:	9a00      	ldr	r2, [sp, #0]
 800579c:	9b01      	ldr	r3, [sp, #4]
 800579e:	4806      	ldr	r0, [pc, #24]	@ (80057b8 <set_rgb_light+0x40>)
 80057a0:	f7ff ffd1 	bl	8005746 <my_flash_write_double_word>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0f8      	beq.n	800579a <set_rgb_light+0x22>
    return (get_rgb_light() == data);
 80057a8:	f7ff ffe0 	bl	800576c <get_rgb_light>
 80057ac:	1b00      	subs	r0, r0, r4
 80057ae:	4243      	negs	r3, r0
 80057b0:	4158      	adcs	r0, r3
 80057b2:	b2c0      	uxtb	r0, r0
}
 80057b4:	b003      	add	sp, #12
 80057b6:	bd30      	pop	{r4, r5, pc}
 80057b8:	0800c000 	.word	0x0800c000

080057bc <get_bootloader_version>:
 * @param None
 * @retval The bootloader version number.
 */
uint8_t get_bootloader_version(void)
{
    return *((__IO uint8_t *)(BOOTLOADER_VERSION_ADDR)); // Read and return the bootloader version number
 80057bc:	4b01      	ldr	r3, [pc, #4]	@ (80057c4 <get_bootloader_version+0x8>)
 80057be:	7818      	ldrb	r0, [r3, #0]
 80057c0:	b2c0      	uxtb	r0, r0
}
 80057c2:	4770      	bx	lr
 80057c4:	08001fff 	.word	0x08001fff

080057c8 <get_clockwise_status>:
 *
 * @param None
 * @retval The current clockwise status value (0 or 1).
 */
uint8_t get_clockwise_status(void) {
    return *((__IO uint8_t*) (CLOCKWISE_STATUS_ADDR)); // Read and return the value from the specified address
 80057c8:	4b01      	ldr	r3, [pc, #4]	@ (80057d0 <get_clockwise_status+0x8>)
 80057ca:	7818      	ldrb	r0, [r3, #0]
 80057cc:	b2c0      	uxtb	r0, r0
}
 80057ce:	4770      	bx	lr
 80057d0:	0800c000 	.word	0x0800c000

080057d4 <set_clockwise_status>:
bool set_clockwise_status(uint8_t data) {
 80057d4:	b530      	push	{r4, r5, lr}
 80057d6:	b083      	sub	sp, #12
 80057d8:	0005      	movs	r5, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR); // Read the current double word from flash memory
 80057da:	4c0e      	ldr	r4, [pc, #56]	@ (8005814 <set_clockwise_status+0x40>)
 80057dc:	0020      	movs	r0, r4
 80057de:	f7ff ff96 	bl	800570e <my_flash_read_double_word>
 80057e2:	9000      	str	r0, [sp, #0]
 80057e4:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 0, data); // Set the specified byte in the double word to the new data
 80057e6:	002a      	movs	r2, r5
 80057e8:	2100      	movs	r1, #0
 80057ea:	4668      	mov	r0, sp
 80057ec:	f7ff ff69 	bl	80056c2 <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR); // Erase the flash page before writing
 80057f0:	0020      	movs	r0, r4
 80057f2:	f7ff ff8f 	bl	8005714 <my_flash_earse_pages>
    while (my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp) != true) {
 80057f6:	9a00      	ldr	r2, [sp, #0]
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	4806      	ldr	r0, [pc, #24]	@ (8005814 <set_clockwise_status+0x40>)
 80057fc:	f7ff ffa3 	bl	8005746 <my_flash_write_double_word>
 8005800:	1e04      	subs	r4, r0, #0
 8005802:	d0f8      	beq.n	80057f6 <set_clockwise_status+0x22>
    uint8_t dat = get_clockwise_status(); // Retrieve the current clockwise status after writing
 8005804:	f7ff ffe0 	bl	80057c8 <get_clockwise_status>
    if (dat == data) {
 8005808:	4285      	cmp	r5, r0
 800580a:	d000      	beq.n	800580e <set_clockwise_status+0x3a>
    return false; // Return false if the data does not match
 800580c:	2400      	movs	r4, #0
}
 800580e:	0020      	movs	r0, r4
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	0800c000 	.word	0x0800c000

08005818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005818:	b510      	push	{r4, lr}
 800581a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800581c:	4b11      	ldr	r3, [pc, #68]	@ (8005864 <HAL_InitTick+0x4c>)
 800581e:	7819      	ldrb	r1, [r3, #0]
 8005820:	2900      	cmp	r1, #0
 8005822:	d101      	bne.n	8005828 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005824:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005826:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005828:	20fa      	movs	r0, #250	@ 0xfa
 800582a:	0080      	lsls	r0, r0, #2
 800582c:	f7fc fc6c 	bl	8002108 <__udivsi3>
 8005830:	0001      	movs	r1, r0
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <HAL_InitTick+0x50>)
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f7fc fc67 	bl	8002108 <__udivsi3>
 800583a:	f000 fd77 	bl	800632c <HAL_SYSTICK_Config>
 800583e:	2800      	cmp	r0, #0
 8005840:	d10d      	bne.n	800585e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005842:	2c03      	cmp	r4, #3
 8005844:	d901      	bls.n	800584a <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8005846:	2001      	movs	r0, #1
 8005848:	e7ed      	b.n	8005826 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800584a:	3001      	adds	r0, #1
 800584c:	2200      	movs	r2, #0
 800584e:	0021      	movs	r1, r4
 8005850:	4240      	negs	r0, r0
 8005852:	f000 fd5b 	bl	800630c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005856:	4b05      	ldr	r3, [pc, #20]	@ (800586c <HAL_InitTick+0x54>)
 8005858:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800585a:	2000      	movs	r0, #0
 800585c:	e7e3      	b.n	8005826 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800585e:	2001      	movs	r0, #1
 8005860:	e7e1      	b.n	8005826 <HAL_InitTick+0xe>
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	200000e4 	.word	0x200000e4
 8005868:	200000e0 	.word	0x200000e0
 800586c:	200000e8 	.word	0x200000e8

08005870 <HAL_Init>:
{
 8005870:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005872:	4a08      	ldr	r2, [pc, #32]	@ (8005894 <HAL_Init+0x24>)
 8005874:	6811      	ldr	r1, [r2, #0]
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	430b      	orrs	r3, r1
 800587c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800587e:	2003      	movs	r0, #3
 8005880:	f7ff ffca 	bl	8005818 <HAL_InitTick>
 8005884:	1e04      	subs	r4, r0, #0
 8005886:	d002      	beq.n	800588e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8005888:	2401      	movs	r4, #1
}
 800588a:	0020      	movs	r0, r4
 800588c:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800588e:	f7fe ff5d 	bl	800474c <HAL_MspInit>
 8005892:	e7fa      	b.n	800588a <HAL_Init+0x1a>
 8005894:	40022000 	.word	0x40022000

08005898 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005898:	4b03      	ldr	r3, [pc, #12]	@ (80058a8 <HAL_IncTick+0x10>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4a03      	ldr	r2, [pc, #12]	@ (80058ac <HAL_IncTick+0x14>)
 800589e:	6811      	ldr	r1, [r2, #0]
 80058a0:	185b      	adds	r3, r3, r1
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	4770      	bx	lr
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	200000e4 	.word	0x200000e4
 80058ac:	2000121c 	.word	0x2000121c

080058b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80058b0:	4b01      	ldr	r3, [pc, #4]	@ (80058b8 <HAL_GetTick+0x8>)
 80058b2:	6818      	ldr	r0, [r3, #0]
}
 80058b4:	4770      	bx	lr
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	2000121c 	.word	0x2000121c

080058bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058c0:	f7ff fff6 	bl	80058b0 <HAL_GetTick>
 80058c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058c6:	1c63      	adds	r3, r4, #1
 80058c8:	d002      	beq.n	80058d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ca:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <HAL_Delay+0x20>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058d0:	f7ff ffee 	bl	80058b0 <HAL_GetTick>
 80058d4:	1b40      	subs	r0, r0, r5
 80058d6:	42a0      	cmp	r0, r4
 80058d8:	d3fa      	bcc.n	80058d0 <HAL_Delay+0x14>
  {
  }
}
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	200000e4 	.word	0x200000e4

080058e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058e0:	b530      	push	{r4, r5, lr}
 80058e2:	b083      	sub	sp, #12
 80058e4:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d100      	bne.n	80058f0 <HAL_ADC_Init+0x10>
 80058ee:	e106      	b.n	8005afe <HAL_ADC_Init+0x21e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058f0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d013      	beq.n	800591e <HAL_ADC_Init+0x3e>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058f6:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	00d2      	lsls	r2, r2, #3
 80058fc:	d41c      	bmi.n	8005938 <HAL_ADC_Init+0x58>
  MODIFY_REG(ADCx->CR,
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	4a80      	ldr	r2, [pc, #512]	@ (8005b04 <HAL_ADC_Init+0x224>)
 8005902:	4011      	ands	r1, r2
 8005904:	2280      	movs	r2, #128	@ 0x80
 8005906:	0552      	lsls	r2, r2, #21
 8005908:	430a      	orrs	r2, r1
 800590a:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800590c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b08 <HAL_ADC_Init+0x228>)
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	497e      	ldr	r1, [pc, #504]	@ (8005b0c <HAL_ADC_Init+0x22c>)
 8005912:	f7fc fbf9 	bl	8002108 <__udivsi3>
 8005916:	3001      	adds	r0, #1
 8005918:	0040      	lsls	r0, r0, #1
 800591a:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800591c:	e009      	b.n	8005932 <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 800591e:	f7fe fd2f 	bl	8004380 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005922:	2300      	movs	r3, #0
 8005924:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8005926:	2254      	movs	r2, #84	@ 0x54
 8005928:	54a3      	strb	r3, [r4, r2]
 800592a:	e7e4      	b.n	80058f6 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	3b01      	subs	r3, #1
 8005930:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f9      	bne.n	800592c <HAL_ADC_Init+0x4c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005938:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	00d2      	lsls	r2, r2, #3
 800593e:	d500      	bpl.n	8005942 <HAL_ADC_Init+0x62>
 8005940:	e09d      	b.n	8005a7e <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005942:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005944:	2110      	movs	r1, #16
 8005946:	430a      	orrs	r2, r1
 8005948:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800594a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800594c:	390f      	subs	r1, #15
 800594e:	430a      	orrs	r2, r1
 8005950:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005952:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	2104      	movs	r1, #4
 8005958:	000d      	movs	r5, r1
 800595a:	4015      	ands	r5, r2
 800595c:	4211      	tst	r1, r2
 800595e:	d000      	beq.n	8005962 <HAL_ADC_Init+0x82>
 8005960:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005962:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005964:	06d2      	lsls	r2, r2, #27
 8005966:	d500      	bpl.n	800596a <HAL_ADC_Init+0x8a>
 8005968:	e0c2      	b.n	8005af0 <HAL_ADC_Init+0x210>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800596a:	2d00      	cmp	r5, #0
 800596c:	d000      	beq.n	8005970 <HAL_ADC_Init+0x90>
 800596e:	e0bf      	b.n	8005af0 <HAL_ADC_Init+0x210>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005970:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005972:	4967      	ldr	r1, [pc, #412]	@ (8005b10 <HAL_ADC_Init+0x230>)
 8005974:	400a      	ands	r2, r1
 8005976:	3106      	adds	r1, #6
 8005978:	31ff      	adds	r1, #255	@ 0xff
 800597a:	430a      	orrs	r2, r1
 800597c:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	07d2      	lsls	r2, r2, #31
 8005982:	d452      	bmi.n	8005a2a <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005984:	68a2      	ldr	r2, [r4, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005986:	7e21      	ldrb	r1, [r4, #24]
 8005988:	0389      	lsls	r1, r1, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800598a:	430a      	orrs	r2, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800598c:	7e61      	ldrb	r1, [r4, #25]
 800598e:	03c9      	lsls	r1, r1, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005990:	430a      	orrs	r2, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005992:	7ea5      	ldrb	r5, [r4, #26]
 8005994:	0369      	lsls	r1, r5, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005996:	430a      	orrs	r2, r1
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005998:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800599a:	2900      	cmp	r1, #0
 800599c:	d001      	beq.n	80059a2 <HAL_ADC_Init+0xc2>
 800599e:	2180      	movs	r1, #128	@ 0x80
 80059a0:	0149      	lsls	r1, r1, #5
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80059a2:	430a      	orrs	r2, r1
                    hadc->Init.DataAlign                                           |
 80059a4:	68e1      	ldr	r1, [r4, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80059a6:	430a      	orrs	r2, r1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80059a8:	6921      	ldr	r1, [r4, #16]
 80059aa:	2900      	cmp	r1, #0
 80059ac:	db69      	blt.n	8005a82 <HAL_ADC_Init+0x1a2>
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	0389      	lsls	r1, r1, #14
                    hadc->Init.DataAlign                                           |
 80059b2:	430a      	orrs	r2, r1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059b4:	212c      	movs	r1, #44	@ 0x2c
 80059b6:	5c61      	ldrb	r1, [r4, r1]
 80059b8:	0049      	lsls	r1, r1, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80059ba:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059bc:	2120      	movs	r1, #32
 80059be:	5c61      	ldrb	r1, [r4, r1]
 80059c0:	2901      	cmp	r1, #1
 80059c2:	d061      	beq.n	8005a88 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80059c6:	2900      	cmp	r1, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_ADC_Init+0xf6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80059ca:	25e0      	movs	r5, #224	@ 0xe0
 80059cc:	006d      	lsls	r5, r5, #1
 80059ce:	4029      	ands	r1, r5
                      hadc->Init.ExternalTrigConvEdge);
 80059d0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80059d2:	4329      	orrs	r1, r5
 80059d4:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80059d6:	68d9      	ldr	r1, [r3, #12]
 80059d8:	4d4e      	ldr	r5, [pc, #312]	@ (8005b14 <HAL_ADC_Init+0x234>)
 80059da:	4029      	ands	r1, r5
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	0f9b      	lsrs	r3, r3, #30
 80059e4:	079b      	lsls	r3, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80059e6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80059e8:	431a      	orrs	r2, r3
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80059ea:	213c      	movs	r1, #60	@ 0x3c
 80059ec:	5c61      	ldrb	r1, [r4, r1]
 80059ee:	2901      	cmp	r1, #1
 80059f0:	d059      	beq.n	8005aa6 <HAL_ADC_Init+0x1c6>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	4d48      	ldr	r5, [pc, #288]	@ (8005b18 <HAL_ADC_Init+0x238>)
 80059f8:	402b      	ands	r3, r5
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	22c0      	movs	r2, #192	@ 0xc0
 8005a02:	0612      	lsls	r2, r2, #24
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d010      	beq.n	8005a2a <HAL_ADC_Init+0x14a>
 8005a08:	2280      	movs	r2, #128	@ 0x80
 8005a0a:	05d2      	lsls	r2, r2, #23
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00c      	beq.n	8005a2a <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005a10:	2280      	movs	r2, #128	@ 0x80
 8005a12:	0612      	lsls	r2, r2, #24
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d008      	beq.n	8005a2a <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005a18:	4940      	ldr	r1, [pc, #256]	@ (8005b1c <HAL_ADC_Init+0x23c>)
 8005a1a:	680a      	ldr	r2, [r1, #0]
 8005a1c:	4d40      	ldr	r5, [pc, #256]	@ (8005b20 <HAL_ADC_Init+0x240>)
 8005a1e:	402a      	ands	r2, r5
 8005a20:	25f0      	movs	r5, #240	@ 0xf0
 8005a22:	03ad      	lsls	r5, r5, #14
 8005a24:	402b      	ands	r3, r5
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8005a2e:	694a      	ldr	r2, [r1, #20]
 8005a30:	2507      	movs	r5, #7
 8005a32:	43aa      	bics	r2, r5
 8005a34:	4313      	orrs	r3, r2
 8005a36:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a3c:	694b      	ldr	r3, [r1, #20]
 8005a3e:	3569      	adds	r5, #105	@ 0x69
 8005a40:	43ab      	bics	r3, r5
 8005a42:	0112      	lsls	r2, r2, #4
 8005a44:	4313      	orrs	r3, r2
 8005a46:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d135      	bne.n	8005aba <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005a52:	3b10      	subs	r3, #16
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a58:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	2307      	movs	r3, #7
 8005a5e:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 8005a60:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d03b      	beq.n	8005ade <HAL_ADC_Init+0x1fe>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a68:	2212      	movs	r2, #18
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	3a02      	subs	r2, #2
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a72:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a74:	3a0f      	subs	r2, #15
 8005a76:	4313      	orrs	r3, r2
 8005a78:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	e03d      	b.n	8005afa <HAL_ADC_Init+0x21a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a7e:	2000      	movs	r0, #0
 8005a80:	e768      	b.n	8005954 <HAL_ADC_Init+0x74>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005a82:	0049      	lsls	r1, r1, #1
 8005a84:	0849      	lsrs	r1, r1, #1
 8005a86:	e794      	b.n	80059b2 <HAL_ADC_Init+0xd2>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_ADC_Init+0x1b4>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005a8c:	2180      	movs	r1, #128	@ 0x80
 8005a8e:	0249      	lsls	r1, r1, #9
 8005a90:	430a      	orrs	r2, r1
 8005a92:	e797      	b.n	80059c4 <HAL_ADC_Init+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a94:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005a96:	2520      	movs	r5, #32
 8005a98:	4329      	orrs	r1, r5
 8005a9a:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a9c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8005a9e:	3d1f      	subs	r5, #31
 8005aa0:	4329      	orrs	r1, r5
 8005aa2:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8005aa4:	e78e      	b.n	80059c4 <HAL_ADC_Init+0xe4>
                      hadc->Init.Oversampling.Ratio         |
 8005aa6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005aa8:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.RightBitShift |
 8005aaa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005aac:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.TriggeredMode
 8005aae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005ab0:	430b      	orrs	r3, r1
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	e79b      	b.n	80059f2 <HAL_ADC_Init+0x112>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005aba:	2280      	movs	r2, #128	@ 0x80
 8005abc:	0392      	lsls	r2, r2, #14
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d1ca      	bne.n	8005a58 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8005ac2:	6821      	ldr	r1, [r4, #0]
 8005ac4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8005ac6:	69e3      	ldr	r3, [r4, #28]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	221c      	movs	r2, #28
 8005ace:	401a      	ands	r2, r3
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	425b      	negs	r3, r3
 8005ad4:	4093      	lsls	r3, r2
 8005ad6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	628b      	str	r3, [r1, #40]	@ 0x28
 8005adc:	e7bc      	b.n	8005a58 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8005ae2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	4393      	bics	r3, r2
 8005ae8:	3a02      	subs	r2, #2
 8005aea:	4313      	orrs	r3, r2
 8005aec:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005aee:	e004      	b.n	8005afa <HAL_ADC_Init+0x21a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005af0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af2:	2210      	movs	r2, #16
 8005af4:	4313      	orrs	r3, r2
 8005af6:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005af8:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8005afa:	b003      	add	sp, #12
 8005afc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005afe:	2001      	movs	r0, #1
 8005b00:	e7fb      	b.n	8005afa <HAL_ADC_Init+0x21a>
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	6fffffe8 	.word	0x6fffffe8
 8005b08:	200000e0 	.word	0x200000e0
 8005b0c:	00030d40 	.word	0x00030d40
 8005b10:	fffffefd 	.word	0xfffffefd
 8005b14:	ffde0201 	.word	0xffde0201
 8005b18:	1ffffc02 	.word	0x1ffffc02
 8005b1c:	40012708 	.word	0x40012708
 8005b20:	ffc3ffff 	.word	0xffc3ffff

08005b24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	0004      	movs	r4, r0
 8005b28:	000d      	movs	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005b2a:	6946      	ldr	r6, [r0, #20]
 8005b2c:	2e08      	cmp	r6, #8
 8005b2e:	d004      	beq.n	8005b3a <HAL_ADC_PollForConversion+0x16>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005b30:	6803      	ldr	r3, [r0, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	07db      	lsls	r3, r3, #31
 8005b36:	d41d      	bmi.n	8005b74 <HAL_ADC_PollForConversion+0x50>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005b38:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005b3a:	f7ff feb9 	bl	80058b0 <HAL_GetTick>
 8005b3e:	0007      	movs	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4216      	tst	r6, r2
 8005b46:	d11b      	bne.n	8005b80 <HAL_ADC_PollForConversion+0x5c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	1c6b      	adds	r3, r5, #1
 8005b4a:	d0f9      	beq.n	8005b40 <HAL_ADC_PollForConversion+0x1c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005b4c:	f7ff feb0 	bl	80058b0 <HAL_GetTick>
 8005b50:	1bc0      	subs	r0, r0, r7
 8005b52:	42a8      	cmp	r0, r5
 8005b54:	d801      	bhi.n	8005b5a <HAL_ADC_PollForConversion+0x36>
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	d1f2      	bne.n	8005b40 <HAL_ADC_PollForConversion+0x1c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	421e      	tst	r6, r3
 8005b60:	d1ee      	bne.n	8005b40 <HAL_ADC_PollForConversion+0x1c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b64:	2204      	movs	r2, #4
 8005b66:	4313      	orrs	r3, r2
 8005b68:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8005b6a:	2354      	movs	r3, #84	@ 0x54
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	54e2      	strb	r2, [r4, r3]

          return HAL_TIMEOUT;
 8005b70:	2003      	movs	r0, #3
 8005b72:	e029      	b.n	8005bc8 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b74:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005b76:	2220      	movs	r2, #32
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e023      	b.n	8005bc8 <HAL_ADC_PollForConversion+0xa4>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b80:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005b82:	2280      	movs	r2, #128	@ 0x80
 8005b84:	0092      	lsls	r2, r2, #2
 8005b86:	430a      	orrs	r2, r1
 8005b88:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005b8a:	68d9      	ldr	r1, [r3, #12]
 8005b8c:	22c0      	movs	r2, #192	@ 0xc0
 8005b8e:	0112      	lsls	r2, r2, #4
 8005b90:	4211      	tst	r1, r2
 8005b92:	d113      	bne.n	8005bbc <HAL_ADC_PollForConversion+0x98>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b94:	7ea2      	ldrb	r2, [r4, #26]
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	d110      	bne.n	8005bbc <HAL_ADC_PollForConversion+0x98>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	0712      	lsls	r2, r2, #28
 8005b9e:	d50d      	bpl.n	8005bbc <HAL_ADC_PollForConversion+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	0752      	lsls	r2, r2, #29
 8005ba4:	d411      	bmi.n	8005bca <HAL_ADC_PollForConversion+0xa6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	210c      	movs	r1, #12
 8005baa:	438a      	bics	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005bae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005be0 <HAL_ADC_PollForConversion+0xbc>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	3204      	adds	r2, #4
 8005bb6:	32ff      	adds	r2, #255	@ 0xff
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005bbc:	7e20      	ldrb	r0, [r4, #24]
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d10c      	bne.n	8005bdc <HAL_ADC_PollForConversion+0xb8>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	220c      	movs	r2, #12
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bcc:	2220      	movs	r2, #32
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005bd4:	3a1f      	subs	r2, #31
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8005bda:	e7ef      	b.n	8005bbc <HAL_ADC_PollForConversion+0x98>
  return HAL_OK;
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e7f3      	b.n	8005bc8 <HAL_ADC_PollForConversion+0xa4>
 8005be0:	fffffefe 	.word	0xfffffefe

08005be4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005be4:	6803      	ldr	r3, [r0, #0]
 8005be6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bf6:	6905      	ldr	r5, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005bf8:	3354      	adds	r3, #84	@ 0x54
 8005bfa:	5cc3      	ldrb	r3, [r0, r3]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d100      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x16>
 8005c00:	e12f      	b.n	8005e62 <HAL_ADC_ConfigChannel+0x276>
 8005c02:	2354      	movs	r3, #84	@ 0x54
 8005c04:	2201      	movs	r2, #1
 8005c06:	54c2      	strb	r2, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c08:	6800      	ldr	r0, [r0, #0]
 8005c0a:	6883      	ldr	r3, [r0, #8]
 8005c0c:	3203      	adds	r2, #3
 8005c0e:	0016      	movs	r6, r2
 8005c10:	401e      	ands	r6, r3
 8005c12:	421a      	tst	r2, r3
 8005c14:	d009      	beq.n	8005c2a <HAL_ADC_ConfigChannel+0x3e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c18:	321c      	adds	r2, #28
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005c1e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8005c20:	2354      	movs	r3, #84	@ 0x54
 8005c22:	2200      	movs	r2, #0
 8005c24:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8005c26:	b003      	add	sp, #12
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8005c2a:	684b      	ldr	r3, [r1, #4]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d100      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x46>
 8005c30:	e0d5      	b.n	8005dde <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005c32:	2280      	movs	r2, #128	@ 0x80
 8005c34:	0612      	lsls	r2, r2, #24
 8005c36:	4295      	cmp	r5, r2
 8005c38:	d025      	beq.n	8005c86 <HAL_ADC_ConfigChannel+0x9a>
 8005c3a:	4a8b      	ldr	r2, [pc, #556]	@ (8005e68 <HAL_ADC_ConfigChannel+0x27c>)
 8005c3c:	4295      	cmp	r5, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005c40:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005c42:	271f      	movs	r7, #31
 8005c44:	401f      	ands	r7, r3
 8005c46:	250f      	movs	r5, #15
 8005c48:	40bd      	lsls	r5, r7
 8005c4a:	43aa      	bics	r2, r5
 8005c4c:	680b      	ldr	r3, [r1, #0]
 8005c4e:	035d      	lsls	r5, r3, #13
 8005c50:	d12f      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0xc6>
 8005c52:	0e9b      	lsrs	r3, r3, #26
 8005c54:	261f      	movs	r6, #31
 8005c56:	401e      	ands	r6, r3
 8005c58:	40be      	lsls	r6, r7
 8005c5a:	4332      	orrs	r2, r6
 8005c5c:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005c5e:	684d      	ldr	r5, [r1, #4]
 8005c60:	08ab      	lsrs	r3, r5, #2
 8005c62:	3301      	adds	r3, #1
 8005c64:	69e2      	ldr	r2, [r4, #28]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d813      	bhi.n	8005c92 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c6a:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8005c6c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005c6e:	231f      	movs	r3, #31
 8005c70:	401d      	ands	r5, r3
 8005c72:	3b10      	subs	r3, #16
 8005c74:	001f      	movs	r7, r3
 8005c76:	40af      	lsls	r7, r5
 8005c78:	43ba      	bics	r2, r7
 8005c7a:	0eb6      	lsrs	r6, r6, #26
 8005c7c:	4033      	ands	r3, r6
 8005c7e:	40ab      	lsls	r3, r5
 8005c80:	4313      	orrs	r3, r2
 8005c82:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8005c84:	e005      	b.n	8005c92 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005c86:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005c88:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005c8a:	035b      	lsls	r3, r3, #13
 8005c8c:	0b5b      	lsrs	r3, r3, #13
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	680b      	ldr	r3, [r1, #0]
 8005c96:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8005c98:	6942      	ldr	r2, [r0, #20]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	439a      	bics	r2, r3
 8005c9e:	402b      	ands	r3, r5
 8005ca0:	4d72      	ldr	r5, [pc, #456]	@ (8005e6c <HAL_ADC_ConfigChannel+0x280>)
 8005ca2:	402b      	ands	r3, r5
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db4f      	blt.n	8005d4e <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e7b6      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005cb2:	07dd      	lsls	r5, r3, #31
 8005cb4:	d4d0      	bmi.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005cb6:	079d      	lsls	r5, r3, #30
 8005cb8:	d427      	bmi.n	8005d0a <HAL_ADC_ConfigChannel+0x11e>
 8005cba:	075d      	lsls	r5, r3, #29
 8005cbc:	d427      	bmi.n	8005d0e <HAL_ADC_ConfigChannel+0x122>
 8005cbe:	071d      	lsls	r5, r3, #28
 8005cc0:	d427      	bmi.n	8005d12 <HAL_ADC_ConfigChannel+0x126>
 8005cc2:	06dd      	lsls	r5, r3, #27
 8005cc4:	d427      	bmi.n	8005d16 <HAL_ADC_ConfigChannel+0x12a>
 8005cc6:	069d      	lsls	r5, r3, #26
 8005cc8:	d427      	bmi.n	8005d1a <HAL_ADC_ConfigChannel+0x12e>
 8005cca:	065d      	lsls	r5, r3, #25
 8005ccc:	d427      	bmi.n	8005d1e <HAL_ADC_ConfigChannel+0x132>
 8005cce:	061d      	lsls	r5, r3, #24
 8005cd0:	d427      	bmi.n	8005d22 <HAL_ADC_ConfigChannel+0x136>
 8005cd2:	05dd      	lsls	r5, r3, #23
 8005cd4:	d427      	bmi.n	8005d26 <HAL_ADC_ConfigChannel+0x13a>
 8005cd6:	059d      	lsls	r5, r3, #22
 8005cd8:	d427      	bmi.n	8005d2a <HAL_ADC_ConfigChannel+0x13e>
 8005cda:	055d      	lsls	r5, r3, #21
 8005cdc:	d427      	bmi.n	8005d2e <HAL_ADC_ConfigChannel+0x142>
 8005cde:	051d      	lsls	r5, r3, #20
 8005ce0:	d427      	bmi.n	8005d32 <HAL_ADC_ConfigChannel+0x146>
 8005ce2:	04dd      	lsls	r5, r3, #19
 8005ce4:	d427      	bmi.n	8005d36 <HAL_ADC_ConfigChannel+0x14a>
 8005ce6:	049d      	lsls	r5, r3, #18
 8005ce8:	d427      	bmi.n	8005d3a <HAL_ADC_ConfigChannel+0x14e>
 8005cea:	045d      	lsls	r5, r3, #17
 8005cec:	d427      	bmi.n	8005d3e <HAL_ADC_ConfigChannel+0x152>
 8005cee:	041d      	lsls	r5, r3, #16
 8005cf0:	d427      	bmi.n	8005d42 <HAL_ADC_ConfigChannel+0x156>
 8005cf2:	03dd      	lsls	r5, r3, #15
 8005cf4:	d427      	bmi.n	8005d46 <HAL_ADC_ConfigChannel+0x15a>
 8005cf6:	039d      	lsls	r5, r3, #14
 8005cf8:	d427      	bmi.n	8005d4a <HAL_ADC_ConfigChannel+0x15e>
 8005cfa:	2580      	movs	r5, #128	@ 0x80
 8005cfc:	02ed      	lsls	r5, r5, #11
 8005cfe:	001e      	movs	r6, r3
 8005d00:	402e      	ands	r6, r5
 8005d02:	422b      	tst	r3, r5
 8005d04:	d0a8      	beq.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d06:	2612      	movs	r6, #18
 8005d08:	e7a6      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d0a:	2601      	movs	r6, #1
 8005d0c:	e7a4      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d0e:	2602      	movs	r6, #2
 8005d10:	e7a2      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d12:	2603      	movs	r6, #3
 8005d14:	e7a0      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d16:	2604      	movs	r6, #4
 8005d18:	e79e      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d1a:	2605      	movs	r6, #5
 8005d1c:	e79c      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d1e:	2606      	movs	r6, #6
 8005d20:	e79a      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d22:	2607      	movs	r6, #7
 8005d24:	e798      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d26:	2608      	movs	r6, #8
 8005d28:	e796      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d2a:	2609      	movs	r6, #9
 8005d2c:	e794      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d2e:	260a      	movs	r6, #10
 8005d30:	e792      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d32:	260b      	movs	r6, #11
 8005d34:	e790      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d36:	260c      	movs	r6, #12
 8005d38:	e78e      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d3a:	260d      	movs	r6, #13
 8005d3c:	e78c      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d3e:	260e      	movs	r6, #14
 8005d40:	e78a      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d42:	260f      	movs	r6, #15
 8005d44:	e788      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d46:	2610      	movs	r6, #16
 8005d48:	e786      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
 8005d4a:	2611      	movs	r6, #17
 8005d4c:	e784      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d4e:	4a48      	ldr	r2, [pc, #288]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005d50:	6811      	ldr	r1, [r2, #0]
 8005d52:	22e0      	movs	r2, #224	@ 0xe0
 8005d54:	0452      	lsls	r2, r2, #17
 8005d56:	400a      	ands	r2, r1
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d58:	4846      	ldr	r0, [pc, #280]	@ (8005e74 <HAL_ADC_ConfigChannel+0x288>)
 8005d5a:	4283      	cmp	r3, r0
 8005d5c:	d007      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x182>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d5e:	4846      	ldr	r0, [pc, #280]	@ (8005e78 <HAL_ADC_ConfigChannel+0x28c>)
 8005d60:	4283      	cmp	r3, r0
 8005d62:	d022      	beq.n	8005daa <HAL_ADC_ConfigChannel+0x1be>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005d64:	4845      	ldr	r0, [pc, #276]	@ (8005e7c <HAL_ADC_ConfigChannel+0x290>)
 8005d66:	4283      	cmp	r3, r0
 8005d68:	d02c      	beq.n	8005dc4 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e758      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d6e:	0208      	lsls	r0, r1, #8
 8005d70:	d4f5      	bmi.n	8005d5e <HAL_ADC_ConfigChannel+0x172>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d78:	493d      	ldr	r1, [pc, #244]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005d7a:	680a      	ldr	r2, [r1, #0]
 8005d7c:	4840      	ldr	r0, [pc, #256]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005d7e:	4002      	ands	r2, r0
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d84:	4b3f      	ldr	r3, [pc, #252]	@ (8005e84 <HAL_ADC_ConfigChannel+0x298>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	493f      	ldr	r1, [pc, #252]	@ (8005e88 <HAL_ADC_ConfigChannel+0x29c>)
 8005d8a:	f7fc f9bd 	bl	8002108 <__udivsi3>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	0043      	lsls	r3, r0, #1
 8005d92:	181b      	adds	r3, r3, r0
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005d98:	e002      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x1b4>
            wait_loop_index--;
 8005d9a:	9b01      	ldr	r3, [sp, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f9      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005da6:	2000      	movs	r0, #0
 8005da8:	e73a      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005daa:	01c8      	lsls	r0, r1, #7
 8005dac:	d4da      	bmi.n	8005d64 <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	045b      	lsls	r3, r3, #17
 8005db2:	4313      	orrs	r3, r2
 8005db4:	492e      	ldr	r1, [pc, #184]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005db6:	680a      	ldr	r2, [r1, #0]
 8005db8:	4831      	ldr	r0, [pc, #196]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005dba:	4002      	ands	r2, r0
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dc0:	2000      	movs	r0, #0
}
 8005dc2:	e72d      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005dc4:	0249      	lsls	r1, r1, #9
 8005dc6:	d44a      	bmi.n	8005e5e <HAL_ADC_ConfigChannel+0x272>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	03db      	lsls	r3, r3, #15
 8005dcc:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005dce:	4928      	ldr	r1, [pc, #160]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005dd0:	680a      	ldr	r2, [r1, #0]
 8005dd2:	482b      	ldr	r0, [pc, #172]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005dd4:	4002      	ands	r2, r0
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dda:	2000      	movs	r0, #0
}
 8005ddc:	e720      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005dde:	2380      	movs	r3, #128	@ 0x80
 8005de0:	061b      	lsls	r3, r3, #24
 8005de2:	429d      	cmp	r5, r3
 8005de4:	d002      	beq.n	8005dec <HAL_ADC_ConfigChannel+0x200>
 8005de6:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <HAL_ADC_ConfigChannel+0x27c>)
 8005de8:	429d      	cmp	r5, r3
 8005dea:	d105      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005dec:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005dee:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005df0:	035b      	lsls	r3, r3, #13
 8005df2:	0b5b      	lsrs	r3, r3, #13
 8005df4:	439a      	bics	r2, r3
 8005df6:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005df8:	680b      	ldr	r3, [r1, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	db01      	blt.n	8005e02 <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e70e      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e02:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005e04:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e06:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <HAL_ADC_ConfigChannel+0x288>)
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	d007      	beq.n	8005e1c <HAL_ADC_ConfigChannel+0x230>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e0c:	491a      	ldr	r1, [pc, #104]	@ (8005e78 <HAL_ADC_ConfigChannel+0x28c>)
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	d00f      	beq.n	8005e32 <HAL_ADC_ConfigChannel+0x246>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e12:	491a      	ldr	r1, [pc, #104]	@ (8005e7c <HAL_ADC_ConfigChannel+0x290>)
 8005e14:	428b      	cmp	r3, r1
 8005e16:	d017      	beq.n	8005e48 <HAL_ADC_ConfigChannel+0x25c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e701      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e1c:	23a0      	movs	r3, #160	@ 0xa0
 8005e1e:	045b      	lsls	r3, r3, #17
 8005e20:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e22:	4913      	ldr	r1, [pc, #76]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005e24:	680b      	ldr	r3, [r1, #0]
 8005e26:	4816      	ldr	r0, [pc, #88]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005e28:	4003      	ands	r3, r0
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e2e:	2000      	movs	r0, #0
}
 8005e30:	e6f6      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e32:	23c0      	movs	r3, #192	@ 0xc0
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e38:	490d      	ldr	r1, [pc, #52]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005e3a:	680b      	ldr	r3, [r1, #0]
 8005e3c:	4810      	ldr	r0, [pc, #64]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005e3e:	4003      	ands	r3, r0
 8005e40:	431a      	orrs	r2, r3
 8005e42:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e44:	2000      	movs	r0, #0
}
 8005e46:	e6eb      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e48:	23c0      	movs	r3, #192	@ 0xc0
 8005e4a:	045b      	lsls	r3, r3, #17
 8005e4c:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e4e:	4908      	ldr	r1, [pc, #32]	@ (8005e70 <HAL_ADC_ConfigChannel+0x284>)
 8005e50:	680b      	ldr	r3, [r1, #0]
 8005e52:	480b      	ldr	r0, [pc, #44]	@ (8005e80 <HAL_ADC_ConfigChannel+0x294>)
 8005e54:	4003      	ands	r3, r0
 8005e56:	431a      	orrs	r2, r3
 8005e58:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e5a:	2000      	movs	r0, #0
}
 8005e5c:	e6e0      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e6de      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8005e62:	2002      	movs	r0, #2
 8005e64:	e6df      	b.n	8005c26 <HAL_ADC_ConfigChannel+0x3a>
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	80000004 	.word	0x80000004
 8005e6c:	07ffff00 	.word	0x07ffff00
 8005e70:	40012708 	.word	0x40012708
 8005e74:	b0001000 	.word	0xb0001000
 8005e78:	b8004000 	.word	0xb8004000
 8005e7c:	b4002000 	.word	0xb4002000
 8005e80:	fe3fffff 	.word	0xfe3fffff
 8005e84:	200000e0 	.word	0x200000e0
 8005e88:	00030d40 	.word	0x00030d40

08005e8c <HAL_ADC_GetState>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8005e8c:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 8005e8e:	4770      	bx	lr

08005e90 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005e94:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e96:	6893      	ldr	r3, [r2, #8]
 8005e98:	075b      	lsls	r3, r3, #29
 8005e9a:	d524      	bpl.n	8005ee6 <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e9c:	6893      	ldr	r3, [r2, #8]
 8005e9e:	079b      	lsls	r3, r3, #30
 8005ea0:	d405      	bmi.n	8005eae <ADC_ConversionStop+0x1e>
  MODIFY_REG(ADCx->CR,
 8005ea2:	6893      	ldr	r3, [r2, #8]
 8005ea4:	4911      	ldr	r1, [pc, #68]	@ (8005eec <ADC_ConversionStop+0x5c>)
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	2110      	movs	r1, #16
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	6093      	str	r3, [r2, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eae:	f7ff fcff 	bl	80058b0 <HAL_GetTick>
 8005eb2:	0005      	movs	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	075b      	lsls	r3, r3, #29
 8005eba:	d512      	bpl.n	8005ee2 <ADC_ConversionStop+0x52>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005ebc:	f7ff fcf8 	bl	80058b0 <HAL_GetTick>
 8005ec0:	1b40      	subs	r0, r0, r5
 8005ec2:	2802      	cmp	r0, #2
 8005ec4:	d9f6      	bls.n	8005eb4 <ADC_ConversionStop+0x24>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	075b      	lsls	r3, r3, #29
 8005ecc:	d5f2      	bpl.n	8005eb4 <ADC_ConversionStop+0x24>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ed8:	3a0f      	subs	r2, #15
 8005eda:	4313      	orrs	r3, r2
 8005edc:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8005ede:	2001      	movs	r0, #1
 8005ee0:	e002      	b.n	8005ee8 <ADC_ConversionStop+0x58>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e000      	b.n	8005ee8 <ADC_ConversionStop+0x58>
 8005ee6:	2000      	movs	r0, #0
}
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	7fffffe8 	.word	0x7fffffe8

08005ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b530      	push	{r4, r5, lr}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	0004      	movs	r4, r0
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005efa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	07d2      	lsls	r2, r2, #31
 8005f00:	d44f      	bmi.n	8005fa2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005f02:	6899      	ldr	r1, [r3, #8]
 8005f04:	4a28      	ldr	r2, [pc, #160]	@ (8005fa8 <ADC_Enable+0xb8>)
 8005f06:	4211      	tst	r1, r2
 8005f08:	d111      	bne.n	8005f2e <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	4927      	ldr	r1, [pc, #156]	@ (8005fac <ADC_Enable+0xbc>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	2101      	movs	r1, #1
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f16:	4b26      	ldr	r3, [pc, #152]	@ (8005fb0 <ADC_Enable+0xc0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	d517      	bpl.n	8005f4e <ADC_Enable+0x5e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f1e:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <ADC_Enable+0xc4>)
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	4925      	ldr	r1, [pc, #148]	@ (8005fb8 <ADC_Enable+0xc8>)
 8005f24:	f7fc f8f0 	bl	8002108 <__udivsi3>
 8005f28:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005f2a:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8005f2c:	e00c      	b.n	8005f48 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f2e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005f30:	2210      	movs	r2, #16
 8005f32:	4313      	orrs	r3, r2
 8005f34:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f36:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005f38:	3a0f      	subs	r2, #15
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e030      	b.n	8005fa4 <ADC_Enable+0xb4>
      {
        wait_loop_index--;
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f9      	bne.n	8005f42 <ADC_Enable+0x52>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f4e:	7e63      	ldrb	r3, [r4, #25]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <ADC_Enable+0x68>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f54:	2000      	movs	r0, #0
 8005f56:	e025      	b.n	8005fa4 <ADC_Enable+0xb4>
      tickstart = HAL_GetTick();
 8005f58:	f7ff fcaa 	bl	80058b0 <HAL_GetTick>
 8005f5c:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	07d2      	lsls	r2, r2, #31
 8005f64:	d41b      	bmi.n	8005f9e <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	07d2      	lsls	r2, r2, #31
 8005f6a:	d405      	bmi.n	8005f78 <ADC_Enable+0x88>
  MODIFY_REG(ADCx->CR,
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	490f      	ldr	r1, [pc, #60]	@ (8005fac <ADC_Enable+0xbc>)
 8005f70:	400a      	ands	r2, r1
 8005f72:	2101      	movs	r1, #1
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f78:	f7ff fc9a 	bl	80058b0 <HAL_GetTick>
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	2802      	cmp	r0, #2
 8005f80:	d9ed      	bls.n	8005f5e <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	d4e9      	bmi.n	8005f5e <ADC_Enable+0x6e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f92:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005f94:	3a0f      	subs	r2, #15
 8005f96:	4313      	orrs	r3, r2
 8005f98:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	e002      	b.n	8005fa4 <ADC_Enable+0xb4>
  return HAL_OK;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e000      	b.n	8005fa4 <ADC_Enable+0xb4>
 8005fa2:	2000      	movs	r0, #0
}
 8005fa4:	b003      	add	sp, #12
 8005fa6:	bd30      	pop	{r4, r5, pc}
 8005fa8:	80000017 	.word	0x80000017
 8005fac:	7fffffe8 	.word	0x7fffffe8
 8005fb0:	40012708 	.word	0x40012708
 8005fb4:	200000e0 	.word	0x200000e0
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <HAL_ADC_Start>:
{
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fc0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	075b      	lsls	r3, r3, #29
 8005fc6:	d424      	bmi.n	8006012 <HAL_ADC_Start+0x56>
    __HAL_LOCK(hadc);
 8005fc8:	2354      	movs	r3, #84	@ 0x54
 8005fca:	5cc3      	ldrb	r3, [r0, r3]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d022      	beq.n	8006016 <HAL_ADC_Start+0x5a>
 8005fd0:	2354      	movs	r3, #84	@ 0x54
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	54c2      	strb	r2, [r0, r3]
    tmp_hal_status = ADC_Enable(hadc);
 8005fd6:	f7ff ff8b 	bl	8005ef0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d115      	bne.n	800600a <HAL_ADC_Start+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8005fde:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <HAL_ADC_Start+0x60>)
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8005fec:	2300      	movs	r3, #0
 8005fee:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	211c      	movs	r1, #28
 8005ff4:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8005ff6:	2254      	movs	r2, #84	@ 0x54
 8005ff8:	54a3      	strb	r3, [r4, r2]
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005ffa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005ffc:	6893      	ldr	r3, [r2, #8]
 8005ffe:	4908      	ldr	r1, [pc, #32]	@ (8006020 <HAL_ADC_Start+0x64>)
 8006000:	400b      	ands	r3, r1
 8006002:	2104      	movs	r1, #4
 8006004:	430b      	orrs	r3, r1
 8006006:	6093      	str	r3, [r2, #8]
}
 8006008:	e004      	b.n	8006014 <HAL_ADC_Start+0x58>
      __HAL_UNLOCK(hadc);
 800600a:	2354      	movs	r3, #84	@ 0x54
 800600c:	2200      	movs	r2, #0
 800600e:	54e2      	strb	r2, [r4, r3]
 8006010:	e000      	b.n	8006014 <HAL_ADC_Start+0x58>
    tmp_hal_status = HAL_BUSY;
 8006012:	2002      	movs	r0, #2
}
 8006014:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 8006016:	2002      	movs	r0, #2
 8006018:	e7fc      	b.n	8006014 <HAL_ADC_Start+0x58>
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	fffff0fe 	.word	0xfffff0fe
 8006020:	7fffffe8 	.word	0x7fffffe8

08006024 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	0004      	movs	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006028:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	2102      	movs	r1, #2
 800602e:	0008      	movs	r0, r1
 8006030:	4010      	ands	r0, r2
 8006032:	4211      	tst	r1, r2
 8006034:	d000      	beq.n	8006038 <ADC_Disable+0x14>
 8006036:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	07d2      	lsls	r2, r2, #31
 800603c:	d535      	bpl.n	80060aa <ADC_Disable+0x86>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800603e:	2800      	cmp	r0, #0
 8006040:	d135      	bne.n	80060ae <ADC_Disable+0x8a>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006042:	6899      	ldr	r1, [r3, #8]
 8006044:	2205      	movs	r2, #5
 8006046:	400a      	ands	r2, r1
 8006048:	2a01      	cmp	r2, #1
 800604a:	d009      	beq.n	8006060 <ADC_Disable+0x3c>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800604c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800604e:	2210      	movs	r2, #16
 8006050:	4313      	orrs	r3, r2
 8006052:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006054:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006056:	3a0f      	subs	r2, #15
 8006058:	4313      	orrs	r3, r2
 800605a:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 800605c:	2001      	movs	r0, #1
 800605e:	e025      	b.n	80060ac <ADC_Disable+0x88>
  MODIFY_REG(ADCx->CR,
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	4914      	ldr	r1, [pc, #80]	@ (80060b4 <ADC_Disable+0x90>)
 8006064:	400a      	ands	r2, r1
 8006066:	2102      	movs	r1, #2
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	2203      	movs	r2, #3
 8006070:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006072:	f7ff fc1d 	bl	80058b0 <HAL_GetTick>
 8006076:	0005      	movs	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	07db      	lsls	r3, r3, #31
 800607e:	d512      	bpl.n	80060a6 <ADC_Disable+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006080:	f7ff fc16 	bl	80058b0 <HAL_GetTick>
 8006084:	1b40      	subs	r0, r0, r5
 8006086:	2802      	cmp	r0, #2
 8006088:	d9f6      	bls.n	8006078 <ADC_Disable+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	07db      	lsls	r3, r3, #31
 8006090:	d5f2      	bpl.n	8006078 <ADC_Disable+0x54>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006092:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006094:	2210      	movs	r2, #16
 8006096:	4313      	orrs	r3, r2
 8006098:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800609a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800609c:	3a0f      	subs	r2, #15
 800609e:	4313      	orrs	r3, r2
 80060a0:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
 80060a4:	e002      	b.n	80060ac <ADC_Disable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060a6:	2000      	movs	r0, #0
 80060a8:	e000      	b.n	80060ac <ADC_Disable+0x88>
 80060aa:	2000      	movs	r0, #0
}
 80060ac:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80060ae:	2000      	movs	r0, #0
 80060b0:	e7fc      	b.n	80060ac <ADC_Disable+0x88>
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	7fffffe8 	.word	0x7fffffe8

080060b8 <HAL_ADC_Stop>:
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80060bc:	2354      	movs	r3, #84	@ 0x54
 80060be:	5cc3      	ldrb	r3, [r0, r3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d017      	beq.n	80060f4 <HAL_ADC_Stop+0x3c>
 80060c4:	2354      	movs	r3, #84	@ 0x54
 80060c6:	2201      	movs	r2, #1
 80060c8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80060ca:	f7ff fee1 	bl	8005e90 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d003      	beq.n	80060da <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80060d2:	2354      	movs	r3, #84	@ 0x54
 80060d4:	2200      	movs	r2, #0
 80060d6:	54e2      	strb	r2, [r4, r3]
}
 80060d8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80060da:	0020      	movs	r0, r4
 80060dc:	f7ff ffa2 	bl	8006024 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1f6      	bne.n	80060d2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80060e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060e6:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <HAL_ADC_Stop+0x40>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	3204      	adds	r2, #4
 80060ec:	32ff      	adds	r2, #255	@ 0xff
 80060ee:	4313      	orrs	r3, r2
 80060f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80060f2:	e7ee      	b.n	80060d2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80060f4:	2002      	movs	r0, #2
 80060f6:	e7ef      	b.n	80060d8 <HAL_ADC_Stop+0x20>
 80060f8:	fffffefe 	.word	0xfffffefe

080060fc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80060fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fe:	b083      	sub	sp, #12
 8006100:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006102:	2300      	movs	r3, #0
 8006104:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006106:	3354      	adds	r3, #84	@ 0x54
 8006108:	5cc3      	ldrb	r3, [r0, r3]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d100      	bne.n	8006110 <HAL_ADCEx_Calibration_Start+0x14>
 800610e:	e0a2      	b.n	8006256 <HAL_ADCEx_Calibration_Start+0x15a>
 8006110:	2601      	movs	r6, #1
 8006112:	2354      	movs	r3, #84	@ 0x54
 8006114:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006116:	f7ff ff85 	bl	8006024 <ADC_Disable>
 800611a:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800611c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	0031      	movs	r1, r6
 8006122:	4011      	ands	r1, r2
 8006124:	4216      	tst	r6, r2
 8006126:	d009      	beq.n	800613c <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006128:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800612a:	2210      	movs	r2, #16
 800612c:	4313      	orrs	r3, r2
 800612e:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006130:	2354      	movs	r3, #84	@ 0x54
 8006132:	2200      	movs	r2, #0
 8006134:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8006136:	0028      	movs	r0, r5
 8006138:	b003      	add	sp, #12
 800613a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800613c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800613e:	4847      	ldr	r0, [pc, #284]	@ (800625c <HAL_ADCEx_Calibration_Start+0x160>)
 8006140:	4002      	ands	r2, r0
 8006142:	3006      	adds	r0, #6
 8006144:	30ff      	adds	r0, #255	@ 0xff
 8006146:	4302      	orrs	r2, r0
 8006148:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800614a:	68de      	ldr	r6, [r3, #12]
 800614c:	4a44      	ldr	r2, [pc, #272]	@ (8006260 <HAL_ADCEx_Calibration_Start+0x164>)
 800614e:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	4844      	ldr	r0, [pc, #272]	@ (8006264 <HAL_ADCEx_Calibration_Start+0x168>)
 8006154:	4002      	ands	r2, r0
 8006156:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8006158:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800615a:	e005      	b.n	8006168 <HAL_ADCEx_Calibration_Start+0x6c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800615c:	22b4      	movs	r2, #180	@ 0xb4
 800615e:	589a      	ldr	r2, [r3, r2]
 8006160:	237f      	movs	r3, #127	@ 0x7f
 8006162:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006164:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006166:	3101      	adds	r1, #1
 8006168:	2907      	cmp	r1, #7
 800616a:	d81c      	bhi.n	80061a6 <HAL_ADCEx_Calibration_Start+0xaa>
      LL_ADC_StartCalibration(hadc->Instance);
 800616c:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4b3d      	ldr	r3, [pc, #244]	@ (8006268 <HAL_ADCEx_Calibration_Start+0x16c>)
 8006172:	401a      	ands	r2, r3
 8006174:	3318      	adds	r3, #24
 8006176:	4313      	orrs	r3, r2
 8006178:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800617a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	2a00      	cmp	r2, #0
 8006180:	daec      	bge.n	800615c <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	3301      	adds	r3, #1
 8006186:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	4b38      	ldr	r3, [pc, #224]	@ (800626c <HAL_ADCEx_Calibration_Start+0x170>)
 800618c:	429a      	cmp	r2, r3
 800618e:	d9f4      	bls.n	800617a <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 8006190:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006192:	2212      	movs	r2, #18
 8006194:	4393      	bics	r3, r2
 8006196:	3a02      	subs	r2, #2
 8006198:	4313      	orrs	r3, r2
 800619a:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 800619c:	2354      	movs	r3, #84	@ 0x54
 800619e:	2200      	movs	r2, #0
 80061a0:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80061a2:	2501      	movs	r5, #1
 80061a4:	e7c7      	b.n	8006136 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 80061a6:	f7fb ffaf 	bl	8002108 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 80061aa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80061ac:	6893      	ldr	r3, [r2, #8]
 80061ae:	492e      	ldr	r1, [pc, #184]	@ (8006268 <HAL_ADCEx_Calibration_Start+0x16c>)
 80061b0:	400b      	ands	r3, r1
 80061b2:	2101      	movs	r1, #1
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80061b8:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80061ba:	6911      	ldr	r1, [r2, #16]
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	05db      	lsls	r3, r3, #23
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d217      	bcs.n	80061f4 <HAL_ADCEx_Calibration_Start+0xf8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <HAL_ADCEx_Calibration_Start+0x174>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	21f0      	movs	r1, #240	@ 0xf0
 80061ca:	0389      	lsls	r1, r1, #14
 80061cc:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80061ce:	21e0      	movs	r1, #224	@ 0xe0
 80061d0:	0349      	lsls	r1, r1, #13
 80061d2:	428b      	cmp	r3, r1
 80061d4:	d30e      	bcc.n	80061f4 <HAL_ADCEx_Calibration_Start+0xf8>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80061d6:	0c9b      	lsrs	r3, r3, #18
 80061d8:	3b03      	subs	r3, #3
 80061da:	2101      	movs	r1, #1
 80061dc:	4099      	lsls	r1, r3
 80061de:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 80061e0:	9b00      	ldr	r3, [sp, #0]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80061e6:	e002      	b.n	80061ee <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 80061e8:	9b00      	ldr	r3, [sp, #0]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f9      	bne.n	80061e8 <HAL_ADCEx_Calibration_Start+0xec>
  MODIFY_REG(ADCx->CALFACT,
 80061f4:	21b4      	movs	r1, #180	@ 0xb4
 80061f6:	5853      	ldr	r3, [r2, r1]
 80061f8:	277f      	movs	r7, #127	@ 0x7f
 80061fa:	43bb      	bics	r3, r7
 80061fc:	4318      	orrs	r0, r3
 80061fe:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8006200:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	4918      	ldr	r1, [pc, #96]	@ (8006268 <HAL_ADCEx_Calibration_Start+0x16c>)
 8006206:	400b      	ands	r3, r1
 8006208:	2102      	movs	r1, #2
 800620a:	430b      	orrs	r3, r1
 800620c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800620e:	f7ff fb4f 	bl	80058b0 <HAL_GetTick>
 8006212:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006214:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	07d2      	lsls	r2, r2, #31
 800621a:	d409      	bmi.n	8006230 <HAL_ADCEx_Calibration_Start+0x134>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	4332      	orrs	r2, r6
 8006220:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8006222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006224:	2203      	movs	r2, #3
 8006226:	4393      	bics	r3, r2
 8006228:	3a02      	subs	r2, #2
 800622a:	4313      	orrs	r3, r2
 800622c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800622e:	e77f      	b.n	8006130 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006230:	f7ff fb3e 	bl	80058b0 <HAL_GetTick>
 8006234:	1bc0      	subs	r0, r0, r7
 8006236:	2802      	cmp	r0, #2
 8006238:	d9ec      	bls.n	8006214 <HAL_ADCEx_Calibration_Start+0x118>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	07db      	lsls	r3, r3, #31
 8006240:	d5e8      	bpl.n	8006214 <HAL_ADCEx_Calibration_Start+0x118>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006244:	2210      	movs	r2, #16
 8006246:	4313      	orrs	r3, r2
 8006248:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800624a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800624c:	3a0f      	subs	r2, #15
 800624e:	4313      	orrs	r3, r2
 8006250:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8006252:	2501      	movs	r5, #1
 8006254:	e76f      	b.n	8006136 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8006256:	2502      	movs	r5, #2
 8006258:	e76d      	b.n	8006136 <HAL_ADCEx_Calibration_Start+0x3a>
 800625a:	46c0      	nop			@ (mov r8, r8)
 800625c:	fffffefd 	.word	0xfffffefd
 8006260:	00008003 	.word	0x00008003
 8006264:	ffff7ffc 	.word	0xffff7ffc
 8006268:	7fffffe8 	.word	0x7fffffe8
 800626c:	0002f1ff 	.word	0x0002f1ff
 8006270:	40012708 	.word	0x40012708

08006274 <__NVIC_SetPriority>:
{
 8006274:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8006276:	2800      	cmp	r0, #0
 8006278:	db11      	blt.n	800629e <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800627a:	0883      	lsrs	r3, r0, #2
 800627c:	4d13      	ldr	r5, [pc, #76]	@ (80062cc <__NVIC_SetPriority+0x58>)
 800627e:	33c0      	adds	r3, #192	@ 0xc0
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	595c      	ldr	r4, [r3, r5]
 8006284:	2203      	movs	r2, #3
 8006286:	4010      	ands	r0, r2
 8006288:	00c0      	lsls	r0, r0, #3
 800628a:	32fc      	adds	r2, #252	@ 0xfc
 800628c:	0016      	movs	r6, r2
 800628e:	4086      	lsls	r6, r0
 8006290:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006292:	0189      	lsls	r1, r1, #6
 8006294:	400a      	ands	r2, r1
 8006296:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006298:	4322      	orrs	r2, r4
 800629a:	515a      	str	r2, [r3, r5]
}
 800629c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800629e:	230f      	movs	r3, #15
 80062a0:	4003      	ands	r3, r0
 80062a2:	3b08      	subs	r3, #8
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	3306      	adds	r3, #6
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <__NVIC_SetPriority+0x5c>)
 80062ac:	4694      	mov	ip, r2
 80062ae:	4463      	add	r3, ip
 80062b0:	685c      	ldr	r4, [r3, #4]
 80062b2:	2203      	movs	r2, #3
 80062b4:	4010      	ands	r0, r2
 80062b6:	00c0      	lsls	r0, r0, #3
 80062b8:	32fc      	adds	r2, #252	@ 0xfc
 80062ba:	0015      	movs	r5, r2
 80062bc:	4085      	lsls	r5, r0
 80062be:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80062c0:	0189      	lsls	r1, r1, #6
 80062c2:	400a      	ands	r2, r1
 80062c4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062c6:	4322      	orrs	r2, r4
 80062c8:	605a      	str	r2, [r3, #4]
}
 80062ca:	e7e7      	b.n	800629c <__NVIC_SetPriority+0x28>
 80062cc:	e000e100 	.word	0xe000e100
 80062d0:	e000ed00 	.word	0xe000ed00

080062d4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062d4:	3801      	subs	r0, #1
 80062d6:	2380      	movs	r3, #128	@ 0x80
 80062d8:	045b      	lsls	r3, r3, #17
 80062da:	4298      	cmp	r0, r3
 80062dc:	d20f      	bcs.n	80062fe <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062de:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <SysTick_Config+0x30>)
 80062e0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062e2:	4809      	ldr	r0, [pc, #36]	@ (8006308 <SysTick_Config+0x34>)
 80062e4:	6a03      	ldr	r3, [r0, #32]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	21c0      	movs	r1, #192	@ 0xc0
 80062ec:	0609      	lsls	r1, r1, #24
 80062ee:	430b      	orrs	r3, r1
 80062f0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062f2:	2300      	movs	r3, #0
 80062f4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062f6:	3307      	adds	r3, #7
 80062f8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062fa:	2000      	movs	r0, #0
}
 80062fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80062fe:	2001      	movs	r0, #1
 8006300:	e7fc      	b.n	80062fc <SysTick_Config+0x28>
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	e000e010 	.word	0xe000e010
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800630c:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800630e:	f7ff ffb1 	bl	8006274 <__NVIC_SetPriority>
}
 8006312:	bd10      	pop	{r4, pc}

08006314 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006314:	2800      	cmp	r0, #0
 8006316:	db05      	blt.n	8006324 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006318:	221f      	movs	r2, #31
 800631a:	4002      	ands	r2, r0
 800631c:	2301      	movs	r3, #1
 800631e:	4093      	lsls	r3, r2
 8006320:	4a01      	ldr	r2, [pc, #4]	@ (8006328 <HAL_NVIC_EnableIRQ+0x14>)
 8006322:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006324:	4770      	bx	lr
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	e000e100 	.word	0xe000e100

0800632c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800632c:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 800632e:	f7ff ffd1 	bl	80062d4 <SysTick_Config>
}
 8006332:	bd10      	pop	{r4, pc}

08006334 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006334:	b530      	push	{r4, r5, lr}
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006336:	4c05      	ldr	r4, [pc, #20]	@ (800634c <FLASH_Program_DoubleWord+0x18>)
 8006338:	6961      	ldr	r1, [r4, #20]
 800633a:	2501      	movs	r5, #1
 800633c:	4329      	orrs	r1, r5
 800633e:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006340:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006342:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006346:	6043      	str	r3, [r0, #4]
}
 8006348:	bd30      	pop	{r4, r5, pc}
 800634a:	46c0      	nop			@ (mov r8, r8)
 800634c:	40022000 	.word	0x40022000

08006350 <HAL_FLASH_EndOfOperationCallback>:
}
 8006350:	4770      	bx	lr

08006352 <HAL_FLASH_OperationErrorCallback>:
}
 8006352:	4770      	bx	lr

08006354 <HAL_FLASH_IRQHandler>:
{
 8006354:	b510      	push	{r4, lr}
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8006356:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4a2a      	ldr	r2, [pc, #168]	@ (8006404 <HAL_FLASH_IRQHandler+0xb0>)
 800635c:	4013      	ands	r3, r2
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 800635e:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	0751      	lsls	r1, r2, #29
 8006364:	d521      	bpl.n	80063aa <HAL_FLASH_IRQHandler+0x56>
    param = pFlash.Banks;
 8006366:	4a28      	ldr	r2, [pc, #160]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 8006368:	6914      	ldr	r4, [r2, #16]
  if (error != 0x00U)
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12a      	bne.n	80063c4 <HAL_FLASH_IRQHandler+0x70>
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	07db      	lsls	r3, r3, #31
 8006374:	d50c      	bpl.n	8006390 <HAL_FLASH_IRQHandler+0x3c>
    FLASH->SR = FLASH_SR_EOP;
 8006376:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 8006378:	2201      	movs	r2, #1
 800637a:	611a      	str	r2, [r3, #16]
    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800637c:	4b22      	ldr	r3, [pc, #136]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d02c      	beq.n	80063de <HAL_FLASH_IRQHandler+0x8a>
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8006384:	4b20      	ldr	r3, [pc, #128]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 8006386:	2200      	movs	r2, #0
 8006388:	609a      	str	r2, [r3, #8]
    HAL_FLASH_EndOfOperationCallback(param);
 800638a:	0020      	movs	r0, r4
 800638c:	f7ff ffe0 	bl	8006350 <HAL_FLASH_EndOfOperationCallback>
  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8006390:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d107      	bne.n	80063a8 <HAL_FLASH_IRQHandler+0x54>
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8006398:	4a19      	ldr	r2, [pc, #100]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 800639a:	6953      	ldr	r3, [r2, #20]
 800639c:	491b      	ldr	r1, [pc, #108]	@ (800640c <HAL_FLASH_IRQHandler+0xb8>)
 800639e:	400b      	ands	r3, r1
 80063a0:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 80063a2:	4b19      	ldr	r3, [pc, #100]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
}
 80063a8:	bd10      	pop	{r4, pc}
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 80063aa:	4815      	ldr	r0, [pc, #84]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 80063ac:	6941      	ldr	r1, [r0, #20]
 80063ae:	4391      	bics	r1, r2
 80063b0:	6141      	str	r1, [r0, #20]
    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 80063b2:	4917      	ldr	r1, [pc, #92]	@ (8006410 <HAL_FLASH_IRQHandler+0xbc>)
 80063b4:	420a      	tst	r2, r1
 80063b6:	d002      	beq.n	80063be <HAL_FLASH_IRQHandler+0x6a>
      param = pFlash.Address;
 80063b8:	4a13      	ldr	r2, [pc, #76]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063ba:	68d4      	ldr	r4, [r2, #12]
 80063bc:	e7d5      	b.n	800636a <HAL_FLASH_IRQHandler+0x16>
      param = pFlash.Page;
 80063be:	4a12      	ldr	r2, [pc, #72]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063c0:	6954      	ldr	r4, [r2, #20]
 80063c2:	e7d2      	b.n	800636a <HAL_FLASH_IRQHandler+0x16>
    pFlash.ErrorCode |= error;
 80063c4:	4a10      	ldr	r2, [pc, #64]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063c6:	6851      	ldr	r1, [r2, #4]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6053      	str	r3, [r2, #4]
    FLASH->SR = FLASH_SR_ERRORS;
 80063cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <HAL_FLASH_IRQHandler+0xac>)
 80063ce:	490d      	ldr	r1, [pc, #52]	@ (8006404 <HAL_FLASH_IRQHandler+0xb0>)
 80063d0:	6119      	str	r1, [r3, #16]
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	6093      	str	r3, [r2, #8]
    HAL_FLASH_OperationErrorCallback(param);
 80063d6:	0020      	movs	r0, r4
 80063d8:	f7ff ffbb 	bl	8006352 <HAL_FLASH_OperationErrorCallback>
 80063dc:	e7c7      	b.n	800636e <HAL_FLASH_IRQHandler+0x1a>
      pFlash.NbPagesToErase--;
 80063de:	4a0a      	ldr	r2, [pc, #40]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063e0:	6993      	ldr	r3, [r2, #24]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	6193      	str	r3, [r2, #24]
      if (pFlash.NbPagesToErase != 0x00U)
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <HAL_FLASH_IRQHandler+0x9e>
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <HAL_FLASH_IRQHandler+0xb4>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	e7cb      	b.n	800638a <HAL_FLASH_IRQHandler+0x36>
        pFlash.Page++;
 80063f2:	6951      	ldr	r1, [r2, #20]
 80063f4:	3101      	adds	r1, #1
 80063f6:	6151      	str	r1, [r2, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 80063f8:	6910      	ldr	r0, [r2, #16]
 80063fa:	f000 f8a9 	bl	8006550 <FLASH_PageErase>
 80063fe:	e7c4      	b.n	800638a <HAL_FLASH_IRQHandler+0x36>
 8006400:	40022000 	.word	0x40022000
 8006404:	0000c3fa 	.word	0x0000c3fa
 8006408:	20001220 	.word	0x20001220
 800640c:	fcffffff 	.word	0xfcffffff
 8006410:	00040001 	.word	0x00040001

08006414 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8006414:	4b08      	ldr	r3, [pc, #32]	@ (8006438 <HAL_FLASH_Unlock+0x24>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	db01      	blt.n	8006420 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2000      	movs	r0, #0
}
 800641e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <HAL_FLASH_Unlock+0x24>)
 8006422:	4a06      	ldr	r2, [pc, #24]	@ (800643c <HAL_FLASH_Unlock+0x28>)
 8006424:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006426:	4a06      	ldr	r2, [pc, #24]	@ (8006440 <HAL_FLASH_Unlock+0x2c>)
 8006428:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	db01      	blt.n	8006434 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8006430:	2000      	movs	r0, #0
 8006432:	e7f4      	b.n	800641e <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 8006434:	2001      	movs	r0, #1
 8006436:	e7f2      	b.n	800641e <HAL_FLASH_Unlock+0xa>
 8006438:	40022000 	.word	0x40022000
 800643c:	45670123 	.word	0x45670123
 8006440:	cdef89ab 	.word	0xcdef89ab

08006444 <FLASH_WaitForLastOperation>:
{
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006448:	f7ff fa32 	bl	80058b0 <HAL_GetTick>
 800644c:	0005      	movs	r5, r0
  while ((FLASH->SR & error) != 0x00U)
 800644e:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <FLASH_WaitForLastOperation+0x5c>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	03db      	lsls	r3, r3, #15
 8006454:	d508      	bpl.n	8006468 <FLASH_WaitForLastOperation+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8006456:	1c63      	adds	r3, r4, #1
 8006458:	d0f9      	beq.n	800644e <FLASH_WaitForLastOperation+0xa>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800645a:	f7ff fa29 	bl	80058b0 <HAL_GetTick>
 800645e:	1b40      	subs	r0, r0, r5
 8006460:	42a0      	cmp	r0, r4
 8006462:	d3f4      	bcc.n	800644e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8006464:	2003      	movs	r0, #3
 8006466:	e01a      	b.n	800649e <FLASH_WaitForLastOperation+0x5a>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8006468:	490d      	ldr	r1, [pc, #52]	@ (80064a0 <FLASH_WaitForLastOperation+0x5c>)
 800646a:	690a      	ldr	r2, [r1, #16]
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <FLASH_WaitForLastOperation+0x60>)
 800646e:	0016      	movs	r6, r2
 8006470:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8006472:	480d      	ldr	r0, [pc, #52]	@ (80064a8 <FLASH_WaitForLastOperation+0x64>)
 8006474:	6108      	str	r0, [r1, #16]
  if (error != 0x00U)
 8006476:	421a      	tst	r2, r3
 8006478:	d10c      	bne.n	8006494 <FLASH_WaitForLastOperation+0x50>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <FLASH_WaitForLastOperation+0x5c>)
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	035b      	lsls	r3, r3, #13
 8006480:	d50c      	bpl.n	800649c <FLASH_WaitForLastOperation+0x58>
    if(Timeout != HAL_MAX_DELAY)
 8006482:	1c63      	adds	r3, r4, #1
 8006484:	d0f9      	beq.n	800647a <FLASH_WaitForLastOperation+0x36>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8006486:	f7ff fa13 	bl	80058b0 <HAL_GetTick>
 800648a:	1b40      	subs	r0, r0, r5
 800648c:	42a0      	cmp	r0, r4
 800648e:	d3f4      	bcc.n	800647a <FLASH_WaitForLastOperation+0x36>
        return HAL_TIMEOUT;
 8006490:	2003      	movs	r0, #3
 8006492:	e004      	b.n	800649e <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode = error;
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <FLASH_WaitForLastOperation+0x68>)
 8006496:	605e      	str	r6, [r3, #4]
    return HAL_ERROR;
 8006498:	2001      	movs	r0, #1
 800649a:	e000      	b.n	800649e <FLASH_WaitForLastOperation+0x5a>
  return HAL_OK;
 800649c:	2000      	movs	r0, #0
}
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	40022000 	.word	0x40022000
 80064a4:	0000c3fa 	.word	0x0000c3fa
 80064a8:	0000c3fb 	.word	0x0000c3fb
 80064ac:	20001220 	.word	0x20001220

080064b0 <HAL_FLASH_Program>:
{
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	0007      	movs	r7, r0
 80064b4:	000c      	movs	r4, r1
 80064b6:	0015      	movs	r5, r2
 80064b8:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 80064ba:	4b14      	ldr	r3, [pc, #80]	@ (800650c <HAL_FLASH_Program+0x5c>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d022      	beq.n	8006508 <HAL_FLASH_Program+0x58>
 80064c2:	4b12      	ldr	r3, [pc, #72]	@ (800650c <HAL_FLASH_Program+0x5c>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064cc:	20fa      	movs	r0, #250	@ 0xfa
 80064ce:	0080      	lsls	r0, r0, #2
 80064d0:	f7ff ffb8 	bl	8006444 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d10d      	bne.n	80064f4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80064d8:	2f01      	cmp	r7, #1
 80064da:	d00f      	beq.n	80064fc <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80064dc:	0029      	movs	r1, r5
 80064de:	0020      	movs	r0, r4
 80064e0:	f001 fa32 	bl	8007948 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064e4:	20fa      	movs	r0, #250	@ 0xfa
 80064e6:	0080      	lsls	r0, r0, #2
 80064e8:	f7ff ffac 	bl	8006444 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80064ec:	4a08      	ldr	r2, [pc, #32]	@ (8006510 <HAL_FLASH_Program+0x60>)
 80064ee:	6953      	ldr	r3, [r2, #20]
 80064f0:	43bb      	bics	r3, r7
 80064f2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_FLASH_Program+0x5c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
}
 80064fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80064fc:	002a      	movs	r2, r5
 80064fe:	0033      	movs	r3, r6
 8006500:	0020      	movs	r0, r4
 8006502:	f7ff ff17 	bl	8006334 <FLASH_Program_DoubleWord>
 8006506:	e7ed      	b.n	80064e4 <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 8006508:	2002      	movs	r0, #2
 800650a:	e7f6      	b.n	80064fa <HAL_FLASH_Program+0x4a>
 800650c:	20001220 	.word	0x20001220
 8006510:	40022000 	.word	0x40022000

08006514 <HAL_FLASH_Lock>:
{
 8006514:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006516:	20fa      	movs	r0, #250	@ 0xfa
 8006518:	0080      	lsls	r0, r0, #2
 800651a:	f7ff ff93 	bl	8006444 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800651e:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <HAL_FLASH_Lock+0x24>)
 8006520:	6959      	ldr	r1, [r3, #20]
 8006522:	2280      	movs	r2, #128	@ 0x80
 8006524:	0612      	lsls	r2, r2, #24
 8006526:	430a      	orrs	r2, r1
 8006528:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	db01      	blt.n	8006534 <HAL_FLASH_Lock+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006530:	2001      	movs	r0, #1
}
 8006532:	bd10      	pop	{r4, pc}
    status = HAL_OK;
 8006534:	2000      	movs	r0, #0
 8006536:	e7fc      	b.n	8006532 <HAL_FLASH_Lock+0x1e>
 8006538:	40022000 	.word	0x40022000

0800653c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800653c:	4a03      	ldr	r2, [pc, #12]	@ (800654c <FLASH_MassErase+0x10>)
 800653e:	6953      	ldr	r3, [r2, #20]
 8006540:	4303      	orrs	r3, r0
 8006542:	2080      	movs	r0, #128	@ 0x80
 8006544:	0240      	lsls	r0, r0, #9
 8006546:	4318      	orrs	r0, r3
 8006548:	6150      	str	r0, [r2, #20]
}
 800654a:	4770      	bx	lr
 800654c:	40022000 	.word	0x40022000

08006550 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8006550:	4a04      	ldr	r2, [pc, #16]	@ (8006564 <FLASH_PageErase+0x14>)
 8006552:	6953      	ldr	r3, [r2, #20]
 8006554:	4804      	ldr	r0, [pc, #16]	@ (8006568 <FLASH_PageErase+0x18>)
 8006556:	4003      	ands	r3, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8006558:	00c9      	lsls	r1, r1, #3
 800655a:	4319      	orrs	r1, r3
 800655c:	4b03      	ldr	r3, [pc, #12]	@ (800656c <FLASH_PageErase+0x1c>)
 800655e:	430b      	orrs	r3, r1
 8006560:	6153      	str	r3, [r2, #20]
}
 8006562:	4770      	bx	lr
 8006564:	40022000 	.word	0x40022000
 8006568:	ffffe007 	.word	0xffffe007
 800656c:	00010002 	.word	0x00010002

08006570 <HAL_FLASHEx_Erase>:
{
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	0004      	movs	r4, r0
 8006574:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <HAL_FLASHEx_Erase+0x80>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d036      	beq.n	80065ec <HAL_FLASHEx_Erase+0x7c>
 800657e:	4b1c      	ldr	r3, [pc, #112]	@ (80065f0 <HAL_FLASHEx_Erase+0x80>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006588:	20fa      	movs	r0, #250	@ 0xfa
 800658a:	0080      	lsls	r0, r0, #2
 800658c:	f7ff ff5a 	bl	8006444 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8006590:	2800      	cmp	r0, #0
 8006592:	d127      	bne.n	80065e4 <HAL_FLASHEx_Erase+0x74>
    pEraseInit->Banks = FLASH_BANK_1;
 8006594:	2304      	movs	r3, #4
 8006596:	6063      	str	r3, [r4, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d014      	beq.n	80065c8 <HAL_FLASHEx_Erase+0x58>
      *PageError = 0xFFFFFFFFU;
 800659e:	2301      	movs	r3, #1
 80065a0:	425b      	negs	r3, r3
 80065a2:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80065a4:	68a5      	ldr	r5, [r4, #8]
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	68e2      	ldr	r2, [r4, #12]
 80065aa:	189b      	adds	r3, r3, r2
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	d914      	bls.n	80065da <HAL_FLASHEx_Erase+0x6a>
        FLASH_PageErase(pEraseInit->Banks, index);
 80065b0:	6860      	ldr	r0, [r4, #4]
 80065b2:	0029      	movs	r1, r5
 80065b4:	f7ff ffcc 	bl	8006550 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065b8:	20fa      	movs	r0, #250	@ 0xfa
 80065ba:	0080      	lsls	r0, r0, #2
 80065bc:	f7ff ff42 	bl	8006444 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_FLASHEx_Erase+0x68>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80065c4:	3501      	adds	r5, #1
 80065c6:	e7ee      	b.n	80065a6 <HAL_FLASHEx_Erase+0x36>
      FLASH_MassErase(pEraseInit->Banks);
 80065c8:	3004      	adds	r0, #4
 80065ca:	f7ff ffb7 	bl	800653c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065ce:	20fa      	movs	r0, #250	@ 0xfa
 80065d0:	0080      	lsls	r0, r0, #2
 80065d2:	f7ff ff37 	bl	8006444 <FLASH_WaitForLastOperation>
 80065d6:	e005      	b.n	80065e4 <HAL_FLASHEx_Erase+0x74>
          *PageError = index;
 80065d8:	6035      	str	r5, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80065da:	4a06      	ldr	r2, [pc, #24]	@ (80065f4 <HAL_FLASHEx_Erase+0x84>)
 80065dc:	6953      	ldr	r3, [r2, #20]
 80065de:	2102      	movs	r1, #2
 80065e0:	438b      	bics	r3, r1
 80065e2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80065e4:	4b02      	ldr	r3, [pc, #8]	@ (80065f0 <HAL_FLASHEx_Erase+0x80>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
}
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80065ec:	2002      	movs	r0, #2
 80065ee:	e7fc      	b.n	80065ea <HAL_FLASHEx_Erase+0x7a>
 80065f0:	20001220 	.word	0x20001220
 80065f4:	40022000 	.word	0x40022000

080065f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80065fa:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065fc:	e059      	b.n	80066b2 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065fe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006600:	005f      	lsls	r7, r3, #1
 8006602:	2403      	movs	r4, #3
 8006604:	40bc      	lsls	r4, r7
 8006606:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006608:	68cc      	ldr	r4, [r1, #12]
 800660a:	40bc      	lsls	r4, r7
 800660c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800660e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006610:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006612:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006614:	684e      	ldr	r6, [r1, #4]
 8006616:	0936      	lsrs	r6, r6, #4
 8006618:	2201      	movs	r2, #1
 800661a:	4032      	ands	r2, r6
 800661c:	409a      	lsls	r2, r3
 800661e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8006620:	6042      	str	r2, [r0, #4]
 8006622:	e056      	b.n	80066d2 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006624:	08de      	lsrs	r6, r3, #3
 8006626:	3608      	adds	r6, #8
 8006628:	00b6      	lsls	r6, r6, #2
 800662a:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800662c:	3205      	adds	r2, #5
 800662e:	401a      	ands	r2, r3
 8006630:	0092      	lsls	r2, r2, #2
 8006632:	240f      	movs	r4, #15
 8006634:	4094      	lsls	r4, r2
 8006636:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006638:	690c      	ldr	r4, [r1, #16]
 800663a:	4094      	lsls	r4, r2
 800663c:	0022      	movs	r2, r4
 800663e:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006640:	5032      	str	r2, [r6, r0]
 8006642:	e059      	b.n	80066f8 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006644:	2603      	movs	r6, #3
 8006646:	e000      	b.n	800664a <HAL_GPIO_Init+0x52>
 8006648:	2600      	movs	r6, #0
 800664a:	40a6      	lsls	r6, r4
 800664c:	0034      	movs	r4, r6
 800664e:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8006650:	4e42      	ldr	r6, [pc, #264]	@ (800675c <HAL_GPIO_Init+0x164>)
 8006652:	3218      	adds	r2, #24
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006658:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 800665a:	43ea      	mvns	r2, r5
 800665c:	003e      	movs	r6, r7
 800665e:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006660:	684c      	ldr	r4, [r1, #4]
 8006662:	02e4      	lsls	r4, r4, #11
 8006664:	d501      	bpl.n	800666a <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8006666:	003e      	movs	r6, r7
 8006668:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 800666a:	4c3c      	ldr	r4, [pc, #240]	@ (800675c <HAL_GPIO_Init+0x164>)
 800666c:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 800666e:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8006670:	003e      	movs	r6, r7
 8006672:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006674:	684c      	ldr	r4, [r1, #4]
 8006676:	02a4      	lsls	r4, r4, #10
 8006678:	d501      	bpl.n	800667e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800667a:	003e      	movs	r6, r7
 800667c:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 800667e:	4c37      	ldr	r4, [pc, #220]	@ (800675c <HAL_GPIO_Init+0x164>)
 8006680:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006682:	2684      	movs	r6, #132	@ 0x84
 8006684:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 8006686:	003e      	movs	r6, r7
 8006688:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800668a:	684c      	ldr	r4, [r1, #4]
 800668c:	03a4      	lsls	r4, r4, #14
 800668e:	d501      	bpl.n	8006694 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8006690:	003e      	movs	r6, r7
 8006692:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8006694:	4c31      	ldr	r4, [pc, #196]	@ (800675c <HAL_GPIO_Init+0x164>)
 8006696:	2784      	movs	r7, #132	@ 0x84
 8006698:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 800669a:	2680      	movs	r6, #128	@ 0x80
 800669c:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 800669e:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066a0:	684c      	ldr	r4, [r1, #4]
 80066a2:	03e4      	lsls	r4, r4, #15
 80066a4:	d501      	bpl.n	80066aa <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80066a6:	002a      	movs	r2, r5
 80066a8:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 80066aa:	4d2c      	ldr	r5, [pc, #176]	@ (800675c <HAL_GPIO_Init+0x164>)
 80066ac:	2480      	movs	r4, #128	@ 0x80
 80066ae:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 80066b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066b2:	680c      	ldr	r4, [r1, #0]
 80066b4:	0022      	movs	r2, r4
 80066b6:	40da      	lsrs	r2, r3
 80066b8:	d04e      	beq.n	8006758 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	0025      	movs	r5, r4
 80066c0:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80066c2:	4214      	tst	r4, r2
 80066c4:	d0f4      	beq.n	80066b0 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066c6:	684e      	ldr	r6, [r1, #4]
 80066c8:	2403      	movs	r4, #3
 80066ca:	4034      	ands	r4, r6
 80066cc:	3c01      	subs	r4, #1
 80066ce:	2c01      	cmp	r4, #1
 80066d0:	d995      	bls.n	80065fe <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066d2:	684c      	ldr	r4, [r1, #4]
 80066d4:	2203      	movs	r2, #3
 80066d6:	4022      	ands	r2, r4
 80066d8:	2a03      	cmp	r2, #3
 80066da:	d008      	beq.n	80066ee <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80066dc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066de:	005e      	lsls	r6, r3, #1
 80066e0:	2203      	movs	r2, #3
 80066e2:	40b2      	lsls	r2, r6
 80066e4:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80066e6:	688a      	ldr	r2, [r1, #8]
 80066e8:	40b2      	lsls	r2, r6
 80066ea:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80066ec:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ee:	684c      	ldr	r4, [r1, #4]
 80066f0:	2203      	movs	r2, #3
 80066f2:	4022      	ands	r2, r4
 80066f4:	2a02      	cmp	r2, #2
 80066f6:	d095      	beq.n	8006624 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 80066f8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80066fa:	005e      	lsls	r6, r3, #1
 80066fc:	2203      	movs	r2, #3
 80066fe:	0017      	movs	r7, r2
 8006700:	40b7      	lsls	r7, r6
 8006702:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006704:	684f      	ldr	r7, [r1, #4]
 8006706:	403a      	ands	r2, r7
 8006708:	40b2      	lsls	r2, r6
 800670a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800670c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800670e:	684c      	ldr	r4, [r1, #4]
 8006710:	22c0      	movs	r2, #192	@ 0xc0
 8006712:	0292      	lsls	r2, r2, #10
 8006714:	4214      	tst	r4, r2
 8006716:	d0cb      	beq.n	80066b0 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 8006718:	089a      	lsrs	r2, r3, #2
 800671a:	0014      	movs	r4, r2
 800671c:	3418      	adds	r4, #24
 800671e:	00a4      	lsls	r4, r4, #2
 8006720:	4e0e      	ldr	r6, [pc, #56]	@ (800675c <HAL_GPIO_Init+0x164>)
 8006722:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006724:	2403      	movs	r4, #3
 8006726:	401c      	ands	r4, r3
 8006728:	00e4      	lsls	r4, r4, #3
 800672a:	260f      	movs	r6, #15
 800672c:	40a6      	lsls	r6, r4
 800672e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006730:	26a0      	movs	r6, #160	@ 0xa0
 8006732:	05f6      	lsls	r6, r6, #23
 8006734:	42b0      	cmp	r0, r6
 8006736:	d087      	beq.n	8006648 <HAL_GPIO_Init+0x50>
 8006738:	4e09      	ldr	r6, [pc, #36]	@ (8006760 <HAL_GPIO_Init+0x168>)
 800673a:	42b0      	cmp	r0, r6
 800673c:	d008      	beq.n	8006750 <HAL_GPIO_Init+0x158>
 800673e:	4e09      	ldr	r6, [pc, #36]	@ (8006764 <HAL_GPIO_Init+0x16c>)
 8006740:	42b0      	cmp	r0, r6
 8006742:	d007      	beq.n	8006754 <HAL_GPIO_Init+0x15c>
 8006744:	4e08      	ldr	r6, [pc, #32]	@ (8006768 <HAL_GPIO_Init+0x170>)
 8006746:	42b0      	cmp	r0, r6
 8006748:	d100      	bne.n	800674c <HAL_GPIO_Init+0x154>
 800674a:	e77b      	b.n	8006644 <HAL_GPIO_Init+0x4c>
 800674c:	2605      	movs	r6, #5
 800674e:	e77c      	b.n	800664a <HAL_GPIO_Init+0x52>
 8006750:	2601      	movs	r6, #1
 8006752:	e77a      	b.n	800664a <HAL_GPIO_Init+0x52>
 8006754:	2602      	movs	r6, #2
 8006756:	e778      	b.n	800664a <HAL_GPIO_Init+0x52>
  }
}
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	40021800 	.word	0x40021800
 8006760:	50000400 	.word	0x50000400
 8006764:	50000800 	.word	0x50000800
 8006768:	50000c00 	.word	0x50000c00

0800676c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800676c:	6903      	ldr	r3, [r0, #16]
 800676e:	420b      	tst	r3, r1
 8006770:	d001      	beq.n	8006776 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006772:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006774:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8006776:	2000      	movs	r0, #0
 8006778:	e7fc      	b.n	8006774 <HAL_GPIO_ReadPin+0x8>
	...

0800677c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800677c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800677e:	4a10      	ldr	r2, [pc, #64]	@ (80067c0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8006780:	6813      	ldr	r3, [r2, #0]
 8006782:	4910      	ldr	r1, [pc, #64]	@ (80067c4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8006784:	400b      	ands	r3, r1
 8006786:	4303      	orrs	r3, r0
 8006788:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800678a:	2380      	movs	r3, #128	@ 0x80
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4298      	cmp	r0, r3
 8006790:	d001      	beq.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006792:	2000      	movs	r0, #0
}
 8006794:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006796:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	0058      	lsls	r0, r3, #1
 800679c:	18c0      	adds	r0, r0, r3
 800679e:	0040      	lsls	r0, r0, #1
 80067a0:	490a      	ldr	r1, [pc, #40]	@ (80067cc <HAL_PWREx_ControlVoltageScaling+0x50>)
 80067a2:	f7fb fcb1 	bl	8002108 <__udivsi3>
 80067a6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	055b      	lsls	r3, r3, #21
 80067ae:	d503      	bpl.n	80067b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d003      	beq.n	80067bc <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80067b4:	3801      	subs	r0, #1
 80067b6:	e7f7      	b.n	80067a8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80067b8:	2000      	movs	r0, #0
 80067ba:	e7eb      	b.n	8006794 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80067bc:	2003      	movs	r0, #3
 80067be:	e7e9      	b.n	8006794 <HAL_PWREx_ControlVoltageScaling+0x18>
 80067c0:	40007000 	.word	0x40007000
 80067c4:	fffff9ff 	.word	0xfffff9ff
 80067c8:	200000e0 	.word	0x200000e0
 80067cc:	000f4240 	.word	0x000f4240

080067d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d6:	d100      	bne.n	80067da <HAL_RCC_OscConfig+0xa>
 80067d8:	e231      	b.n	8006c3e <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	07db      	lsls	r3, r3, #31
 80067de:	d539      	bpl.n	8006854 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e0:	4ac1      	ldr	r2, [pc, #772]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80067e2:	6891      	ldr	r1, [r2, #8]
 80067e4:	2338      	movs	r3, #56	@ 0x38
 80067e6:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067e8:	68d1      	ldr	r1, [r2, #12]
 80067ea:	2203      	movs	r2, #3
 80067ec:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d026      	beq.n	8006840 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d026      	beq.n	8006844 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	2280      	movs	r2, #128	@ 0x80
 80067fa:	0252      	lsls	r2, r2, #9
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d07f      	beq.n	8006900 <HAL_RCC_OscConfig+0x130>
 8006800:	22a0      	movs	r2, #160	@ 0xa0
 8006802:	02d2      	lsls	r2, r2, #11
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <HAL_RCC_OscConfig+0x3a>
 8006808:	e081      	b.n	800690e <HAL_RCC_OscConfig+0x13e>
 800680a:	4bb7      	ldr	r3, [pc, #732]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	49b7      	ldr	r1, [pc, #732]	@ (8006aec <HAL_RCC_OscConfig+0x31c>)
 8006810:	400a      	ands	r2, r1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	49b6      	ldr	r1, [pc, #728]	@ (8006af0 <HAL_RCC_OscConfig+0x320>)
 8006818:	400a      	ands	r2, r1
 800681a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d100      	bne.n	8006824 <HAL_RCC_OscConfig+0x54>
 8006822:	e080      	b.n	8006926 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7ff f844 	bl	80058b0 <HAL_GetTick>
 8006828:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800682a:	4baf      	ldr	r3, [pc, #700]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	039b      	lsls	r3, r3, #14
 8006830:	d410      	bmi.n	8006854 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006832:	f7ff f83d 	bl	80058b0 <HAL_GetTick>
 8006836:	1b40      	subs	r0, r0, r5
 8006838:	2864      	cmp	r0, #100	@ 0x64
 800683a:	d9f6      	bls.n	800682a <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 800683c:	2003      	movs	r0, #3
 800683e:	e1ff      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006840:	2a03      	cmp	r2, #3
 8006842:	d1d6      	bne.n	80067f2 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	4ba8      	ldr	r3, [pc, #672]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	039b      	lsls	r3, r3, #14
 800684a:	d503      	bpl.n	8006854 <HAL_RCC_OscConfig+0x84>
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d100      	bne.n	8006854 <HAL_RCC_OscConfig+0x84>
 8006852:	e1f7      	b.n	8006c44 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	079b      	lsls	r3, r3, #30
 8006858:	d531      	bpl.n	80068be <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685a:	4aa3      	ldr	r2, [pc, #652]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 800685c:	6891      	ldr	r1, [r2, #8]
 800685e:	2338      	movs	r3, #56	@ 0x38
 8006860:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006862:	68d1      	ldr	r1, [r2, #12]
 8006864:	2203      	movs	r2, #3
 8006866:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006868:	2b10      	cmp	r3, #16
 800686a:	d06a      	beq.n	8006942 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800686c:	2b00      	cmp	r3, #0
 800686e:	d16b      	bne.n	8006948 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006870:	4a9d      	ldr	r2, [pc, #628]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	0552      	lsls	r2, r2, #21
 8006876:	d503      	bpl.n	8006880 <HAL_RCC_OscConfig+0xb0>
 8006878:	68e2      	ldr	r2, [r4, #12]
 800687a:	2a00      	cmp	r2, #0
 800687c:	d100      	bne.n	8006880 <HAL_RCC_OscConfig+0xb0>
 800687e:	e1e3      	b.n	8006c48 <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006880:	4899      	ldr	r0, [pc, #612]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006882:	6842      	ldr	r2, [r0, #4]
 8006884:	499b      	ldr	r1, [pc, #620]	@ (8006af4 <HAL_RCC_OscConfig+0x324>)
 8006886:	400a      	ands	r2, r1
 8006888:	6961      	ldr	r1, [r4, #20]
 800688a:	0209      	lsls	r1, r1, #8
 800688c:	430a      	orrs	r2, r1
 800688e:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10d      	bne.n	80068b0 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006894:	6803      	ldr	r3, [r0, #0]
 8006896:	4998      	ldr	r1, [pc, #608]	@ (8006af8 <HAL_RCC_OscConfig+0x328>)
 8006898:	400b      	ands	r3, r1
 800689a:	6921      	ldr	r1, [r4, #16]
 800689c:	430b      	orrs	r3, r1
 800689e:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80068a0:	6803      	ldr	r3, [r0, #0]
 80068a2:	0adb      	lsrs	r3, r3, #11
 80068a4:	2207      	movs	r2, #7
 80068a6:	401a      	ands	r2, r3
 80068a8:	4b94      	ldr	r3, [pc, #592]	@ (8006afc <HAL_RCC_OscConfig+0x32c>)
 80068aa:	40d3      	lsrs	r3, r2
 80068ac:	4a94      	ldr	r2, [pc, #592]	@ (8006b00 <HAL_RCC_OscConfig+0x330>)
 80068ae:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068b0:	4b94      	ldr	r3, [pc, #592]	@ (8006b04 <HAL_RCC_OscConfig+0x334>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	f7fe ffb0 	bl	8005818 <HAL_InitTick>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d000      	beq.n	80068be <HAL_RCC_OscConfig+0xee>
 80068bc:	e1c6      	b.n	8006c4c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	071b      	lsls	r3, r3, #28
 80068c2:	d400      	bmi.n	80068c6 <HAL_RCC_OscConfig+0xf6>
 80068c4:	e081      	b.n	80069ca <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80068c6:	4b88      	ldr	r3, [pc, #544]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	2338      	movs	r3, #56	@ 0x38
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b18      	cmp	r3, #24
 80068d0:	d073      	beq.n	80069ba <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068d2:	69a3      	ldr	r3, [r4, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d100      	bne.n	80068da <HAL_RCC_OscConfig+0x10a>
 80068d8:	e0b4      	b.n	8006a44 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80068da:	4a83      	ldr	r2, [pc, #524]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80068dc:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80068de:	2101      	movs	r1, #1
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fe ffe4 	bl	80058b0 <HAL_GetTick>
 80068e8:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068ea:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80068ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	d46b      	bmi.n	80069ca <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f2:	f7fe ffdd 	bl	80058b0 <HAL_GetTick>
 80068f6:	1b40      	subs	r0, r0, r5
 80068f8:	2802      	cmp	r0, #2
 80068fa:	d9f6      	bls.n	80068ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80068fc:	2003      	movs	r0, #3
 80068fe:	e19f      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006900:	4a79      	ldr	r2, [pc, #484]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006902:	6811      	ldr	r1, [r2, #0]
 8006904:	2380      	movs	r3, #128	@ 0x80
 8006906:	025b      	lsls	r3, r3, #9
 8006908:	430b      	orrs	r3, r1
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e786      	b.n	800681c <HAL_RCC_OscConfig+0x4c>
 800690e:	4b76      	ldr	r3, [pc, #472]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	2280      	movs	r2, #128	@ 0x80
 8006914:	02d2      	lsls	r2, r2, #11
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	6819      	ldr	r1, [r3, #0]
 800691c:	2280      	movs	r2, #128	@ 0x80
 800691e:	0252      	lsls	r2, r2, #9
 8006920:	430a      	orrs	r2, r1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e77a      	b.n	800681c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006926:	f7fe ffc3 	bl	80058b0 <HAL_GetTick>
 800692a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800692c:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	039b      	lsls	r3, r3, #14
 8006932:	d58f      	bpl.n	8006854 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006934:	f7fe ffbc 	bl	80058b0 <HAL_GetTick>
 8006938:	1b40      	subs	r0, r0, r5
 800693a:	2864      	cmp	r0, #100	@ 0x64
 800693c:	d9f6      	bls.n	800692c <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 800693e:	2003      	movs	r0, #3
 8006940:	e17e      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006942:	2a02      	cmp	r2, #2
 8006944:	d192      	bne.n	800686c <HAL_RCC_OscConfig+0x9c>
 8006946:	e793      	b.n	8006870 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006948:	68e3      	ldr	r3, [r4, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d022      	beq.n	8006994 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800694e:	4a66      	ldr	r2, [pc, #408]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	4969      	ldr	r1, [pc, #420]	@ (8006af8 <HAL_RCC_OscConfig+0x328>)
 8006954:	400b      	ands	r3, r1
 8006956:	6921      	ldr	r1, [r4, #16]
 8006958:	430b      	orrs	r3, r1
 800695a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800695c:	6811      	ldr	r1, [r2, #0]
 800695e:	2380      	movs	r3, #128	@ 0x80
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	430b      	orrs	r3, r1
 8006964:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006966:	f7fe ffa3 	bl	80058b0 <HAL_GetTick>
 800696a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800696c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	055b      	lsls	r3, r3, #21
 8006972:	d406      	bmi.n	8006982 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006974:	f7fe ff9c 	bl	80058b0 <HAL_GetTick>
 8006978:	1b40      	subs	r0, r0, r5
 800697a:	2802      	cmp	r0, #2
 800697c:	d9f6      	bls.n	800696c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 800697e:	2003      	movs	r0, #3
 8006980:	e15e      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006982:	4959      	ldr	r1, [pc, #356]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006984:	684b      	ldr	r3, [r1, #4]
 8006986:	4a5b      	ldr	r2, [pc, #364]	@ (8006af4 <HAL_RCC_OscConfig+0x324>)
 8006988:	4013      	ands	r3, r2
 800698a:	6962      	ldr	r2, [r4, #20]
 800698c:	0212      	lsls	r2, r2, #8
 800698e:	4313      	orrs	r3, r2
 8006990:	604b      	str	r3, [r1, #4]
 8006992:	e794      	b.n	80068be <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8006994:	4a54      	ldr	r2, [pc, #336]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	495b      	ldr	r1, [pc, #364]	@ (8006b08 <HAL_RCC_OscConfig+0x338>)
 800699a:	400b      	ands	r3, r1
 800699c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800699e:	f7fe ff87 	bl	80058b0 <HAL_GetTick>
 80069a2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069a4:	4b50      	ldr	r3, [pc, #320]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	055b      	lsls	r3, r3, #21
 80069aa:	d588      	bpl.n	80068be <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fe ff80 	bl	80058b0 <HAL_GetTick>
 80069b0:	1b40      	subs	r0, r0, r5
 80069b2:	2802      	cmp	r0, #2
 80069b4:	d9f6      	bls.n	80069a4 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 80069b6:	2003      	movs	r0, #3
 80069b8:	e142      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80069ba:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80069bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	d503      	bpl.n	80069ca <HAL_RCC_OscConfig+0x1fa>
 80069c2:	69a3      	ldr	r3, [r4, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d100      	bne.n	80069ca <HAL_RCC_OscConfig+0x1fa>
 80069c8:	e142      	b.n	8006c50 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	075b      	lsls	r3, r3, #29
 80069ce:	d400      	bmi.n	80069d2 <HAL_RCC_OscConfig+0x202>
 80069d0:	e0a2      	b.n	8006b18 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069d2:	4b45      	ldr	r3, [pc, #276]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	2338      	movs	r3, #56	@ 0x38
 80069d8:	4013      	ands	r3, r2
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d045      	beq.n	8006a6a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069de:	4b42      	ldr	r3, [pc, #264]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80069e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	d44a      	bmi.n	8006a7c <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	4b40      	ldr	r3, [pc, #256]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 80069e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069ea:	2180      	movs	r1, #128	@ 0x80
 80069ec:	0549      	lsls	r1, r1, #21
 80069ee:	430a      	orrs	r2, r1
 80069f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	400b      	ands	r3, r1
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80069fa:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069fc:	4b43      	ldr	r3, [pc, #268]	@ (8006b0c <HAL_RCC_OscConfig+0x33c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	05db      	lsls	r3, r3, #23
 8006a02:	d53d      	bpl.n	8006a80 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d04e      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x2d8>
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d052      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x2e4>
 8006a0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a12:	2101      	movs	r1, #1
 8006a14:	438a      	bics	r2, r1
 8006a16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a1a:	3103      	adds	r1, #3
 8006a1c:	438a      	bics	r2, r1
 8006a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d050      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a26:	f7fe ff43 	bl	80058b0 <HAL_GetTick>
 8006a2a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a30:	079b      	lsls	r3, r3, #30
 8006a32:	d46f      	bmi.n	8006b14 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fe ff3c 	bl	80058b0 <HAL_GetTick>
 8006a38:	1b80      	subs	r0, r0, r6
 8006a3a:	4b35      	ldr	r3, [pc, #212]	@ (8006b10 <HAL_RCC_OscConfig+0x340>)
 8006a3c:	4298      	cmp	r0, r3
 8006a3e:	d9f5      	bls.n	8006a2c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8006a40:	2003      	movs	r0, #3
 8006a42:	e0fd      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8006a44:	4a28      	ldr	r2, [pc, #160]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006a46:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8006a48:	2101      	movs	r1, #1
 8006a4a:	438b      	bics	r3, r1
 8006a4c:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006a4e:	f7fe ff2f 	bl	80058b0 <HAL_GetTick>
 8006a52:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a54:	4b24      	ldr	r3, [pc, #144]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a58:	079b      	lsls	r3, r3, #30
 8006a5a:	d5b6      	bpl.n	80069ca <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a5c:	f7fe ff28 	bl	80058b0 <HAL_GetTick>
 8006a60:	1b40      	subs	r0, r0, r5
 8006a62:	2802      	cmp	r0, #2
 8006a64:	d9f6      	bls.n	8006a54 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8006a66:	2003      	movs	r0, #3
 8006a68:	e0ea      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6e:	079b      	lsls	r3, r3, #30
 8006a70:	d552      	bpl.n	8006b18 <HAL_RCC_OscConfig+0x348>
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d14f      	bne.n	8006b18 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8006a78:	2001      	movs	r0, #1
 8006a7a:	e0e1      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 8006a7c:	2500      	movs	r5, #0
 8006a7e:	e7bd      	b.n	80069fc <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a80:	4a22      	ldr	r2, [pc, #136]	@ (8006b0c <HAL_RCC_OscConfig+0x33c>)
 8006a82:	6811      	ldr	r1, [r2, #0]
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a8c:	f7fe ff10 	bl	80058b0 <HAL_GetTick>
 8006a90:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a92:	4b1e      	ldr	r3, [pc, #120]	@ (8006b0c <HAL_RCC_OscConfig+0x33c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	05db      	lsls	r3, r3, #23
 8006a98:	d4b4      	bmi.n	8006a04 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9a:	f7fe ff09 	bl	80058b0 <HAL_GetTick>
 8006a9e:	1b80      	subs	r0, r0, r6
 8006aa0:	2802      	cmp	r0, #2
 8006aa2:	d9f6      	bls.n	8006a92 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8006aa4:	2003      	movs	r0, #3
 8006aa6:	e0cb      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006aaa:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006aac:	2101      	movs	r1, #1
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8006ab2:	e7b5      	b.n	8006a20 <HAL_RCC_OscConfig+0x250>
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ab8:	2104      	movs	r1, #4
 8006aba:	430a      	orrs	r2, r1
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ac0:	3903      	subs	r1, #3
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ac6:	e7ab      	b.n	8006a20 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fe fef2 	bl	80058b0 <HAL_GetTick>
 8006acc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <HAL_RCC_OscConfig+0x318>)
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad2:	079b      	lsls	r3, r3, #30
 8006ad4:	d51e      	bpl.n	8006b14 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fe feeb 	bl	80058b0 <HAL_GetTick>
 8006ada:	1b80      	subs	r0, r0, r6
 8006adc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b10 <HAL_RCC_OscConfig+0x340>)
 8006ade:	4298      	cmp	r0, r3
 8006ae0:	d9f5      	bls.n	8006ace <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8006ae2:	2003      	movs	r0, #3
 8006ae4:	e0ac      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	fffeffff 	.word	0xfffeffff
 8006af0:	fffbffff 	.word	0xfffbffff
 8006af4:	ffff80ff 	.word	0xffff80ff
 8006af8:	ffffc7ff 	.word	0xffffc7ff
 8006afc:	00f42400 	.word	0x00f42400
 8006b00:	200000e0 	.word	0x200000e0
 8006b04:	200000e8 	.word	0x200000e8
 8006b08:	fffffeff 	.word	0xfffffeff
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b14:	2d01      	cmp	r5, #1
 8006b16:	d01e      	beq.n	8006b56 <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b18:	69e3      	ldr	r3, [r4, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d100      	bne.n	8006b20 <HAL_RCC_OscConfig+0x350>
 8006b1e:	e099      	b.n	8006c54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b20:	4a54      	ldr	r2, [pc, #336]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b22:	6891      	ldr	r1, [r2, #8]
 8006b24:	2238      	movs	r2, #56	@ 0x38
 8006b26:	400a      	ands	r2, r1
 8006b28:	2a10      	cmp	r2, #16
 8006b2a:	d060      	beq.n	8006bee <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d018      	beq.n	8006b62 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b30:	4a50      	ldr	r2, [pc, #320]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	4950      	ldr	r1, [pc, #320]	@ (8006c78 <HAL_RCC_OscConfig+0x4a8>)
 8006b36:	400b      	ands	r3, r1
 8006b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3a:	f7fe feb9 	bl	80058b0 <HAL_GetTick>
 8006b3e:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b40:	4b4c      	ldr	r3, [pc, #304]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	d54b      	bpl.n	8006be0 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fe feb2 	bl	80058b0 <HAL_GetTick>
 8006b4c:	1b00      	subs	r0, r0, r4
 8006b4e:	2802      	cmp	r0, #2
 8006b50:	d9f6      	bls.n	8006b40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006b52:	2003      	movs	r0, #3
 8006b54:	e074      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b56:	4a47      	ldr	r2, [pc, #284]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b58:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006b5a:	4948      	ldr	r1, [pc, #288]	@ (8006c7c <HAL_RCC_OscConfig+0x4ac>)
 8006b5c:	400b      	ands	r3, r1
 8006b5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006b60:	e7da      	b.n	8006b18 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4a44      	ldr	r2, [pc, #272]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b64:	6813      	ldr	r3, [r2, #0]
 8006b66:	4944      	ldr	r1, [pc, #272]	@ (8006c78 <HAL_RCC_OscConfig+0x4a8>)
 8006b68:	400b      	ands	r3, r1
 8006b6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b6c:	f7fe fea0 	bl	80058b0 <HAL_GetTick>
 8006b70:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b72:	4b40      	ldr	r3, [pc, #256]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	019b      	lsls	r3, r3, #6
 8006b78:	d506      	bpl.n	8006b88 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b7a:	f7fe fe99 	bl	80058b0 <HAL_GetTick>
 8006b7e:	1b40      	subs	r0, r0, r5
 8006b80:	2802      	cmp	r0, #2
 8006b82:	d9f6      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8006b84:	2003      	movs	r0, #3
 8006b86:	e05b      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b88:	4a3a      	ldr	r2, [pc, #232]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006b8a:	68d3      	ldr	r3, [r2, #12]
 8006b8c:	493c      	ldr	r1, [pc, #240]	@ (8006c80 <HAL_RCC_OscConfig+0x4b0>)
 8006b8e:	4019      	ands	r1, r3
 8006b90:	6a23      	ldr	r3, [r4, #32]
 8006b92:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006b94:	4303      	orrs	r3, r0
 8006b96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006b98:	0200      	lsls	r0, r0, #8
 8006b9a:	4303      	orrs	r3, r0
 8006b9c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8006ba6:	4303      	orrs	r3, r0
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006bac:	6811      	ldr	r1, [r2, #0]
 8006bae:	2380      	movs	r3, #128	@ 0x80
 8006bb0:	045b      	lsls	r3, r3, #17
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006bb6:	68d1      	ldr	r1, [r2, #12]
 8006bb8:	2380      	movs	r3, #128	@ 0x80
 8006bba:	055b      	lsls	r3, r3, #21
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006bc0:	f7fe fe76 	bl	80058b0 <HAL_GetTick>
 8006bc4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	019b      	lsls	r3, r3, #6
 8006bcc:	d406      	bmi.n	8006bdc <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bce:	f7fe fe6f 	bl	80058b0 <HAL_GetTick>
 8006bd2:	1b00      	subs	r0, r0, r4
 8006bd4:	2802      	cmp	r0, #2
 8006bd6:	d9f6      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 8006bd8:	2003      	movs	r0, #3
 8006bda:	e031      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e02f      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006be0:	4a24      	ldr	r2, [pc, #144]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006be2:	68d3      	ldr	r3, [r2, #12]
 8006be4:	4927      	ldr	r1, [pc, #156]	@ (8006c84 <HAL_RCC_OscConfig+0x4b4>)
 8006be6:	400b      	ands	r3, r1
 8006be8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006bea:	2000      	movs	r0, #0
 8006bec:	e028      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d032      	beq.n	8006c58 <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 8006bf2:	4b20      	ldr	r3, [pc, #128]	@ (8006c74 <HAL_RCC_OscConfig+0x4a4>)
 8006bf4:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	6a21      	ldr	r1, [r4, #32]
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	d12d      	bne.n	8006c5c <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c00:	2370      	movs	r3, #112	@ 0x70
 8006c02:	4013      	ands	r3, r2
 8006c04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c06:	428b      	cmp	r3, r1
 8006c08:	d12a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c0a:	21fe      	movs	r1, #254	@ 0xfe
 8006c0c:	01c9      	lsls	r1, r1, #7
 8006c0e:	4011      	ands	r1, r2
 8006c10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d125      	bne.n	8006c64 <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c18:	23f8      	movs	r3, #248	@ 0xf8
 8006c1a:	039b      	lsls	r3, r3, #14
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c20:	428b      	cmp	r3, r1
 8006c22:	d121      	bne.n	8006c68 <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c24:	23e0      	movs	r3, #224	@ 0xe0
 8006c26:	051b      	lsls	r3, r3, #20
 8006c28:	4013      	ands	r3, r2
 8006c2a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	d11d      	bne.n	8006c6c <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c30:	0f52      	lsrs	r2, r2, #29
 8006c32:	0752      	lsls	r2, r2, #29
 8006c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d11a      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 8006c3e:	2001      	movs	r0, #1
}
 8006c40:	b002      	add	sp, #8
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7fb      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7f9      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7f7      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c50:	2001      	movs	r0, #1
 8006c52:	e7f5      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8006c54:	2000      	movs	r0, #0
 8006c56:	e7f3      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e7f1      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	e7ef      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c60:	2001      	movs	r0, #1
 8006c62:	e7ed      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c64:	2001      	movs	r0, #1
 8006c66:	e7eb      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7e9      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e7e7      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c70:	2001      	movs	r0, #1
 8006c72:	e7e5      	b.n	8006c40 <HAL_RCC_OscConfig+0x470>
 8006c74:	40021000 	.word	0x40021000
 8006c78:	feffffff 	.word	0xfeffffff
 8006c7c:	efffffff 	.word	0xefffffff
 8006c80:	11c1808c 	.word	0x11c1808c
 8006c84:	eefefffc 	.word	0xeefefffc

08006c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c88:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2238      	movs	r2, #56	@ 0x38
 8006c90:	421a      	tst	r2, r3
 8006c92:	d107      	bne.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006c94:	4b27      	ldr	r3, [pc, #156]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	0ad2      	lsrs	r2, r2, #11
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006c9e:	4826      	ldr	r0, [pc, #152]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ca0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8006ca2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ca4:	4b23      	ldr	r3, [pc, #140]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	2338      	movs	r3, #56	@ 0x38
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d03b      	beq.n	8006d28 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cb0:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	2338      	movs	r3, #56	@ 0x38
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d00d      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	2338      	movs	r3, #56	@ 0x38
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d031      	beq.n	8006d2c <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	2338      	movs	r3, #56	@ 0x38
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b18      	cmp	r3, #24
 8006cd2:	d026      	beq.n	8006d22 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8006cd4:	2000      	movs	r0, #0
  return sysclockfreq;
 8006cd6:	e7e4      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006cd8:	4a16      	ldr	r2, [pc, #88]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cda:	68d1      	ldr	r1, [r2, #12]
 8006cdc:	3b0d      	subs	r3, #13
 8006cde:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ce0:	68d2      	ldr	r2, [r2, #12]
 8006ce2:	0912      	lsrs	r2, r2, #4
 8006ce4:	2107      	movs	r1, #7
 8006ce6:	4011      	ands	r1, r2
 8006ce8:	3101      	adds	r1, #1
    switch (pllsource)
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d00f      	beq.n	8006d0e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006cee:	4812      	ldr	r0, [pc, #72]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cf0:	f7fb fa0a 	bl	8002108 <__udivsi3>
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	0a12      	lsrs	r2, r2, #8
 8006cfa:	237f      	movs	r3, #127	@ 0x7f
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006d02:	68d9      	ldr	r1, [r3, #12]
 8006d04:	0f49      	lsrs	r1, r1, #29
 8006d06:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006d08:	f7fb f9fe 	bl	8002108 <__udivsi3>
 8006d0c:	e7c9      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d0e:	480b      	ldr	r0, [pc, #44]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d10:	f7fb f9fa 	bl	8002108 <__udivsi3>
 8006d14:	4b07      	ldr	r3, [pc, #28]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	0a12      	lsrs	r2, r2, #8
 8006d1a:	237f      	movs	r3, #127	@ 0x7f
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	4358      	muls	r0, r3
        break;
 8006d20:	e7ee      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8006d22:	20fa      	movs	r0, #250	@ 0xfa
 8006d24:	01c0      	lsls	r0, r0, #7
 8006d26:	e7bc      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8006d28:	4804      	ldr	r0, [pc, #16]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d2a:	e7ba      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8006d2c:	2080      	movs	r0, #128	@ 0x80
 8006d2e:	0200      	lsls	r0, r0, #8
 8006d30:	e7b7      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1a>
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	40021000 	.word	0x40021000
 8006d38:	00f42400 	.word	0x00f42400
 8006d3c:	007a1200 	.word	0x007a1200

08006d40 <HAL_RCC_ClockConfig>:
{
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	0004      	movs	r4, r0
 8006d44:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d100      	bne.n	8006d4c <HAL_RCC_ClockConfig+0xc>
 8006d4a:	e0aa      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d4c:	4b57      	ldr	r3, [pc, #348]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	2307      	movs	r3, #7
 8006d52:	4013      	ands	r3, r2
 8006d54:	428b      	cmp	r3, r1
 8006d56:	d321      	bcc.n	8006d9c <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	079a      	lsls	r2, r3, #30
 8006d5c:	d50e      	bpl.n	8006d7c <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5e:	075b      	lsls	r3, r3, #29
 8006d60:	d505      	bpl.n	8006d6e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006d62:	4a53      	ldr	r2, [pc, #332]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006d64:	6891      	ldr	r1, [r2, #8]
 8006d66:	23e0      	movs	r3, #224	@ 0xe0
 8006d68:	01db      	lsls	r3, r3, #7
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d6e:	4a50      	ldr	r2, [pc, #320]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006d70:	6893      	ldr	r3, [r2, #8]
 8006d72:	4950      	ldr	r1, [pc, #320]	@ (8006eb4 <HAL_RCC_ClockConfig+0x174>)
 8006d74:	400b      	ands	r3, r1
 8006d76:	68a1      	ldr	r1, [r4, #8]
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07db      	lsls	r3, r3, #31
 8006d80:	d554      	bpl.n	8006e2c <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d020      	beq.n	8006dca <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d03b      	beq.n	8006e04 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d13f      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d90:	4a47      	ldr	r2, [pc, #284]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	0552      	lsls	r2, r2, #21
 8006d96:	d41c      	bmi.n	8006dd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006d98:	2001      	movs	r0, #1
 8006d9a:	e06a      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9c:	4a43      	ldr	r2, [pc, #268]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	2107      	movs	r1, #7
 8006da2:	438b      	bics	r3, r1
 8006da4:	432b      	orrs	r3, r5
 8006da6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006da8:	f7fe fd82 	bl	80058b0 <HAL_GetTick>
 8006dac:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006dae:	4b3f      	ldr	r3, [pc, #252]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	2307      	movs	r3, #7
 8006db4:	4013      	ands	r3, r2
 8006db6:	42ab      	cmp	r3, r5
 8006db8:	d0ce      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dba:	f7fe fd79 	bl	80058b0 <HAL_GetTick>
 8006dbe:	1b80      	subs	r0, r0, r6
 8006dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8006eb8 <HAL_RCC_ClockConfig+0x178>)
 8006dc2:	4290      	cmp	r0, r2
 8006dc4:	d9f3      	bls.n	8006dae <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8006dc6:	2003      	movs	r0, #3
 8006dc8:	e053      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dca:	4a39      	ldr	r2, [pc, #228]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	0392      	lsls	r2, r2, #14
 8006dd0:	d569      	bpl.n	8006ea6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dd2:	4937      	ldr	r1, [pc, #220]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006dd4:	688a      	ldr	r2, [r1, #8]
 8006dd6:	2007      	movs	r0, #7
 8006dd8:	4382      	bics	r2, r0
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006dde:	f7fe fd67 	bl	80058b0 <HAL_GetTick>
 8006de2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de4:	4b32      	ldr	r3, [pc, #200]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2238      	movs	r2, #56	@ 0x38
 8006dea:	401a      	ands	r2, r3
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d01b      	beq.n	8006e2c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df4:	f7fe fd5c 	bl	80058b0 <HAL_GetTick>
 8006df8:	1b80      	subs	r0, r0, r6
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb8 <HAL_RCC_ClockConfig+0x178>)
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	d9f1      	bls.n	8006de4 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8006e00:	2003      	movs	r0, #3
 8006e02:	e036      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e04:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	0192      	lsls	r2, r2, #6
 8006e0a:	d4e2      	bmi.n	8006dd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e030      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d005      	beq.n	8006e20 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e14:	4a26      	ldr	r2, [pc, #152]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e18:	0792      	lsls	r2, r2, #30
 8006e1a:	d4da      	bmi.n	8006dd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	e028      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e20:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006e22:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006e24:	0792      	lsls	r2, r2, #30
 8006e26:	d4d4      	bmi.n	8006dd2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e28:	2001      	movs	r0, #1
 8006e2a:	e022      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	2307      	movs	r3, #7
 8006e32:	4013      	ands	r3, r2
 8006e34:	42ab      	cmp	r3, r5
 8006e36:	d81d      	bhi.n	8006e74 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	075b      	lsls	r3, r3, #29
 8006e3c:	d506      	bpl.n	8006e4c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006e40:	6893      	ldr	r3, [r2, #8]
 8006e42:	491e      	ldr	r1, [pc, #120]	@ (8006ebc <HAL_RCC_ClockConfig+0x17c>)
 8006e44:	400b      	ands	r3, r1
 8006e46:	68e1      	ldr	r1, [r4, #12]
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006e4c:	f7ff ff1c 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8006e50:	4b17      	ldr	r3, [pc, #92]	@ (8006eb0 <HAL_RCC_ClockConfig+0x170>)
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	0a12      	lsrs	r2, r2, #8
 8006e56:	230f      	movs	r3, #15
 8006e58:	4013      	ands	r3, r2
 8006e5a:	4a19      	ldr	r2, [pc, #100]	@ (8006ec0 <HAL_RCC_ClockConfig+0x180>)
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	589a      	ldr	r2, [r3, r2]
 8006e60:	231f      	movs	r3, #31
 8006e62:	4013      	ands	r3, r2
 8006e64:	40d8      	lsrs	r0, r3
 8006e66:	4b17      	ldr	r3, [pc, #92]	@ (8006ec4 <HAL_RCC_ClockConfig+0x184>)
 8006e68:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006e6a:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <HAL_RCC_ClockConfig+0x188>)
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f7fe fcd3 	bl	8005818 <HAL_InitTick>
}
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e74:	4a0d      	ldr	r2, [pc, #52]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	2107      	movs	r1, #7
 8006e7a:	438b      	bics	r3, r1
 8006e7c:	432b      	orrs	r3, r5
 8006e7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e80:	f7fe fd16 	bl	80058b0 <HAL_GetTick>
 8006e84:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e86:	4b09      	ldr	r3, [pc, #36]	@ (8006eac <HAL_RCC_ClockConfig+0x16c>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	2307      	movs	r3, #7
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	42ab      	cmp	r3, r5
 8006e90:	d0d2      	beq.n	8006e38 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e92:	f7fe fd0d 	bl	80058b0 <HAL_GetTick>
 8006e96:	1b80      	subs	r0, r0, r6
 8006e98:	4b07      	ldr	r3, [pc, #28]	@ (8006eb8 <HAL_RCC_ClockConfig+0x178>)
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	d9f3      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	e7e7      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e7e5      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	e7e3      	b.n	8006e72 <HAL_RCC_ClockConfig+0x132>
 8006eaa:	46c0      	nop			@ (mov r8, r8)
 8006eac:	40022000 	.word	0x40022000
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	fffff0ff 	.word	0xfffff0ff
 8006eb8:	00001388 	.word	0x00001388
 8006ebc:	ffff8fff 	.word	0xffff8fff
 8006ec0:	08007a0c 	.word	0x08007a0c
 8006ec4:	200000e0 	.word	0x200000e0
 8006ec8:	200000e8 	.word	0x200000e8

08006ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ed2:	6803      	ldr	r3, [r0, #0]
 8006ed4:	039b      	lsls	r3, r3, #14
 8006ed6:	d562      	bpl.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	d41e      	bmi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ee4:	2180      	movs	r1, #128	@ 0x80
 8006ee6:	0549      	lsls	r1, r1, #21
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eee:	400b      	ands	r3, r1
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006ef4:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ef6:	4a67      	ldr	r2, [pc, #412]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ef8:	6811      	ldr	r1, [r2, #0]
 8006efa:	2380      	movs	r3, #128	@ 0x80
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	430b      	orrs	r3, r1
 8006f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f02:	f7fe fcd5 	bl	80058b0 <HAL_GetTick>
 8006f06:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f08:	4b62      	ldr	r3, [pc, #392]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	05db      	lsls	r3, r3, #23
 8006f0e:	d408      	bmi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f10:	f7fe fcce 	bl	80058b0 <HAL_GetTick>
 8006f14:	1b40      	subs	r0, r0, r5
 8006f16:	2802      	cmp	r0, #2
 8006f18:	d9f6      	bls.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 8006f1a:	2503      	movs	r5, #3
 8006f1c:	e002      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 8006f1e:	2600      	movs	r6, #0
 8006f20:	e7e9      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006f22:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	d123      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f28:	4b59      	ldr	r3, [pc, #356]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f2a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006f2c:	22c0      	movs	r2, #192	@ 0xc0
 8006f2e:	0092      	lsls	r2, r2, #2
 8006f30:	000b      	movs	r3, r1
 8006f32:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f34:	4211      	tst	r1, r2
 8006f36:	d010      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8006f38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d00d      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f3e:	4a54      	ldr	r2, [pc, #336]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f40:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006f42:	4955      	ldr	r1, [pc, #340]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f44:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f46:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8006f48:	2180      	movs	r1, #128	@ 0x80
 8006f4a:	0249      	lsls	r1, r1, #9
 8006f4c:	4301      	orrs	r1, r0
 8006f4e:	65d1      	str	r1, [r2, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f50:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8006f52:	4852      	ldr	r0, [pc, #328]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	4001      	ands	r1, r0
 8006f56:	65d1      	str	r1, [r2, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f58:	65d3      	str	r3, [r2, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d410      	bmi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 8006f5e:	2d00      	cmp	r5, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f62:	4a4b      	ldr	r2, [pc, #300]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f64:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006f66:	494c      	ldr	r1, [pc, #304]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f68:	400b      	ands	r3, r1
 8006f6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f70:	2e01      	cmp	r6, #1
 8006f72:	d115      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f74:	4a46      	ldr	r2, [pc, #280]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f76:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006f78:	4949      	ldr	r1, [pc, #292]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7a:	400b      	ands	r3, r1
 8006f7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006f7e:	e00f      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8006f80:	f7fe fc96 	bl	80058b0 <HAL_GetTick>
 8006f84:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f86:	4b42      	ldr	r3, [pc, #264]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f8a:	079b      	lsls	r3, r3, #30
 8006f8c:	d4e7      	bmi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f8e:	f7fe fc8f 	bl	80058b0 <HAL_GetTick>
 8006f92:	1bc0      	subs	r0, r0, r7
 8006f94:	4b43      	ldr	r3, [pc, #268]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f96:	4298      	cmp	r0, r3
 8006f98:	d9f5      	bls.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 8006f9a:	2503      	movs	r5, #3
 8006f9c:	e7df      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f9e:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d506      	bpl.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fa8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006faa:	2103      	movs	r1, #3
 8006fac:	438b      	bics	r3, r1
 8006fae:	6861      	ldr	r1, [r4, #4]
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	06db      	lsls	r3, r3, #27
 8006fb8:	d506      	bpl.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fba:	4a35      	ldr	r2, [pc, #212]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fbc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fbe:	493a      	ldr	r1, [pc, #232]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	68a1      	ldr	r1, [r4, #8]
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	059b      	lsls	r3, r3, #22
 8006fcc:	d506      	bpl.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fce:	4a30      	ldr	r2, [pc, #192]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fd0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fd2:	4936      	ldr	r1, [pc, #216]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fd4:	400b      	ands	r3, r1
 8006fd6:	6961      	ldr	r1, [r4, #20]
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	055b      	lsls	r3, r3, #21
 8006fe0:	d506      	bpl.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fe4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fe6:	4932      	ldr	r1, [pc, #200]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006fe8:	400b      	ands	r3, r1
 8006fea:	69a1      	ldr	r1, [r4, #24]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	069b      	lsls	r3, r3, #26
 8006ff4:	d506      	bpl.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff6:	4a26      	ldr	r2, [pc, #152]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ff8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006ffa:	492e      	ldr	r1, [pc, #184]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ffc:	400b      	ands	r3, r1
 8006ffe:	68e1      	ldr	r1, [r4, #12]
 8007000:	430b      	orrs	r3, r1
 8007002:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	045b      	lsls	r3, r3, #17
 8007008:	d50b      	bpl.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800700a:	4a21      	ldr	r2, [pc, #132]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800700c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	089b      	lsrs	r3, r3, #2
 8007012:	69e1      	ldr	r1, [r4, #28]
 8007014:	430b      	orrs	r3, r1
 8007016:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007018:	69e2      	ldr	r2, [r4, #28]
 800701a:	2380      	movs	r3, #128	@ 0x80
 800701c:	05db      	lsls	r3, r3, #23
 800701e:	429a      	cmp	r2, r3
 8007020:	d020      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x198>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	d50b      	bpl.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007028:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800702a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800702c:	4922      	ldr	r1, [pc, #136]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800702e:	400b      	ands	r3, r1
 8007030:	6a21      	ldr	r1, [r4, #32]
 8007032:	430b      	orrs	r3, r1
 8007034:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007036:	6a22      	ldr	r2, [r4, #32]
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	03db      	lsls	r3, r3, #15
 800703c:	429a      	cmp	r2, r3
 800703e:	d018      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	d50b      	bpl.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007046:	4a12      	ldr	r2, [pc, #72]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007048:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800704a:	491c      	ldr	r1, [pc, #112]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800704c:	400b      	ands	r3, r1
 800704e:	6921      	ldr	r1, [r4, #16]
 8007050:	430b      	orrs	r3, r1
 8007052:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	2380      	movs	r3, #128	@ 0x80
 8007058:	01db      	lsls	r3, r3, #7
 800705a:	429a      	cmp	r2, r3
 800705c:	d010      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800705e:	0028      	movs	r0, r5
 8007060:	b003      	add	sp, #12
 8007062:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007064:	4a0a      	ldr	r2, [pc, #40]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007066:	68d1      	ldr	r1, [r2, #12]
 8007068:	2380      	movs	r3, #128	@ 0x80
 800706a:	025b      	lsls	r3, r3, #9
 800706c:	430b      	orrs	r3, r1
 800706e:	60d3      	str	r3, [r2, #12]
 8007070:	e7d7      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007072:	4a07      	ldr	r2, [pc, #28]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007074:	68d1      	ldr	r1, [r2, #12]
 8007076:	2380      	movs	r3, #128	@ 0x80
 8007078:	045b      	lsls	r3, r3, #17
 800707a:	430b      	orrs	r3, r1
 800707c:	60d3      	str	r3, [r2, #12]
 800707e:	e7df      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007080:	4a03      	ldr	r2, [pc, #12]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007082:	68d1      	ldr	r1, [r2, #12]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	025b      	lsls	r3, r3, #9
 8007088:	430b      	orrs	r3, r1
 800708a:	60d3      	str	r3, [r2, #12]
 800708c:	e7e7      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800708e:	46c0      	nop			@ (mov r8, r8)
 8007090:	40021000 	.word	0x40021000
 8007094:	40007000 	.word	0x40007000
 8007098:	fffffcff 	.word	0xfffffcff
 800709c:	fffeffff 	.word	0xfffeffff
 80070a0:	efffffff 	.word	0xefffffff
 80070a4:	00001388 	.word	0x00001388
 80070a8:	fffff3ff 	.word	0xfffff3ff
 80070ac:	fff3ffff 	.word	0xfff3ffff
 80070b0:	ffcfffff 	.word	0xffcfffff
 80070b4:	ffffcfff 	.word	0xffffcfff
 80070b8:	ffbfffff 	.word	0xffbfffff
 80070bc:	ffff3fff 	.word	0xffff3fff

080070c0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80070c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80070c2:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80070c4:	e016      	b.n	80070f4 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80070c6:	690b      	ldr	r3, [r1, #16]
 80070c8:	469c      	mov	ip, r3
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80070ca:	68c4      	ldr	r4, [r0, #12]
 80070cc:	002b      	movs	r3, r5
 80070ce:	436b      	muls	r3, r5
 80070d0:	005e      	lsls	r6, r3, #1
 80070d2:	18f6      	adds	r6, r6, r3
 80070d4:	43f7      	mvns	r7, r6
 80070d6:	43b4      	bics	r4, r6
 80070d8:	4666      	mov	r6, ip
 80070da:	435e      	muls	r6, r3
 80070dc:	4334      	orrs	r4, r6
 80070de:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80070e0:	684c      	ldr	r4, [r1, #4]
 80070e2:	2c02      	cmp	r4, #2
 80070e4:	d025      	beq.n	8007132 <LL_GPIO_Init+0x72>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80070e6:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80070e8:	6804      	ldr	r4, [r0, #0]
 80070ea:	403c      	ands	r4, r7
 80070ec:	436b      	muls	r3, r5
 80070ee:	4323      	orrs	r3, r4
 80070f0:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80070f2:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80070f4:	680c      	ldr	r4, [r1, #0]
 80070f6:	0023      	movs	r3, r4
 80070f8:	40d3      	lsrs	r3, r2
 80070fa:	d03a      	beq.n	8007172 <LL_GPIO_Init+0xb2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80070fc:	2301      	movs	r3, #1
 80070fe:	4093      	lsls	r3, r2
 8007100:	0025      	movs	r5, r4
 8007102:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 8007104:	421c      	tst	r4, r3
 8007106:	d0f4      	beq.n	80070f2 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007108:	684b      	ldr	r3, [r1, #4]
 800710a:	3b01      	subs	r3, #1
 800710c:	2b01      	cmp	r3, #1
 800710e:	d8da      	bhi.n	80070c6 <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007110:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007112:	6883      	ldr	r3, [r0, #8]
 8007114:	002c      	movs	r4, r5
 8007116:	436c      	muls	r4, r5
 8007118:	0066      	lsls	r6, r4, #1
 800711a:	1936      	adds	r6, r6, r4
 800711c:	43b3      	bics	r3, r6
 800711e:	437c      	muls	r4, r7
 8007120:	4323      	orrs	r3, r4
 8007122:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007124:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007126:	6843      	ldr	r3, [r0, #4]
 8007128:	43ab      	bics	r3, r5
 800712a:	436c      	muls	r4, r5
 800712c:	4323      	orrs	r3, r4
 800712e:	6043      	str	r3, [r0, #4]
}
 8007130:	e7c9      	b.n	80070c6 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8007132:	2dff      	cmp	r5, #255	@ 0xff
 8007134:	d80d      	bhi.n	8007152 <LL_GPIO_Init+0x92>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007136:	694c      	ldr	r4, [r1, #20]
 8007138:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800713a:	6a06      	ldr	r6, [r0, #32]
 800713c:	001c      	movs	r4, r3
 800713e:	436c      	muls	r4, r5
 8007140:	436c      	muls	r4, r5
 8007142:	0125      	lsls	r5, r4, #4
 8007144:	1b2d      	subs	r5, r5, r4
 8007146:	43ae      	bics	r6, r5
 8007148:	4665      	mov	r5, ip
 800714a:	436c      	muls	r4, r5
 800714c:	4334      	orrs	r4, r6
 800714e:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8007150:	e7c9      	b.n	80070e6 <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007152:	694c      	ldr	r4, [r1, #20]
 8007154:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007156:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8007158:	0a2d      	lsrs	r5, r5, #8
 800715a:	002c      	movs	r4, r5
 800715c:	436c      	muls	r4, r5
 800715e:	436c      	muls	r4, r5
 8007160:	436c      	muls	r4, r5
 8007162:	0125      	lsls	r5, r4, #4
 8007164:	1b2d      	subs	r5, r5, r4
 8007166:	43ae      	bics	r6, r5
 8007168:	4665      	mov	r5, ip
 800716a:	436c      	muls	r4, r5
 800716c:	4334      	orrs	r4, r6
 800716e:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8007170:	e7b9      	b.n	80070e6 <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8007172:	2000      	movs	r0, #0
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007178 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007178:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <RCC_GetHCLKClockFreq+0x18>)
 800717a:	689a      	ldr	r2, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800717c:	0a12      	lsrs	r2, r2, #8
 800717e:	230f      	movs	r3, #15
 8007180:	4013      	ands	r3, r2
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <RCC_GetHCLKClockFreq+0x1c>)
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	589a      	ldr	r2, [r3, r2]
 8007188:	231f      	movs	r3, #31
 800718a:	4013      	ands	r3, r2
 800718c:	40d8      	lsrs	r0, r3
}
 800718e:	4770      	bx	lr
 8007190:	40021000 	.word	0x40021000
 8007194:	08007a0c 	.word	0x08007a0c

08007198 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007198:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <RCC_GetPCLK1ClockFreq+0x18>)
 800719a:	689a      	ldr	r2, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800719c:	0b12      	lsrs	r2, r2, #12
 800719e:	2307      	movs	r3, #7
 80071a0:	4013      	ands	r3, r2
 80071a2:	4a04      	ldr	r2, [pc, #16]	@ (80071b4 <RCC_GetPCLK1ClockFreq+0x1c>)
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	589a      	ldr	r2, [r3, r2]
 80071a8:	231f      	movs	r3, #31
 80071aa:	4013      	ands	r3, r2
 80071ac:	40d8      	lsrs	r0, r3
}
 80071ae:	4770      	bx	lr
 80071b0:	40021000 	.word	0x40021000
 80071b4:	080079ec 	.word	0x080079ec

080071b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80071b8:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80071ba:	4b0e      	ldr	r3, [pc, #56]	@ (80071f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	2303      	movs	r3, #3
 80071c0:	4013      	ands	r3, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d013      	beq.n	80071ee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80071c6:	4a0c      	ldr	r2, [pc, #48]	@ (80071f8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071c8:	4c0a      	ldr	r4, [pc, #40]	@ (80071f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	207f      	movs	r0, #127	@ 0x7f
 80071d0:	4018      	ands	r0, r3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80071d2:	4350      	muls	r0, r2
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071d4:	68e3      	ldr	r3, [r4, #12]
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	2107      	movs	r1, #7
 80071da:	4019      	ands	r1, r3
 80071dc:	3101      	adds	r1, #1
 80071de:	f7fa ff93 	bl	8002108 <__udivsi3>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80071e2:	68e1      	ldr	r1, [r4, #12]
 80071e4:	0f49      	lsrs	r1, r1, #29
 80071e6:	3101      	adds	r1, #1
 80071e8:	f7fa ff8e 	bl	8002108 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80071ec:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 80071ee:	4a03      	ldr	r2, [pc, #12]	@ (80071fc <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80071f0:	e7ea      	b.n	80071c8 <RCC_PLL_GetFreqDomain_SYS+0x10>
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	40021000 	.word	0x40021000
 80071f8:	00f42400 	.word	0x00f42400
 80071fc:	007a1200 	.word	0x007a1200

08007200 <RCC_GetSystemClockFreq>:
{
 8007200:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007202:	4b0a      	ldr	r3, [pc, #40]	@ (800722c <RCC_GetSystemClockFreq+0x2c>)
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	2338      	movs	r3, #56	@ 0x38
 8007208:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 800720a:	2b08      	cmp	r3, #8
 800720c:	d00c      	beq.n	8007228 <RCC_GetSystemClockFreq+0x28>
 800720e:	2b10      	cmp	r3, #16
 8007210:	d102      	bne.n	8007218 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8007212:	f7ff ffd1 	bl	80071b8 <RCC_PLL_GetFreqDomain_SYS>
}
 8007216:	bd10      	pop	{r4, pc}
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007218:	4b04      	ldr	r3, [pc, #16]	@ (800722c <RCC_GetSystemClockFreq+0x2c>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	0ad2      	lsrs	r2, r2, #11
 800721e:	2307      	movs	r3, #7
 8007220:	4013      	ands	r3, r2
      frequency = (HSI_VALUE / hsidiv);
 8007222:	4803      	ldr	r0, [pc, #12]	@ (8007230 <RCC_GetSystemClockFreq+0x30>)
 8007224:	40d8      	lsrs	r0, r3
      break;
 8007226:	e7f6      	b.n	8007216 <RCC_GetSystemClockFreq+0x16>
  switch (LL_RCC_GetSysClkSource())
 8007228:	4802      	ldr	r0, [pc, #8]	@ (8007234 <RCC_GetSystemClockFreq+0x34>)
  return frequency;
 800722a:	e7f4      	b.n	8007216 <RCC_GetSystemClockFreq+0x16>
 800722c:	40021000 	.word	0x40021000
 8007230:	00f42400 	.word	0x00f42400
 8007234:	007a1200 	.word	0x007a1200

08007238 <LL_RCC_GetSystemClocksFreq>:
{
 8007238:	b510      	push	{r4, lr}
 800723a:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800723c:	f7ff ffe0 	bl	8007200 <RCC_GetSystemClockFreq>
 8007240:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007242:	f7ff ff99 	bl	8007178 <RCC_GetHCLKClockFreq>
 8007246:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007248:	f7ff ffa6 	bl	8007198 <RCC_GetPCLK1ClockFreq>
 800724c:	60a0      	str	r0, [r4, #8]
}
 800724e:	bd10      	pop	{r4, pc}

08007250 <LL_RCC_GetUSARTClockFreq>:
{
 8007250:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8007252:	2803      	cmp	r0, #3
 8007254:	d001      	beq.n	800725a <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007256:	2000      	movs	r0, #0
}
 8007258:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800725a:	4b16      	ldr	r3, [pc, #88]	@ (80072b4 <LL_RCC_GetUSARTClockFreq+0x64>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725e:	4003      	ands	r3, r0
 8007260:	0400      	lsls	r0, r0, #16
 8007262:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007264:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <LL_RCC_GetUSARTClockFreq+0x68>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <LL_RCC_GetUSARTClockFreq+0x3a>
 800726a:	4a14      	ldr	r2, [pc, #80]	@ (80072bc <LL_RCC_GetUSARTClockFreq+0x6c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d016      	beq.n	800729e <LL_RCC_GetUSARTClockFreq+0x4e>
 8007270:	4a13      	ldr	r2, [pc, #76]	@ (80072c0 <LL_RCC_GetUSARTClockFreq+0x70>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d006      	beq.n	8007284 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007276:	f7ff ffc3 	bl	8007200 <RCC_GetSystemClockFreq>
 800727a:	f7ff ff7d 	bl	8007178 <RCC_GetHCLKClockFreq>
 800727e:	f7ff ff8b 	bl	8007198 <RCC_GetPCLK1ClockFreq>
        break;
 8007282:	e7e9      	b.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8007284:	f7ff ffbc 	bl	8007200 <RCC_GetSystemClockFreq>
        break;
 8007288:	e7e6      	b.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800728a:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <LL_RCC_GetUSARTClockFreq+0x64>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	2380      	movs	r3, #128	@ 0x80
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	0010      	movs	r0, r2
 8007294:	4018      	ands	r0, r3
 8007296:	421a      	tst	r2, r3
 8007298:	d0de      	beq.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = HSI_VALUE;
 800729a:	480a      	ldr	r0, [pc, #40]	@ (80072c4 <LL_RCC_GetUSARTClockFreq+0x74>)
 800729c:	e7dc      	b.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800729e:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <LL_RCC_GetUSARTClockFreq+0x64>)
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	2202      	movs	r2, #2
 80072a4:	0010      	movs	r0, r2
 80072a6:	4018      	ands	r0, r3
 80072a8:	421a      	tst	r2, r3
 80072aa:	d0d5      	beq.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 80072ac:	2080      	movs	r0, #128	@ 0x80
 80072ae:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 80072b0:	e7d2      	b.n	8007258 <LL_RCC_GetUSARTClockFreq+0x8>
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	40021000 	.word	0x40021000
 80072b8:	00030002 	.word	0x00030002
 80072bc:	00030003 	.word	0x00030003
 80072c0:	00030001 	.word	0x00030001
 80072c4:	00f42400 	.word	0x00f42400

080072c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80072c8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80072ca:	6a03      	ldr	r3, [r0, #32]
 80072cc:	2601      	movs	r6, #1
 80072ce:	43b3      	bics	r3, r6
 80072d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80072d2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80072d4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80072d6:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80072d8:	4c16      	ldr	r4, [pc, #88]	@ (8007334 <OC1Config+0x6c>)
 80072da:	4022      	ands	r2, r4
 80072dc:	680c      	ldr	r4, [r1, #0]
 80072de:	4314      	orrs	r4, r2

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80072e0:	2202      	movs	r2, #2
 80072e2:	4393      	bics	r3, r2
 80072e4:	690a      	ldr	r2, [r1, #16]
 80072e6:	4313      	orrs	r3, r2

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80072e8:	43b3      	bics	r3, r6
 80072ea:	684a      	ldr	r2, [r1, #4]
 80072ec:	4313      	orrs	r3, r2

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <OC1Config+0x70>)
 80072f0:	4290      	cmp	r0, r2
 80072f2:	d005      	beq.n	8007300 <OC1Config+0x38>
 80072f4:	4a11      	ldr	r2, [pc, #68]	@ (800733c <OC1Config+0x74>)
 80072f6:	4290      	cmp	r0, r2
 80072f8:	d002      	beq.n	8007300 <OC1Config+0x38>
 80072fa:	4a11      	ldr	r2, [pc, #68]	@ (8007340 <OC1Config+0x78>)
 80072fc:	4290      	cmp	r0, r2
 80072fe:	d112      	bne.n	8007326 <OC1Config+0x5e>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007300:	2208      	movs	r2, #8
 8007302:	4393      	bics	r3, r2
 8007304:	694a      	ldr	r2, [r1, #20]
 8007306:	0092      	lsls	r2, r2, #2
 8007308:	4313      	orrs	r3, r2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800730a:	2204      	movs	r2, #4
 800730c:	4393      	bics	r3, r2
 800730e:	688a      	ldr	r2, [r1, #8]
 8007310:	0092      	lsls	r2, r2, #2
 8007312:	4313      	orrs	r3, r2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007314:	4a0b      	ldr	r2, [pc, #44]	@ (8007344 <OC1Config+0x7c>)
 8007316:	402a      	ands	r2, r5
 8007318:	698d      	ldr	r5, [r1, #24]
 800731a:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800731c:	4d0a      	ldr	r5, [pc, #40]	@ (8007348 <OC1Config+0x80>)
 800731e:	402a      	ands	r2, r5
 8007320:	69cd      	ldr	r5, [r1, #28]
 8007322:	006d      	lsls	r5, r5, #1
 8007324:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007326:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007328:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800732a:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800732c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800732e:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8007330:	2000      	movs	r0, #0
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	fffeff8c 	.word	0xfffeff8c
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40014400 	.word	0x40014400
 8007340:	40014800 	.word	0x40014800
 8007344:	fffffeff 	.word	0xfffffeff
 8007348:	fffffdff 	.word	0xfffffdff

0800734c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800734c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800734e:	6a03      	ldr	r3, [r0, #32]
 8007350:	2610      	movs	r6, #16
 8007352:	43b3      	bics	r3, r6
 8007354:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007356:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007358:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800735a:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800735c:	4d18      	ldr	r5, [pc, #96]	@ (80073c0 <OC2Config+0x74>)
 800735e:	402a      	ands	r2, r5
 8007360:	680d      	ldr	r5, [r1, #0]
 8007362:	022d      	lsls	r5, r5, #8
 8007364:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8007366:	2520      	movs	r5, #32
 8007368:	43ab      	bics	r3, r5
 800736a:	690d      	ldr	r5, [r1, #16]
 800736c:	012d      	lsls	r5, r5, #4
 800736e:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8007370:	43b3      	bics	r3, r6
 8007372:	684d      	ldr	r5, [r1, #4]
 8007374:	012d      	lsls	r5, r5, #4
 8007376:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007378:	4d12      	ldr	r5, [pc, #72]	@ (80073c4 <OC2Config+0x78>)
 800737a:	42a8      	cmp	r0, r5
 800737c:	d005      	beq.n	800738a <OC2Config+0x3e>
 800737e:	4d12      	ldr	r5, [pc, #72]	@ (80073c8 <OC2Config+0x7c>)
 8007380:	42a8      	cmp	r0, r5
 8007382:	d002      	beq.n	800738a <OC2Config+0x3e>
 8007384:	4d11      	ldr	r5, [pc, #68]	@ (80073cc <OC2Config+0x80>)
 8007386:	42a8      	cmp	r0, r5
 8007388:	d113      	bne.n	80073b2 <OC2Config+0x66>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800738a:	2580      	movs	r5, #128	@ 0x80
 800738c:	43ab      	bics	r3, r5
 800738e:	694d      	ldr	r5, [r1, #20]
 8007390:	01ad      	lsls	r5, r5, #6
 8007392:	432b      	orrs	r3, r5

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007394:	2540      	movs	r5, #64	@ 0x40
 8007396:	43ab      	bics	r3, r5
 8007398:	688d      	ldr	r5, [r1, #8]
 800739a:	01ad      	lsls	r5, r5, #6
 800739c:	432b      	orrs	r3, r5

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800739e:	4d0c      	ldr	r5, [pc, #48]	@ (80073d0 <OC2Config+0x84>)
 80073a0:	4025      	ands	r5, r4
 80073a2:	698c      	ldr	r4, [r1, #24]
 80073a4:	00a4      	lsls	r4, r4, #2
 80073a6:	4325      	orrs	r5, r4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80073a8:	4c0a      	ldr	r4, [pc, #40]	@ (80073d4 <OC2Config+0x88>)
 80073aa:	4025      	ands	r5, r4
 80073ac:	69cc      	ldr	r4, [r1, #28]
 80073ae:	00e4      	lsls	r4, r4, #3
 80073b0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80073b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80073b4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80073b6:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80073b8:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80073ba:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80073bc:	2000      	movs	r0, #0
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	feff8cff 	.word	0xfeff8cff
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	fffffbff 	.word	0xfffffbff
 80073d4:	fffff7ff 	.word	0xfffff7ff

080073d8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80073d8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80073da:	6a03      	ldr	r3, [r0, #32]
 80073dc:	4e1b      	ldr	r6, [pc, #108]	@ (800744c <OC3Config+0x74>)
 80073de:	4033      	ands	r3, r6
 80073e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80073e2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80073e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80073e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80073e8:	4d19      	ldr	r5, [pc, #100]	@ (8007450 <OC3Config+0x78>)
 80073ea:	402a      	ands	r2, r5
 80073ec:	680d      	ldr	r5, [r1, #0]
 80073ee:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80073f0:	4d18      	ldr	r5, [pc, #96]	@ (8007454 <OC3Config+0x7c>)
 80073f2:	402b      	ands	r3, r5
 80073f4:	690d      	ldr	r5, [r1, #16]
 80073f6:	022d      	lsls	r5, r5, #8
 80073f8:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80073fa:	4033      	ands	r3, r6
 80073fc:	684d      	ldr	r5, [r1, #4]
 80073fe:	022d      	lsls	r5, r5, #8
 8007400:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007402:	4d15      	ldr	r5, [pc, #84]	@ (8007458 <OC3Config+0x80>)
 8007404:	42a8      	cmp	r0, r5
 8007406:	d005      	beq.n	8007414 <OC3Config+0x3c>
 8007408:	4d14      	ldr	r5, [pc, #80]	@ (800745c <OC3Config+0x84>)
 800740a:	42a8      	cmp	r0, r5
 800740c:	d002      	beq.n	8007414 <OC3Config+0x3c>
 800740e:	4d14      	ldr	r5, [pc, #80]	@ (8007460 <OC3Config+0x88>)
 8007410:	42a8      	cmp	r0, r5
 8007412:	d113      	bne.n	800743c <OC3Config+0x64>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007414:	4d13      	ldr	r5, [pc, #76]	@ (8007464 <OC3Config+0x8c>)
 8007416:	401d      	ands	r5, r3
 8007418:	694b      	ldr	r3, [r1, #20]
 800741a:	029b      	lsls	r3, r3, #10
 800741c:	431d      	orrs	r5, r3

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800741e:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <OC3Config+0x90>)
 8007420:	401d      	ands	r5, r3
 8007422:	688b      	ldr	r3, [r1, #8]
 8007424:	029b      	lsls	r3, r3, #10
 8007426:	432b      	orrs	r3, r5

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007428:	4d10      	ldr	r5, [pc, #64]	@ (800746c <OC3Config+0x94>)
 800742a:	4025      	ands	r5, r4
 800742c:	698c      	ldr	r4, [r1, #24]
 800742e:	0124      	lsls	r4, r4, #4
 8007430:	4325      	orrs	r5, r4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007432:	4c0f      	ldr	r4, [pc, #60]	@ (8007470 <OC3Config+0x98>)
 8007434:	4025      	ands	r5, r4
 8007436:	69cc      	ldr	r4, [r1, #28]
 8007438:	0164      	lsls	r4, r4, #5
 800743a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800743c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800743e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007440:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007442:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007444:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8007446:	2000      	movs	r0, #0
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	fffffeff 	.word	0xfffffeff
 8007450:	fffeff8c 	.word	0xfffeff8c
 8007454:	fffffdff 	.word	0xfffffdff
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800
 8007464:	fffff7ff 	.word	0xfffff7ff
 8007468:	fffffbff 	.word	0xfffffbff
 800746c:	ffffefff 	.word	0xffffefff
 8007470:	ffffdfff 	.word	0xffffdfff

08007474 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007474:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007476:	6a03      	ldr	r3, [r0, #32]
 8007478:	4e14      	ldr	r6, [pc, #80]	@ (80074cc <OC4Config+0x58>)
 800747a:	4033      	ands	r3, r6
 800747c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800747e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007480:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007482:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007484:	4d12      	ldr	r5, [pc, #72]	@ (80074d0 <OC4Config+0x5c>)
 8007486:	402a      	ands	r2, r5
 8007488:	680d      	ldr	r5, [r1, #0]
 800748a:	022d      	lsls	r5, r5, #8
 800748c:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800748e:	4d11      	ldr	r5, [pc, #68]	@ (80074d4 <OC4Config+0x60>)
 8007490:	402b      	ands	r3, r5
 8007492:	690d      	ldr	r5, [r1, #16]
 8007494:	032d      	lsls	r5, r5, #12
 8007496:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007498:	4033      	ands	r3, r6
 800749a:	684d      	ldr	r5, [r1, #4]
 800749c:	032d      	lsls	r5, r5, #12
 800749e:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	4d0d      	ldr	r5, [pc, #52]	@ (80074d8 <OC4Config+0x64>)
 80074a2:	42a8      	cmp	r0, r5
 80074a4:	d005      	beq.n	80074b2 <OC4Config+0x3e>
 80074a6:	4d0d      	ldr	r5, [pc, #52]	@ (80074dc <OC4Config+0x68>)
 80074a8:	42a8      	cmp	r0, r5
 80074aa:	d002      	beq.n	80074b2 <OC4Config+0x3e>
 80074ac:	4d0c      	ldr	r5, [pc, #48]	@ (80074e0 <OC4Config+0x6c>)
 80074ae:	42a8      	cmp	r0, r5
 80074b0:	d104      	bne.n	80074bc <OC4Config+0x48>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80074b2:	4d0c      	ldr	r5, [pc, #48]	@ (80074e4 <OC4Config+0x70>)
 80074b4:	4025      	ands	r5, r4
 80074b6:	698c      	ldr	r4, [r1, #24]
 80074b8:	01a4      	lsls	r4, r4, #6
 80074ba:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80074bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80074be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80074c0:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80074c2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80074c4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80074c6:	2000      	movs	r0, #0
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	ffffefff 	.word	0xffffefff
 80074d0:	feff8cff 	.word	0xfeff8cff
 80074d4:	ffffdfff 	.word	0xffffdfff
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800
 80074e4:	ffffbfff 	.word	0xffffbfff

080074e8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80074e8:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80074ea:	6a03      	ldr	r3, [r0, #32]
 80074ec:	4d14      	ldr	r5, [pc, #80]	@ (8007540 <OC5Config+0x58>)
 80074ee:	402b      	ands	r3, r5
 80074f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80074f2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80074f4:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80074f6:	4c13      	ldr	r4, [pc, #76]	@ (8007544 <OC5Config+0x5c>)
 80074f8:	4022      	ands	r2, r4
 80074fa:	680c      	ldr	r4, [r1, #0]
 80074fc:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80074fe:	4c12      	ldr	r4, [pc, #72]	@ (8007548 <OC5Config+0x60>)
 8007500:	4023      	ands	r3, r4
 8007502:	690c      	ldr	r4, [r1, #16]
 8007504:	0424      	lsls	r4, r4, #16
 8007506:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8007508:	402b      	ands	r3, r5
 800750a:	684c      	ldr	r4, [r1, #4]
 800750c:	0424      	lsls	r4, r4, #16
 800750e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007510:	4c0e      	ldr	r4, [pc, #56]	@ (800754c <OC5Config+0x64>)
 8007512:	42a0      	cmp	r0, r4
 8007514:	d005      	beq.n	8007522 <OC5Config+0x3a>
 8007516:	4c0e      	ldr	r4, [pc, #56]	@ (8007550 <OC5Config+0x68>)
 8007518:	42a0      	cmp	r0, r4
 800751a:	d002      	beq.n	8007522 <OC5Config+0x3a>
 800751c:	4c0d      	ldr	r4, [pc, #52]	@ (8007554 <OC5Config+0x6c>)
 800751e:	42a0      	cmp	r0, r4
 8007520:	d106      	bne.n	8007530 <OC5Config+0x48>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8007522:	6844      	ldr	r4, [r0, #4]
 8007524:	4d06      	ldr	r5, [pc, #24]	@ (8007540 <OC5Config+0x58>)
 8007526:	402c      	ands	r4, r5
 8007528:	698d      	ldr	r5, [r1, #24]
 800752a:	022d      	lsls	r5, r5, #8
 800752c:	432c      	orrs	r4, r5
 800752e:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007530:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8007532:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8007534:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8007536:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007538:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800753a:	2000      	movs	r0, #0
 800753c:	bd30      	pop	{r4, r5, pc}
 800753e:	46c0      	nop			@ (mov r8, r8)
 8007540:	fffeffff 	.word	0xfffeffff
 8007544:	fffeff8f 	.word	0xfffeff8f
 8007548:	fffdffff 	.word	0xfffdffff
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007558:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800755a:	6a03      	ldr	r3, [r0, #32]
 800755c:	4d14      	ldr	r5, [pc, #80]	@ (80075b0 <OC6Config+0x58>)
 800755e:	402b      	ands	r3, r5
 8007560:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007562:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8007564:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8007566:	4c13      	ldr	r4, [pc, #76]	@ (80075b4 <OC6Config+0x5c>)
 8007568:	4022      	ands	r2, r4
 800756a:	680c      	ldr	r4, [r1, #0]
 800756c:	0224      	lsls	r4, r4, #8
 800756e:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8007570:	4c11      	ldr	r4, [pc, #68]	@ (80075b8 <OC6Config+0x60>)
 8007572:	4023      	ands	r3, r4
 8007574:	690c      	ldr	r4, [r1, #16]
 8007576:	0524      	lsls	r4, r4, #20
 8007578:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800757a:	402b      	ands	r3, r5
 800757c:	684c      	ldr	r4, [r1, #4]
 800757e:	0524      	lsls	r4, r4, #20
 8007580:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007582:	4c0e      	ldr	r4, [pc, #56]	@ (80075bc <OC6Config+0x64>)
 8007584:	42a0      	cmp	r0, r4
 8007586:	d005      	beq.n	8007594 <OC6Config+0x3c>
 8007588:	4c0d      	ldr	r4, [pc, #52]	@ (80075c0 <OC6Config+0x68>)
 800758a:	42a0      	cmp	r0, r4
 800758c:	d002      	beq.n	8007594 <OC6Config+0x3c>
 800758e:	4c0d      	ldr	r4, [pc, #52]	@ (80075c4 <OC6Config+0x6c>)
 8007590:	42a0      	cmp	r0, r4
 8007592:	d106      	bne.n	80075a2 <OC6Config+0x4a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8007594:	6844      	ldr	r4, [r0, #4]
 8007596:	4d0c      	ldr	r5, [pc, #48]	@ (80075c8 <OC6Config+0x70>)
 8007598:	402c      	ands	r4, r5
 800759a:	698d      	ldr	r5, [r1, #24]
 800759c:	02ad      	lsls	r5, r5, #10
 800759e:	432c      	orrs	r4, r5
 80075a0:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80075a2:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80075a4:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80075a6:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80075a8:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80075aa:	2000      	movs	r0, #0
 80075ac:	bd30      	pop	{r4, r5, pc}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	ffefffff 	.word	0xffefffff
 80075b4:	feff8fff 	.word	0xfeff8fff
 80075b8:	ffdfffff 	.word	0xffdfffff
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800
 80075c8:	fffbffff 	.word	0xfffbffff

080075cc <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80075cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007644 <LL_TIM_Init+0x78>)
 80075d0:	4290      	cmp	r0, r2
 80075d2:	d006      	beq.n	80075e2 <LL_TIM_Init+0x16>
 80075d4:	2280      	movs	r2, #128	@ 0x80
 80075d6:	05d2      	lsls	r2, r2, #23
 80075d8:	4290      	cmp	r0, r2
 80075da:	d002      	beq.n	80075e2 <LL_TIM_Init+0x16>
 80075dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007648 <LL_TIM_Init+0x7c>)
 80075de:	4290      	cmp	r0, r2
 80075e0:	d103      	bne.n	80075ea <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80075e2:	2270      	movs	r2, #112	@ 0x70
 80075e4:	4393      	bics	r3, r2
 80075e6:	684a      	ldr	r2, [r1, #4]
 80075e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ea:	4a16      	ldr	r2, [pc, #88]	@ (8007644 <LL_TIM_Init+0x78>)
 80075ec:	4290      	cmp	r0, r2
 80075ee:	d00f      	beq.n	8007610 <LL_TIM_Init+0x44>
 80075f0:	2280      	movs	r2, #128	@ 0x80
 80075f2:	05d2      	lsls	r2, r2, #23
 80075f4:	4290      	cmp	r0, r2
 80075f6:	d00b      	beq.n	8007610 <LL_TIM_Init+0x44>
 80075f8:	4a13      	ldr	r2, [pc, #76]	@ (8007648 <LL_TIM_Init+0x7c>)
 80075fa:	4290      	cmp	r0, r2
 80075fc:	d008      	beq.n	8007610 <LL_TIM_Init+0x44>
 80075fe:	4a13      	ldr	r2, [pc, #76]	@ (800764c <LL_TIM_Init+0x80>)
 8007600:	4290      	cmp	r0, r2
 8007602:	d005      	beq.n	8007610 <LL_TIM_Init+0x44>
 8007604:	4a12      	ldr	r2, [pc, #72]	@ (8007650 <LL_TIM_Init+0x84>)
 8007606:	4290      	cmp	r0, r2
 8007608:	d002      	beq.n	8007610 <LL_TIM_Init+0x44>
 800760a:	4a12      	ldr	r2, [pc, #72]	@ (8007654 <LL_TIM_Init+0x88>)
 800760c:	4290      	cmp	r0, r2
 800760e:	d103      	bne.n	8007618 <LL_TIM_Init+0x4c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007610:	4a11      	ldr	r2, [pc, #68]	@ (8007658 <LL_TIM_Init+0x8c>)
 8007612:	401a      	ands	r2, r3
 8007614:	68cb      	ldr	r3, [r1, #12]
 8007616:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007618:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800761a:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800761c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800761e:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007620:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007622:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <LL_TIM_Init+0x78>)
 8007624:	4298      	cmp	r0, r3
 8007626:	d005      	beq.n	8007634 <LL_TIM_Init+0x68>
 8007628:	4b09      	ldr	r3, [pc, #36]	@ (8007650 <LL_TIM_Init+0x84>)
 800762a:	4298      	cmp	r0, r3
 800762c:	d002      	beq.n	8007634 <LL_TIM_Init+0x68>
 800762e:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <LL_TIM_Init+0x88>)
 8007630:	4298      	cmp	r0, r3
 8007632:	d101      	bne.n	8007638 <LL_TIM_Init+0x6c>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007634:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007636:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007638:	6943      	ldr	r3, [r0, #20]
 800763a:	2201      	movs	r2, #1
 800763c:	4313      	orrs	r3, r2
 800763e:	6143      	str	r3, [r0, #20]
}
 8007640:	2000      	movs	r0, #0
 8007642:	4770      	bx	lr
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40000400 	.word	0x40000400
 800764c:	40002000 	.word	0x40002000
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800
 8007658:	fffffcff 	.word	0xfffffcff

0800765c <LL_TIM_OC_Init>:
{
 800765c:	b510      	push	{r4, lr}
 800765e:	000b      	movs	r3, r1
 8007660:	0011      	movs	r1, r2
  switch (Channel)
 8007662:	2280      	movs	r2, #128	@ 0x80
 8007664:	0152      	lsls	r2, r2, #5
 8007666:	4293      	cmp	r3, r2
 8007668:	d020      	beq.n	80076ac <LL_TIM_OC_Init+0x50>
 800766a:	d80f      	bhi.n	800768c <LL_TIM_OC_Init+0x30>
 800766c:	2b10      	cmp	r3, #16
 800766e:	d01a      	beq.n	80076a6 <LL_TIM_OC_Init+0x4a>
 8007670:	2280      	movs	r2, #128	@ 0x80
 8007672:	0052      	lsls	r2, r2, #1
 8007674:	4293      	cmp	r3, r2
 8007676:	d102      	bne.n	800767e <LL_TIM_OC_Init+0x22>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007678:	f7ff feae 	bl	80073d8 <OC3Config>
      break;
 800767c:	e005      	b.n	800768a <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 800767e:	2b01      	cmp	r3, #1
 8007680:	d102      	bne.n	8007688 <LL_TIM_OC_Init+0x2c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007682:	f7ff fe21 	bl	80072c8 <OC1Config>
      break;
 8007686:	e000      	b.n	800768a <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8007688:	2001      	movs	r0, #1
}
 800768a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800768c:	2280      	movs	r2, #128	@ 0x80
 800768e:	0252      	lsls	r2, r2, #9
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <LL_TIM_OC_Init+0x56>
 8007694:	2280      	movs	r2, #128	@ 0x80
 8007696:	0352      	lsls	r2, r2, #13
 8007698:	4293      	cmp	r3, r2
 800769a:	d102      	bne.n	80076a2 <LL_TIM_OC_Init+0x46>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800769c:	f7ff ff5c 	bl	8007558 <OC6Config>
      break;
 80076a0:	e7f3      	b.n	800768a <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 80076a2:	2001      	movs	r0, #1
 80076a4:	e7f1      	b.n	800768a <LL_TIM_OC_Init+0x2e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80076a6:	f7ff fe51 	bl	800734c <OC2Config>
      break;
 80076aa:	e7ee      	b.n	800768a <LL_TIM_OC_Init+0x2e>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80076ac:	f7ff fee2 	bl	8007474 <OC4Config>
      break;
 80076b0:	e7eb      	b.n	800768a <LL_TIM_OC_Init+0x2e>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80076b2:	f7ff ff19 	bl	80074e8 <OC5Config>
      break;
 80076b6:	e7e8      	b.n	800768a <LL_TIM_OC_Init+0x2e>

080076b8 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80076b8:	7b0b      	ldrb	r3, [r1, #12]
 80076ba:	688a      	ldr	r2, [r1, #8]
 80076bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80076be:	4a19      	ldr	r2, [pc, #100]	@ (8007724 <LL_TIM_BDTR_Init+0x6c>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	684a      	ldr	r2, [r1, #4]
 80076c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80076c6:	4a18      	ldr	r2, [pc, #96]	@ (8007728 <LL_TIM_BDTR_Init+0x70>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	680a      	ldr	r2, [r1, #0]
 80076cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80076ce:	4a17      	ldr	r2, [pc, #92]	@ (800772c <LL_TIM_BDTR_Init+0x74>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	89ca      	ldrh	r2, [r1, #14]
 80076d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80076d6:	4a16      	ldr	r2, [pc, #88]	@ (8007730 <LL_TIM_BDTR_Init+0x78>)
 80076d8:	4013      	ands	r3, r2
 80076da:	690a      	ldr	r2, [r1, #16]
 80076dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80076de:	4a15      	ldr	r2, [pc, #84]	@ (8007734 <LL_TIM_BDTR_Init+0x7c>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80076e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80076e6:	4a14      	ldr	r2, [pc, #80]	@ (8007738 <LL_TIM_BDTR_Init+0x80>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	694a      	ldr	r2, [r1, #20]
 80076ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 80076ee:	4a13      	ldr	r2, [pc, #76]	@ (800773c <LL_TIM_BDTR_Init+0x84>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	698a      	ldr	r2, [r1, #24]
 80076f4:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80076f6:	4a12      	ldr	r2, [pc, #72]	@ (8007740 <LL_TIM_BDTR_Init+0x88>)
 80076f8:	4290      	cmp	r0, r2
 80076fa:	d002      	beq.n	8007702 <LL_TIM_BDTR_Init+0x4a>
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80076fc:	6443      	str	r3, [r0, #68]	@ 0x44
}
 80076fe:	2000      	movs	r0, #0
 8007700:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8007702:	4a10      	ldr	r2, [pc, #64]	@ (8007744 <LL_TIM_BDTR_Init+0x8c>)
 8007704:	4013      	ands	r3, r2
 8007706:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8007708:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 800770a:	4a0f      	ldr	r2, [pc, #60]	@ (8007748 <LL_TIM_BDTR_Init+0x90>)
 800770c:	4013      	ands	r3, r2
 800770e:	69ca      	ldr	r2, [r1, #28]
 8007710:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8007712:	4a0e      	ldr	r2, [pc, #56]	@ (800774c <LL_TIM_BDTR_Init+0x94>)
 8007714:	4013      	ands	r3, r2
 8007716:	6a0a      	ldr	r2, [r1, #32]
 8007718:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 800771a:	4a0d      	ldr	r2, [pc, #52]	@ (8007750 <LL_TIM_BDTR_Init+0x98>)
 800771c:	4013      	ands	r3, r2
 800771e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8007720:	4313      	orrs	r3, r2
 8007722:	e7eb      	b.n	80076fc <LL_TIM_BDTR_Init+0x44>
 8007724:	fffffbff 	.word	0xfffffbff
 8007728:	fffff7ff 	.word	0xfffff7ff
 800772c:	ffffefff 	.word	0xffffefff
 8007730:	ffffdfff 	.word	0xffffdfff
 8007734:	ffffbfff 	.word	0xffffbfff
 8007738:	fff0ffff 	.word	0xfff0ffff
 800773c:	efffffff 	.word	0xefffffff
 8007740:	40012c00 	.word	0x40012c00
 8007744:	ff0fffff 	.word	0xff0fffff
 8007748:	feffffff 	.word	0xfeffffff
 800774c:	fdffffff 	.word	0xfdffffff
 8007750:	dfffffff 	.word	0xdfffffff

08007754 <LL_USART_SetBaudRate>:
{
 8007754:	b510      	push	{r4, lr}
 8007756:	0004      	movs	r4, r0
 8007758:	0008      	movs	r0, r1
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800775a:	2a0b      	cmp	r2, #11
 800775c:	d816      	bhi.n	800778c <LL_USART_SetBaudRate+0x38>
  else if (BaudRate == 0U)
 800775e:	9902      	ldr	r1, [sp, #8]
 8007760:	2900      	cmp	r1, #0
 8007762:	d013      	beq.n	800778c <LL_USART_SetBaudRate+0x38>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007764:	2180      	movs	r1, #128	@ 0x80
 8007766:	0209      	lsls	r1, r1, #8
 8007768:	428b      	cmp	r3, r1
 800776a:	d010      	beq.n	800778e <LL_USART_SetBaudRate+0x3a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800776c:	23ff      	movs	r3, #255	@ 0xff
 800776e:	4013      	ands	r3, r2
 8007770:	4a12      	ldr	r2, [pc, #72]	@ (80077bc <LL_USART_SetBaudRate+0x68>)
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	5899      	ldr	r1, [r3, r2]
 8007776:	f7fa fcc7 	bl	8002108 <__udivsi3>
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	18c0      	adds	r0, r0, r3
 8007780:	9902      	ldr	r1, [sp, #8]
 8007782:	f7fa fcc1 	bl	8002108 <__udivsi3>
 8007786:	0400      	lsls	r0, r0, #16
 8007788:	0c00      	lsrs	r0, r0, #16
 800778a:	60e0      	str	r0, [r4, #12]
}
 800778c:	bd10      	pop	{r4, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800778e:	23ff      	movs	r3, #255	@ 0xff
 8007790:	4013      	ands	r3, r2
 8007792:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <LL_USART_SetBaudRate+0x68>)
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	5899      	ldr	r1, [r3, r2]
 8007798:	f7fa fcb6 	bl	8002108 <__udivsi3>
 800779c:	0040      	lsls	r0, r0, #1
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	18c0      	adds	r0, r0, r3
 80077a4:	9902      	ldr	r1, [sp, #8]
 80077a6:	f7fa fcaf 	bl	8002108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80077aa:	4a05      	ldr	r2, [pc, #20]	@ (80077c0 <LL_USART_SetBaudRate+0x6c>)
 80077ac:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ae:	0400      	lsls	r0, r0, #16
 80077b0:	0c40      	lsrs	r0, r0, #17
 80077b2:	2307      	movs	r3, #7
 80077b4:	4003      	ands	r3, r0
 80077b6:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 80077b8:	60e3      	str	r3, [r4, #12]
 80077ba:	e7e7      	b.n	800778c <LL_USART_SetBaudRate+0x38>
 80077bc:	08007a64 	.word	0x08007a64
 80077c0:	0000fff0 	.word	0x0000fff0

080077c4 <LL_USART_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 80077c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <LL_USART_DeInit+0x40>)
 80077c6:	4298      	cmp	r0, r3
 80077c8:	d004      	beq.n	80077d4 <LL_USART_DeInit+0x10>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
  }
  else if (USARTx == USART2)
 80077ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <LL_USART_DeInit+0x44>)
 80077cc:	4298      	cmp	r0, r3
 80077ce:	d00d      	beq.n	80077ec <LL_USART_DeInit+0x28>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART6);
  }
#endif /* USART6 */
  else
  {
    status = ERROR;
 80077d0:	2001      	movs	r0, #1
  }

  return (status);
}
 80077d2:	4770      	bx	lr
  SET_BIT(RCC->APBRSTR2, Periphs);
 80077d4:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <LL_USART_DeInit+0x48>)
 80077d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80077d8:	2280      	movs	r2, #128	@ 0x80
 80077da:	01d2      	lsls	r2, r2, #7
 80077dc:	430a      	orrs	r2, r1
 80077de:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 80077e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e2:	490b      	ldr	r1, [pc, #44]	@ (8007810 <LL_USART_DeInit+0x4c>)
 80077e4:	400a      	ands	r2, r1
 80077e6:	631a      	str	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 80077e8:	2000      	movs	r0, #0
}
 80077ea:	e7f2      	b.n	80077d2 <LL_USART_DeInit+0xe>
  SET_BIT(RCC->APBRSTR1, Periphs);
 80077ec:	4b07      	ldr	r3, [pc, #28]	@ (800780c <LL_USART_DeInit+0x48>)
 80077ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80077f0:	2280      	movs	r2, #128	@ 0x80
 80077f2:	0292      	lsls	r2, r2, #10
 80077f4:	430a      	orrs	r2, r1
 80077f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80077f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fa:	4906      	ldr	r1, [pc, #24]	@ (8007814 <LL_USART_DeInit+0x50>)
 80077fc:	400a      	ands	r2, r1
 80077fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007800:	2000      	movs	r0, #0
}
 8007802:	e7e6      	b.n	80077d2 <LL_USART_DeInit+0xe>
 8007804:	40013800 	.word	0x40013800
 8007808:	40004400 	.word	0x40004400
 800780c:	40021000 	.word	0x40021000
 8007810:	ffffbfff 	.word	0xffffbfff
 8007814:	fffdffff 	.word	0xfffdffff

08007818 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007818:	b530      	push	{r4, r5, lr}
 800781a:	b087      	sub	sp, #28
 800781c:	0004      	movs	r4, r0
 800781e:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007820:	6803      	ldr	r3, [r0, #0]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d442      	bmi.n	80078ac <LL_USART_Init+0x94>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007826:	6803      	ldr	r3, [r0, #0]
 8007828:	4a21      	ldr	r2, [pc, #132]	@ (80078b0 <LL_USART_Init+0x98>)
 800782a:	401a      	ands	r2, r3
 800782c:	688b      	ldr	r3, [r1, #8]
 800782e:	6909      	ldr	r1, [r1, #16]
 8007830:	430b      	orrs	r3, r1
 8007832:	6969      	ldr	r1, [r5, #20]
 8007834:	430b      	orrs	r3, r1
 8007836:	69e9      	ldr	r1, [r5, #28]
 8007838:	430b      	orrs	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800783e:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007840:	6842      	ldr	r2, [r0, #4]
 8007842:	491c      	ldr	r1, [pc, #112]	@ (80078b4 <LL_USART_Init+0x9c>)
 8007844:	400a      	ands	r2, r1
 8007846:	4313      	orrs	r3, r2
 8007848:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800784a:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800784c:	6882      	ldr	r2, [r0, #8]
 800784e:	491a      	ldr	r1, [pc, #104]	@ (80078b8 <LL_USART_Init+0xa0>)
 8007850:	400a      	ands	r2, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007856:	4b19      	ldr	r3, [pc, #100]	@ (80078bc <LL_USART_Init+0xa4>)
 8007858:	4298      	cmp	r0, r3
 800785a:	d00d      	beq.n	8007878 <LL_USART_Init+0x60>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800785c:	4b18      	ldr	r3, [pc, #96]	@ (80078c0 <LL_USART_Init+0xa8>)
 800785e:	4298      	cmp	r0, r3
 8007860:	d015      	beq.n	800788e <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 8007862:	2001      	movs	r0, #1

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8007864:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8007866:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007868:	210f      	movs	r1, #15
 800786a:	438a      	bics	r2, r1
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	4313      	orrs	r3, r2
 8007872:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8007874:	b007      	add	sp, #28
 8007876:	bd30      	pop	{r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007878:	2003      	movs	r0, #3
 800787a:	f7ff fce9 	bl	8007250 <LL_RCC_GetUSARTClockFreq>
 800787e:	0001      	movs	r1, r0
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007880:	2900      	cmp	r1, #0
 8007882:	d011      	beq.n	80078a8 <LL_USART_Init+0x90>
        && (USART_InitStruct->BaudRate != 0U))
 8007884:	6868      	ldr	r0, [r5, #4]
 8007886:	2800      	cmp	r0, #0
 8007888:	d106      	bne.n	8007898 <LL_USART_Init+0x80>
  ErrorStatus status = ERROR;
 800788a:	2001      	movs	r0, #1
 800788c:	e7ea      	b.n	8007864 <LL_USART_Init+0x4c>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800788e:	a803      	add	r0, sp, #12
 8007890:	f7ff fcd2 	bl	8007238 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8007894:	9905      	ldr	r1, [sp, #20]
 8007896:	e7f3      	b.n	8007880 <LL_USART_Init+0x68>
                           USART_InitStruct->PrescalerValue,
 8007898:	682a      	ldr	r2, [r5, #0]
                           USART_InitStruct->OverSampling,
 800789a:	69eb      	ldr	r3, [r5, #28]
      LL_USART_SetBaudRate(USARTx,
 800789c:	9000      	str	r0, [sp, #0]
 800789e:	0020      	movs	r0, r4
 80078a0:	f7ff ff58 	bl	8007754 <LL_USART_SetBaudRate>
      status = SUCCESS;
 80078a4:	2000      	movs	r0, #0
 80078a6:	e7dd      	b.n	8007864 <LL_USART_Init+0x4c>
  ErrorStatus status = ERROR;
 80078a8:	2001      	movs	r0, #1
 80078aa:	e7db      	b.n	8007864 <LL_USART_Init+0x4c>
 80078ac:	2001      	movs	r0, #1
 80078ae:	e7e1      	b.n	8007874 <LL_USART_Init+0x5c>
 80078b0:	efff69f3 	.word	0xefff69f3
 80078b4:	ffffcfff 	.word	0xffffcfff
 80078b8:	fffffcff 	.word	0xfffffcff
 80078bc:	40013800 	.word	0x40013800
 80078c0:	40004400 	.word	0x40004400

080078c4 <memset>:
 80078c4:	0003      	movs	r3, r0
 80078c6:	1882      	adds	r2, r0, r2
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d100      	bne.n	80078ce <memset+0xa>
 80078cc:	4770      	bx	lr
 80078ce:	7019      	strb	r1, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	e7f9      	b.n	80078c8 <memset+0x4>

080078d4 <__libc_init_array>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	2600      	movs	r6, #0
 80078d8:	4c0c      	ldr	r4, [pc, #48]	@ (800790c <__libc_init_array+0x38>)
 80078da:	4d0d      	ldr	r5, [pc, #52]	@ (8007910 <__libc_init_array+0x3c>)
 80078dc:	1b64      	subs	r4, r4, r5
 80078de:	10a4      	asrs	r4, r4, #2
 80078e0:	42a6      	cmp	r6, r4
 80078e2:	d109      	bne.n	80078f8 <__libc_init_array+0x24>
 80078e4:	2600      	movs	r6, #0
 80078e6:	f000 f823 	bl	8007930 <_init>
 80078ea:	4c0a      	ldr	r4, [pc, #40]	@ (8007914 <__libc_init_array+0x40>)
 80078ec:	4d0a      	ldr	r5, [pc, #40]	@ (8007918 <__libc_init_array+0x44>)
 80078ee:	1b64      	subs	r4, r4, r5
 80078f0:	10a4      	asrs	r4, r4, #2
 80078f2:	42a6      	cmp	r6, r4
 80078f4:	d105      	bne.n	8007902 <__libc_init_array+0x2e>
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	00b3      	lsls	r3, r6, #2
 80078fa:	58eb      	ldr	r3, [r5, r3]
 80078fc:	4798      	blx	r3
 80078fe:	3601      	adds	r6, #1
 8007900:	e7ee      	b.n	80078e0 <__libc_init_array+0xc>
 8007902:	00b3      	lsls	r3, r6, #2
 8007904:	58eb      	ldr	r3, [r5, r3]
 8007906:	4798      	blx	r3
 8007908:	3601      	adds	r6, #1
 800790a:	e7f2      	b.n	80078f2 <__libc_init_array+0x1e>
 800790c:	08007a94 	.word	0x08007a94
 8007910:	08007a94 	.word	0x08007a94
 8007914:	08007a98 	.word	0x08007a98
 8007918:	08007a94 	.word	0x08007a94

0800791c <memcpy>:
 800791c:	2300      	movs	r3, #0
 800791e:	b510      	push	{r4, lr}
 8007920:	429a      	cmp	r2, r3
 8007922:	d100      	bne.n	8007926 <memcpy+0xa>
 8007924:	bd10      	pop	{r4, pc}
 8007926:	5ccc      	ldrb	r4, [r1, r3]
 8007928:	54c4      	strb	r4, [r0, r3]
 800792a:	3301      	adds	r3, #1
 800792c:	e7f8      	b.n	8007920 <memcpy+0x4>
	...

08007930 <_init>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr

0800793c <_fini>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr

08007948 <__FLASH_Program_Fast_veneer>:
 8007948:	b401      	push	{r0}
 800794a:	4802      	ldr	r0, [pc, #8]	@ (8007954 <__FLASH_Program_Fast_veneer+0xc>)
 800794c:	4684      	mov	ip, r0
 800794e:	bc01      	pop	{r0}
 8007950:	4760      	bx	ip
 8007952:	bf00      	nop
 8007954:	200000ed 	.word	0x200000ed

Disassembly of section .data:

200000c0 <g_device_type>:
200000c0:	                                         ..

200000c2 <g_firmware_version>:
200000c2:	                                         .

200000c3 <g_tail_status>:
200000c3:	                                         .

200000c4 <g_uart_out_transmit_complete>:
200000c4:	                                         .

200000c5 <g_uart_in_transmit_complete>:
200000c5:	                                         ...

200000c8 <g_heartbeat_data_pack_buf>:
200000c8:	000355aa 55fcfdff 000000aa              .U.....U....

200000d4 <s_enum_please_data_packet_buf>:
200000d4:	000355aa 55fbfcff                        .U.....U.

200000dd <g_enum_please_nums>:
200000dd:	                                         ...

200000e0 <SystemCoreClock>:
200000e0:	00f42400                                .$..

200000e4 <uwTickFreq>:
200000e4:	00000001                                ....

200000e8 <uwTickPrio>:
200000e8:	00000004                                ....

200000ec <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000ec:	b510      	push	{r4, lr}
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ee:	4a0c      	ldr	r2, [pc, #48]	@ (20000120 <FLASH_Program_Fast+0x34>)
200000f0:	6954      	ldr	r4, [r2, #20]
200000f2:	2380      	movs	r3, #128	@ 0x80
200000f4:	02db      	lsls	r3, r3, #11
200000f6:	4323      	orrs	r3, r4
200000f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
200000fe:	b672      	cpsid	i
  uint8_t index = 0;
20000100:	2300      	movs	r3, #0
}
20000102:	e003      	b.n	2000010c <FLASH_Program_Fast+0x20>
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000104:	c904      	ldmia	r1!, {r2}
20000106:	c004      	stmia	r0!, {r2}
    src += 4U;
    dest += 4U;
    index++;
20000108:	3301      	adds	r3, #1
2000010a:	b2db      	uxtb	r3, r3
  while (index < 64U)
2000010c:	2b3f      	cmp	r3, #63	@ 0x3f
2000010e:	d9f9      	bls.n	20000104 <FLASH_Program_Fast+0x18>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000110:	4b03      	ldr	r3, [pc, #12]	@ (20000120 <FLASH_Program_Fast+0x34>)
20000112:	691b      	ldr	r3, [r3, #16]
20000114:	03db      	lsls	r3, r3, #15
20000116:	d4fb      	bmi.n	20000110 <FLASH_Program_Fast+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000118:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000011c:	bd10      	pop	{r4, pc}
2000011e:	46c0      	nop			@ (mov r8, r8)
20000120:	40022000 	.word	0x40022000
