
Chain_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d8  080020c0  080020c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009498  08009498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f0  080096f0  00009170  2**0
                  CONTENTS
  4 .ARM          00000000  080096f0  080096f0  00009170  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096f0  080096f0  00009170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f0  080096f0  000086f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096f4  080096f4  000086f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  200000c0  080096f8  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000010f4  20000170  080097a8  00009170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  080097a8  00009264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e467  00000000  00000000  00009198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005177  00000000  00000000  000275ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a2ef  00000000  00000000  0002c776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e13  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c629  00000000  00000000  000389b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002122a  00000000  00000000  00054fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f032  00000000  00000000  00076206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115238  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fd0  00000000  00000000  0011527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0011824c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080020c0 <__do_global_dtors_aux>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4c06      	ldr	r4, [pc, #24]	@ (80020dc <__do_global_dtors_aux+0x1c>)
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <__do_global_dtors_aux+0x1a>
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <__do_global_dtors_aux+0x20>)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <__do_global_dtors_aux+0x24>)
 80020d2:	e000      	b.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d4:	bf00      	nop
 80020d6:	2301      	movs	r3, #1
 80020d8:	7023      	strb	r3, [r4, #0]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	20000170 	.word	0x20000170
 80020e0:	00000000 	.word	0x00000000
 80020e4:	0800946c 	.word	0x0800946c

080020e8 <frame_dummy>:
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <frame_dummy+0x14>)
 80020ea:	b510      	push	{r4, lr}
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <frame_dummy+0x10>
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <frame_dummy+0x18>)
 80020f2:	4804      	ldr	r0, [pc, #16]	@ (8002104 <frame_dummy+0x1c>)
 80020f4:	e000      	b.n	80020f8 <frame_dummy+0x10>
 80020f6:	bf00      	nop
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	00000000 	.word	0x00000000
 8002100:	20000174 	.word	0x20000174
 8002104:	0800946c 	.word	0x0800946c

08002108 <__udivsi3>:
 8002108:	2200      	movs	r2, #0
 800210a:	0843      	lsrs	r3, r0, #1
 800210c:	428b      	cmp	r3, r1
 800210e:	d374      	bcc.n	80021fa <__udivsi3+0xf2>
 8002110:	0903      	lsrs	r3, r0, #4
 8002112:	428b      	cmp	r3, r1
 8002114:	d35f      	bcc.n	80021d6 <__udivsi3+0xce>
 8002116:	0a03      	lsrs	r3, r0, #8
 8002118:	428b      	cmp	r3, r1
 800211a:	d344      	bcc.n	80021a6 <__udivsi3+0x9e>
 800211c:	0b03      	lsrs	r3, r0, #12
 800211e:	428b      	cmp	r3, r1
 8002120:	d328      	bcc.n	8002174 <__udivsi3+0x6c>
 8002122:	0c03      	lsrs	r3, r0, #16
 8002124:	428b      	cmp	r3, r1
 8002126:	d30d      	bcc.n	8002144 <__udivsi3+0x3c>
 8002128:	22ff      	movs	r2, #255	@ 0xff
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	ba12      	rev	r2, r2
 800212e:	0c03      	lsrs	r3, r0, #16
 8002130:	428b      	cmp	r3, r1
 8002132:	d302      	bcc.n	800213a <__udivsi3+0x32>
 8002134:	1212      	asrs	r2, r2, #8
 8002136:	0209      	lsls	r1, r1, #8
 8002138:	d065      	beq.n	8002206 <__udivsi3+0xfe>
 800213a:	0b03      	lsrs	r3, r0, #12
 800213c:	428b      	cmp	r3, r1
 800213e:	d319      	bcc.n	8002174 <__udivsi3+0x6c>
 8002140:	e000      	b.n	8002144 <__udivsi3+0x3c>
 8002142:	0a09      	lsrs	r1, r1, #8
 8002144:	0bc3      	lsrs	r3, r0, #15
 8002146:	428b      	cmp	r3, r1
 8002148:	d301      	bcc.n	800214e <__udivsi3+0x46>
 800214a:	03cb      	lsls	r3, r1, #15
 800214c:	1ac0      	subs	r0, r0, r3
 800214e:	4152      	adcs	r2, r2
 8002150:	0b83      	lsrs	r3, r0, #14
 8002152:	428b      	cmp	r3, r1
 8002154:	d301      	bcc.n	800215a <__udivsi3+0x52>
 8002156:	038b      	lsls	r3, r1, #14
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	4152      	adcs	r2, r2
 800215c:	0b43      	lsrs	r3, r0, #13
 800215e:	428b      	cmp	r3, r1
 8002160:	d301      	bcc.n	8002166 <__udivsi3+0x5e>
 8002162:	034b      	lsls	r3, r1, #13
 8002164:	1ac0      	subs	r0, r0, r3
 8002166:	4152      	adcs	r2, r2
 8002168:	0b03      	lsrs	r3, r0, #12
 800216a:	428b      	cmp	r3, r1
 800216c:	d301      	bcc.n	8002172 <__udivsi3+0x6a>
 800216e:	030b      	lsls	r3, r1, #12
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	4152      	adcs	r2, r2
 8002174:	0ac3      	lsrs	r3, r0, #11
 8002176:	428b      	cmp	r3, r1
 8002178:	d301      	bcc.n	800217e <__udivsi3+0x76>
 800217a:	02cb      	lsls	r3, r1, #11
 800217c:	1ac0      	subs	r0, r0, r3
 800217e:	4152      	adcs	r2, r2
 8002180:	0a83      	lsrs	r3, r0, #10
 8002182:	428b      	cmp	r3, r1
 8002184:	d301      	bcc.n	800218a <__udivsi3+0x82>
 8002186:	028b      	lsls	r3, r1, #10
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	4152      	adcs	r2, r2
 800218c:	0a43      	lsrs	r3, r0, #9
 800218e:	428b      	cmp	r3, r1
 8002190:	d301      	bcc.n	8002196 <__udivsi3+0x8e>
 8002192:	024b      	lsls	r3, r1, #9
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	4152      	adcs	r2, r2
 8002198:	0a03      	lsrs	r3, r0, #8
 800219a:	428b      	cmp	r3, r1
 800219c:	d301      	bcc.n	80021a2 <__udivsi3+0x9a>
 800219e:	020b      	lsls	r3, r1, #8
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	4152      	adcs	r2, r2
 80021a4:	d2cd      	bcs.n	8002142 <__udivsi3+0x3a>
 80021a6:	09c3      	lsrs	r3, r0, #7
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d301      	bcc.n	80021b0 <__udivsi3+0xa8>
 80021ac:	01cb      	lsls	r3, r1, #7
 80021ae:	1ac0      	subs	r0, r0, r3
 80021b0:	4152      	adcs	r2, r2
 80021b2:	0983      	lsrs	r3, r0, #6
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d301      	bcc.n	80021bc <__udivsi3+0xb4>
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	4152      	adcs	r2, r2
 80021be:	0943      	lsrs	r3, r0, #5
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d301      	bcc.n	80021c8 <__udivsi3+0xc0>
 80021c4:	014b      	lsls	r3, r1, #5
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	4152      	adcs	r2, r2
 80021ca:	0903      	lsrs	r3, r0, #4
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d301      	bcc.n	80021d4 <__udivsi3+0xcc>
 80021d0:	010b      	lsls	r3, r1, #4
 80021d2:	1ac0      	subs	r0, r0, r3
 80021d4:	4152      	adcs	r2, r2
 80021d6:	08c3      	lsrs	r3, r0, #3
 80021d8:	428b      	cmp	r3, r1
 80021da:	d301      	bcc.n	80021e0 <__udivsi3+0xd8>
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	1ac0      	subs	r0, r0, r3
 80021e0:	4152      	adcs	r2, r2
 80021e2:	0883      	lsrs	r3, r0, #2
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d301      	bcc.n	80021ec <__udivsi3+0xe4>
 80021e8:	008b      	lsls	r3, r1, #2
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	4152      	adcs	r2, r2
 80021ee:	0843      	lsrs	r3, r0, #1
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d301      	bcc.n	80021f8 <__udivsi3+0xf0>
 80021f4:	004b      	lsls	r3, r1, #1
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	4152      	adcs	r2, r2
 80021fa:	1a41      	subs	r1, r0, r1
 80021fc:	d200      	bcs.n	8002200 <__udivsi3+0xf8>
 80021fe:	4601      	mov	r1, r0
 8002200:	4152      	adcs	r2, r2
 8002202:	4610      	mov	r0, r2
 8002204:	4770      	bx	lr
 8002206:	e7ff      	b.n	8002208 <__udivsi3+0x100>
 8002208:	b501      	push	{r0, lr}
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f8f0 	bl	80023f0 <__aeabi_idiv0>
 8002210:	bd02      	pop	{r1, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)

08002214 <__aeabi_uidivmod>:
 8002214:	2900      	cmp	r1, #0
 8002216:	d0f7      	beq.n	8002208 <__udivsi3+0x100>
 8002218:	e776      	b.n	8002108 <__udivsi3>
 800221a:	4770      	bx	lr

0800221c <__divsi3>:
 800221c:	4603      	mov	r3, r0
 800221e:	430b      	orrs	r3, r1
 8002220:	d47f      	bmi.n	8002322 <__divsi3+0x106>
 8002222:	2200      	movs	r2, #0
 8002224:	0843      	lsrs	r3, r0, #1
 8002226:	428b      	cmp	r3, r1
 8002228:	d374      	bcc.n	8002314 <__divsi3+0xf8>
 800222a:	0903      	lsrs	r3, r0, #4
 800222c:	428b      	cmp	r3, r1
 800222e:	d35f      	bcc.n	80022f0 <__divsi3+0xd4>
 8002230:	0a03      	lsrs	r3, r0, #8
 8002232:	428b      	cmp	r3, r1
 8002234:	d344      	bcc.n	80022c0 <__divsi3+0xa4>
 8002236:	0b03      	lsrs	r3, r0, #12
 8002238:	428b      	cmp	r3, r1
 800223a:	d328      	bcc.n	800228e <__divsi3+0x72>
 800223c:	0c03      	lsrs	r3, r0, #16
 800223e:	428b      	cmp	r3, r1
 8002240:	d30d      	bcc.n	800225e <__divsi3+0x42>
 8002242:	22ff      	movs	r2, #255	@ 0xff
 8002244:	0209      	lsls	r1, r1, #8
 8002246:	ba12      	rev	r2, r2
 8002248:	0c03      	lsrs	r3, r0, #16
 800224a:	428b      	cmp	r3, r1
 800224c:	d302      	bcc.n	8002254 <__divsi3+0x38>
 800224e:	1212      	asrs	r2, r2, #8
 8002250:	0209      	lsls	r1, r1, #8
 8002252:	d065      	beq.n	8002320 <__divsi3+0x104>
 8002254:	0b03      	lsrs	r3, r0, #12
 8002256:	428b      	cmp	r3, r1
 8002258:	d319      	bcc.n	800228e <__divsi3+0x72>
 800225a:	e000      	b.n	800225e <__divsi3+0x42>
 800225c:	0a09      	lsrs	r1, r1, #8
 800225e:	0bc3      	lsrs	r3, r0, #15
 8002260:	428b      	cmp	r3, r1
 8002262:	d301      	bcc.n	8002268 <__divsi3+0x4c>
 8002264:	03cb      	lsls	r3, r1, #15
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	4152      	adcs	r2, r2
 800226a:	0b83      	lsrs	r3, r0, #14
 800226c:	428b      	cmp	r3, r1
 800226e:	d301      	bcc.n	8002274 <__divsi3+0x58>
 8002270:	038b      	lsls	r3, r1, #14
 8002272:	1ac0      	subs	r0, r0, r3
 8002274:	4152      	adcs	r2, r2
 8002276:	0b43      	lsrs	r3, r0, #13
 8002278:	428b      	cmp	r3, r1
 800227a:	d301      	bcc.n	8002280 <__divsi3+0x64>
 800227c:	034b      	lsls	r3, r1, #13
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	4152      	adcs	r2, r2
 8002282:	0b03      	lsrs	r3, r0, #12
 8002284:	428b      	cmp	r3, r1
 8002286:	d301      	bcc.n	800228c <__divsi3+0x70>
 8002288:	030b      	lsls	r3, r1, #12
 800228a:	1ac0      	subs	r0, r0, r3
 800228c:	4152      	adcs	r2, r2
 800228e:	0ac3      	lsrs	r3, r0, #11
 8002290:	428b      	cmp	r3, r1
 8002292:	d301      	bcc.n	8002298 <__divsi3+0x7c>
 8002294:	02cb      	lsls	r3, r1, #11
 8002296:	1ac0      	subs	r0, r0, r3
 8002298:	4152      	adcs	r2, r2
 800229a:	0a83      	lsrs	r3, r0, #10
 800229c:	428b      	cmp	r3, r1
 800229e:	d301      	bcc.n	80022a4 <__divsi3+0x88>
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	1ac0      	subs	r0, r0, r3
 80022a4:	4152      	adcs	r2, r2
 80022a6:	0a43      	lsrs	r3, r0, #9
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d301      	bcc.n	80022b0 <__divsi3+0x94>
 80022ac:	024b      	lsls	r3, r1, #9
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	4152      	adcs	r2, r2
 80022b2:	0a03      	lsrs	r3, r0, #8
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d301      	bcc.n	80022bc <__divsi3+0xa0>
 80022b8:	020b      	lsls	r3, r1, #8
 80022ba:	1ac0      	subs	r0, r0, r3
 80022bc:	4152      	adcs	r2, r2
 80022be:	d2cd      	bcs.n	800225c <__divsi3+0x40>
 80022c0:	09c3      	lsrs	r3, r0, #7
 80022c2:	428b      	cmp	r3, r1
 80022c4:	d301      	bcc.n	80022ca <__divsi3+0xae>
 80022c6:	01cb      	lsls	r3, r1, #7
 80022c8:	1ac0      	subs	r0, r0, r3
 80022ca:	4152      	adcs	r2, r2
 80022cc:	0983      	lsrs	r3, r0, #6
 80022ce:	428b      	cmp	r3, r1
 80022d0:	d301      	bcc.n	80022d6 <__divsi3+0xba>
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1ac0      	subs	r0, r0, r3
 80022d6:	4152      	adcs	r2, r2
 80022d8:	0943      	lsrs	r3, r0, #5
 80022da:	428b      	cmp	r3, r1
 80022dc:	d301      	bcc.n	80022e2 <__divsi3+0xc6>
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	1ac0      	subs	r0, r0, r3
 80022e2:	4152      	adcs	r2, r2
 80022e4:	0903      	lsrs	r3, r0, #4
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d301      	bcc.n	80022ee <__divsi3+0xd2>
 80022ea:	010b      	lsls	r3, r1, #4
 80022ec:	1ac0      	subs	r0, r0, r3
 80022ee:	4152      	adcs	r2, r2
 80022f0:	08c3      	lsrs	r3, r0, #3
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d301      	bcc.n	80022fa <__divsi3+0xde>
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	1ac0      	subs	r0, r0, r3
 80022fa:	4152      	adcs	r2, r2
 80022fc:	0883      	lsrs	r3, r0, #2
 80022fe:	428b      	cmp	r3, r1
 8002300:	d301      	bcc.n	8002306 <__divsi3+0xea>
 8002302:	008b      	lsls	r3, r1, #2
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	4152      	adcs	r2, r2
 8002308:	0843      	lsrs	r3, r0, #1
 800230a:	428b      	cmp	r3, r1
 800230c:	d301      	bcc.n	8002312 <__divsi3+0xf6>
 800230e:	004b      	lsls	r3, r1, #1
 8002310:	1ac0      	subs	r0, r0, r3
 8002312:	4152      	adcs	r2, r2
 8002314:	1a41      	subs	r1, r0, r1
 8002316:	d200      	bcs.n	800231a <__divsi3+0xfe>
 8002318:	4601      	mov	r1, r0
 800231a:	4152      	adcs	r2, r2
 800231c:	4610      	mov	r0, r2
 800231e:	4770      	bx	lr
 8002320:	e05d      	b.n	80023de <__divsi3+0x1c2>
 8002322:	0fca      	lsrs	r2, r1, #31
 8002324:	d000      	beq.n	8002328 <__divsi3+0x10c>
 8002326:	4249      	negs	r1, r1
 8002328:	1003      	asrs	r3, r0, #32
 800232a:	d300      	bcc.n	800232e <__divsi3+0x112>
 800232c:	4240      	negs	r0, r0
 800232e:	4053      	eors	r3, r2
 8002330:	2200      	movs	r2, #0
 8002332:	469c      	mov	ip, r3
 8002334:	0903      	lsrs	r3, r0, #4
 8002336:	428b      	cmp	r3, r1
 8002338:	d32d      	bcc.n	8002396 <__divsi3+0x17a>
 800233a:	0a03      	lsrs	r3, r0, #8
 800233c:	428b      	cmp	r3, r1
 800233e:	d312      	bcc.n	8002366 <__divsi3+0x14a>
 8002340:	22fc      	movs	r2, #252	@ 0xfc
 8002342:	0189      	lsls	r1, r1, #6
 8002344:	ba12      	rev	r2, r2
 8002346:	0a03      	lsrs	r3, r0, #8
 8002348:	428b      	cmp	r3, r1
 800234a:	d30c      	bcc.n	8002366 <__divsi3+0x14a>
 800234c:	0189      	lsls	r1, r1, #6
 800234e:	1192      	asrs	r2, r2, #6
 8002350:	428b      	cmp	r3, r1
 8002352:	d308      	bcc.n	8002366 <__divsi3+0x14a>
 8002354:	0189      	lsls	r1, r1, #6
 8002356:	1192      	asrs	r2, r2, #6
 8002358:	428b      	cmp	r3, r1
 800235a:	d304      	bcc.n	8002366 <__divsi3+0x14a>
 800235c:	0189      	lsls	r1, r1, #6
 800235e:	d03a      	beq.n	80023d6 <__divsi3+0x1ba>
 8002360:	1192      	asrs	r2, r2, #6
 8002362:	e000      	b.n	8002366 <__divsi3+0x14a>
 8002364:	0989      	lsrs	r1, r1, #6
 8002366:	09c3      	lsrs	r3, r0, #7
 8002368:	428b      	cmp	r3, r1
 800236a:	d301      	bcc.n	8002370 <__divsi3+0x154>
 800236c:	01cb      	lsls	r3, r1, #7
 800236e:	1ac0      	subs	r0, r0, r3
 8002370:	4152      	adcs	r2, r2
 8002372:	0983      	lsrs	r3, r0, #6
 8002374:	428b      	cmp	r3, r1
 8002376:	d301      	bcc.n	800237c <__divsi3+0x160>
 8002378:	018b      	lsls	r3, r1, #6
 800237a:	1ac0      	subs	r0, r0, r3
 800237c:	4152      	adcs	r2, r2
 800237e:	0943      	lsrs	r3, r0, #5
 8002380:	428b      	cmp	r3, r1
 8002382:	d301      	bcc.n	8002388 <__divsi3+0x16c>
 8002384:	014b      	lsls	r3, r1, #5
 8002386:	1ac0      	subs	r0, r0, r3
 8002388:	4152      	adcs	r2, r2
 800238a:	0903      	lsrs	r3, r0, #4
 800238c:	428b      	cmp	r3, r1
 800238e:	d301      	bcc.n	8002394 <__divsi3+0x178>
 8002390:	010b      	lsls	r3, r1, #4
 8002392:	1ac0      	subs	r0, r0, r3
 8002394:	4152      	adcs	r2, r2
 8002396:	08c3      	lsrs	r3, r0, #3
 8002398:	428b      	cmp	r3, r1
 800239a:	d301      	bcc.n	80023a0 <__divsi3+0x184>
 800239c:	00cb      	lsls	r3, r1, #3
 800239e:	1ac0      	subs	r0, r0, r3
 80023a0:	4152      	adcs	r2, r2
 80023a2:	0883      	lsrs	r3, r0, #2
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d301      	bcc.n	80023ac <__divsi3+0x190>
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	4152      	adcs	r2, r2
 80023ae:	d2d9      	bcs.n	8002364 <__divsi3+0x148>
 80023b0:	0843      	lsrs	r3, r0, #1
 80023b2:	428b      	cmp	r3, r1
 80023b4:	d301      	bcc.n	80023ba <__divsi3+0x19e>
 80023b6:	004b      	lsls	r3, r1, #1
 80023b8:	1ac0      	subs	r0, r0, r3
 80023ba:	4152      	adcs	r2, r2
 80023bc:	1a41      	subs	r1, r0, r1
 80023be:	d200      	bcs.n	80023c2 <__divsi3+0x1a6>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4663      	mov	r3, ip
 80023c4:	4152      	adcs	r2, r2
 80023c6:	105b      	asrs	r3, r3, #1
 80023c8:	4610      	mov	r0, r2
 80023ca:	d301      	bcc.n	80023d0 <__divsi3+0x1b4>
 80023cc:	4240      	negs	r0, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d500      	bpl.n	80023d4 <__divsi3+0x1b8>
 80023d2:	4249      	negs	r1, r1
 80023d4:	4770      	bx	lr
 80023d6:	4663      	mov	r3, ip
 80023d8:	105b      	asrs	r3, r3, #1
 80023da:	d300      	bcc.n	80023de <__divsi3+0x1c2>
 80023dc:	4240      	negs	r0, r0
 80023de:	b501      	push	{r0, lr}
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f805 	bl	80023f0 <__aeabi_idiv0>
 80023e6:	bd02      	pop	{r1, pc}

080023e8 <__aeabi_idivmod>:
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0f8      	beq.n	80023de <__divsi3+0x1c2>
 80023ec:	e716      	b.n	800221c <__divsi3>
 80023ee:	4770      	bx	lr

080023f0 <__aeabi_idiv0>:
 80023f0:	4770      	bx	lr
 80023f2:	46c0      	nop			@ (mov r8, r8)

080023f4 <__aeabi_d2uiz>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	2200      	movs	r2, #0
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__aeabi_d2uiz+0x38>)
 80023fa:	0004      	movs	r4, r0
 80023fc:	000d      	movs	r5, r1
 80023fe:	f001 fa33 	bl	8003868 <__aeabi_dcmpge>
 8002402:	2800      	cmp	r0, #0
 8002404:	d104      	bne.n	8002410 <__aeabi_d2uiz+0x1c>
 8002406:	0020      	movs	r0, r4
 8002408:	0029      	movs	r1, r5
 800240a:	f001 f98f 	bl	800372c <__aeabi_d2iz>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <__aeabi_d2uiz+0x38>)
 8002412:	2200      	movs	r2, #0
 8002414:	0020      	movs	r0, r4
 8002416:	0029      	movs	r1, r5
 8002418:	f000 fdec 	bl	8002ff4 <__aeabi_dsub>
 800241c:	f001 f986 	bl	800372c <__aeabi_d2iz>
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	469c      	mov	ip, r3
 8002426:	4460      	add	r0, ip
 8002428:	e7f1      	b.n	800240e <__aeabi_d2uiz+0x1a>
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	41e00000 	.word	0x41e00000

08002430 <__aeabi_ddiv>:
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	46de      	mov	lr, fp
 8002434:	4645      	mov	r5, r8
 8002436:	4657      	mov	r7, sl
 8002438:	464e      	mov	r6, r9
 800243a:	b5e0      	push	{r5, r6, r7, lr}
 800243c:	b087      	sub	sp, #28
 800243e:	9200      	str	r2, [sp, #0]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	030b      	lsls	r3, r1, #12
 8002444:	0b1b      	lsrs	r3, r3, #12
 8002446:	469b      	mov	fp, r3
 8002448:	0fca      	lsrs	r2, r1, #31
 800244a:	004b      	lsls	r3, r1, #1
 800244c:	0004      	movs	r4, r0
 800244e:	4680      	mov	r8, r0
 8002450:	0d5b      	lsrs	r3, r3, #21
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	d100      	bne.n	8002458 <__aeabi_ddiv+0x28>
 8002456:	e16a      	b.n	800272e <__aeabi_ddiv+0x2fe>
 8002458:	4ad4      	ldr	r2, [pc, #848]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d100      	bne.n	8002460 <__aeabi_ddiv+0x30>
 800245e:	e18c      	b.n	800277a <__aeabi_ddiv+0x34a>
 8002460:	4659      	mov	r1, fp
 8002462:	0f42      	lsrs	r2, r0, #29
 8002464:	00c9      	lsls	r1, r1, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	0409      	lsls	r1, r1, #16
 800246c:	4311      	orrs	r1, r2
 800246e:	00c2      	lsls	r2, r0, #3
 8002470:	4690      	mov	r8, r2
 8002472:	4acf      	ldr	r2, [pc, #828]	@ (80027b0 <__aeabi_ddiv+0x380>)
 8002474:	4689      	mov	r9, r1
 8002476:	4692      	mov	sl, r2
 8002478:	449a      	add	sl, r3
 800247a:	2300      	movs	r3, #0
 800247c:	2400      	movs	r4, #0
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	9e00      	ldr	r6, [sp, #0]
 8002482:	9f01      	ldr	r7, [sp, #4]
 8002484:	033b      	lsls	r3, r7, #12
 8002486:	0b1b      	lsrs	r3, r3, #12
 8002488:	469b      	mov	fp, r3
 800248a:	007b      	lsls	r3, r7, #1
 800248c:	0030      	movs	r0, r6
 800248e:	0d5b      	lsrs	r3, r3, #21
 8002490:	0ffd      	lsrs	r5, r7, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d100      	bne.n	8002498 <__aeabi_ddiv+0x68>
 8002496:	e128      	b.n	80026ea <__aeabi_ddiv+0x2ba>
 8002498:	4ac4      	ldr	r2, [pc, #784]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d100      	bne.n	80024a0 <__aeabi_ddiv+0x70>
 800249e:	e177      	b.n	8002790 <__aeabi_ddiv+0x360>
 80024a0:	4659      	mov	r1, fp
 80024a2:	0f72      	lsrs	r2, r6, #29
 80024a4:	00c9      	lsls	r1, r1, #3
 80024a6:	430a      	orrs	r2, r1
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0409      	lsls	r1, r1, #16
 80024ac:	4311      	orrs	r1, r2
 80024ae:	468b      	mov	fp, r1
 80024b0:	49bf      	ldr	r1, [pc, #764]	@ (80027b0 <__aeabi_ddiv+0x380>)
 80024b2:	00f2      	lsls	r2, r6, #3
 80024b4:	468c      	mov	ip, r1
 80024b6:	4651      	mov	r1, sl
 80024b8:	4463      	add	r3, ip
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	469a      	mov	sl, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	9e02      	ldr	r6, [sp, #8]
 80024c2:	406e      	eors	r6, r5
 80024c4:	2c0f      	cmp	r4, #15
 80024c6:	d827      	bhi.n	8002518 <__aeabi_ddiv+0xe8>
 80024c8:	49ba      	ldr	r1, [pc, #744]	@ (80027b4 <__aeabi_ddiv+0x384>)
 80024ca:	00a4      	lsls	r4, r4, #2
 80024cc:	5909      	ldr	r1, [r1, r4]
 80024ce:	468f      	mov	pc, r1
 80024d0:	46cb      	mov	fp, r9
 80024d2:	4642      	mov	r2, r8
 80024d4:	9e02      	ldr	r6, [sp, #8]
 80024d6:	9b03      	ldr	r3, [sp, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d016      	beq.n	800250a <__aeabi_ddiv+0xda>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d100      	bne.n	80024e2 <__aeabi_ddiv+0xb2>
 80024e0:	e2a6      	b.n	8002a30 <__aeabi_ddiv+0x600>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d000      	beq.n	80024e8 <__aeabi_ddiv+0xb8>
 80024e6:	e0df      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	2400      	movs	r4, #0
 80024ee:	4690      	mov	r8, r2
 80024f0:	051b      	lsls	r3, r3, #20
 80024f2:	4323      	orrs	r3, r4
 80024f4:	07f6      	lsls	r6, r6, #31
 80024f6:	4333      	orrs	r3, r6
 80024f8:	4640      	mov	r0, r8
 80024fa:	0019      	movs	r1, r3
 80024fc:	b007      	add	sp, #28
 80024fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002500:	46bb      	mov	fp, r7
 8002502:	46b2      	mov	sl, r6
 8002504:	46a9      	mov	r9, r5
 8002506:	46a0      	mov	r8, r4
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250a:	2200      	movs	r2, #0
 800250c:	2400      	movs	r4, #0
 800250e:	4690      	mov	r8, r2
 8002510:	4ba6      	ldr	r3, [pc, #664]	@ (80027ac <__aeabi_ddiv+0x37c>)
 8002512:	e7ed      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002514:	002e      	movs	r6, r5
 8002516:	e7df      	b.n	80024d8 <__aeabi_ddiv+0xa8>
 8002518:	45cb      	cmp	fp, r9
 800251a:	d200      	bcs.n	800251e <__aeabi_ddiv+0xee>
 800251c:	e1d4      	b.n	80028c8 <__aeabi_ddiv+0x498>
 800251e:	d100      	bne.n	8002522 <__aeabi_ddiv+0xf2>
 8002520:	e1cf      	b.n	80028c2 <__aeabi_ddiv+0x492>
 8002522:	2301      	movs	r3, #1
 8002524:	425b      	negs	r3, r3
 8002526:	469c      	mov	ip, r3
 8002528:	4644      	mov	r4, r8
 800252a:	4648      	mov	r0, r9
 800252c:	2700      	movs	r7, #0
 800252e:	44e2      	add	sl, ip
 8002530:	465b      	mov	r3, fp
 8002532:	0e15      	lsrs	r5, r2, #24
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	431d      	orrs	r5, r3
 8002538:	0c19      	lsrs	r1, r3, #16
 800253a:	042b      	lsls	r3, r5, #16
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	9500      	str	r5, [sp, #0]
 8002540:	0c1d      	lsrs	r5, r3, #16
 8002542:	4691      	mov	r9, r2
 8002544:	9102      	str	r1, [sp, #8]
 8002546:	9503      	str	r5, [sp, #12]
 8002548:	f7ff fe64 	bl	8002214 <__aeabi_uidivmod>
 800254c:	0002      	movs	r2, r0
 800254e:	436a      	muls	r2, r5
 8002550:	040b      	lsls	r3, r1, #16
 8002552:	0c21      	lsrs	r1, r4, #16
 8002554:	4680      	mov	r8, r0
 8002556:	4319      	orrs	r1, r3
 8002558:	428a      	cmp	r2, r1
 800255a:	d909      	bls.n	8002570 <__aeabi_ddiv+0x140>
 800255c:	9d00      	ldr	r5, [sp, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	46ac      	mov	ip, r5
 8002562:	425b      	negs	r3, r3
 8002564:	4461      	add	r1, ip
 8002566:	469c      	mov	ip, r3
 8002568:	44e0      	add	r8, ip
 800256a:	428d      	cmp	r5, r1
 800256c:	d800      	bhi.n	8002570 <__aeabi_ddiv+0x140>
 800256e:	e1fb      	b.n	8002968 <__aeabi_ddiv+0x538>
 8002570:	1a88      	subs	r0, r1, r2
 8002572:	9902      	ldr	r1, [sp, #8]
 8002574:	f7ff fe4e 	bl	8002214 <__aeabi_uidivmod>
 8002578:	9a03      	ldr	r2, [sp, #12]
 800257a:	0424      	lsls	r4, r4, #16
 800257c:	4342      	muls	r2, r0
 800257e:	0409      	lsls	r1, r1, #16
 8002580:	0c24      	lsrs	r4, r4, #16
 8002582:	0003      	movs	r3, r0
 8002584:	430c      	orrs	r4, r1
 8002586:	42a2      	cmp	r2, r4
 8002588:	d906      	bls.n	8002598 <__aeabi_ddiv+0x168>
 800258a:	9900      	ldr	r1, [sp, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	468c      	mov	ip, r1
 8002590:	4464      	add	r4, ip
 8002592:	42a1      	cmp	r1, r4
 8002594:	d800      	bhi.n	8002598 <__aeabi_ddiv+0x168>
 8002596:	e1e1      	b.n	800295c <__aeabi_ddiv+0x52c>
 8002598:	1aa0      	subs	r0, r4, r2
 800259a:	4642      	mov	r2, r8
 800259c:	0412      	lsls	r2, r2, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	4693      	mov	fp, r2
 80025a2:	464b      	mov	r3, r9
 80025a4:	4659      	mov	r1, fp
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	001d      	movs	r5, r3
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	040b      	lsls	r3, r1, #16
 80025ae:	4649      	mov	r1, r9
 80025b0:	0409      	lsls	r1, r1, #16
 80025b2:	0c09      	lsrs	r1, r1, #16
 80025b4:	000c      	movs	r4, r1
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	435c      	muls	r4, r3
 80025ba:	0c12      	lsrs	r2, r2, #16
 80025bc:	436b      	muls	r3, r5
 80025be:	4688      	mov	r8, r1
 80025c0:	4351      	muls	r1, r2
 80025c2:	436a      	muls	r2, r5
 80025c4:	0c25      	lsrs	r5, r4, #16
 80025c6:	46ac      	mov	ip, r5
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	4463      	add	r3, ip
 80025cc:	4299      	cmp	r1, r3
 80025ce:	d903      	bls.n	80025d8 <__aeabi_ddiv+0x1a8>
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	0249      	lsls	r1, r1, #9
 80025d4:	468c      	mov	ip, r1
 80025d6:	4462      	add	r2, ip
 80025d8:	0c19      	lsrs	r1, r3, #16
 80025da:	0424      	lsls	r4, r4, #16
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c24      	lsrs	r4, r4, #16
 80025e0:	188a      	adds	r2, r1, r2
 80025e2:	191c      	adds	r4, r3, r4
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d302      	bcc.n	80025ee <__aeabi_ddiv+0x1be>
 80025e8:	d116      	bne.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ea:	42a7      	cmp	r7, r4
 80025ec:	d214      	bcs.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ee:	465b      	mov	r3, fp
 80025f0:	9d00      	ldr	r5, [sp, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	444f      	add	r7, r9
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	454f      	cmp	r7, r9
 80025fa:	419b      	sbcs	r3, r3
 80025fc:	46ac      	mov	ip, r5
 80025fe:	425b      	negs	r3, r3
 8002600:	4463      	add	r3, ip
 8002602:	18c0      	adds	r0, r0, r3
 8002604:	4285      	cmp	r5, r0
 8002606:	d300      	bcc.n	800260a <__aeabi_ddiv+0x1da>
 8002608:	e1a1      	b.n	800294e <__aeabi_ddiv+0x51e>
 800260a:	4282      	cmp	r2, r0
 800260c:	d900      	bls.n	8002610 <__aeabi_ddiv+0x1e0>
 800260e:	e1f6      	b.n	80029fe <__aeabi_ddiv+0x5ce>
 8002610:	d100      	bne.n	8002614 <__aeabi_ddiv+0x1e4>
 8002612:	e1f1      	b.n	80029f8 <__aeabi_ddiv+0x5c8>
 8002614:	9b05      	ldr	r3, [sp, #20]
 8002616:	469b      	mov	fp, r3
 8002618:	1b3c      	subs	r4, r7, r4
 800261a:	42a7      	cmp	r7, r4
 800261c:	41bf      	sbcs	r7, r7
 800261e:	9d00      	ldr	r5, [sp, #0]
 8002620:	1a80      	subs	r0, r0, r2
 8002622:	427f      	negs	r7, r7
 8002624:	1bc0      	subs	r0, r0, r7
 8002626:	4285      	cmp	r5, r0
 8002628:	d100      	bne.n	800262c <__aeabi_ddiv+0x1fc>
 800262a:	e1d0      	b.n	80029ce <__aeabi_ddiv+0x59e>
 800262c:	9902      	ldr	r1, [sp, #8]
 800262e:	f7ff fdf1 	bl	8002214 <__aeabi_uidivmod>
 8002632:	9a03      	ldr	r2, [sp, #12]
 8002634:	040b      	lsls	r3, r1, #16
 8002636:	4342      	muls	r2, r0
 8002638:	0c21      	lsrs	r1, r4, #16
 800263a:	0007      	movs	r7, r0
 800263c:	4319      	orrs	r1, r3
 800263e:	428a      	cmp	r2, r1
 8002640:	d900      	bls.n	8002644 <__aeabi_ddiv+0x214>
 8002642:	e178      	b.n	8002936 <__aeabi_ddiv+0x506>
 8002644:	1a88      	subs	r0, r1, r2
 8002646:	9902      	ldr	r1, [sp, #8]
 8002648:	f7ff fde4 	bl	8002214 <__aeabi_uidivmod>
 800264c:	9a03      	ldr	r2, [sp, #12]
 800264e:	0424      	lsls	r4, r4, #16
 8002650:	4342      	muls	r2, r0
 8002652:	0409      	lsls	r1, r1, #16
 8002654:	0c24      	lsrs	r4, r4, #16
 8002656:	0003      	movs	r3, r0
 8002658:	430c      	orrs	r4, r1
 800265a:	42a2      	cmp	r2, r4
 800265c:	d900      	bls.n	8002660 <__aeabi_ddiv+0x230>
 800265e:	e15d      	b.n	800291c <__aeabi_ddiv+0x4ec>
 8002660:	4641      	mov	r1, r8
 8002662:	1aa4      	subs	r4, r4, r2
 8002664:	043a      	lsls	r2, r7, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	9d04      	ldr	r5, [sp, #16]
 800266a:	0413      	lsls	r3, r2, #16
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	4359      	muls	r1, r3
 8002670:	4647      	mov	r7, r8
 8002672:	436b      	muls	r3, r5
 8002674:	469c      	mov	ip, r3
 8002676:	0c10      	lsrs	r0, r2, #16
 8002678:	4347      	muls	r7, r0
 800267a:	0c0b      	lsrs	r3, r1, #16
 800267c:	44bc      	add	ip, r7
 800267e:	4463      	add	r3, ip
 8002680:	4368      	muls	r0, r5
 8002682:	429f      	cmp	r7, r3
 8002684:	d903      	bls.n	800268e <__aeabi_ddiv+0x25e>
 8002686:	2580      	movs	r5, #128	@ 0x80
 8002688:	026d      	lsls	r5, r5, #9
 800268a:	46ac      	mov	ip, r5
 800268c:	4460      	add	r0, ip
 800268e:	0c1f      	lsrs	r7, r3, #16
 8002690:	0409      	lsls	r1, r1, #16
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	0c09      	lsrs	r1, r1, #16
 8002696:	183f      	adds	r7, r7, r0
 8002698:	185b      	adds	r3, r3, r1
 800269a:	42bc      	cmp	r4, r7
 800269c:	d200      	bcs.n	80026a0 <__aeabi_ddiv+0x270>
 800269e:	e102      	b.n	80028a6 <__aeabi_ddiv+0x476>
 80026a0:	d100      	bne.n	80026a4 <__aeabi_ddiv+0x274>
 80026a2:	e0fd      	b.n	80028a0 <__aeabi_ddiv+0x470>
 80026a4:	2301      	movs	r3, #1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <__aeabi_ddiv+0x388>)
 80026aa:	4453      	add	r3, sl
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_ddiv+0x282>
 80026b0:	e0ae      	b.n	8002810 <__aeabi_ddiv+0x3e0>
 80026b2:	0751      	lsls	r1, r2, #29
 80026b4:	d000      	beq.n	80026b8 <__aeabi_ddiv+0x288>
 80026b6:	e198      	b.n	80029ea <__aeabi_ddiv+0x5ba>
 80026b8:	4659      	mov	r1, fp
 80026ba:	01c9      	lsls	r1, r1, #7
 80026bc:	d506      	bpl.n	80026cc <__aeabi_ddiv+0x29c>
 80026be:	4659      	mov	r1, fp
 80026c0:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <__aeabi_ddiv+0x38c>)
 80026c2:	4019      	ands	r1, r3
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	468b      	mov	fp, r1
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4453      	add	r3, sl
 80026cc:	493c      	ldr	r1, [pc, #240]	@ (80027c0 <__aeabi_ddiv+0x390>)
 80026ce:	428b      	cmp	r3, r1
 80026d0:	dd00      	ble.n	80026d4 <__aeabi_ddiv+0x2a4>
 80026d2:	e71a      	b.n	800250a <__aeabi_ddiv+0xda>
 80026d4:	4659      	mov	r1, fp
 80026d6:	08d2      	lsrs	r2, r2, #3
 80026d8:	0749      	lsls	r1, r1, #29
 80026da:	4311      	orrs	r1, r2
 80026dc:	465a      	mov	r2, fp
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	0254      	lsls	r4, r2, #9
 80026e2:	4688      	mov	r8, r1
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	0d5b      	lsrs	r3, r3, #21
 80026e8:	e702      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80026ea:	465a      	mov	r2, fp
 80026ec:	9b00      	ldr	r3, [sp, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	d100      	bne.n	80026f4 <__aeabi_ddiv+0x2c4>
 80026f2:	e07e      	b.n	80027f2 <__aeabi_ddiv+0x3c2>
 80026f4:	465b      	mov	r3, fp
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_ddiv+0x2cc>
 80026fa:	e100      	b.n	80028fe <__aeabi_ddiv+0x4ce>
 80026fc:	4658      	mov	r0, fp
 80026fe:	f001 f8bd 	bl	800387c <__clzsi2>
 8002702:	0002      	movs	r2, r0
 8002704:	0003      	movs	r3, r0
 8002706:	3a0b      	subs	r2, #11
 8002708:	271d      	movs	r7, #29
 800270a:	9e00      	ldr	r6, [sp, #0]
 800270c:	1aba      	subs	r2, r7, r2
 800270e:	0019      	movs	r1, r3
 8002710:	4658      	mov	r0, fp
 8002712:	40d6      	lsrs	r6, r2
 8002714:	3908      	subs	r1, #8
 8002716:	4088      	lsls	r0, r1
 8002718:	0032      	movs	r2, r6
 800271a:	4302      	orrs	r2, r0
 800271c:	4693      	mov	fp, r2
 800271e:	9a00      	ldr	r2, [sp, #0]
 8002720:	408a      	lsls	r2, r1
 8002722:	4928      	ldr	r1, [pc, #160]	@ (80027c4 <__aeabi_ddiv+0x394>)
 8002724:	4453      	add	r3, sl
 8002726:	468a      	mov	sl, r1
 8002728:	449a      	add	sl, r3
 800272a:	2300      	movs	r3, #0
 800272c:	e6c8      	b.n	80024c0 <__aeabi_ddiv+0x90>
 800272e:	465b      	mov	r3, fp
 8002730:	4303      	orrs	r3, r0
 8002732:	4699      	mov	r9, r3
 8002734:	d056      	beq.n	80027e4 <__aeabi_ddiv+0x3b4>
 8002736:	465b      	mov	r3, fp
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <__aeabi_ddiv+0x30e>
 800273c:	e0cd      	b.n	80028da <__aeabi_ddiv+0x4aa>
 800273e:	4658      	mov	r0, fp
 8002740:	f001 f89c 	bl	800387c <__clzsi2>
 8002744:	230b      	movs	r3, #11
 8002746:	425b      	negs	r3, r3
 8002748:	469c      	mov	ip, r3
 800274a:	0002      	movs	r2, r0
 800274c:	4484      	add	ip, r0
 800274e:	4666      	mov	r6, ip
 8002750:	231d      	movs	r3, #29
 8002752:	1b9b      	subs	r3, r3, r6
 8002754:	0026      	movs	r6, r4
 8002756:	0011      	movs	r1, r2
 8002758:	4658      	mov	r0, fp
 800275a:	40de      	lsrs	r6, r3
 800275c:	3908      	subs	r1, #8
 800275e:	4088      	lsls	r0, r1
 8002760:	0033      	movs	r3, r6
 8002762:	4303      	orrs	r3, r0
 8002764:	4699      	mov	r9, r3
 8002766:	0023      	movs	r3, r4
 8002768:	408b      	lsls	r3, r1
 800276a:	4698      	mov	r8, r3
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <__aeabi_ddiv+0x398>)
 800276e:	2400      	movs	r4, #0
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	469a      	mov	sl, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	e682      	b.n	8002480 <__aeabi_ddiv+0x50>
 800277a:	465a      	mov	r2, fp
 800277c:	4302      	orrs	r2, r0
 800277e:	4691      	mov	r9, r2
 8002780:	d12a      	bne.n	80027d8 <__aeabi_ddiv+0x3a8>
 8002782:	2200      	movs	r2, #0
 8002784:	469a      	mov	sl, r3
 8002786:	2302      	movs	r3, #2
 8002788:	4690      	mov	r8, r2
 800278a:	2408      	movs	r4, #8
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	e677      	b.n	8002480 <__aeabi_ddiv+0x50>
 8002790:	465a      	mov	r2, fp
 8002792:	9b00      	ldr	r3, [sp, #0]
 8002794:	431a      	orrs	r2, r3
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <__aeabi_ddiv+0x39c>)
 8002798:	469c      	mov	ip, r3
 800279a:	44e2      	add	sl, ip
 800279c:	2a00      	cmp	r2, #0
 800279e:	d117      	bne.n	80027d0 <__aeabi_ddiv+0x3a0>
 80027a0:	2302      	movs	r3, #2
 80027a2:	431c      	orrs	r4, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	469b      	mov	fp, r3
 80027a8:	3302      	adds	r3, #2
 80027aa:	e689      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	0800949c 	.word	0x0800949c
 80027b8:	000003ff 	.word	0x000003ff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	000007fe 	.word	0x000007fe
 80027c4:	000003f3 	.word	0x000003f3
 80027c8:	fffffc0d 	.word	0xfffffc0d
 80027cc:	fffff801 	.word	0xfffff801
 80027d0:	2303      	movs	r3, #3
 80027d2:	0032      	movs	r2, r6
 80027d4:	431c      	orrs	r4, r3
 80027d6:	e673      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027d8:	469a      	mov	sl, r3
 80027da:	2303      	movs	r3, #3
 80027dc:	46d9      	mov	r9, fp
 80027de:	240c      	movs	r4, #12
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	e64d      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027e4:	2300      	movs	r3, #0
 80027e6:	4698      	mov	r8, r3
 80027e8:	469a      	mov	sl, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	2404      	movs	r4, #4
 80027ee:	9303      	str	r3, [sp, #12]
 80027f0:	e646      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027f2:	2301      	movs	r3, #1
 80027f4:	431c      	orrs	r4, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	469b      	mov	fp, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	e660      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027fe:	2300      	movs	r3, #0
 8002800:	2480      	movs	r4, #128	@ 0x80
 8002802:	4698      	mov	r8, r3
 8002804:	2600      	movs	r6, #0
 8002806:	4b92      	ldr	r3, [pc, #584]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	e671      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800280c:	2201      	movs	r2, #1
 800280e:	4252      	negs	r2, r2
 8002810:	2101      	movs	r1, #1
 8002812:	1ac9      	subs	r1, r1, r3
 8002814:	2938      	cmp	r1, #56	@ 0x38
 8002816:	dd00      	ble.n	800281a <__aeabi_ddiv+0x3ea>
 8002818:	e666      	b.n	80024e8 <__aeabi_ddiv+0xb8>
 800281a:	291f      	cmp	r1, #31
 800281c:	dc00      	bgt.n	8002820 <__aeabi_ddiv+0x3f0>
 800281e:	e0ab      	b.n	8002978 <__aeabi_ddiv+0x548>
 8002820:	201f      	movs	r0, #31
 8002822:	4240      	negs	r0, r0
 8002824:	1ac3      	subs	r3, r0, r3
 8002826:	4658      	mov	r0, fp
 8002828:	40d8      	lsrs	r0, r3
 800282a:	0003      	movs	r3, r0
 800282c:	2920      	cmp	r1, #32
 800282e:	d004      	beq.n	800283a <__aeabi_ddiv+0x40a>
 8002830:	4658      	mov	r0, fp
 8002832:	4988      	ldr	r1, [pc, #544]	@ (8002a54 <__aeabi_ddiv+0x624>)
 8002834:	4451      	add	r1, sl
 8002836:	4088      	lsls	r0, r1
 8002838:	4302      	orrs	r2, r0
 800283a:	1e51      	subs	r1, r2, #1
 800283c:	418a      	sbcs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	2307      	movs	r3, #7
 8002842:	0019      	movs	r1, r3
 8002844:	2400      	movs	r4, #0
 8002846:	4011      	ands	r1, r2
 8002848:	4213      	tst	r3, r2
 800284a:	d00c      	beq.n	8002866 <__aeabi_ddiv+0x436>
 800284c:	230f      	movs	r3, #15
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d100      	bne.n	8002856 <__aeabi_ddiv+0x426>
 8002854:	e0f9      	b.n	8002a4a <__aeabi_ddiv+0x61a>
 8002856:	1d11      	adds	r1, r2, #4
 8002858:	4291      	cmp	r1, r2
 800285a:	419b      	sbcs	r3, r3
 800285c:	000a      	movs	r2, r1
 800285e:	425b      	negs	r3, r3
 8002860:	0759      	lsls	r1, r3, #29
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	0b1c      	lsrs	r4, r3, #12
 8002866:	08d2      	lsrs	r2, r2, #3
 8002868:	430a      	orrs	r2, r1
 800286a:	4690      	mov	r8, r2
 800286c:	2300      	movs	r3, #0
 800286e:	e63f      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002870:	2480      	movs	r4, #128	@ 0x80
 8002872:	464b      	mov	r3, r9
 8002874:	0324      	lsls	r4, r4, #12
 8002876:	4223      	tst	r3, r4
 8002878:	d009      	beq.n	800288e <__aeabi_ddiv+0x45e>
 800287a:	465b      	mov	r3, fp
 800287c:	4223      	tst	r3, r4
 800287e:	d106      	bne.n	800288e <__aeabi_ddiv+0x45e>
 8002880:	431c      	orrs	r4, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	002e      	movs	r6, r5
 8002886:	4690      	mov	r8, r2
 8002888:	4b71      	ldr	r3, [pc, #452]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	e630      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800288e:	2480      	movs	r4, #128	@ 0x80
 8002890:	464b      	mov	r3, r9
 8002892:	0324      	lsls	r4, r4, #12
 8002894:	431c      	orrs	r4, r3
 8002896:	0324      	lsls	r4, r4, #12
 8002898:	9e02      	ldr	r6, [sp, #8]
 800289a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	e627      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d100      	bne.n	80028a6 <__aeabi_ddiv+0x476>
 80028a4:	e700      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80028a6:	9800      	ldr	r0, [sp, #0]
 80028a8:	1e51      	subs	r1, r2, #1
 80028aa:	4684      	mov	ip, r0
 80028ac:	4464      	add	r4, ip
 80028ae:	4284      	cmp	r4, r0
 80028b0:	d200      	bcs.n	80028b4 <__aeabi_ddiv+0x484>
 80028b2:	e084      	b.n	80029be <__aeabi_ddiv+0x58e>
 80028b4:	42bc      	cmp	r4, r7
 80028b6:	d200      	bcs.n	80028ba <__aeabi_ddiv+0x48a>
 80028b8:	e0ae      	b.n	8002a18 <__aeabi_ddiv+0x5e8>
 80028ba:	d100      	bne.n	80028be <__aeabi_ddiv+0x48e>
 80028bc:	e0c1      	b.n	8002a42 <__aeabi_ddiv+0x612>
 80028be:	000a      	movs	r2, r1
 80028c0:	e6f0      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80028c2:	4542      	cmp	r2, r8
 80028c4:	d900      	bls.n	80028c8 <__aeabi_ddiv+0x498>
 80028c6:	e62c      	b.n	8002522 <__aeabi_ddiv+0xf2>
 80028c8:	464b      	mov	r3, r9
 80028ca:	07dc      	lsls	r4, r3, #31
 80028cc:	0858      	lsrs	r0, r3, #1
 80028ce:	4643      	mov	r3, r8
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	431c      	orrs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	07df      	lsls	r7, r3, #31
 80028d8:	e62a      	b.n	8002530 <__aeabi_ddiv+0x100>
 80028da:	f000 ffcf 	bl	800387c <__clzsi2>
 80028de:	2315      	movs	r3, #21
 80028e0:	469c      	mov	ip, r3
 80028e2:	4484      	add	ip, r0
 80028e4:	0002      	movs	r2, r0
 80028e6:	4663      	mov	r3, ip
 80028e8:	3220      	adds	r2, #32
 80028ea:	2b1c      	cmp	r3, #28
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_ddiv+0x4c0>
 80028ee:	e72e      	b.n	800274e <__aeabi_ddiv+0x31e>
 80028f0:	0023      	movs	r3, r4
 80028f2:	3808      	subs	r0, #8
 80028f4:	4083      	lsls	r3, r0
 80028f6:	4699      	mov	r9, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	4698      	mov	r8, r3
 80028fc:	e736      	b.n	800276c <__aeabi_ddiv+0x33c>
 80028fe:	f000 ffbd 	bl	800387c <__clzsi2>
 8002902:	0002      	movs	r2, r0
 8002904:	0003      	movs	r3, r0
 8002906:	3215      	adds	r2, #21
 8002908:	3320      	adds	r3, #32
 800290a:	2a1c      	cmp	r2, #28
 800290c:	dc00      	bgt.n	8002910 <__aeabi_ddiv+0x4e0>
 800290e:	e6fb      	b.n	8002708 <__aeabi_ddiv+0x2d8>
 8002910:	9900      	ldr	r1, [sp, #0]
 8002912:	3808      	subs	r0, #8
 8002914:	4081      	lsls	r1, r0
 8002916:	2200      	movs	r2, #0
 8002918:	468b      	mov	fp, r1
 800291a:	e702      	b.n	8002722 <__aeabi_ddiv+0x2f2>
 800291c:	9900      	ldr	r1, [sp, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	468c      	mov	ip, r1
 8002922:	4464      	add	r4, ip
 8002924:	42a1      	cmp	r1, r4
 8002926:	d900      	bls.n	800292a <__aeabi_ddiv+0x4fa>
 8002928:	e69a      	b.n	8002660 <__aeabi_ddiv+0x230>
 800292a:	42a2      	cmp	r2, r4
 800292c:	d800      	bhi.n	8002930 <__aeabi_ddiv+0x500>
 800292e:	e697      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002930:	1e83      	subs	r3, r0, #2
 8002932:	4464      	add	r4, ip
 8002934:	e694      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002936:	46ac      	mov	ip, r5
 8002938:	4461      	add	r1, ip
 800293a:	3f01      	subs	r7, #1
 800293c:	428d      	cmp	r5, r1
 800293e:	d900      	bls.n	8002942 <__aeabi_ddiv+0x512>
 8002940:	e680      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002942:	428a      	cmp	r2, r1
 8002944:	d800      	bhi.n	8002948 <__aeabi_ddiv+0x518>
 8002946:	e67d      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002948:	1e87      	subs	r7, r0, #2
 800294a:	4461      	add	r1, ip
 800294c:	e67a      	b.n	8002644 <__aeabi_ddiv+0x214>
 800294e:	4285      	cmp	r5, r0
 8002950:	d000      	beq.n	8002954 <__aeabi_ddiv+0x524>
 8002952:	e65f      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 8002954:	45b9      	cmp	r9, r7
 8002956:	d900      	bls.n	800295a <__aeabi_ddiv+0x52a>
 8002958:	e65c      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 800295a:	e656      	b.n	800260a <__aeabi_ddiv+0x1da>
 800295c:	42a2      	cmp	r2, r4
 800295e:	d800      	bhi.n	8002962 <__aeabi_ddiv+0x532>
 8002960:	e61a      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002962:	1e83      	subs	r3, r0, #2
 8002964:	4464      	add	r4, ip
 8002966:	e617      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002968:	428a      	cmp	r2, r1
 800296a:	d800      	bhi.n	800296e <__aeabi_ddiv+0x53e>
 800296c:	e600      	b.n	8002570 <__aeabi_ddiv+0x140>
 800296e:	46ac      	mov	ip, r5
 8002970:	1e83      	subs	r3, r0, #2
 8002972:	4698      	mov	r8, r3
 8002974:	4461      	add	r1, ip
 8002976:	e5fb      	b.n	8002570 <__aeabi_ddiv+0x140>
 8002978:	4837      	ldr	r0, [pc, #220]	@ (8002a58 <__aeabi_ddiv+0x628>)
 800297a:	0014      	movs	r4, r2
 800297c:	4450      	add	r0, sl
 800297e:	4082      	lsls	r2, r0
 8002980:	465b      	mov	r3, fp
 8002982:	0017      	movs	r7, r2
 8002984:	4083      	lsls	r3, r0
 8002986:	40cc      	lsrs	r4, r1
 8002988:	1e7a      	subs	r2, r7, #1
 800298a:	4197      	sbcs	r7, r2
 800298c:	4323      	orrs	r3, r4
 800298e:	433b      	orrs	r3, r7
 8002990:	001a      	movs	r2, r3
 8002992:	465b      	mov	r3, fp
 8002994:	40cb      	lsrs	r3, r1
 8002996:	0751      	lsls	r1, r2, #29
 8002998:	d009      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 800299a:	210f      	movs	r1, #15
 800299c:	4011      	ands	r1, r2
 800299e:	2904      	cmp	r1, #4
 80029a0:	d005      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 80029a2:	1d11      	adds	r1, r2, #4
 80029a4:	4291      	cmp	r1, r2
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	4252      	negs	r2, r2
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	0219      	lsls	r1, r3, #8
 80029b0:	d400      	bmi.n	80029b4 <__aeabi_ddiv+0x584>
 80029b2:	e755      	b.n	8002860 <__aeabi_ddiv+0x430>
 80029b4:	2200      	movs	r2, #0
 80029b6:	2301      	movs	r3, #1
 80029b8:	2400      	movs	r4, #0
 80029ba:	4690      	mov	r8, r2
 80029bc:	e598      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80029be:	000a      	movs	r2, r1
 80029c0:	42bc      	cmp	r4, r7
 80029c2:	d000      	beq.n	80029c6 <__aeabi_ddiv+0x596>
 80029c4:	e66e      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029c6:	454b      	cmp	r3, r9
 80029c8:	d000      	beq.n	80029cc <__aeabi_ddiv+0x59c>
 80029ca:	e66b      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029cc:	e66c      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <__aeabi_ddiv+0x62c>)
 80029d0:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <__aeabi_ddiv+0x630>)
 80029d2:	4453      	add	r3, sl
 80029d4:	4592      	cmp	sl, r2
 80029d6:	da00      	bge.n	80029da <__aeabi_ddiv+0x5aa>
 80029d8:	e718      	b.n	800280c <__aeabi_ddiv+0x3dc>
 80029da:	2101      	movs	r1, #1
 80029dc:	4249      	negs	r1, r1
 80029de:	1d0a      	adds	r2, r1, #4
 80029e0:	428a      	cmp	r2, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	4249      	negs	r1, r1
 80029e6:	448b      	add	fp, r1
 80029e8:	e666      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029ea:	210f      	movs	r1, #15
 80029ec:	4011      	ands	r1, r2
 80029ee:	2904      	cmp	r1, #4
 80029f0:	d100      	bne.n	80029f4 <__aeabi_ddiv+0x5c4>
 80029f2:	e661      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029f4:	0011      	movs	r1, r2
 80029f6:	e7f2      	b.n	80029de <__aeabi_ddiv+0x5ae>
 80029f8:	42bc      	cmp	r4, r7
 80029fa:	d800      	bhi.n	80029fe <__aeabi_ddiv+0x5ce>
 80029fc:	e60a      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 80029fe:	2302      	movs	r3, #2
 8002a00:	425b      	negs	r3, r3
 8002a02:	469c      	mov	ip, r3
 8002a04:	9900      	ldr	r1, [sp, #0]
 8002a06:	444f      	add	r7, r9
 8002a08:	454f      	cmp	r7, r9
 8002a0a:	419b      	sbcs	r3, r3
 8002a0c:	44e3      	add	fp, ip
 8002a0e:	468c      	mov	ip, r1
 8002a10:	425b      	negs	r3, r3
 8002a12:	4463      	add	r3, ip
 8002a14:	18c0      	adds	r0, r0, r3
 8002a16:	e5ff      	b.n	8002618 <__aeabi_ddiv+0x1e8>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	9d00      	ldr	r5, [sp, #0]
 8002a1c:	0048      	lsls	r0, r1, #1
 8002a1e:	4548      	cmp	r0, r9
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	46ac      	mov	ip, r5
 8002a24:	4249      	negs	r1, r1
 8002a26:	4461      	add	r1, ip
 8002a28:	4681      	mov	r9, r0
 8002a2a:	3a02      	subs	r2, #2
 8002a2c:	1864      	adds	r4, r4, r1
 8002a2e:	e7c7      	b.n	80029c0 <__aeabi_ddiv+0x590>
 8002a30:	2480      	movs	r4, #128	@ 0x80
 8002a32:	465b      	mov	r3, fp
 8002a34:	0324      	lsls	r4, r4, #12
 8002a36:	431c      	orrs	r4, r3
 8002a38:	0324      	lsls	r4, r4, #12
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002a3e:	0b24      	lsrs	r4, r4, #12
 8002a40:	e556      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002a42:	4599      	cmp	r9, r3
 8002a44:	d3e8      	bcc.n	8002a18 <__aeabi_ddiv+0x5e8>
 8002a46:	000a      	movs	r2, r1
 8002a48:	e7bd      	b.n	80029c6 <__aeabi_ddiv+0x596>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e708      	b.n	8002860 <__aeabi_ddiv+0x430>
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	000007ff 	.word	0x000007ff
 8002a54:	0000043e 	.word	0x0000043e
 8002a58:	0000041e 	.word	0x0000041e
 8002a5c:	000003ff 	.word	0x000003ff
 8002a60:	fffffc02 	.word	0xfffffc02

08002a64 <__aeabi_dmul>:
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	4657      	mov	r7, sl
 8002a68:	46de      	mov	lr, fp
 8002a6a:	464e      	mov	r6, r9
 8002a6c:	4645      	mov	r5, r8
 8002a6e:	b5e0      	push	{r5, r6, r7, lr}
 8002a70:	001f      	movs	r7, r3
 8002a72:	030b      	lsls	r3, r1, #12
 8002a74:	0b1b      	lsrs	r3, r3, #12
 8002a76:	0016      	movs	r6, r2
 8002a78:	469a      	mov	sl, r3
 8002a7a:	0fca      	lsrs	r2, r1, #31
 8002a7c:	004b      	lsls	r3, r1, #1
 8002a7e:	0004      	movs	r4, r0
 8002a80:	4693      	mov	fp, r2
 8002a82:	b087      	sub	sp, #28
 8002a84:	0d5b      	lsrs	r3, r3, #21
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dmul+0x26>
 8002a88:	e0d5      	b.n	8002c36 <__aeabi_dmul+0x1d2>
 8002a8a:	4abb      	ldr	r2, [pc, #748]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dmul+0x2e>
 8002a90:	e0f8      	b.n	8002c84 <__aeabi_dmul+0x220>
 8002a92:	4651      	mov	r1, sl
 8002a94:	0f42      	lsrs	r2, r0, #29
 8002a96:	00c9      	lsls	r1, r1, #3
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0409      	lsls	r1, r1, #16
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	00c2      	lsls	r2, r0, #3
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	4ab5      	ldr	r2, [pc, #724]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002aa6:	468a      	mov	sl, r1
 8002aa8:	189d      	adds	r5, r3, r2
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4698      	mov	r8, r3
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	033c      	lsls	r4, r7, #12
 8002ab2:	007b      	lsls	r3, r7, #1
 8002ab4:	0ffa      	lsrs	r2, r7, #31
 8002ab6:	0030      	movs	r0, r6
 8002ab8:	0b24      	lsrs	r4, r4, #12
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dmul+0x5e>
 8002ac0:	e096      	b.n	8002bf0 <__aeabi_dmul+0x18c>
 8002ac2:	4aad      	ldr	r2, [pc, #692]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <__aeabi_dmul+0xc8>
 8002ac8:	0f72      	lsrs	r2, r6, #29
 8002aca:	00e4      	lsls	r4, r4, #3
 8002acc:	4322      	orrs	r2, r4
 8002ace:	2480      	movs	r4, #128	@ 0x80
 8002ad0:	0424      	lsls	r4, r4, #16
 8002ad2:	4314      	orrs	r4, r2
 8002ad4:	4aa9      	ldr	r2, [pc, #676]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002ad6:	00f0      	lsls	r0, r6, #3
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	195b      	adds	r3, r3, r5
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	2a0a      	cmp	r2, #10
 8002ae8:	dc42      	bgt.n	8002b70 <__aeabi_dmul+0x10c>
 8002aea:	465a      	mov	r2, fp
 8002aec:	9900      	ldr	r1, [sp, #0]
 8002aee:	404a      	eors	r2, r1
 8002af0:	4693      	mov	fp, r2
 8002af2:	4642      	mov	r2, r8
 8002af4:	2a02      	cmp	r2, #2
 8002af6:	dc32      	bgt.n	8002b5e <__aeabi_dmul+0xfa>
 8002af8:	3a01      	subs	r2, #1
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d900      	bls.n	8002b00 <__aeabi_dmul+0x9c>
 8002afe:	e149      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002b00:	2e02      	cmp	r6, #2
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dmul+0xa2>
 8002b04:	e0ca      	b.n	8002c9c <__aeabi_dmul+0x238>
 8002b06:	2e01      	cmp	r6, #1
 8002b08:	d13d      	bne.n	8002b86 <__aeabi_dmul+0x122>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	0010      	movs	r0, r2
 8002b12:	465a      	mov	r2, fp
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	4323      	orrs	r3, r4
 8002b18:	07d2      	lsls	r2, r2, #31
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	b007      	add	sp, #28
 8002b20:	bcf0      	pop	{r4, r5, r6, r7}
 8002b22:	46bb      	mov	fp, r7
 8002b24:	46b2      	mov	sl, r6
 8002b26:	46a9      	mov	r9, r5
 8002b28:	46a0      	mov	r8, r4
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2c:	4b92      	ldr	r3, [pc, #584]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002b2e:	4326      	orrs	r6, r4
 8002b30:	18eb      	adds	r3, r5, r3
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dmul+0xd4>
 8002b36:	e0bb      	b.n	8002cb0 <__aeabi_dmul+0x24c>
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	465a      	mov	r2, fp
 8002b40:	4688      	mov	r8, r1
 8002b42:	9900      	ldr	r1, [sp, #0]
 8002b44:	404a      	eors	r2, r1
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0109      	lsls	r1, r1, #4
 8002b4a:	468c      	mov	ip, r1
 8002b4c:	0029      	movs	r1, r5
 8002b4e:	4461      	add	r1, ip
 8002b50:	9101      	str	r1, [sp, #4]
 8002b52:	4641      	mov	r1, r8
 8002b54:	290a      	cmp	r1, #10
 8002b56:	dd00      	ble.n	8002b5a <__aeabi_dmul+0xf6>
 8002b58:	e233      	b.n	8002fc2 <__aeabi_dmul+0x55e>
 8002b5a:	4693      	mov	fp, r2
 8002b5c:	2603      	movs	r6, #3
 8002b5e:	4642      	mov	r2, r8
 8002b60:	2701      	movs	r7, #1
 8002b62:	4097      	lsls	r7, r2
 8002b64:	21a6      	movs	r1, #166	@ 0xa6
 8002b66:	003a      	movs	r2, r7
 8002b68:	00c9      	lsls	r1, r1, #3
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	420f      	tst	r7, r1
 8002b6e:	d031      	beq.n	8002bd4 <__aeabi_dmul+0x170>
 8002b70:	9e02      	ldr	r6, [sp, #8]
 8002b72:	2e02      	cmp	r6, #2
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dmul+0x114>
 8002b76:	e235      	b.n	8002fe4 <__aeabi_dmul+0x580>
 8002b78:	2e03      	cmp	r6, #3
 8002b7a:	d100      	bne.n	8002b7e <__aeabi_dmul+0x11a>
 8002b7c:	e1d2      	b.n	8002f24 <__aeabi_dmul+0x4c0>
 8002b7e:	4654      	mov	r4, sl
 8002b80:	4648      	mov	r0, r9
 8002b82:	2e01      	cmp	r6, #1
 8002b84:	d0c1      	beq.n	8002b0a <__aeabi_dmul+0xa6>
 8002b86:	9a01      	ldr	r2, [sp, #4]
 8002b88:	4b7d      	ldr	r3, [pc, #500]	@ (8002d80 <__aeabi_dmul+0x31c>)
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	4463      	add	r3, ip
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc00      	bgt.n	8002b94 <__aeabi_dmul+0x130>
 8002b92:	e0c0      	b.n	8002d16 <__aeabi_dmul+0x2b2>
 8002b94:	0742      	lsls	r2, r0, #29
 8002b96:	d009      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002b98:	220f      	movs	r2, #15
 8002b9a:	4002      	ands	r2, r0
 8002b9c:	2a04      	cmp	r2, #4
 8002b9e:	d005      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002ba0:	1d02      	adds	r2, r0, #4
 8002ba2:	4282      	cmp	r2, r0
 8002ba4:	4180      	sbcs	r0, r0
 8002ba6:	4240      	negs	r0, r0
 8002ba8:	1824      	adds	r4, r4, r0
 8002baa:	0010      	movs	r0, r2
 8002bac:	01e2      	lsls	r2, r4, #7
 8002bae:	d506      	bpl.n	8002bbe <__aeabi_dmul+0x15a>
 8002bb0:	4b74      	ldr	r3, [pc, #464]	@ (8002d84 <__aeabi_dmul+0x320>)
 8002bb2:	9a01      	ldr	r2, [sp, #4]
 8002bb4:	401c      	ands	r4, r3
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	4694      	mov	ip, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4463      	add	r3, ip
 8002bbe:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <__aeabi_dmul+0x324>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	dc6b      	bgt.n	8002c9c <__aeabi_dmul+0x238>
 8002bc4:	0762      	lsls	r2, r4, #29
 8002bc6:	08c0      	lsrs	r0, r0, #3
 8002bc8:	0264      	lsls	r4, r4, #9
 8002bca:	055b      	lsls	r3, r3, #21
 8002bcc:	4302      	orrs	r2, r0
 8002bce:	0b24      	lsrs	r4, r4, #12
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	e79d      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002bd4:	2190      	movs	r1, #144	@ 0x90
 8002bd6:	0089      	lsls	r1, r1, #2
 8002bd8:	420f      	tst	r7, r1
 8002bda:	d163      	bne.n	8002ca4 <__aeabi_dmul+0x240>
 8002bdc:	2288      	movs	r2, #136	@ 0x88
 8002bde:	423a      	tst	r2, r7
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dmul+0x180>
 8002be2:	e0d7      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002be4:	9b00      	ldr	r3, [sp, #0]
 8002be6:	46a2      	mov	sl, r4
 8002be8:	469b      	mov	fp, r3
 8002bea:	4681      	mov	r9, r0
 8002bec:	9602      	str	r6, [sp, #8]
 8002bee:	e7bf      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002bf0:	0023      	movs	r3, r4
 8002bf2:	4333      	orrs	r3, r6
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dmul+0x194>
 8002bf6:	e07f      	b.n	8002cf8 <__aeabi_dmul+0x294>
 8002bf8:	2c00      	cmp	r4, #0
 8002bfa:	d100      	bne.n	8002bfe <__aeabi_dmul+0x19a>
 8002bfc:	e1ad      	b.n	8002f5a <__aeabi_dmul+0x4f6>
 8002bfe:	0020      	movs	r0, r4
 8002c00:	f000 fe3c 	bl	800387c <__clzsi2>
 8002c04:	0002      	movs	r2, r0
 8002c06:	0003      	movs	r3, r0
 8002c08:	3a0b      	subs	r2, #11
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	1a82      	subs	r2, r0, r2
 8002c10:	0030      	movs	r0, r6
 8002c12:	3908      	subs	r1, #8
 8002c14:	40d0      	lsrs	r0, r2
 8002c16:	408c      	lsls	r4, r1
 8002c18:	4304      	orrs	r4, r0
 8002c1a:	0030      	movs	r0, r6
 8002c1c:	4088      	lsls	r0, r1
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c20:	1aeb      	subs	r3, r5, r3
 8002c22:	4694      	mov	ip, r2
 8002c24:	4463      	add	r3, ip
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	2a0a      	cmp	r2, #10
 8002c30:	dc00      	bgt.n	8002c34 <__aeabi_dmul+0x1d0>
 8002c32:	e75a      	b.n	8002aea <__aeabi_dmul+0x86>
 8002c34:	e79c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002c36:	4653      	mov	r3, sl
 8002c38:	4303      	orrs	r3, r0
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	d054      	beq.n	8002ce8 <__aeabi_dmul+0x284>
 8002c3e:	4653      	mov	r3, sl
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dmul+0x1e2>
 8002c44:	e177      	b.n	8002f36 <__aeabi_dmul+0x4d2>
 8002c46:	4650      	mov	r0, sl
 8002c48:	f000 fe18 	bl	800387c <__clzsi2>
 8002c4c:	230b      	movs	r3, #11
 8002c4e:	425b      	negs	r3, r3
 8002c50:	469c      	mov	ip, r3
 8002c52:	0002      	movs	r2, r0
 8002c54:	4484      	add	ip, r0
 8002c56:	0011      	movs	r1, r2
 8002c58:	4650      	mov	r0, sl
 8002c5a:	3908      	subs	r1, #8
 8002c5c:	4088      	lsls	r0, r1
 8002c5e:	231d      	movs	r3, #29
 8002c60:	4680      	mov	r8, r0
 8002c62:	4660      	mov	r0, ip
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	0020      	movs	r0, r4
 8002c68:	40d8      	lsrs	r0, r3
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4303      	orrs	r3, r0
 8002c70:	469a      	mov	sl, r3
 8002c72:	0023      	movs	r3, r4
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4699      	mov	r9, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4d44      	ldr	r5, [pc, #272]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c7c:	4698      	mov	r8, r3
 8002c7e:	1aad      	subs	r5, r5, r2
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	e715      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c84:	4652      	mov	r2, sl
 8002c86:	4302      	orrs	r2, r0
 8002c88:	4691      	mov	r9, r2
 8002c8a:	d126      	bne.n	8002cda <__aeabi_dmul+0x276>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	001d      	movs	r5, r3
 8002c90:	2302      	movs	r3, #2
 8002c92:	4692      	mov	sl, r2
 8002c94:	3208      	adds	r2, #8
 8002c96:	4690      	mov	r8, r2
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	e709      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ca2:	e735      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2480      	movs	r4, #128	@ 0x80
 8002ca8:	469b      	mov	fp, r3
 8002caa:	0324      	lsls	r4, r4, #12
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002cae:	e72f      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4694      	mov	ip, r2
 8002cbc:	002a      	movs	r2, r5
 8002cbe:	4462      	add	r2, ip
 8002cc0:	4688      	mov	r8, r1
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	290a      	cmp	r1, #10
 8002cc6:	dd00      	ble.n	8002cca <__aeabi_dmul+0x266>
 8002cc8:	e752      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002cca:	465a      	mov	r2, fp
 8002ccc:	2000      	movs	r0, #0
 8002cce:	9900      	ldr	r1, [sp, #0]
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	404a      	eors	r2, r1
 8002cd4:	4693      	mov	fp, r2
 8002cd6:	2602      	movs	r6, #2
 8002cd8:	e70b      	b.n	8002af2 <__aeabi_dmul+0x8e>
 8002cda:	220c      	movs	r2, #12
 8002cdc:	001d      	movs	r5, r3
 8002cde:	2303      	movs	r3, #3
 8002ce0:	4681      	mov	r9, r0
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	e6e3      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	469a      	mov	sl, r3
 8002cec:	3304      	adds	r3, #4
 8002cee:	4698      	mov	r8, r3
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	e6db      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	002b      	movs	r3, r5
 8002d00:	4690      	mov	r8, r2
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	4642      	mov	r2, r8
 8002d08:	2400      	movs	r4, #0
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	2601      	movs	r6, #1
 8002d0e:	2a0a      	cmp	r2, #10
 8002d10:	dc00      	bgt.n	8002d14 <__aeabi_dmul+0x2b0>
 8002d12:	e6ea      	b.n	8002aea <__aeabi_dmul+0x86>
 8002d14:	e72c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002d16:	2201      	movs	r2, #1
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	2a38      	cmp	r2, #56	@ 0x38
 8002d1c:	dd00      	ble.n	8002d20 <__aeabi_dmul+0x2bc>
 8002d1e:	e6f4      	b.n	8002b0a <__aeabi_dmul+0xa6>
 8002d20:	2a1f      	cmp	r2, #31
 8002d22:	dc00      	bgt.n	8002d26 <__aeabi_dmul+0x2c2>
 8002d24:	e12a      	b.n	8002f7c <__aeabi_dmul+0x518>
 8002d26:	211f      	movs	r1, #31
 8002d28:	4249      	negs	r1, r1
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	40d9      	lsrs	r1, r3
 8002d30:	000b      	movs	r3, r1
 8002d32:	2a20      	cmp	r2, #32
 8002d34:	d005      	beq.n	8002d42 <__aeabi_dmul+0x2de>
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <__aeabi_dmul+0x32c>)
 8002d38:	9d01      	ldr	r5, [sp, #4]
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	4465      	add	r5, ip
 8002d3e:	40ac      	lsls	r4, r5
 8002d40:	4320      	orrs	r0, r4
 8002d42:	1e42      	subs	r2, r0, #1
 8002d44:	4190      	sbcs	r0, r2
 8002d46:	4318      	orrs	r0, r3
 8002d48:	2307      	movs	r3, #7
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	4001      	ands	r1, r0
 8002d50:	4203      	tst	r3, r0
 8002d52:	d00c      	beq.n	8002d6e <__aeabi_dmul+0x30a>
 8002d54:	230f      	movs	r3, #15
 8002d56:	4003      	ands	r3, r0
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dmul+0x2fa>
 8002d5c:	e140      	b.n	8002fe0 <__aeabi_dmul+0x57c>
 8002d5e:	1d03      	adds	r3, r0, #4
 8002d60:	4283      	cmp	r3, r0
 8002d62:	41a4      	sbcs	r4, r4
 8002d64:	0018      	movs	r0, r3
 8002d66:	4264      	negs	r4, r4
 8002d68:	0761      	lsls	r1, r4, #29
 8002d6a:	0264      	lsls	r4, r4, #9
 8002d6c:	0b24      	lsrs	r4, r4, #12
 8002d6e:	08c2      	lsrs	r2, r0, #3
 8002d70:	2300      	movs	r3, #0
 8002d72:	430a      	orrs	r2, r1
 8002d74:	e6cc      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	fffffc01 	.word	0xfffffc01
 8002d80:	000003ff 	.word	0x000003ff
 8002d84:	feffffff 	.word	0xfeffffff
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	fffffc0d 	.word	0xfffffc0d
 8002d90:	0000043e 	.word	0x0000043e
 8002d94:	4649      	mov	r1, r9
 8002d96:	464a      	mov	r2, r9
 8002d98:	0409      	lsls	r1, r1, #16
 8002d9a:	0c09      	lsrs	r1, r1, #16
 8002d9c:	000d      	movs	r5, r1
 8002d9e:	0c16      	lsrs	r6, r2, #16
 8002da0:	0c02      	lsrs	r2, r0, #16
 8002da2:	0400      	lsls	r0, r0, #16
 8002da4:	0c00      	lsrs	r0, r0, #16
 8002da6:	4345      	muls	r5, r0
 8002da8:	46ac      	mov	ip, r5
 8002daa:	0005      	movs	r5, r0
 8002dac:	4375      	muls	r5, r6
 8002dae:	46a8      	mov	r8, r5
 8002db0:	0015      	movs	r5, r2
 8002db2:	000f      	movs	r7, r1
 8002db4:	4375      	muls	r5, r6
 8002db6:	9200      	str	r2, [sp, #0]
 8002db8:	9502      	str	r5, [sp, #8]
 8002dba:	002a      	movs	r2, r5
 8002dbc:	9d00      	ldr	r5, [sp, #0]
 8002dbe:	436f      	muls	r7, r5
 8002dc0:	4665      	mov	r5, ip
 8002dc2:	0c2d      	lsrs	r5, r5, #16
 8002dc4:	46a9      	mov	r9, r5
 8002dc6:	4447      	add	r7, r8
 8002dc8:	444f      	add	r7, r9
 8002dca:	45b8      	cmp	r8, r7
 8002dcc:	d905      	bls.n	8002dda <__aeabi_dmul+0x376>
 8002dce:	0015      	movs	r5, r2
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	0252      	lsls	r2, r2, #9
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4445      	add	r5, r8
 8002dd8:	9502      	str	r5, [sp, #8]
 8002dda:	0c3d      	lsrs	r5, r7, #16
 8002ddc:	9503      	str	r5, [sp, #12]
 8002dde:	4665      	mov	r5, ip
 8002de0:	042d      	lsls	r5, r5, #16
 8002de2:	043f      	lsls	r7, r7, #16
 8002de4:	0c2d      	lsrs	r5, r5, #16
 8002de6:	46ac      	mov	ip, r5
 8002de8:	003d      	movs	r5, r7
 8002dea:	4465      	add	r5, ip
 8002dec:	9504      	str	r5, [sp, #16]
 8002dee:	0c25      	lsrs	r5, r4, #16
 8002df0:	0424      	lsls	r4, r4, #16
 8002df2:	0c24      	lsrs	r4, r4, #16
 8002df4:	46ac      	mov	ip, r5
 8002df6:	0025      	movs	r5, r4
 8002df8:	4375      	muls	r5, r6
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	4665      	mov	r5, ip
 8002dfe:	000f      	movs	r7, r1
 8002e00:	4369      	muls	r1, r5
 8002e02:	4441      	add	r1, r8
 8002e04:	4689      	mov	r9, r1
 8002e06:	4367      	muls	r7, r4
 8002e08:	0c39      	lsrs	r1, r7, #16
 8002e0a:	4449      	add	r1, r9
 8002e0c:	436e      	muls	r6, r5
 8002e0e:	4588      	cmp	r8, r1
 8002e10:	d903      	bls.n	8002e1a <__aeabi_dmul+0x3b6>
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	0252      	lsls	r2, r2, #9
 8002e16:	4690      	mov	r8, r2
 8002e18:	4446      	add	r6, r8
 8002e1a:	0c0d      	lsrs	r5, r1, #16
 8002e1c:	46a8      	mov	r8, r5
 8002e1e:	0035      	movs	r5, r6
 8002e20:	4445      	add	r5, r8
 8002e22:	9505      	str	r5, [sp, #20]
 8002e24:	9d03      	ldr	r5, [sp, #12]
 8002e26:	043f      	lsls	r7, r7, #16
 8002e28:	46a8      	mov	r8, r5
 8002e2a:	0c3f      	lsrs	r7, r7, #16
 8002e2c:	0409      	lsls	r1, r1, #16
 8002e2e:	19c9      	adds	r1, r1, r7
 8002e30:	4488      	add	r8, r1
 8002e32:	4645      	mov	r5, r8
 8002e34:	9503      	str	r5, [sp, #12]
 8002e36:	4655      	mov	r5, sl
 8002e38:	042e      	lsls	r6, r5, #16
 8002e3a:	0c36      	lsrs	r6, r6, #16
 8002e3c:	0c2f      	lsrs	r7, r5, #16
 8002e3e:	0035      	movs	r5, r6
 8002e40:	4345      	muls	r5, r0
 8002e42:	4378      	muls	r0, r7
 8002e44:	4681      	mov	r9, r0
 8002e46:	0038      	movs	r0, r7
 8002e48:	46a8      	mov	r8, r5
 8002e4a:	0c2d      	lsrs	r5, r5, #16
 8002e4c:	46aa      	mov	sl, r5
 8002e4e:	9a00      	ldr	r2, [sp, #0]
 8002e50:	4350      	muls	r0, r2
 8002e52:	4372      	muls	r2, r6
 8002e54:	444a      	add	r2, r9
 8002e56:	4452      	add	r2, sl
 8002e58:	4591      	cmp	r9, r2
 8002e5a:	d903      	bls.n	8002e64 <__aeabi_dmul+0x400>
 8002e5c:	2580      	movs	r5, #128	@ 0x80
 8002e5e:	026d      	lsls	r5, r5, #9
 8002e60:	46a9      	mov	r9, r5
 8002e62:	4448      	add	r0, r9
 8002e64:	0c15      	lsrs	r5, r2, #16
 8002e66:	46a9      	mov	r9, r5
 8002e68:	4645      	mov	r5, r8
 8002e6a:	042d      	lsls	r5, r5, #16
 8002e6c:	0c2d      	lsrs	r5, r5, #16
 8002e6e:	46a8      	mov	r8, r5
 8002e70:	4665      	mov	r5, ip
 8002e72:	437d      	muls	r5, r7
 8002e74:	0412      	lsls	r2, r2, #16
 8002e76:	4448      	add	r0, r9
 8002e78:	4490      	add	r8, r2
 8002e7a:	46a9      	mov	r9, r5
 8002e7c:	0032      	movs	r2, r6
 8002e7e:	4665      	mov	r5, ip
 8002e80:	4362      	muls	r2, r4
 8002e82:	436e      	muls	r6, r5
 8002e84:	437c      	muls	r4, r7
 8002e86:	0c17      	lsrs	r7, r2, #16
 8002e88:	1936      	adds	r6, r6, r4
 8002e8a:	19bf      	adds	r7, r7, r6
 8002e8c:	42bc      	cmp	r4, r7
 8002e8e:	d903      	bls.n	8002e98 <__aeabi_dmul+0x434>
 8002e90:	2480      	movs	r4, #128	@ 0x80
 8002e92:	0264      	lsls	r4, r4, #9
 8002e94:	46a4      	mov	ip, r4
 8002e96:	44e1      	add	r9, ip
 8002e98:	9c02      	ldr	r4, [sp, #8]
 8002e9a:	9e03      	ldr	r6, [sp, #12]
 8002e9c:	46a4      	mov	ip, r4
 8002e9e:	9d05      	ldr	r5, [sp, #20]
 8002ea0:	4466      	add	r6, ip
 8002ea2:	428e      	cmp	r6, r1
 8002ea4:	4189      	sbcs	r1, r1
 8002ea6:	46ac      	mov	ip, r5
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	043c      	lsls	r4, r7, #16
 8002eac:	0c12      	lsrs	r2, r2, #16
 8002eae:	18a2      	adds	r2, r4, r2
 8002eb0:	4462      	add	r2, ip
 8002eb2:	4249      	negs	r1, r1
 8002eb4:	1854      	adds	r4, r2, r1
 8002eb6:	4446      	add	r6, r8
 8002eb8:	46a4      	mov	ip, r4
 8002eba:	4546      	cmp	r6, r8
 8002ebc:	41a4      	sbcs	r4, r4
 8002ebe:	4682      	mov	sl, r0
 8002ec0:	4264      	negs	r4, r4
 8002ec2:	46a0      	mov	r8, r4
 8002ec4:	42aa      	cmp	r2, r5
 8002ec6:	4192      	sbcs	r2, r2
 8002ec8:	458c      	cmp	ip, r1
 8002eca:	4189      	sbcs	r1, r1
 8002ecc:	44e2      	add	sl, ip
 8002ece:	44d0      	add	r8, sl
 8002ed0:	4249      	negs	r1, r1
 8002ed2:	4252      	negs	r2, r2
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	45a0      	cmp	r8, r4
 8002ed8:	41a4      	sbcs	r4, r4
 8002eda:	4582      	cmp	sl, r0
 8002edc:	4189      	sbcs	r1, r1
 8002ede:	4264      	negs	r4, r4
 8002ee0:	4249      	negs	r1, r1
 8002ee2:	430c      	orrs	r4, r1
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	0c3f      	lsrs	r7, r7, #16
 8002ee8:	19d2      	adds	r2, r2, r7
 8002eea:	1912      	adds	r2, r2, r4
 8002eec:	0dcc      	lsrs	r4, r1, #23
 8002eee:	9904      	ldr	r1, [sp, #16]
 8002ef0:	0270      	lsls	r0, r6, #9
 8002ef2:	4308      	orrs	r0, r1
 8002ef4:	1e41      	subs	r1, r0, #1
 8002ef6:	4188      	sbcs	r0, r1
 8002ef8:	4641      	mov	r1, r8
 8002efa:	444a      	add	r2, r9
 8002efc:	0df6      	lsrs	r6, r6, #23
 8002efe:	0252      	lsls	r2, r2, #9
 8002f00:	4330      	orrs	r0, r6
 8002f02:	0249      	lsls	r1, r1, #9
 8002f04:	4314      	orrs	r4, r2
 8002f06:	4308      	orrs	r0, r1
 8002f08:	01d2      	lsls	r2, r2, #7
 8002f0a:	d535      	bpl.n	8002f78 <__aeabi_dmul+0x514>
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	0843      	lsrs	r3, r0, #1
 8002f10:	4002      	ands	r2, r0
 8002f12:	4313      	orrs	r3, r2
 8002f14:	07e0      	lsls	r0, r4, #31
 8002f16:	4318      	orrs	r0, r3
 8002f18:	0864      	lsrs	r4, r4, #1
 8002f1a:	e634      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	46a2      	mov	sl, r4
 8002f20:	469b      	mov	fp, r3
 8002f22:	4681      	mov	r9, r0
 8002f24:	2480      	movs	r4, #128	@ 0x80
 8002f26:	4653      	mov	r3, sl
 8002f28:	0324      	lsls	r4, r4, #12
 8002f2a:	431c      	orrs	r4, r3
 8002f2c:	0324      	lsls	r4, r4, #12
 8002f2e:	464a      	mov	r2, r9
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <__aeabi_dmul+0x588>)
 8002f32:	0b24      	lsrs	r4, r4, #12
 8002f34:	e5ec      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002f36:	f000 fca1 	bl	800387c <__clzsi2>
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	469c      	mov	ip, r3
 8002f3e:	4484      	add	ip, r0
 8002f40:	0002      	movs	r2, r0
 8002f42:	4663      	mov	r3, ip
 8002f44:	3220      	adds	r2, #32
 8002f46:	2b1c      	cmp	r3, #28
 8002f48:	dc00      	bgt.n	8002f4c <__aeabi_dmul+0x4e8>
 8002f4a:	e684      	b.n	8002c56 <__aeabi_dmul+0x1f2>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4699      	mov	r9, r3
 8002f50:	0023      	movs	r3, r4
 8002f52:	3808      	subs	r0, #8
 8002f54:	4083      	lsls	r3, r0
 8002f56:	469a      	mov	sl, r3
 8002f58:	e68e      	b.n	8002c78 <__aeabi_dmul+0x214>
 8002f5a:	f000 fc8f 	bl	800387c <__clzsi2>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	0003      	movs	r3, r0
 8002f62:	3215      	adds	r2, #21
 8002f64:	3320      	adds	r3, #32
 8002f66:	2a1c      	cmp	r2, #28
 8002f68:	dc00      	bgt.n	8002f6c <__aeabi_dmul+0x508>
 8002f6a:	e64e      	b.n	8002c0a <__aeabi_dmul+0x1a6>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	0034      	movs	r4, r6
 8002f70:	3a08      	subs	r2, #8
 8002f72:	2000      	movs	r0, #0
 8002f74:	4094      	lsls	r4, r2
 8002f76:	e652      	b.n	8002c1e <__aeabi_dmul+0x1ba>
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	e604      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <__aeabi_dmul+0x58c>)
 8002f7e:	0021      	movs	r1, r4
 8002f80:	469c      	mov	ip, r3
 8002f82:	0003      	movs	r3, r0
 8002f84:	9d01      	ldr	r5, [sp, #4]
 8002f86:	40d3      	lsrs	r3, r2
 8002f88:	4465      	add	r5, ip
 8002f8a:	40a9      	lsls	r1, r5
 8002f8c:	4319      	orrs	r1, r3
 8002f8e:	0003      	movs	r3, r0
 8002f90:	40ab      	lsls	r3, r5
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	4183      	sbcs	r3, r0
 8002f96:	4319      	orrs	r1, r3
 8002f98:	0008      	movs	r0, r1
 8002f9a:	40d4      	lsrs	r4, r2
 8002f9c:	074b      	lsls	r3, r1, #29
 8002f9e:	d009      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa8:	1d0b      	adds	r3, r1, #4
 8002faa:	428b      	cmp	r3, r1
 8002fac:	4180      	sbcs	r0, r0
 8002fae:	4240      	negs	r0, r0
 8002fb0:	1824      	adds	r4, r4, r0
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	0223      	lsls	r3, r4, #8
 8002fb6:	d400      	bmi.n	8002fba <__aeabi_dmul+0x556>
 8002fb8:	e6d6      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	e5a6      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fc2:	290f      	cmp	r1, #15
 8002fc4:	d1aa      	bne.n	8002f1c <__aeabi_dmul+0x4b8>
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	4652      	mov	r2, sl
 8002fca:	031b      	lsls	r3, r3, #12
 8002fcc:	421a      	tst	r2, r3
 8002fce:	d0a9      	beq.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd0:	421c      	tst	r4, r3
 8002fd2:	d1a7      	bne.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd4:	431c      	orrs	r4, r3
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	0002      	movs	r2, r0
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fde:	e597      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	e6c1      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	4b01      	ldr	r3, [pc, #4]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fe8:	0022      	movs	r2, r4
 8002fea:	e591      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fec:	000007ff 	.word	0x000007ff
 8002ff0:	0000041e 	.word	0x0000041e

08002ff4 <__aeabi_dsub>:
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	464e      	mov	r6, r9
 8002ff8:	4645      	mov	r5, r8
 8002ffa:	46de      	mov	lr, fp
 8002ffc:	4657      	mov	r7, sl
 8002ffe:	b5e0      	push	{r5, r6, r7, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	9000      	str	r0, [sp, #0]
 8003004:	9101      	str	r1, [sp, #4]
 8003006:	030c      	lsls	r4, r1, #12
 8003008:	004f      	lsls	r7, r1, #1
 800300a:	0fce      	lsrs	r6, r1, #31
 800300c:	0a61      	lsrs	r1, r4, #9
 800300e:	9c00      	ldr	r4, [sp, #0]
 8003010:	46b0      	mov	r8, r6
 8003012:	0f64      	lsrs	r4, r4, #29
 8003014:	430c      	orrs	r4, r1
 8003016:	9900      	ldr	r1, [sp, #0]
 8003018:	0d7f      	lsrs	r7, r7, #21
 800301a:	00c8      	lsls	r0, r1, #3
 800301c:	0011      	movs	r1, r2
 800301e:	001a      	movs	r2, r3
 8003020:	031b      	lsls	r3, r3, #12
 8003022:	469c      	mov	ip, r3
 8003024:	9100      	str	r1, [sp, #0]
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	0051      	lsls	r1, r2, #1
 800302a:	0d4b      	lsrs	r3, r1, #21
 800302c:	4699      	mov	r9, r3
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	9d00      	ldr	r5, [sp, #0]
 8003032:	0fd9      	lsrs	r1, r3, #31
 8003034:	4663      	mov	r3, ip
 8003036:	0f6a      	lsrs	r2, r5, #29
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	4313      	orrs	r3, r2
 800303c:	00ea      	lsls	r2, r5, #3
 800303e:	4694      	mov	ip, r2
 8003040:	4693      	mov	fp, r2
 8003042:	4ac1      	ldr	r2, [pc, #772]	@ (8003348 <__aeabi_dsub+0x354>)
 8003044:	9003      	str	r0, [sp, #12]
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	4591      	cmp	r9, r2
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x5a>
 800304c:	e0cd      	b.n	80031ea <__aeabi_dsub+0x1f6>
 800304e:	2501      	movs	r5, #1
 8003050:	4069      	eors	r1, r5
 8003052:	464d      	mov	r5, r9
 8003054:	1b7d      	subs	r5, r7, r5
 8003056:	46aa      	mov	sl, r5
 8003058:	428e      	cmp	r6, r1
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x6a>
 800305c:	e080      	b.n	8003160 <__aeabi_dsub+0x16c>
 800305e:	2d00      	cmp	r5, #0
 8003060:	dc00      	bgt.n	8003064 <__aeabi_dsub+0x70>
 8003062:	e335      	b.n	80036d0 <__aeabi_dsub+0x6dc>
 8003064:	4649      	mov	r1, r9
 8003066:	2900      	cmp	r1, #0
 8003068:	d100      	bne.n	800306c <__aeabi_dsub+0x78>
 800306a:	e0df      	b.n	800322c <__aeabi_dsub+0x238>
 800306c:	4297      	cmp	r7, r2
 800306e:	d100      	bne.n	8003072 <__aeabi_dsub+0x7e>
 8003070:	e194      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003072:	4652      	mov	r2, sl
 8003074:	2501      	movs	r5, #1
 8003076:	2a38      	cmp	r2, #56	@ 0x38
 8003078:	dc19      	bgt.n	80030ae <__aeabi_dsub+0xba>
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	0412      	lsls	r2, r2, #16
 8003080:	4313      	orrs	r3, r2
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	4652      	mov	r2, sl
 8003086:	2a1f      	cmp	r2, #31
 8003088:	dd00      	ble.n	800308c <__aeabi_dsub+0x98>
 800308a:	e1e3      	b.n	8003454 <__aeabi_dsub+0x460>
 800308c:	4653      	mov	r3, sl
 800308e:	2220      	movs	r2, #32
 8003090:	4661      	mov	r1, ip
 8003092:	9d02      	ldr	r5, [sp, #8]
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	4095      	lsls	r5, r2
 8003098:	40d9      	lsrs	r1, r3
 800309a:	430d      	orrs	r5, r1
 800309c:	4661      	mov	r1, ip
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	1e51      	subs	r1, r2, #1
 80030a4:	418a      	sbcs	r2, r1
 80030a6:	4315      	orrs	r5, r2
 80030a8:	9a02      	ldr	r2, [sp, #8]
 80030aa:	40da      	lsrs	r2, r3
 80030ac:	1aa4      	subs	r4, r4, r2
 80030ae:	1b45      	subs	r5, r0, r5
 80030b0:	42a8      	cmp	r0, r5
 80030b2:	4180      	sbcs	r0, r0
 80030b4:	4240      	negs	r0, r0
 80030b6:	1a24      	subs	r4, r4, r0
 80030b8:	0223      	lsls	r3, r4, #8
 80030ba:	d400      	bmi.n	80030be <__aeabi_dsub+0xca>
 80030bc:	e13d      	b.n	800333a <__aeabi_dsub+0x346>
 80030be:	0264      	lsls	r4, r4, #9
 80030c0:	0a64      	lsrs	r4, r4, #9
 80030c2:	2c00      	cmp	r4, #0
 80030c4:	d100      	bne.n	80030c8 <__aeabi_dsub+0xd4>
 80030c6:	e147      	b.n	8003358 <__aeabi_dsub+0x364>
 80030c8:	0020      	movs	r0, r4
 80030ca:	f000 fbd7 	bl	800387c <__clzsi2>
 80030ce:	0003      	movs	r3, r0
 80030d0:	3b08      	subs	r3, #8
 80030d2:	2120      	movs	r1, #32
 80030d4:	0028      	movs	r0, r5
 80030d6:	1aca      	subs	r2, r1, r3
 80030d8:	40d0      	lsrs	r0, r2
 80030da:	409c      	lsls	r4, r3
 80030dc:	0002      	movs	r2, r0
 80030de:	409d      	lsls	r5, r3
 80030e0:	4322      	orrs	r2, r4
 80030e2:	429f      	cmp	r7, r3
 80030e4:	dd00      	ble.n	80030e8 <__aeabi_dsub+0xf4>
 80030e6:	e177      	b.n	80033d8 <__aeabi_dsub+0x3e4>
 80030e8:	1bd8      	subs	r0, r3, r7
 80030ea:	3001      	adds	r0, #1
 80030ec:	1a09      	subs	r1, r1, r0
 80030ee:	002c      	movs	r4, r5
 80030f0:	408d      	lsls	r5, r1
 80030f2:	40c4      	lsrs	r4, r0
 80030f4:	1e6b      	subs	r3, r5, #1
 80030f6:	419d      	sbcs	r5, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	40c2      	lsrs	r2, r0
 80030fc:	408b      	lsls	r3, r1
 80030fe:	4325      	orrs	r5, r4
 8003100:	2700      	movs	r7, #0
 8003102:	0014      	movs	r4, r2
 8003104:	431d      	orrs	r5, r3
 8003106:	076b      	lsls	r3, r5, #29
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x12a>
 800310a:	230f      	movs	r3, #15
 800310c:	402b      	ands	r3, r5
 800310e:	2b04      	cmp	r3, #4
 8003110:	d005      	beq.n	800311e <__aeabi_dsub+0x12a>
 8003112:	1d2b      	adds	r3, r5, #4
 8003114:	42ab      	cmp	r3, r5
 8003116:	41ad      	sbcs	r5, r5
 8003118:	426d      	negs	r5, r5
 800311a:	1964      	adds	r4, r4, r5
 800311c:	001d      	movs	r5, r3
 800311e:	0223      	lsls	r3, r4, #8
 8003120:	d400      	bmi.n	8003124 <__aeabi_dsub+0x130>
 8003122:	e140      	b.n	80033a6 <__aeabi_dsub+0x3b2>
 8003124:	4a88      	ldr	r2, [pc, #544]	@ (8003348 <__aeabi_dsub+0x354>)
 8003126:	3701      	adds	r7, #1
 8003128:	4297      	cmp	r7, r2
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x13a>
 800312c:	e101      	b.n	8003332 <__aeabi_dsub+0x33e>
 800312e:	2601      	movs	r6, #1
 8003130:	4643      	mov	r3, r8
 8003132:	4986      	ldr	r1, [pc, #536]	@ (800334c <__aeabi_dsub+0x358>)
 8003134:	08ed      	lsrs	r5, r5, #3
 8003136:	4021      	ands	r1, r4
 8003138:	074a      	lsls	r2, r1, #29
 800313a:	432a      	orrs	r2, r5
 800313c:	057c      	lsls	r4, r7, #21
 800313e:	024d      	lsls	r5, r1, #9
 8003140:	0b2d      	lsrs	r5, r5, #12
 8003142:	0d64      	lsrs	r4, r4, #21
 8003144:	401e      	ands	r6, r3
 8003146:	0524      	lsls	r4, r4, #20
 8003148:	432c      	orrs	r4, r5
 800314a:	07f6      	lsls	r6, r6, #31
 800314c:	4334      	orrs	r4, r6
 800314e:	0010      	movs	r0, r2
 8003150:	0021      	movs	r1, r4
 8003152:	b005      	add	sp, #20
 8003154:	bcf0      	pop	{r4, r5, r6, r7}
 8003156:	46bb      	mov	fp, r7
 8003158:	46b2      	mov	sl, r6
 800315a:	46a9      	mov	r9, r5
 800315c:	46a0      	mov	r8, r4
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003160:	2d00      	cmp	r5, #0
 8003162:	dc00      	bgt.n	8003166 <__aeabi_dsub+0x172>
 8003164:	e2d0      	b.n	8003708 <__aeabi_dsub+0x714>
 8003166:	4649      	mov	r1, r9
 8003168:	2900      	cmp	r1, #0
 800316a:	d000      	beq.n	800316e <__aeabi_dsub+0x17a>
 800316c:	e0d4      	b.n	8003318 <__aeabi_dsub+0x324>
 800316e:	4661      	mov	r1, ip
 8003170:	9b02      	ldr	r3, [sp, #8]
 8003172:	4319      	orrs	r1, r3
 8003174:	d100      	bne.n	8003178 <__aeabi_dsub+0x184>
 8003176:	e12b      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003178:	1e69      	subs	r1, r5, #1
 800317a:	2d01      	cmp	r5, #1
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x18c>
 800317e:	e1d9      	b.n	8003534 <__aeabi_dsub+0x540>
 8003180:	4295      	cmp	r5, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x192>
 8003184:	e10a      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003186:	2501      	movs	r5, #1
 8003188:	2938      	cmp	r1, #56	@ 0x38
 800318a:	dc17      	bgt.n	80031bc <__aeabi_dsub+0x1c8>
 800318c:	468a      	mov	sl, r1
 800318e:	4653      	mov	r3, sl
 8003190:	2b1f      	cmp	r3, #31
 8003192:	dd00      	ble.n	8003196 <__aeabi_dsub+0x1a2>
 8003194:	e1e7      	b.n	8003566 <__aeabi_dsub+0x572>
 8003196:	2220      	movs	r2, #32
 8003198:	1ad2      	subs	r2, r2, r3
 800319a:	9b02      	ldr	r3, [sp, #8]
 800319c:	4661      	mov	r1, ip
 800319e:	4093      	lsls	r3, r2
 80031a0:	001d      	movs	r5, r3
 80031a2:	4653      	mov	r3, sl
 80031a4:	40d9      	lsrs	r1, r3
 80031a6:	4663      	mov	r3, ip
 80031a8:	4093      	lsls	r3, r2
 80031aa:	001a      	movs	r2, r3
 80031ac:	430d      	orrs	r5, r1
 80031ae:	1e51      	subs	r1, r2, #1
 80031b0:	418a      	sbcs	r2, r1
 80031b2:	4653      	mov	r3, sl
 80031b4:	4315      	orrs	r5, r2
 80031b6:	9a02      	ldr	r2, [sp, #8]
 80031b8:	40da      	lsrs	r2, r3
 80031ba:	18a4      	adds	r4, r4, r2
 80031bc:	182d      	adds	r5, r5, r0
 80031be:	4285      	cmp	r5, r0
 80031c0:	4180      	sbcs	r0, r0
 80031c2:	4240      	negs	r0, r0
 80031c4:	1824      	adds	r4, r4, r0
 80031c6:	0223      	lsls	r3, r4, #8
 80031c8:	d400      	bmi.n	80031cc <__aeabi_dsub+0x1d8>
 80031ca:	e0b6      	b.n	800333a <__aeabi_dsub+0x346>
 80031cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003348 <__aeabi_dsub+0x354>)
 80031ce:	3701      	adds	r7, #1
 80031d0:	429f      	cmp	r7, r3
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x1e2>
 80031d4:	e0ad      	b.n	8003332 <__aeabi_dsub+0x33e>
 80031d6:	2101      	movs	r1, #1
 80031d8:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <__aeabi_dsub+0x358>)
 80031da:	086a      	lsrs	r2, r5, #1
 80031dc:	401c      	ands	r4, r3
 80031de:	4029      	ands	r1, r5
 80031e0:	430a      	orrs	r2, r1
 80031e2:	07e5      	lsls	r5, r4, #31
 80031e4:	4315      	orrs	r5, r2
 80031e6:	0864      	lsrs	r4, r4, #1
 80031e8:	e78d      	b.n	8003106 <__aeabi_dsub+0x112>
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <__aeabi_dsub+0x35c>)
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	4692      	mov	sl, r2
 80031f0:	4662      	mov	r2, ip
 80031f2:	44ba      	add	sl, r7
 80031f4:	431a      	orrs	r2, r3
 80031f6:	d02c      	beq.n	8003252 <__aeabi_dsub+0x25e>
 80031f8:	428e      	cmp	r6, r1
 80031fa:	d02e      	beq.n	800325a <__aeabi_dsub+0x266>
 80031fc:	4652      	mov	r2, sl
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d060      	beq.n	80032c4 <__aeabi_dsub+0x2d0>
 8003202:	2f00      	cmp	r7, #0
 8003204:	d100      	bne.n	8003208 <__aeabi_dsub+0x214>
 8003206:	e0db      	b.n	80033c0 <__aeabi_dsub+0x3cc>
 8003208:	4663      	mov	r3, ip
 800320a:	000e      	movs	r6, r1
 800320c:	9c02      	ldr	r4, [sp, #8]
 800320e:	08d8      	lsrs	r0, r3, #3
 8003210:	0762      	lsls	r2, r4, #29
 8003212:	4302      	orrs	r2, r0
 8003214:	08e4      	lsrs	r4, r4, #3
 8003216:	0013      	movs	r3, r2
 8003218:	4323      	orrs	r3, r4
 800321a:	d100      	bne.n	800321e <__aeabi_dsub+0x22a>
 800321c:	e254      	b.n	80036c8 <__aeabi_dsub+0x6d4>
 800321e:	2580      	movs	r5, #128	@ 0x80
 8003220:	032d      	lsls	r5, r5, #12
 8003222:	4325      	orrs	r5, r4
 8003224:	032d      	lsls	r5, r5, #12
 8003226:	4c48      	ldr	r4, [pc, #288]	@ (8003348 <__aeabi_dsub+0x354>)
 8003228:	0b2d      	lsrs	r5, r5, #12
 800322a:	e78c      	b.n	8003146 <__aeabi_dsub+0x152>
 800322c:	4661      	mov	r1, ip
 800322e:	9b02      	ldr	r3, [sp, #8]
 8003230:	4319      	orrs	r1, r3
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x242>
 8003234:	e0cc      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003236:	0029      	movs	r1, r5
 8003238:	3901      	subs	r1, #1
 800323a:	2d01      	cmp	r5, #1
 800323c:	d100      	bne.n	8003240 <__aeabi_dsub+0x24c>
 800323e:	e188      	b.n	8003552 <__aeabi_dsub+0x55e>
 8003240:	4295      	cmp	r5, r2
 8003242:	d100      	bne.n	8003246 <__aeabi_dsub+0x252>
 8003244:	e0aa      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003246:	2501      	movs	r5, #1
 8003248:	2938      	cmp	r1, #56	@ 0x38
 800324a:	dd00      	ble.n	800324e <__aeabi_dsub+0x25a>
 800324c:	e72f      	b.n	80030ae <__aeabi_dsub+0xba>
 800324e:	468a      	mov	sl, r1
 8003250:	e718      	b.n	8003084 <__aeabi_dsub+0x90>
 8003252:	2201      	movs	r2, #1
 8003254:	4051      	eors	r1, r2
 8003256:	428e      	cmp	r6, r1
 8003258:	d1d0      	bne.n	80031fc <__aeabi_dsub+0x208>
 800325a:	4653      	mov	r3, sl
 800325c:	2b00      	cmp	r3, #0
 800325e:	d100      	bne.n	8003262 <__aeabi_dsub+0x26e>
 8003260:	e0be      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 8003262:	2f00      	cmp	r7, #0
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x274>
 8003266:	e138      	b.n	80034da <__aeabi_dsub+0x4e6>
 8003268:	46ca      	mov	sl, r9
 800326a:	0022      	movs	r2, r4
 800326c:	4302      	orrs	r2, r0
 800326e:	d100      	bne.n	8003272 <__aeabi_dsub+0x27e>
 8003270:	e1e2      	b.n	8003638 <__aeabi_dsub+0x644>
 8003272:	4653      	mov	r3, sl
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d100      	bne.n	800327c <__aeabi_dsub+0x288>
 800327a:	e20d      	b.n	8003698 <__aeabi_dsub+0x6a4>
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <__aeabi_dsub+0x354>)
 800327e:	4592      	cmp	sl, r2
 8003280:	d100      	bne.n	8003284 <__aeabi_dsub+0x290>
 8003282:	e1d2      	b.n	800362a <__aeabi_dsub+0x636>
 8003284:	2701      	movs	r7, #1
 8003286:	2938      	cmp	r1, #56	@ 0x38
 8003288:	dc13      	bgt.n	80032b2 <__aeabi_dsub+0x2be>
 800328a:	291f      	cmp	r1, #31
 800328c:	dd00      	ble.n	8003290 <__aeabi_dsub+0x29c>
 800328e:	e1ee      	b.n	800366e <__aeabi_dsub+0x67a>
 8003290:	2220      	movs	r2, #32
 8003292:	9b02      	ldr	r3, [sp, #8]
 8003294:	1a52      	subs	r2, r2, r1
 8003296:	0025      	movs	r5, r4
 8003298:	0007      	movs	r7, r0
 800329a:	469a      	mov	sl, r3
 800329c:	40cc      	lsrs	r4, r1
 800329e:	4090      	lsls	r0, r2
 80032a0:	4095      	lsls	r5, r2
 80032a2:	40cf      	lsrs	r7, r1
 80032a4:	44a2      	add	sl, r4
 80032a6:	1e42      	subs	r2, r0, #1
 80032a8:	4190      	sbcs	r0, r2
 80032aa:	4653      	mov	r3, sl
 80032ac:	432f      	orrs	r7, r5
 80032ae:	4307      	orrs	r7, r0
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	003d      	movs	r5, r7
 80032b4:	4465      	add	r5, ip
 80032b6:	4565      	cmp	r5, ip
 80032b8:	4192      	sbcs	r2, r2
 80032ba:	9b02      	ldr	r3, [sp, #8]
 80032bc:	4252      	negs	r2, r2
 80032be:	464f      	mov	r7, r9
 80032c0:	18d4      	adds	r4, r2, r3
 80032c2:	e780      	b.n	80031c6 <__aeabi_dsub+0x1d2>
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <__aeabi_dsub+0x360>)
 80032c6:	1c7d      	adds	r5, r7, #1
 80032c8:	4215      	tst	r5, r2
 80032ca:	d000      	beq.n	80032ce <__aeabi_dsub+0x2da>
 80032cc:	e0aa      	b.n	8003424 <__aeabi_dsub+0x430>
 80032ce:	4662      	mov	r2, ip
 80032d0:	0025      	movs	r5, r4
 80032d2:	9b02      	ldr	r3, [sp, #8]
 80032d4:	4305      	orrs	r5, r0
 80032d6:	431a      	orrs	r2, r3
 80032d8:	2f00      	cmp	r7, #0
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x2ea>
 80032dc:	e0f5      	b.n	80034ca <__aeabi_dsub+0x4d6>
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d100      	bne.n	80032e4 <__aeabi_dsub+0x2f0>
 80032e2:	e16b      	b.n	80035bc <__aeabi_dsub+0x5c8>
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d100      	bne.n	80032ea <__aeabi_dsub+0x2f6>
 80032e8:	e152      	b.n	8003590 <__aeabi_dsub+0x59c>
 80032ea:	4663      	mov	r3, ip
 80032ec:	1ac5      	subs	r5, r0, r3
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	1ae2      	subs	r2, r4, r3
 80032f2:	42a8      	cmp	r0, r5
 80032f4:	419b      	sbcs	r3, r3
 80032f6:	425b      	negs	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	d400      	bmi.n	8003300 <__aeabi_dsub+0x30c>
 80032fe:	e1d5      	b.n	80036ac <__aeabi_dsub+0x6b8>
 8003300:	4663      	mov	r3, ip
 8003302:	1a1d      	subs	r5, r3, r0
 8003304:	45ac      	cmp	ip, r5
 8003306:	4192      	sbcs	r2, r2
 8003308:	2601      	movs	r6, #1
 800330a:	9b02      	ldr	r3, [sp, #8]
 800330c:	4252      	negs	r2, r2
 800330e:	1b1c      	subs	r4, r3, r4
 8003310:	4688      	mov	r8, r1
 8003312:	1aa4      	subs	r4, r4, r2
 8003314:	400e      	ands	r6, r1
 8003316:	e6f6      	b.n	8003106 <__aeabi_dsub+0x112>
 8003318:	4297      	cmp	r7, r2
 800331a:	d03f      	beq.n	800339c <__aeabi_dsub+0x3a8>
 800331c:	4652      	mov	r2, sl
 800331e:	2501      	movs	r5, #1
 8003320:	2a38      	cmp	r2, #56	@ 0x38
 8003322:	dd00      	ble.n	8003326 <__aeabi_dsub+0x332>
 8003324:	e74a      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	9b02      	ldr	r3, [sp, #8]
 800332a:	0412      	lsls	r2, r2, #16
 800332c:	4313      	orrs	r3, r2
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	e72d      	b.n	800318e <__aeabi_dsub+0x19a>
 8003332:	003c      	movs	r4, r7
 8003334:	2500      	movs	r5, #0
 8003336:	2200      	movs	r2, #0
 8003338:	e705      	b.n	8003146 <__aeabi_dsub+0x152>
 800333a:	2307      	movs	r3, #7
 800333c:	402b      	ands	r3, r5
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <__aeabi_dsub+0x350>
 8003342:	e6e2      	b.n	800310a <__aeabi_dsub+0x116>
 8003344:	e06b      	b.n	800341e <__aeabi_dsub+0x42a>
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	000007ff 	.word	0x000007ff
 800334c:	ff7fffff 	.word	0xff7fffff
 8003350:	fffff801 	.word	0xfffff801
 8003354:	000007fe 	.word	0x000007fe
 8003358:	0028      	movs	r0, r5
 800335a:	f000 fa8f 	bl	800387c <__clzsi2>
 800335e:	0003      	movs	r3, r0
 8003360:	3318      	adds	r3, #24
 8003362:	2b1f      	cmp	r3, #31
 8003364:	dc00      	bgt.n	8003368 <__aeabi_dsub+0x374>
 8003366:	e6b4      	b.n	80030d2 <__aeabi_dsub+0xde>
 8003368:	002a      	movs	r2, r5
 800336a:	3808      	subs	r0, #8
 800336c:	4082      	lsls	r2, r0
 800336e:	429f      	cmp	r7, r3
 8003370:	dd00      	ble.n	8003374 <__aeabi_dsub+0x380>
 8003372:	e0b9      	b.n	80034e8 <__aeabi_dsub+0x4f4>
 8003374:	1bdb      	subs	r3, r3, r7
 8003376:	1c58      	adds	r0, r3, #1
 8003378:	281f      	cmp	r0, #31
 800337a:	dc00      	bgt.n	800337e <__aeabi_dsub+0x38a>
 800337c:	e1a0      	b.n	80036c0 <__aeabi_dsub+0x6cc>
 800337e:	0015      	movs	r5, r2
 8003380:	3b1f      	subs	r3, #31
 8003382:	40dd      	lsrs	r5, r3
 8003384:	2820      	cmp	r0, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x3a0>
 8003388:	2340      	movs	r3, #64	@ 0x40
 800338a:	1a1b      	subs	r3, r3, r0
 800338c:	409a      	lsls	r2, r3
 800338e:	1e53      	subs	r3, r2, #1
 8003390:	419a      	sbcs	r2, r3
 8003392:	4315      	orrs	r5, r2
 8003394:	2307      	movs	r3, #7
 8003396:	2700      	movs	r7, #0
 8003398:	402b      	ands	r3, r5
 800339a:	e7d0      	b.n	800333e <__aeabi_dsub+0x34a>
 800339c:	08c0      	lsrs	r0, r0, #3
 800339e:	0762      	lsls	r2, r4, #29
 80033a0:	4302      	orrs	r2, r0
 80033a2:	08e4      	lsrs	r4, r4, #3
 80033a4:	e737      	b.n	8003216 <__aeabi_dsub+0x222>
 80033a6:	08ea      	lsrs	r2, r5, #3
 80033a8:	0763      	lsls	r3, r4, #29
 80033aa:	431a      	orrs	r2, r3
 80033ac:	4bd3      	ldr	r3, [pc, #844]	@ (80036fc <__aeabi_dsub+0x708>)
 80033ae:	08e4      	lsrs	r4, r4, #3
 80033b0:	429f      	cmp	r7, r3
 80033b2:	d100      	bne.n	80033b6 <__aeabi_dsub+0x3c2>
 80033b4:	e72f      	b.n	8003216 <__aeabi_dsub+0x222>
 80033b6:	0324      	lsls	r4, r4, #12
 80033b8:	0b25      	lsrs	r5, r4, #12
 80033ba:	057c      	lsls	r4, r7, #21
 80033bc:	0d64      	lsrs	r4, r4, #21
 80033be:	e6c2      	b.n	8003146 <__aeabi_dsub+0x152>
 80033c0:	46ca      	mov	sl, r9
 80033c2:	0022      	movs	r2, r4
 80033c4:	4302      	orrs	r2, r0
 80033c6:	d158      	bne.n	800347a <__aeabi_dsub+0x486>
 80033c8:	4663      	mov	r3, ip
 80033ca:	000e      	movs	r6, r1
 80033cc:	9c02      	ldr	r4, [sp, #8]
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	4657      	mov	r7, sl
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	e7e7      	b.n	80033a8 <__aeabi_dsub+0x3b4>
 80033d8:	4cc9      	ldr	r4, [pc, #804]	@ (8003700 <__aeabi_dsub+0x70c>)
 80033da:	1aff      	subs	r7, r7, r3
 80033dc:	4014      	ands	r4, r2
 80033de:	e692      	b.n	8003106 <__aeabi_dsub+0x112>
 80033e0:	4dc8      	ldr	r5, [pc, #800]	@ (8003704 <__aeabi_dsub+0x710>)
 80033e2:	1c7a      	adds	r2, r7, #1
 80033e4:	422a      	tst	r2, r5
 80033e6:	d000      	beq.n	80033ea <__aeabi_dsub+0x3f6>
 80033e8:	e084      	b.n	80034f4 <__aeabi_dsub+0x500>
 80033ea:	0022      	movs	r2, r4
 80033ec:	4302      	orrs	r2, r0
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d000      	beq.n	80033f4 <__aeabi_dsub+0x400>
 80033f2:	e0ef      	b.n	80035d4 <__aeabi_dsub+0x5e0>
 80033f4:	2a00      	cmp	r2, #0
 80033f6:	d100      	bne.n	80033fa <__aeabi_dsub+0x406>
 80033f8:	e0e5      	b.n	80035c6 <__aeabi_dsub+0x5d2>
 80033fa:	4662      	mov	r2, ip
 80033fc:	9902      	ldr	r1, [sp, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x410>
 8003402:	e0c5      	b.n	8003590 <__aeabi_dsub+0x59c>
 8003404:	4663      	mov	r3, ip
 8003406:	18c5      	adds	r5, r0, r3
 8003408:	468c      	mov	ip, r1
 800340a:	4285      	cmp	r5, r0
 800340c:	4180      	sbcs	r0, r0
 800340e:	4464      	add	r4, ip
 8003410:	4240      	negs	r0, r0
 8003412:	1824      	adds	r4, r4, r0
 8003414:	0223      	lsls	r3, r4, #8
 8003416:	d502      	bpl.n	800341e <__aeabi_dsub+0x42a>
 8003418:	4bb9      	ldr	r3, [pc, #740]	@ (8003700 <__aeabi_dsub+0x70c>)
 800341a:	3701      	adds	r7, #1
 800341c:	401c      	ands	r4, r3
 800341e:	46ba      	mov	sl, r7
 8003420:	9503      	str	r5, [sp, #12]
 8003422:	e7d5      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003424:	4662      	mov	r2, ip
 8003426:	1a85      	subs	r5, r0, r2
 8003428:	42a8      	cmp	r0, r5
 800342a:	4192      	sbcs	r2, r2
 800342c:	4252      	negs	r2, r2
 800342e:	4691      	mov	r9, r2
 8003430:	9b02      	ldr	r3, [sp, #8]
 8003432:	1ae3      	subs	r3, r4, r3
 8003434:	001a      	movs	r2, r3
 8003436:	464b      	mov	r3, r9
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	4691      	mov	r9, r2
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	d46c      	bmi.n	800351c <__aeabi_dsub+0x528>
 8003442:	464a      	mov	r2, r9
 8003444:	464c      	mov	r4, r9
 8003446:	432a      	orrs	r2, r5
 8003448:	d000      	beq.n	800344c <__aeabi_dsub+0x458>
 800344a:	e63a      	b.n	80030c2 <__aeabi_dsub+0xce>
 800344c:	2600      	movs	r6, #0
 800344e:	2400      	movs	r4, #0
 8003450:	2500      	movs	r5, #0
 8003452:	e678      	b.n	8003146 <__aeabi_dsub+0x152>
 8003454:	9902      	ldr	r1, [sp, #8]
 8003456:	4653      	mov	r3, sl
 8003458:	000d      	movs	r5, r1
 800345a:	3a20      	subs	r2, #32
 800345c:	40d5      	lsrs	r5, r2
 800345e:	2b20      	cmp	r3, #32
 8003460:	d006      	beq.n	8003470 <__aeabi_dsub+0x47c>
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	000b      	movs	r3, r1
 8003468:	4093      	lsls	r3, r2
 800346a:	4662      	mov	r2, ip
 800346c:	431a      	orrs	r2, r3
 800346e:	4693      	mov	fp, r2
 8003470:	465b      	mov	r3, fp
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	4193      	sbcs	r3, r2
 8003476:	431d      	orrs	r5, r3
 8003478:	e619      	b.n	80030ae <__aeabi_dsub+0xba>
 800347a:	4653      	mov	r3, sl
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d100      	bne.n	8003484 <__aeabi_dsub+0x490>
 8003482:	e0c6      	b.n	8003612 <__aeabi_dsub+0x61e>
 8003484:	4e9d      	ldr	r6, [pc, #628]	@ (80036fc <__aeabi_dsub+0x708>)
 8003486:	45b2      	cmp	sl, r6
 8003488:	d100      	bne.n	800348c <__aeabi_dsub+0x498>
 800348a:	e6bd      	b.n	8003208 <__aeabi_dsub+0x214>
 800348c:	4688      	mov	r8, r1
 800348e:	000e      	movs	r6, r1
 8003490:	2501      	movs	r5, #1
 8003492:	2a38      	cmp	r2, #56	@ 0x38
 8003494:	dc10      	bgt.n	80034b8 <__aeabi_dsub+0x4c4>
 8003496:	2a1f      	cmp	r2, #31
 8003498:	dc7f      	bgt.n	800359a <__aeabi_dsub+0x5a6>
 800349a:	2120      	movs	r1, #32
 800349c:	0025      	movs	r5, r4
 800349e:	1a89      	subs	r1, r1, r2
 80034a0:	0007      	movs	r7, r0
 80034a2:	4088      	lsls	r0, r1
 80034a4:	408d      	lsls	r5, r1
 80034a6:	40d7      	lsrs	r7, r2
 80034a8:	40d4      	lsrs	r4, r2
 80034aa:	1e41      	subs	r1, r0, #1
 80034ac:	4188      	sbcs	r0, r1
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	433d      	orrs	r5, r7
 80034b2:	1b1b      	subs	r3, r3, r4
 80034b4:	4305      	orrs	r5, r0
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	4662      	mov	r2, ip
 80034ba:	1b55      	subs	r5, r2, r5
 80034bc:	45ac      	cmp	ip, r5
 80034be:	4192      	sbcs	r2, r2
 80034c0:	9b02      	ldr	r3, [sp, #8]
 80034c2:	4252      	negs	r2, r2
 80034c4:	464f      	mov	r7, r9
 80034c6:	1a9c      	subs	r4, r3, r2
 80034c8:	e5f6      	b.n	80030b8 <__aeabi_dsub+0xc4>
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	d000      	beq.n	80034d0 <__aeabi_dsub+0x4dc>
 80034ce:	e0b7      	b.n	8003640 <__aeabi_dsub+0x64c>
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x4e2>
 80034d4:	e0f0      	b.n	80036b8 <__aeabi_dsub+0x6c4>
 80034d6:	2601      	movs	r6, #1
 80034d8:	400e      	ands	r6, r1
 80034da:	4663      	mov	r3, ip
 80034dc:	9802      	ldr	r0, [sp, #8]
 80034de:	08d9      	lsrs	r1, r3, #3
 80034e0:	0742      	lsls	r2, r0, #29
 80034e2:	430a      	orrs	r2, r1
 80034e4:	08c4      	lsrs	r4, r0, #3
 80034e6:	e696      	b.n	8003216 <__aeabi_dsub+0x222>
 80034e8:	4c85      	ldr	r4, [pc, #532]	@ (8003700 <__aeabi_dsub+0x70c>)
 80034ea:	1aff      	subs	r7, r7, r3
 80034ec:	4014      	ands	r4, r2
 80034ee:	0762      	lsls	r2, r4, #29
 80034f0:	08e4      	lsrs	r4, r4, #3
 80034f2:	e760      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80034f4:	4981      	ldr	r1, [pc, #516]	@ (80036fc <__aeabi_dsub+0x708>)
 80034f6:	428a      	cmp	r2, r1
 80034f8:	d100      	bne.n	80034fc <__aeabi_dsub+0x508>
 80034fa:	e0c9      	b.n	8003690 <__aeabi_dsub+0x69c>
 80034fc:	4663      	mov	r3, ip
 80034fe:	18c1      	adds	r1, r0, r3
 8003500:	4281      	cmp	r1, r0
 8003502:	4180      	sbcs	r0, r0
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	4240      	negs	r0, r0
 8003508:	18e3      	adds	r3, r4, r3
 800350a:	181b      	adds	r3, r3, r0
 800350c:	07dd      	lsls	r5, r3, #31
 800350e:	085c      	lsrs	r4, r3, #1
 8003510:	2307      	movs	r3, #7
 8003512:	0849      	lsrs	r1, r1, #1
 8003514:	430d      	orrs	r5, r1
 8003516:	0017      	movs	r7, r2
 8003518:	402b      	ands	r3, r5
 800351a:	e710      	b.n	800333e <__aeabi_dsub+0x34a>
 800351c:	4663      	mov	r3, ip
 800351e:	1a1d      	subs	r5, r3, r0
 8003520:	45ac      	cmp	ip, r5
 8003522:	4192      	sbcs	r2, r2
 8003524:	2601      	movs	r6, #1
 8003526:	9b02      	ldr	r3, [sp, #8]
 8003528:	4252      	negs	r2, r2
 800352a:	1b1c      	subs	r4, r3, r4
 800352c:	4688      	mov	r8, r1
 800352e:	1aa4      	subs	r4, r4, r2
 8003530:	400e      	ands	r6, r1
 8003532:	e5c6      	b.n	80030c2 <__aeabi_dsub+0xce>
 8003534:	4663      	mov	r3, ip
 8003536:	18c5      	adds	r5, r0, r3
 8003538:	9b02      	ldr	r3, [sp, #8]
 800353a:	4285      	cmp	r5, r0
 800353c:	4180      	sbcs	r0, r0
 800353e:	469c      	mov	ip, r3
 8003540:	4240      	negs	r0, r0
 8003542:	4464      	add	r4, ip
 8003544:	1824      	adds	r4, r4, r0
 8003546:	2701      	movs	r7, #1
 8003548:	0223      	lsls	r3, r4, #8
 800354a:	d400      	bmi.n	800354e <__aeabi_dsub+0x55a>
 800354c:	e6f5      	b.n	800333a <__aeabi_dsub+0x346>
 800354e:	2702      	movs	r7, #2
 8003550:	e641      	b.n	80031d6 <__aeabi_dsub+0x1e2>
 8003552:	4663      	mov	r3, ip
 8003554:	1ac5      	subs	r5, r0, r3
 8003556:	42a8      	cmp	r0, r5
 8003558:	4180      	sbcs	r0, r0
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	4240      	negs	r0, r0
 800355e:	1ae4      	subs	r4, r4, r3
 8003560:	2701      	movs	r7, #1
 8003562:	1a24      	subs	r4, r4, r0
 8003564:	e5a8      	b.n	80030b8 <__aeabi_dsub+0xc4>
 8003566:	9d02      	ldr	r5, [sp, #8]
 8003568:	4652      	mov	r2, sl
 800356a:	002b      	movs	r3, r5
 800356c:	3a20      	subs	r2, #32
 800356e:	40d3      	lsrs	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	4653      	mov	r3, sl
 8003574:	2b20      	cmp	r3, #32
 8003576:	d006      	beq.n	8003586 <__aeabi_dsub+0x592>
 8003578:	2240      	movs	r2, #64	@ 0x40
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	002b      	movs	r3, r5
 800357e:	4093      	lsls	r3, r2
 8003580:	4662      	mov	r2, ip
 8003582:	431a      	orrs	r2, r3
 8003584:	4693      	mov	fp, r2
 8003586:	465d      	mov	r5, fp
 8003588:	1e6b      	subs	r3, r5, #1
 800358a:	419d      	sbcs	r5, r3
 800358c:	430d      	orrs	r5, r1
 800358e:	e615      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003590:	0762      	lsls	r2, r4, #29
 8003592:	08c0      	lsrs	r0, r0, #3
 8003594:	4302      	orrs	r2, r0
 8003596:	08e4      	lsrs	r4, r4, #3
 8003598:	e70d      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 800359a:	0011      	movs	r1, r2
 800359c:	0027      	movs	r7, r4
 800359e:	3920      	subs	r1, #32
 80035a0:	40cf      	lsrs	r7, r1
 80035a2:	2a20      	cmp	r2, #32
 80035a4:	d005      	beq.n	80035b2 <__aeabi_dsub+0x5be>
 80035a6:	2140      	movs	r1, #64	@ 0x40
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	4094      	lsls	r4, r2
 80035ac:	0025      	movs	r5, r4
 80035ae:	4305      	orrs	r5, r0
 80035b0:	9503      	str	r5, [sp, #12]
 80035b2:	9d03      	ldr	r5, [sp, #12]
 80035b4:	1e6a      	subs	r2, r5, #1
 80035b6:	4195      	sbcs	r5, r2
 80035b8:	433d      	orrs	r5, r7
 80035ba:	e77d      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d100      	bne.n	80035c2 <__aeabi_dsub+0x5ce>
 80035c0:	e744      	b.n	800344c <__aeabi_dsub+0x458>
 80035c2:	2601      	movs	r6, #1
 80035c4:	400e      	ands	r6, r1
 80035c6:	4663      	mov	r3, ip
 80035c8:	08d9      	lsrs	r1, r3, #3
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	075a      	lsls	r2, r3, #29
 80035ce:	430a      	orrs	r2, r1
 80035d0:	08dc      	lsrs	r4, r3, #3
 80035d2:	e6f0      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	d028      	beq.n	800362a <__aeabi_dsub+0x636>
 80035d8:	4662      	mov	r2, ip
 80035da:	9f02      	ldr	r7, [sp, #8]
 80035dc:	08c0      	lsrs	r0, r0, #3
 80035de:	433a      	orrs	r2, r7
 80035e0:	d100      	bne.n	80035e4 <__aeabi_dsub+0x5f0>
 80035e2:	e6dc      	b.n	800339e <__aeabi_dsub+0x3aa>
 80035e4:	0762      	lsls	r2, r4, #29
 80035e6:	4310      	orrs	r0, r2
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	08e4      	lsrs	r4, r4, #3
 80035ec:	0312      	lsls	r2, r2, #12
 80035ee:	4214      	tst	r4, r2
 80035f0:	d009      	beq.n	8003606 <__aeabi_dsub+0x612>
 80035f2:	08fd      	lsrs	r5, r7, #3
 80035f4:	4215      	tst	r5, r2
 80035f6:	d106      	bne.n	8003606 <__aeabi_dsub+0x612>
 80035f8:	4663      	mov	r3, ip
 80035fa:	2601      	movs	r6, #1
 80035fc:	002c      	movs	r4, r5
 80035fe:	08d8      	lsrs	r0, r3, #3
 8003600:	077b      	lsls	r3, r7, #29
 8003602:	4318      	orrs	r0, r3
 8003604:	400e      	ands	r6, r1
 8003606:	0f42      	lsrs	r2, r0, #29
 8003608:	00c0      	lsls	r0, r0, #3
 800360a:	08c0      	lsrs	r0, r0, #3
 800360c:	0752      	lsls	r2, r2, #29
 800360e:	4302      	orrs	r2, r0
 8003610:	e601      	b.n	8003216 <__aeabi_dsub+0x222>
 8003612:	4663      	mov	r3, ip
 8003614:	1a1d      	subs	r5, r3, r0
 8003616:	45ac      	cmp	ip, r5
 8003618:	4192      	sbcs	r2, r2
 800361a:	9b02      	ldr	r3, [sp, #8]
 800361c:	4252      	negs	r2, r2
 800361e:	1b1c      	subs	r4, r3, r4
 8003620:	000e      	movs	r6, r1
 8003622:	4688      	mov	r8, r1
 8003624:	2701      	movs	r7, #1
 8003626:	1aa4      	subs	r4, r4, r2
 8003628:	e546      	b.n	80030b8 <__aeabi_dsub+0xc4>
 800362a:	4663      	mov	r3, ip
 800362c:	08d9      	lsrs	r1, r3, #3
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	075a      	lsls	r2, r3, #29
 8003632:	430a      	orrs	r2, r1
 8003634:	08dc      	lsrs	r4, r3, #3
 8003636:	e5ee      	b.n	8003216 <__aeabi_dsub+0x222>
 8003638:	4663      	mov	r3, ip
 800363a:	9c02      	ldr	r4, [sp, #8]
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	e6c7      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003640:	08c0      	lsrs	r0, r0, #3
 8003642:	2a00      	cmp	r2, #0
 8003644:	d100      	bne.n	8003648 <__aeabi_dsub+0x654>
 8003646:	e6aa      	b.n	800339e <__aeabi_dsub+0x3aa>
 8003648:	0762      	lsls	r2, r4, #29
 800364a:	4310      	orrs	r0, r2
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	08e4      	lsrs	r4, r4, #3
 8003650:	0312      	lsls	r2, r2, #12
 8003652:	4214      	tst	r4, r2
 8003654:	d0d7      	beq.n	8003606 <__aeabi_dsub+0x612>
 8003656:	9f02      	ldr	r7, [sp, #8]
 8003658:	08fd      	lsrs	r5, r7, #3
 800365a:	4215      	tst	r5, r2
 800365c:	d1d3      	bne.n	8003606 <__aeabi_dsub+0x612>
 800365e:	4663      	mov	r3, ip
 8003660:	2601      	movs	r6, #1
 8003662:	08d8      	lsrs	r0, r3, #3
 8003664:	077b      	lsls	r3, r7, #29
 8003666:	002c      	movs	r4, r5
 8003668:	4318      	orrs	r0, r3
 800366a:	400e      	ands	r6, r1
 800366c:	e7cb      	b.n	8003606 <__aeabi_dsub+0x612>
 800366e:	000a      	movs	r2, r1
 8003670:	0027      	movs	r7, r4
 8003672:	3a20      	subs	r2, #32
 8003674:	40d7      	lsrs	r7, r2
 8003676:	2920      	cmp	r1, #32
 8003678:	d005      	beq.n	8003686 <__aeabi_dsub+0x692>
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	1a52      	subs	r2, r2, r1
 800367e:	4094      	lsls	r4, r2
 8003680:	0025      	movs	r5, r4
 8003682:	4305      	orrs	r5, r0
 8003684:	9503      	str	r5, [sp, #12]
 8003686:	9d03      	ldr	r5, [sp, #12]
 8003688:	1e6a      	subs	r2, r5, #1
 800368a:	4195      	sbcs	r5, r2
 800368c:	432f      	orrs	r7, r5
 800368e:	e610      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003690:	0014      	movs	r4, r2
 8003692:	2500      	movs	r5, #0
 8003694:	2200      	movs	r2, #0
 8003696:	e556      	b.n	8003146 <__aeabi_dsub+0x152>
 8003698:	9b02      	ldr	r3, [sp, #8]
 800369a:	4460      	add	r0, ip
 800369c:	4699      	mov	r9, r3
 800369e:	4560      	cmp	r0, ip
 80036a0:	4192      	sbcs	r2, r2
 80036a2:	444c      	add	r4, r9
 80036a4:	4252      	negs	r2, r2
 80036a6:	0005      	movs	r5, r0
 80036a8:	18a4      	adds	r4, r4, r2
 80036aa:	e74c      	b.n	8003546 <__aeabi_dsub+0x552>
 80036ac:	001a      	movs	r2, r3
 80036ae:	001c      	movs	r4, r3
 80036b0:	432a      	orrs	r2, r5
 80036b2:	d000      	beq.n	80036b6 <__aeabi_dsub+0x6c2>
 80036b4:	e6b3      	b.n	800341e <__aeabi_dsub+0x42a>
 80036b6:	e6c9      	b.n	800344c <__aeabi_dsub+0x458>
 80036b8:	2480      	movs	r4, #128	@ 0x80
 80036ba:	2600      	movs	r6, #0
 80036bc:	0324      	lsls	r4, r4, #12
 80036be:	e5ae      	b.n	800321e <__aeabi_dsub+0x22a>
 80036c0:	2120      	movs	r1, #32
 80036c2:	2500      	movs	r5, #0
 80036c4:	1a09      	subs	r1, r1, r0
 80036c6:	e517      	b.n	80030f8 <__aeabi_dsub+0x104>
 80036c8:	2200      	movs	r2, #0
 80036ca:	2500      	movs	r5, #0
 80036cc:	4c0b      	ldr	r4, [pc, #44]	@ (80036fc <__aeabi_dsub+0x708>)
 80036ce:	e53a      	b.n	8003146 <__aeabi_dsub+0x152>
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	d100      	bne.n	80036d6 <__aeabi_dsub+0x6e2>
 80036d4:	e5f6      	b.n	80032c4 <__aeabi_dsub+0x2d0>
 80036d6:	464b      	mov	r3, r9
 80036d8:	1bda      	subs	r2, r3, r7
 80036da:	4692      	mov	sl, r2
 80036dc:	2f00      	cmp	r7, #0
 80036de:	d100      	bne.n	80036e2 <__aeabi_dsub+0x6ee>
 80036e0:	e66f      	b.n	80033c2 <__aeabi_dsub+0x3ce>
 80036e2:	2a38      	cmp	r2, #56	@ 0x38
 80036e4:	dc05      	bgt.n	80036f2 <__aeabi_dsub+0x6fe>
 80036e6:	2680      	movs	r6, #128	@ 0x80
 80036e8:	0436      	lsls	r6, r6, #16
 80036ea:	4334      	orrs	r4, r6
 80036ec:	4688      	mov	r8, r1
 80036ee:	000e      	movs	r6, r1
 80036f0:	e6d1      	b.n	8003496 <__aeabi_dsub+0x4a2>
 80036f2:	4688      	mov	r8, r1
 80036f4:	000e      	movs	r6, r1
 80036f6:	2501      	movs	r5, #1
 80036f8:	e6de      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	000007ff 	.word	0x000007ff
 8003700:	ff7fffff 	.word	0xff7fffff
 8003704:	000007fe 	.word	0x000007fe
 8003708:	2d00      	cmp	r5, #0
 800370a:	d100      	bne.n	800370e <__aeabi_dsub+0x71a>
 800370c:	e668      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 800370e:	464b      	mov	r3, r9
 8003710:	1bd9      	subs	r1, r3, r7
 8003712:	2f00      	cmp	r7, #0
 8003714:	d101      	bne.n	800371a <__aeabi_dsub+0x726>
 8003716:	468a      	mov	sl, r1
 8003718:	e5a7      	b.n	800326a <__aeabi_dsub+0x276>
 800371a:	2701      	movs	r7, #1
 800371c:	2938      	cmp	r1, #56	@ 0x38
 800371e:	dd00      	ble.n	8003722 <__aeabi_dsub+0x72e>
 8003720:	e5c7      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	0412      	lsls	r2, r2, #16
 8003726:	4314      	orrs	r4, r2
 8003728:	e5af      	b.n	800328a <__aeabi_dsub+0x296>
 800372a:	46c0      	nop			@ (mov r8, r8)

0800372c <__aeabi_d2iz>:
 800372c:	000b      	movs	r3, r1
 800372e:	0002      	movs	r2, r0
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d16      	ldr	r5, [pc, #88]	@ (800378c <__aeabi_d2iz+0x60>)
 8003734:	030c      	lsls	r4, r1, #12
 8003736:	b082      	sub	sp, #8
 8003738:	0049      	lsls	r1, r1, #1
 800373a:	2000      	movs	r0, #0
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	0b24      	lsrs	r4, r4, #12
 8003742:	0d49      	lsrs	r1, r1, #21
 8003744:	0fde      	lsrs	r6, r3, #31
 8003746:	42a9      	cmp	r1, r5
 8003748:	dd04      	ble.n	8003754 <__aeabi_d2iz+0x28>
 800374a:	4811      	ldr	r0, [pc, #68]	@ (8003790 <__aeabi_d2iz+0x64>)
 800374c:	4281      	cmp	r1, r0
 800374e:	dd03      	ble.n	8003758 <__aeabi_d2iz+0x2c>
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <__aeabi_d2iz+0x68>)
 8003752:	18f0      	adds	r0, r6, r3
 8003754:	b002      	add	sp, #8
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	2080      	movs	r0, #128	@ 0x80
 800375a:	0340      	lsls	r0, r0, #13
 800375c:	4320      	orrs	r0, r4
 800375e:	4c0e      	ldr	r4, [pc, #56]	@ (8003798 <__aeabi_d2iz+0x6c>)
 8003760:	1a64      	subs	r4, r4, r1
 8003762:	2c1f      	cmp	r4, #31
 8003764:	dd08      	ble.n	8003778 <__aeabi_d2iz+0x4c>
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <__aeabi_d2iz+0x70>)
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	40d8      	lsrs	r0, r3
 800376c:	0003      	movs	r3, r0
 800376e:	4258      	negs	r0, r3
 8003770:	2e00      	cmp	r6, #0
 8003772:	d1ef      	bne.n	8003754 <__aeabi_d2iz+0x28>
 8003774:	0018      	movs	r0, r3
 8003776:	e7ed      	b.n	8003754 <__aeabi_d2iz+0x28>
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <__aeabi_d2iz+0x74>)
 800377a:	9a00      	ldr	r2, [sp, #0]
 800377c:	469c      	mov	ip, r3
 800377e:	0003      	movs	r3, r0
 8003780:	4461      	add	r1, ip
 8003782:	408b      	lsls	r3, r1
 8003784:	40e2      	lsrs	r2, r4
 8003786:	4313      	orrs	r3, r2
 8003788:	e7f1      	b.n	800376e <__aeabi_d2iz+0x42>
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	000003fe 	.word	0x000003fe
 8003790:	0000041d 	.word	0x0000041d
 8003794:	7fffffff 	.word	0x7fffffff
 8003798:	00000433 	.word	0x00000433
 800379c:	00000413 	.word	0x00000413
 80037a0:	fffffbed 	.word	0xfffffbed

080037a4 <__aeabi_i2d>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d016      	beq.n	80037d8 <__aeabi_i2d+0x34>
 80037aa:	17c3      	asrs	r3, r0, #31
 80037ac:	18c5      	adds	r5, r0, r3
 80037ae:	405d      	eors	r5, r3
 80037b0:	0fc4      	lsrs	r4, r0, #31
 80037b2:	0028      	movs	r0, r5
 80037b4:	f000 f862 	bl	800387c <__clzsi2>
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <__aeabi_i2d+0x58>)
 80037ba:	1a1b      	subs	r3, r3, r0
 80037bc:	055b      	lsls	r3, r3, #21
 80037be:	0d5b      	lsrs	r3, r3, #21
 80037c0:	280a      	cmp	r0, #10
 80037c2:	dc14      	bgt.n	80037ee <__aeabi_i2d+0x4a>
 80037c4:	0002      	movs	r2, r0
 80037c6:	002e      	movs	r6, r5
 80037c8:	3215      	adds	r2, #21
 80037ca:	4096      	lsls	r6, r2
 80037cc:	220b      	movs	r2, #11
 80037ce:	1a12      	subs	r2, r2, r0
 80037d0:	40d5      	lsrs	r5, r2
 80037d2:	032d      	lsls	r5, r5, #12
 80037d4:	0b2d      	lsrs	r5, r5, #12
 80037d6:	e003      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037d8:	2400      	movs	r4, #0
 80037da:	2300      	movs	r3, #0
 80037dc:	2500      	movs	r5, #0
 80037de:	2600      	movs	r6, #0
 80037e0:	051b      	lsls	r3, r3, #20
 80037e2:	432b      	orrs	r3, r5
 80037e4:	07e4      	lsls	r4, r4, #31
 80037e6:	4323      	orrs	r3, r4
 80037e8:	0030      	movs	r0, r6
 80037ea:	0019      	movs	r1, r3
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	380b      	subs	r0, #11
 80037f0:	4085      	lsls	r5, r0
 80037f2:	032d      	lsls	r5, r5, #12
 80037f4:	2600      	movs	r6, #0
 80037f6:	0b2d      	lsrs	r5, r5, #12
 80037f8:	e7f2      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	0000041e 	.word	0x0000041e

08003800 <__aeabi_cdrcmple>:
 8003800:	4684      	mov	ip, r0
 8003802:	0010      	movs	r0, r2
 8003804:	4662      	mov	r2, ip
 8003806:	468c      	mov	ip, r1
 8003808:	0019      	movs	r1, r3
 800380a:	4663      	mov	r3, ip
 800380c:	e000      	b.n	8003810 <__aeabi_cdcmpeq>
 800380e:	46c0      	nop			@ (mov r8, r8)

08003810 <__aeabi_cdcmpeq>:
 8003810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003812:	f000 f909 	bl	8003a28 <__ledf2>
 8003816:	2800      	cmp	r0, #0
 8003818:	d401      	bmi.n	800381e <__aeabi_cdcmpeq+0xe>
 800381a:	2100      	movs	r1, #0
 800381c:	42c8      	cmn	r0, r1
 800381e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003820 <__aeabi_dcmpeq>:
 8003820:	b510      	push	{r4, lr}
 8003822:	f000 f849 	bl	80038b8 <__eqdf2>
 8003826:	4240      	negs	r0, r0
 8003828:	3001      	adds	r0, #1
 800382a:	bd10      	pop	{r4, pc}

0800382c <__aeabi_dcmplt>:
 800382c:	b510      	push	{r4, lr}
 800382e:	f000 f8fb 	bl	8003a28 <__ledf2>
 8003832:	2800      	cmp	r0, #0
 8003834:	db01      	blt.n	800383a <__aeabi_dcmplt+0xe>
 8003836:	2000      	movs	r0, #0
 8003838:	bd10      	pop	{r4, pc}
 800383a:	2001      	movs	r0, #1
 800383c:	bd10      	pop	{r4, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)

08003840 <__aeabi_dcmple>:
 8003840:	b510      	push	{r4, lr}
 8003842:	f000 f8f1 	bl	8003a28 <__ledf2>
 8003846:	2800      	cmp	r0, #0
 8003848:	dd01      	ble.n	800384e <__aeabi_dcmple+0xe>
 800384a:	2000      	movs	r0, #0
 800384c:	bd10      	pop	{r4, pc}
 800384e:	2001      	movs	r0, #1
 8003850:	bd10      	pop	{r4, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)

08003854 <__aeabi_dcmpgt>:
 8003854:	b510      	push	{r4, lr}
 8003856:	f000 f873 	bl	8003940 <__gedf2>
 800385a:	2800      	cmp	r0, #0
 800385c:	dc01      	bgt.n	8003862 <__aeabi_dcmpgt+0xe>
 800385e:	2000      	movs	r0, #0
 8003860:	bd10      	pop	{r4, pc}
 8003862:	2001      	movs	r0, #1
 8003864:	bd10      	pop	{r4, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)

08003868 <__aeabi_dcmpge>:
 8003868:	b510      	push	{r4, lr}
 800386a:	f000 f869 	bl	8003940 <__gedf2>
 800386e:	2800      	cmp	r0, #0
 8003870:	da01      	bge.n	8003876 <__aeabi_dcmpge+0xe>
 8003872:	2000      	movs	r0, #0
 8003874:	bd10      	pop	{r4, pc}
 8003876:	2001      	movs	r0, #1
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)

0800387c <__clzsi2>:
 800387c:	211c      	movs	r1, #28
 800387e:	2301      	movs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4298      	cmp	r0, r3
 8003884:	d301      	bcc.n	800388a <__clzsi2+0xe>
 8003886:	0c00      	lsrs	r0, r0, #16
 8003888:	3910      	subs	r1, #16
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	4298      	cmp	r0, r3
 800388e:	d301      	bcc.n	8003894 <__clzsi2+0x18>
 8003890:	0a00      	lsrs	r0, r0, #8
 8003892:	3908      	subs	r1, #8
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	4298      	cmp	r0, r3
 8003898:	d301      	bcc.n	800389e <__clzsi2+0x22>
 800389a:	0900      	lsrs	r0, r0, #4
 800389c:	3904      	subs	r1, #4
 800389e:	a202      	add	r2, pc, #8	@ (adr r2, 80038a8 <__clzsi2+0x2c>)
 80038a0:	5c10      	ldrb	r0, [r2, r0]
 80038a2:	1840      	adds	r0, r0, r1
 80038a4:	4770      	bx	lr
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	02020304 	.word	0x02020304
 80038ac:	01010101 	.word	0x01010101
	...

080038b8 <__eqdf2>:
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	4657      	mov	r7, sl
 80038bc:	46de      	mov	lr, fp
 80038be:	464e      	mov	r6, r9
 80038c0:	4645      	mov	r5, r8
 80038c2:	b5e0      	push	{r5, r6, r7, lr}
 80038c4:	000d      	movs	r5, r1
 80038c6:	0004      	movs	r4, r0
 80038c8:	0fe8      	lsrs	r0, r5, #31
 80038ca:	4683      	mov	fp, r0
 80038cc:	0309      	lsls	r1, r1, #12
 80038ce:	0fd8      	lsrs	r0, r3, #31
 80038d0:	0b09      	lsrs	r1, r1, #12
 80038d2:	4682      	mov	sl, r0
 80038d4:	4819      	ldr	r0, [pc, #100]	@ (800393c <__eqdf2+0x84>)
 80038d6:	468c      	mov	ip, r1
 80038d8:	031f      	lsls	r7, r3, #12
 80038da:	0069      	lsls	r1, r5, #1
 80038dc:	005e      	lsls	r6, r3, #1
 80038de:	0d49      	lsrs	r1, r1, #21
 80038e0:	0b3f      	lsrs	r7, r7, #12
 80038e2:	0d76      	lsrs	r6, r6, #21
 80038e4:	4281      	cmp	r1, r0
 80038e6:	d018      	beq.n	800391a <__eqdf2+0x62>
 80038e8:	4286      	cmp	r6, r0
 80038ea:	d00f      	beq.n	800390c <__eqdf2+0x54>
 80038ec:	2001      	movs	r0, #1
 80038ee:	42b1      	cmp	r1, r6
 80038f0:	d10d      	bne.n	800390e <__eqdf2+0x56>
 80038f2:	45bc      	cmp	ip, r7
 80038f4:	d10b      	bne.n	800390e <__eqdf2+0x56>
 80038f6:	4294      	cmp	r4, r2
 80038f8:	d109      	bne.n	800390e <__eqdf2+0x56>
 80038fa:	45d3      	cmp	fp, sl
 80038fc:	d01c      	beq.n	8003938 <__eqdf2+0x80>
 80038fe:	2900      	cmp	r1, #0
 8003900:	d105      	bne.n	800390e <__eqdf2+0x56>
 8003902:	4660      	mov	r0, ip
 8003904:	4320      	orrs	r0, r4
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	4198      	sbcs	r0, r3
 800390a:	e000      	b.n	800390e <__eqdf2+0x56>
 800390c:	2001      	movs	r0, #1
 800390e:	bcf0      	pop	{r4, r5, r6, r7}
 8003910:	46bb      	mov	fp, r7
 8003912:	46b2      	mov	sl, r6
 8003914:	46a9      	mov	r9, r5
 8003916:	46a0      	mov	r8, r4
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	2001      	movs	r0, #1
 800391c:	428e      	cmp	r6, r1
 800391e:	d1f6      	bne.n	800390e <__eqdf2+0x56>
 8003920:	4661      	mov	r1, ip
 8003922:	4339      	orrs	r1, r7
 8003924:	000f      	movs	r7, r1
 8003926:	4317      	orrs	r7, r2
 8003928:	4327      	orrs	r7, r4
 800392a:	d1f0      	bne.n	800390e <__eqdf2+0x56>
 800392c:	465b      	mov	r3, fp
 800392e:	4652      	mov	r2, sl
 8003930:	1a98      	subs	r0, r3, r2
 8003932:	1e43      	subs	r3, r0, #1
 8003934:	4198      	sbcs	r0, r3
 8003936:	e7ea      	b.n	800390e <__eqdf2+0x56>
 8003938:	2000      	movs	r0, #0
 800393a:	e7e8      	b.n	800390e <__eqdf2+0x56>
 800393c:	000007ff 	.word	0x000007ff

08003940 <__gedf2>:
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	4657      	mov	r7, sl
 8003944:	464e      	mov	r6, r9
 8003946:	4645      	mov	r5, r8
 8003948:	46de      	mov	lr, fp
 800394a:	b5e0      	push	{r5, r6, r7, lr}
 800394c:	000d      	movs	r5, r1
 800394e:	030f      	lsls	r7, r1, #12
 8003950:	0b39      	lsrs	r1, r7, #12
 8003952:	b083      	sub	sp, #12
 8003954:	0004      	movs	r4, r0
 8003956:	4680      	mov	r8, r0
 8003958:	9101      	str	r1, [sp, #4]
 800395a:	0058      	lsls	r0, r3, #1
 800395c:	0fe9      	lsrs	r1, r5, #31
 800395e:	4f31      	ldr	r7, [pc, #196]	@ (8003a24 <__gedf2+0xe4>)
 8003960:	0d40      	lsrs	r0, r0, #21
 8003962:	468c      	mov	ip, r1
 8003964:	006e      	lsls	r6, r5, #1
 8003966:	0319      	lsls	r1, r3, #12
 8003968:	4682      	mov	sl, r0
 800396a:	4691      	mov	r9, r2
 800396c:	0d76      	lsrs	r6, r6, #21
 800396e:	0b09      	lsrs	r1, r1, #12
 8003970:	0fd8      	lsrs	r0, r3, #31
 8003972:	42be      	cmp	r6, r7
 8003974:	d01f      	beq.n	80039b6 <__gedf2+0x76>
 8003976:	45ba      	cmp	sl, r7
 8003978:	d00f      	beq.n	800399a <__gedf2+0x5a>
 800397a:	2e00      	cmp	r6, #0
 800397c:	d12f      	bne.n	80039de <__gedf2+0x9e>
 800397e:	4655      	mov	r5, sl
 8003980:	9e01      	ldr	r6, [sp, #4]
 8003982:	4334      	orrs	r4, r6
 8003984:	2d00      	cmp	r5, #0
 8003986:	d127      	bne.n	80039d8 <__gedf2+0x98>
 8003988:	430a      	orrs	r2, r1
 800398a:	d03a      	beq.n	8003a02 <__gedf2+0xc2>
 800398c:	2c00      	cmp	r4, #0
 800398e:	d145      	bne.n	8003a1c <__gedf2+0xdc>
 8003990:	2800      	cmp	r0, #0
 8003992:	d11a      	bne.n	80039ca <__gedf2+0x8a>
 8003994:	2001      	movs	r0, #1
 8003996:	4240      	negs	r0, r0
 8003998:	e017      	b.n	80039ca <__gedf2+0x8a>
 800399a:	4311      	orrs	r1, r2
 800399c:	d13b      	bne.n	8003a16 <__gedf2+0xd6>
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d102      	bne.n	80039a8 <__gedf2+0x68>
 80039a2:	9f01      	ldr	r7, [sp, #4]
 80039a4:	4327      	orrs	r7, r4
 80039a6:	d0f3      	beq.n	8003990 <__gedf2+0x50>
 80039a8:	4584      	cmp	ip, r0
 80039aa:	d109      	bne.n	80039c0 <__gedf2+0x80>
 80039ac:	4663      	mov	r3, ip
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <__gedf2+0x54>
 80039b2:	4660      	mov	r0, ip
 80039b4:	e009      	b.n	80039ca <__gedf2+0x8a>
 80039b6:	9f01      	ldr	r7, [sp, #4]
 80039b8:	4327      	orrs	r7, r4
 80039ba:	d12c      	bne.n	8003a16 <__gedf2+0xd6>
 80039bc:	45b2      	cmp	sl, r6
 80039be:	d024      	beq.n	8003a0a <__gedf2+0xca>
 80039c0:	4663      	mov	r3, ip
 80039c2:	2002      	movs	r0, #2
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4018      	ands	r0, r3
 80039c8:	3801      	subs	r0, #1
 80039ca:	b003      	add	sp, #12
 80039cc:	bcf0      	pop	{r4, r5, r6, r7}
 80039ce:	46bb      	mov	fp, r7
 80039d0:	46b2      	mov	sl, r6
 80039d2:	46a9      	mov	r9, r5
 80039d4:	46a0      	mov	r8, r4
 80039d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d0d9      	beq.n	8003990 <__gedf2+0x50>
 80039dc:	e7e4      	b.n	80039a8 <__gedf2+0x68>
 80039de:	4654      	mov	r4, sl
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	d0ed      	beq.n	80039c0 <__gedf2+0x80>
 80039e4:	4584      	cmp	ip, r0
 80039e6:	d1eb      	bne.n	80039c0 <__gedf2+0x80>
 80039e8:	4556      	cmp	r6, sl
 80039ea:	dce9      	bgt.n	80039c0 <__gedf2+0x80>
 80039ec:	dbde      	blt.n	80039ac <__gedf2+0x6c>
 80039ee:	9b01      	ldr	r3, [sp, #4]
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d8e5      	bhi.n	80039c0 <__gedf2+0x80>
 80039f4:	d1da      	bne.n	80039ac <__gedf2+0x6c>
 80039f6:	45c8      	cmp	r8, r9
 80039f8:	d8e2      	bhi.n	80039c0 <__gedf2+0x80>
 80039fa:	2000      	movs	r0, #0
 80039fc:	45c8      	cmp	r8, r9
 80039fe:	d2e4      	bcs.n	80039ca <__gedf2+0x8a>
 8003a00:	e7d4      	b.n	80039ac <__gedf2+0x6c>
 8003a02:	2000      	movs	r0, #0
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d0e0      	beq.n	80039ca <__gedf2+0x8a>
 8003a08:	e7da      	b.n	80039c0 <__gedf2+0x80>
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	d103      	bne.n	8003a16 <__gedf2+0xd6>
 8003a0e:	4584      	cmp	ip, r0
 8003a10:	d1d6      	bne.n	80039c0 <__gedf2+0x80>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e7d9      	b.n	80039ca <__gedf2+0x8a>
 8003a16:	2002      	movs	r0, #2
 8003a18:	4240      	negs	r0, r0
 8003a1a:	e7d6      	b.n	80039ca <__gedf2+0x8a>
 8003a1c:	4584      	cmp	ip, r0
 8003a1e:	d0e6      	beq.n	80039ee <__gedf2+0xae>
 8003a20:	e7ce      	b.n	80039c0 <__gedf2+0x80>
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	000007ff 	.word	0x000007ff

08003a28 <__ledf2>:
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	4657      	mov	r7, sl
 8003a2c:	464e      	mov	r6, r9
 8003a2e:	4645      	mov	r5, r8
 8003a30:	46de      	mov	lr, fp
 8003a32:	b5e0      	push	{r5, r6, r7, lr}
 8003a34:	000d      	movs	r5, r1
 8003a36:	030f      	lsls	r7, r1, #12
 8003a38:	0004      	movs	r4, r0
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	0fe8      	lsrs	r0, r5, #31
 8003a3e:	0b39      	lsrs	r1, r7, #12
 8003a40:	4684      	mov	ip, r0
 8003a42:	b083      	sub	sp, #12
 8003a44:	0058      	lsls	r0, r3, #1
 8003a46:	4f30      	ldr	r7, [pc, #192]	@ (8003b08 <__ledf2+0xe0>)
 8003a48:	0d40      	lsrs	r0, r0, #21
 8003a4a:	9101      	str	r1, [sp, #4]
 8003a4c:	031e      	lsls	r6, r3, #12
 8003a4e:	0069      	lsls	r1, r5, #1
 8003a50:	4682      	mov	sl, r0
 8003a52:	4691      	mov	r9, r2
 8003a54:	0d49      	lsrs	r1, r1, #21
 8003a56:	0b36      	lsrs	r6, r6, #12
 8003a58:	0fd8      	lsrs	r0, r3, #31
 8003a5a:	42b9      	cmp	r1, r7
 8003a5c:	d020      	beq.n	8003aa0 <__ledf2+0x78>
 8003a5e:	45ba      	cmp	sl, r7
 8003a60:	d00f      	beq.n	8003a82 <__ledf2+0x5a>
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d12b      	bne.n	8003abe <__ledf2+0x96>
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	430c      	orrs	r4, r1
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d137      	bne.n	8003ae0 <__ledf2+0xb8>
 8003a70:	4332      	orrs	r2, r6
 8003a72:	d038      	beq.n	8003ae6 <__ledf2+0xbe>
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d144      	bne.n	8003b02 <__ledf2+0xda>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d119      	bne.n	8003ab0 <__ledf2+0x88>
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	4240      	negs	r0, r0
 8003a80:	e016      	b.n	8003ab0 <__ledf2+0x88>
 8003a82:	4316      	orrs	r6, r2
 8003a84:	d113      	bne.n	8003aae <__ledf2+0x86>
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d102      	bne.n	8003a90 <__ledf2+0x68>
 8003a8a:	9f01      	ldr	r7, [sp, #4]
 8003a8c:	4327      	orrs	r7, r4
 8003a8e:	d0f3      	beq.n	8003a78 <__ledf2+0x50>
 8003a90:	4584      	cmp	ip, r0
 8003a92:	d020      	beq.n	8003ad6 <__ledf2+0xae>
 8003a94:	4663      	mov	r3, ip
 8003a96:	2002      	movs	r0, #2
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4018      	ands	r0, r3
 8003a9c:	3801      	subs	r0, #1
 8003a9e:	e007      	b.n	8003ab0 <__ledf2+0x88>
 8003aa0:	9f01      	ldr	r7, [sp, #4]
 8003aa2:	4327      	orrs	r7, r4
 8003aa4:	d103      	bne.n	8003aae <__ledf2+0x86>
 8003aa6:	458a      	cmp	sl, r1
 8003aa8:	d1f4      	bne.n	8003a94 <__ledf2+0x6c>
 8003aaa:	4316      	orrs	r6, r2
 8003aac:	d01f      	beq.n	8003aee <__ledf2+0xc6>
 8003aae:	2002      	movs	r0, #2
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ab4:	46bb      	mov	fp, r7
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	46a9      	mov	r9, r5
 8003aba:	46a0      	mov	r8, r4
 8003abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003abe:	4654      	mov	r4, sl
 8003ac0:	2c00      	cmp	r4, #0
 8003ac2:	d0e7      	beq.n	8003a94 <__ledf2+0x6c>
 8003ac4:	4584      	cmp	ip, r0
 8003ac6:	d1e5      	bne.n	8003a94 <__ledf2+0x6c>
 8003ac8:	4551      	cmp	r1, sl
 8003aca:	dce3      	bgt.n	8003a94 <__ledf2+0x6c>
 8003acc:	db03      	blt.n	8003ad6 <__ledf2+0xae>
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	42b3      	cmp	r3, r6
 8003ad2:	d8df      	bhi.n	8003a94 <__ledf2+0x6c>
 8003ad4:	d00f      	beq.n	8003af6 <__ledf2+0xce>
 8003ad6:	4663      	mov	r3, ip
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0cf      	beq.n	8003a7c <__ledf2+0x54>
 8003adc:	4660      	mov	r0, ip
 8003ade:	e7e7      	b.n	8003ab0 <__ledf2+0x88>
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d0c9      	beq.n	8003a78 <__ledf2+0x50>
 8003ae4:	e7d4      	b.n	8003a90 <__ledf2+0x68>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d0e1      	beq.n	8003ab0 <__ledf2+0x88>
 8003aec:	e7d2      	b.n	8003a94 <__ledf2+0x6c>
 8003aee:	4584      	cmp	ip, r0
 8003af0:	d1d0      	bne.n	8003a94 <__ledf2+0x6c>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e7dc      	b.n	8003ab0 <__ledf2+0x88>
 8003af6:	45c8      	cmp	r8, r9
 8003af8:	d8cc      	bhi.n	8003a94 <__ledf2+0x6c>
 8003afa:	2000      	movs	r0, #0
 8003afc:	45c8      	cmp	r8, r9
 8003afe:	d2d7      	bcs.n	8003ab0 <__ledf2+0x88>
 8003b00:	e7e9      	b.n	8003ad6 <__ledf2+0xae>
 8003b02:	4584      	cmp	ip, r0
 8003b04:	d0e3      	beq.n	8003ace <__ledf2+0xa6>
 8003b06:	e7c5      	b.n	8003a94 <__ledf2+0x6c>
 8003b08:	000007ff 	.word	0x000007ff

08003b0c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b0c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <__NVIC_SystemReset+0x14>)
 8003b12:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <__NVIC_SystemReset+0x18>)
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b1a:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003b1c:	e7fd      	b.n	8003b1a <__NVIC_SystemReset+0xe>
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	e000ed00 	.word	0xe000ed00
 8003b24:	05fa0004 	.word	0x05fa0004

08003b28 <iap_gpio_init>:
 * 
 * @param  None
 * @retval None
 */
static void iap_gpio_init(void)
{
 8003b28:	b500      	push	{lr}
 8003b2a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	2214      	movs	r2, #20
 8003b2e:	2100      	movs	r1, #0
 8003b30:	a801      	add	r0, sp, #4
 8003b32:	f005 fc55 	bl	80093e0 <memset>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <iap_gpio_init+0x34>)
 8003b38:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4319      	orrs	r1, r3
 8003b3e:	6351      	str	r1, [r2, #52]	@ 0x34
 8003b40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b42:	401a      	ands	r2, r3
 8003b44:	9200      	str	r2, [sp, #0]
 8003b46:	9a00      	ldr	r2, [sp, #0]

	/* Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003b48:	220c      	movs	r2, #12
 8003b4a:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Configure pull-up resistors
 8003b4c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Initialize GPIOB with the configuration
 8003b4e:	20a0      	movs	r0, #160	@ 0xa0
 8003b50:	a901      	add	r1, sp, #4
 8003b52:	05c0      	lsls	r0, r0, #23
 8003b54:	f003 fca2 	bl	800749c <HAL_GPIO_Init>
}
 8003b58:	b007      	add	sp, #28
 8003b5a:	bd00      	pop	{pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <add_pack_head>:
{
 8003b60:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_HEAD_HIGH; // Add high byte of header
 8003b62:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <add_pack_head+0x1c>)
 8003b64:	7803      	ldrb	r3, [r0, #0]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	7002      	strb	r2, [r0, #0]
 8003b6c:	4904      	ldr	r1, [pc, #16]	@ (8003b80 <add_pack_head+0x20>)
 8003b6e:	24aa      	movs	r4, #170	@ 0xaa
 8003b70:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_HEAD_LOW;  // Add low byte of header
 8003b72:	3302      	adds	r3, #2
 8003b74:	7003      	strb	r3, [r0, #0]
 8003b76:	2355      	movs	r3, #85	@ 0x55
 8003b78:	548b      	strb	r3, [r1, r2]
}
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	2000018c 	.word	0x2000018c
 8003b80:	20000190 	.word	0x20000190

08003b84 <add_pack_end>:
{
 8003b84:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_END_HIGH; // Add high byte of footer
 8003b86:	4806      	ldr	r0, [pc, #24]	@ (8003ba0 <add_pack_end+0x1c>)
 8003b88:	7803      	ldrb	r3, [r0, #0]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	7002      	strb	r2, [r0, #0]
 8003b90:	4904      	ldr	r1, [pc, #16]	@ (8003ba4 <add_pack_end+0x20>)
 8003b92:	2455      	movs	r4, #85	@ 0x55
 8003b94:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_END_LOW;  // Add low byte of footer
 8003b96:	3302      	adds	r3, #2
 8003b98:	7003      	strb	r3, [r0, #0]
 8003b9a:	23aa      	movs	r3, #170	@ 0xaa
 8003b9c:	548b      	strb	r3, [r1, r2]
}
 8003b9e:	bd10      	pop	{r4, pc}
 8003ba0:	2000018c 	.word	0x2000018c
 8003ba4:	20000190 	.word	0x20000190

08003ba8 <head_end_check>:
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003ba8:	7803      	ldrb	r3, [r0, #0]
 8003baa:	2baa      	cmp	r3, #170	@ 0xaa
 8003bac:	d001      	beq.n	8003bb2 <head_end_check+0xa>
    return CHECK_ERROR; // Return error if checks fail
 8003bae:	2000      	movs	r0, #0
}
 8003bb0:	4770      	bx	lr
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003bb2:	7843      	ldrb	r3, [r0, #1]
 8003bb4:	2b55      	cmp	r3, #85	@ 0x55
 8003bb6:	d001      	beq.n	8003bbc <head_end_check+0x14>
    return CHECK_ERROR; // Return error if checks fail
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e7f9      	b.n	8003bb0 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003bbc:	1843      	adds	r3, r0, r1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	781b      	ldrb	r3, [r3, #0]
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003bc2:	2baa      	cmp	r3, #170	@ 0xaa
 8003bc4:	d001      	beq.n	8003bca <head_end_check+0x22>
    return CHECK_ERROR; // Return error if checks fail
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e7f2      	b.n	8003bb0 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003bca:	1840      	adds	r0, r0, r1
 8003bcc:	3802      	subs	r0, #2
 8003bce:	7803      	ldrb	r3, [r0, #0]
 8003bd0:	2b55      	cmp	r3, #85	@ 0x55
 8003bd2:	d001      	beq.n	8003bd8 <head_end_check+0x30>
    return CHECK_ERROR; // Return error if checks fail
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e7eb      	b.n	8003bb0 <head_end_check+0x8>
        return CHECK_PASS; // Return success if checks pass
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e7e9      	b.n	8003bb0 <head_end_check+0x8>

08003bdc <crc_check>:
{
 8003bdc:	b530      	push	{r4, r5, lr}
    uint8_t crc = buffer[size - 3]; // Extract the CRC from the packet
 8003bde:	3903      	subs	r1, #3
 8003be0:	5c45      	ldrb	r5, [r0, r1]
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003be2:	2200      	movs	r2, #0
    uint8_t temp = 0;
 8003be4:	2100      	movs	r1, #0
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003be6:	e005      	b.n	8003bf4 <crc_check+0x18>
        temp += buffer[i + 4]; // Start after header, offset by 4
 8003be8:	1883      	adds	r3, r0, r2
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	1859      	adds	r1, r3, r1
 8003bee:	b2c9      	uxtb	r1, r1
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003bf0:	3201      	adds	r2, #1
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	78c3      	ldrb	r3, [r0, #3]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	7884      	ldrb	r4, [r0, #2]
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	dbf2      	blt.n	8003be8 <crc_check+0xc>
    if (crc == temp)
 8003c02:	42a9      	cmp	r1, r5
 8003c04:	d001      	beq.n	8003c0a <crc_check+0x2e>
    return CHECK_ERROR; // CRC does not match
 8003c06:	2000      	movs	r0, #0
}
 8003c08:	bd30      	pop	{r4, r5, pc}
        return CHECK_PASS; // CRC matches
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	e7fc      	b.n	8003c08 <crc_check+0x2c>

08003c0e <pack_check>:
{
 8003c0e:	b570      	push	{r4, r5, r6, lr}
 8003c10:	0005      	movs	r5, r0
 8003c12:	000c      	movs	r4, r1
    if (size <= 4)
 8003c14:	2904      	cmp	r1, #4
 8003c16:	d90d      	bls.n	8003c34 <pack_check+0x26>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003c18:	f7ff ffc6 	bl	8003ba8 <head_end_check>
 8003c1c:	2801      	cmp	r0, #1
 8003c1e:	d001      	beq.n	8003c24 <pack_check+0x16>
    return CHECK_ERROR; // Packet is invalid
 8003c20:	2000      	movs	r0, #0
}
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
        crc_check(buffer, size) == CHECK_PASS)
 8003c24:	0021      	movs	r1, r4
 8003c26:	0028      	movs	r0, r5
 8003c28:	f7ff ffd8 	bl	8003bdc <crc_check>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003c2c:	2801      	cmp	r0, #1
 8003c2e:	d0f8      	beq.n	8003c22 <pack_check+0x14>
    return CHECK_ERROR; // Packet is invalid
 8003c30:	2000      	movs	r0, #0
 8003c32:	e7f6      	b.n	8003c22 <pack_check+0x14>
        return CHECK_ERROR; // Packet is too small
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f4      	b.n	8003c22 <pack_check+0x14>

08003c38 <crc_construct>:
{
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	0004      	movs	r4, r0
    for (uint16_t i = 0; i < size; i++)
 8003c3c:	2300      	movs	r3, #0
    uint8_t temp = 0;
 8003c3e:	2000      	movs	r0, #0
    for (uint16_t i = 0; i < size; i++)
 8003c40:	e004      	b.n	8003c4c <crc_construct+0x14>
        temp += buffer[i];
 8003c42:	5ce2      	ldrb	r2, [r4, r3]
 8003c44:	1810      	adds	r0, r2, r0
 8003c46:	b2c0      	uxtb	r0, r0
    for (uint16_t i = 0; i < size; i++)
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d3f8      	bcc.n	8003c42 <crc_construct+0xa>
}
 8003c50:	bd10      	pop	{r4, pc}

08003c52 <uart_in_send>:
{
 8003c52:	b510      	push	{r4, lr}
    usart2_transmit_dma(buffer, size); // Send data using USART1 in DMA mode
 8003c54:	f002 fa6c 	bl	8006130 <usart2_transmit_dma>
}
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <uart_out_send>:
{
 8003c5a:	b510      	push	{r4, lr}
    usart1_transmit_dma(buffer, size); // Send data using USART2 in DMA mode
 8003c5c:	f002 fa50 	bl	8006100 <usart1_transmit_dma>
}
 8003c60:	bd10      	pop	{r4, pc}
	...

08003c64 <chain_enum_handle>:
{
 8003c64:	b510      	push	{r4, lr}
	buffer[6]++;
 8003c66:	7983      	ldrb	r3, [r0, #6]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	7183      	strb	r3, [r0, #6]
	buffer[7]++;
 8003c6c:	79c3      	ldrb	r3, [r0, #7]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	71c3      	strb	r3, [r0, #7]
	if (g_tail_status == CHAIN_TAIL_DEVICE)
 8003c72:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <chain_enum_handle+0x24>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d002      	beq.n	8003c80 <chain_enum_handle+0x1c>
		uart_out_send(buffer, size); // Forward to the master
 8003c7a:	f7ff ffee 	bl	8003c5a <uart_out_send>
}
 8003c7e:	bd10      	pop	{r4, pc}
		uart_in_send(buffer, size); // Forward to the slave
 8003c80:	f7ff ffe7 	bl	8003c52 <uart_in_send>
 8003c84:	e7fb      	b.n	8003c7e <chain_enum_handle+0x1a>
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	200000c1 	.word	0x200000c1

08003c8c <chain_enum_return_handle>:
{
 8003c8c:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003c8e:	f7ff ffe0 	bl	8003c52 <uart_in_send>
}
 8003c92:	bd10      	pop	{r4, pc}

08003c94 <chain_enum_please_handle>:
{
 8003c94:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003c96:	f7ff ffdc 	bl	8003c52 <uart_in_send>
}
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <chain_heartbeat_in_receive_handle>:
{
 8003c9c:	b510      	push	{r4, lr}
	uart_in_send(g_heartbeat_data_pack_buf, sizeof(g_heartbeat_data_pack_buf)); // Send heartbeat data
 8003c9e:	4802      	ldr	r0, [pc, #8]	@ (8003ca8 <chain_heartbeat_in_receive_handle+0xc>)
 8003ca0:	2109      	movs	r1, #9
 8003ca2:	f7ff ffd6 	bl	8003c52 <uart_in_send>
}
 8003ca6:	bd10      	pop	{r4, pc}
 8003ca8:	200000c4 	.word	0x200000c4

08003cac <chain_heartbeat_out_receive_handle>:
{
 8003cac:	b510      	push	{r4, lr}
	g_heartbeat_reply_status_buf[(g_reply_index + 2) % 3] = 1; // Update the heartbeat reply status
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <chain_heartbeat_out_receive_handle+0x18>)
 8003cb0:	7818      	ldrb	r0, [r3, #0]
 8003cb2:	3002      	adds	r0, #2
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	f7fe fb97 	bl	80023e8 <__aeabi_idivmod>
 8003cba:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <chain_heartbeat_out_receive_handle+0x1c>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	545a      	strb	r2, [r3, r1]
}
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	200010ec 	.word	0x200010ec
 8003cc8:	200010f0 	.word	0x200010f0

08003ccc <chain_deal_data_packet_handle>:
{
 8003ccc:	b510      	push	{r4, lr}
	if (g_cmd_status == CMD_SPACE_IDLE_STATUS)
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <chain_deal_data_packet_handle+0x44>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d119      	bne.n	8003d0c <chain_deal_data_packet_handle+0x40>
		g_cmd_size = 0;						  // Reset command size
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <chain_deal_data_packet_handle+0x48>)
 8003cda:	2100      	movs	r1, #0
 8003cdc:	7019      	strb	r1, [r3, #0]
		g_cmd_status = CMD_SPACE_BUSY_STATUS; // Set command status to busy
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <chain_deal_data_packet_handle+0x44>)
 8003ce0:	3101      	adds	r1, #1
 8003ce2:	7019      	strb	r1, [r3, #0]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003ce4:	e00b      	b.n	8003cfe <chain_deal_data_packet_handle+0x32>
			g_cmd_buf[g_cmd_size++] = buffer[i + 5]; // Copy data from the buffer
 8003ce6:	490b      	ldr	r1, [pc, #44]	@ (8003d14 <chain_deal_data_packet_handle+0x48>)
 8003ce8:	780b      	ldrb	r3, [r1, #0]
 8003cea:	b2dc      	uxtb	r4, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	700b      	strb	r3, [r1, #0]
 8003cf2:	1883      	adds	r3, r0, r2
 8003cf4:	7959      	ldrb	r1, [r3, #5]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <chain_deal_data_packet_handle+0x4c>)
 8003cf8:	5519      	strb	r1, [r3, r4]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	78c3      	ldrb	r3, [r0, #3]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	7881      	ldrb	r1, [r0, #2]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	3b02      	subs	r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbec      	blt.n	8003ce6 <chain_deal_data_packet_handle+0x1a>
}
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	200006e5 	.word	0x200006e5
 8003d14:	200006e6 	.word	0x200006e6
 8003d18:	200006e8 	.word	0x200006e8

08003d1c <chain_out_relay_handle>:
{
 8003d1c:	b510      	push	{r4, lr}
	buffer[4]--;				 // Index decrement
 8003d1e:	7903      	ldrb	r3, [r0, #4]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]--;			 // CRC update
 8003d24:	1eca      	subs	r2, r1, #3
 8003d26:	5c83      	ldrb	r3, [r0, r2]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	5483      	strb	r3, [r0, r2]
	uart_out_send(buffer, size); // Forward to the lower level
 8003d2c:	f7ff ff95 	bl	8003c5a <uart_out_send>
}
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <chain_in_relay_handle>:
{
 8003d32:	b510      	push	{r4, lr}
	buffer[4]++;				// Index increment
 8003d34:	7903      	ldrb	r3, [r0, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]++;			// CRC update
 8003d3a:	1eca      	subs	r2, r1, #3
 8003d3c:	5c83      	ldrb	r3, [r0, r2]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	5483      	strb	r3, [r0, r2]
	uart_in_send(buffer, size); // Forward to the upper level
 8003d42:	f7ff ff86 	bl	8003c52 <uart_in_send>
}
 8003d46:	bd10      	pop	{r4, pc}

08003d48 <chain_command_complete_return>:
{
 8003d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4a:	46c6      	mov	lr, r8
 8003d4c:	b500      	push	{lr}
 8003d4e:	4680      	mov	r8, r0
 8003d50:	000f      	movs	r7, r1
 8003d52:	0016      	movs	r6, r2
	s_send_len = 0;
 8003d54:	4c1e      	ldr	r4, [pc, #120]	@ (8003dd0 <chain_command_complete_return+0x88>)
 8003d56:	2300      	movs	r3, #0
 8003d58:	7023      	strb	r3, [r4, #0]
	uint16_t len = size + 3;
 8003d5a:	1cd5      	adds	r5, r2, #3
 8003d5c:	b2ad      	uxth	r5, r5
	add_pack_head();
 8003d5e:	f7ff feff 	bl	8003b60 <add_pack_head>
	s_send_buf[s_send_len++] = (uint8_t)(len & 0xFF);
 8003d62:	7823      	ldrb	r3, [r4, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	7022      	strb	r2, [r4, #0]
 8003d6a:	491a      	ldr	r1, [pc, #104]	@ (8003dd4 <chain_command_complete_return+0x8c>)
 8003d6c:	54cd      	strb	r5, [r1, r3]
	s_send_buf[s_send_len++] = (uint8_t)((len >> 8) & 0xFF);
 8003d6e:	1c98      	adds	r0, r3, #2
 8003d70:	b2c0      	uxtb	r0, r0
 8003d72:	7020      	strb	r0, [r4, #0]
 8003d74:	0a2d      	lsrs	r5, r5, #8
 8003d76:	548d      	strb	r5, [r1, r2]
	s_send_buf[s_send_len++] = DEFAULT_INDEX;
 8003d78:	1cda      	adds	r2, r3, #3
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	7022      	strb	r2, [r4, #0]
 8003d7e:	2501      	movs	r5, #1
 8003d80:	540d      	strb	r5, [r1, r0]
	s_send_buf[s_send_len++] = cmd;
 8003d82:	3304      	adds	r3, #4
 8003d84:	7023      	strb	r3, [r4, #0]
 8003d86:	4643      	mov	r3, r8
 8003d88:	548b      	strb	r3, [r1, r2]
	for (uint8_t i = 0; i < size; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e008      	b.n	8003da0 <chain_command_complete_return+0x58>
		s_send_buf[s_send_len++] = buffer[i]; // Add data from buffer
 8003d8e:	4c10      	ldr	r4, [pc, #64]	@ (8003dd0 <chain_command_complete_return+0x88>)
 8003d90:	7820      	ldrb	r0, [r4, #0]
 8003d92:	1c42      	adds	r2, r0, #1
 8003d94:	7022      	strb	r2, [r4, #0]
 8003d96:	5cfd      	ldrb	r5, [r7, r3]
 8003d98:	4c0e      	ldr	r4, [pc, #56]	@ (8003dd4 <chain_command_complete_return+0x8c>)
 8003d9a:	5425      	strb	r5, [r4, r0]
	for (uint8_t i = 0; i < size; i++)
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	42b3      	cmp	r3, r6
 8003da2:	d3f4      	bcc.n	8003d8e <chain_command_complete_return+0x46>
	s_send_buf[s_send_len] = crc_construct((uint8_t *)(s_send_buf + 4),
 8003da4:	4e0a      	ldr	r6, [pc, #40]	@ (8003dd0 <chain_command_complete_return+0x88>)
 8003da6:	7835      	ldrb	r5, [r6, #0]
 8003da8:	1f29      	subs	r1, r5, #4
 8003daa:	b289      	uxth	r1, r1
 8003dac:	4c0a      	ldr	r4, [pc, #40]	@ (8003dd8 <chain_command_complete_return+0x90>)
 8003dae:	0020      	movs	r0, r4
 8003db0:	f7ff ff42 	bl	8003c38 <crc_construct>
 8003db4:	3c04      	subs	r4, #4
 8003db6:	5560      	strb	r0, [r4, r5]
	s_send_len++;
 8003db8:	3501      	adds	r5, #1
 8003dba:	7035      	strb	r5, [r6, #0]
	add_pack_end();
 8003dbc:	f7ff fee2 	bl	8003b84 <add_pack_end>
	uart_in_send(s_send_buf, s_send_len); // Send the complete packet
 8003dc0:	7831      	ldrb	r1, [r6, #0]
 8003dc2:	0020      	movs	r0, r4
 8003dc4:	f7ff ff45 	bl	8003c52 <uart_in_send>
}
 8003dc8:	bc80      	pop	{r7}
 8003dca:	46b8      	mov	r8, r7
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	2000018c 	.word	0x2000018c
 8003dd4:	20000190 	.word	0x20000190
 8003dd8:	20000194 	.word	0x20000194

08003ddc <chain_get_bootloader_version_handle>:
{
 8003ddc:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_BOOTLOADER_VERSION,
 8003dde:	4903      	ldr	r1, [pc, #12]	@ (8003dec <chain_get_bootloader_version_handle+0x10>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	20f9      	movs	r0, #249	@ 0xf9
 8003de4:	f7ff ffb0 	bl	8003d48 <chain_command_complete_return>
}
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	200006e4 	.word	0x200006e4

08003df0 <chain_get_firmware_version_handle>:
{
 8003df0:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_VERSION_DEVICE,
 8003df2:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <chain_get_firmware_version_handle+0x10>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	20fa      	movs	r0, #250	@ 0xfa
 8003df8:	f7ff ffa6 	bl	8003d48 <chain_command_complete_return>
}
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	200000c0 	.word	0x200000c0

08003e04 <chain_get_device_type_handle>:
{
 8003e04:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_DEVICE_TYPE,
 8003e06:	4903      	ldr	r1, [pc, #12]	@ (8003e14 <chain_get_device_type_handle+0x10>)
 8003e08:	2202      	movs	r2, #2
 8003e0a:	20fb      	movs	r0, #251	@ 0xfb
 8003e0c:	f7ff ff9c 	bl	8003d48 <chain_command_complete_return>
}
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	200006e2 	.word	0x200006e2

08003e18 <chain_iap_update_handle>:
 * 
 * @param  data Verification bit
 * @retval None
 */
void chain_iap_update_handle(uint8_t data)
{
 8003e18:	b530      	push	{r4, r5, lr}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	466b      	mov	r3, sp
 8003e1e:	1ddd      	adds	r5, r3, #7
 8003e20:	71d8      	strb	r0, [r3, #7]
	uint32_t reset_wait_start = HAL_GetTick(); // Get the current tick count
 8003e22:	f002 fa9b 	bl	800635c <HAL_GetTick>
 8003e26:	0004      	movs	r4, r0
	if (data == 0x86) // Check for expected data
 8003e28:	782b      	ldrb	r3, [r5, #0]
 8003e2a:	2b86      	cmp	r3, #134	@ 0x86
 8003e2c:	d001      	beq.n	8003e32 <chain_iap_update_handle+0x1a>
		{
			NVIC_SystemReset(); // Reset the microcontroller
		}
		NVIC_SystemReset(); // Reset the microcontroller again
	}
}
 8003e2e:	b003      	add	sp, #12
 8003e30:	bd30      	pop	{r4, r5, pc}
		chain_command_complete_return(CHAIN_IAP_UPDATE,
 8003e32:	2201      	movs	r2, #1
 8003e34:	0029      	movs	r1, r5
 8003e36:	20ff      	movs	r0, #255	@ 0xff
 8003e38:	f7ff ff86 	bl	8003d48 <chain_command_complete_return>
		HAL_Delay(10); // Delay to ensure packet is sent
 8003e3c:	200a      	movs	r0, #10
 8003e3e:	f002 fa93 	bl	8006368 <HAL_Delay>
		LL_USART_DeInit(USART2); // Deinitialize USART1
 8003e42:	4d1b      	ldr	r5, [pc, #108]	@ (8003eb0 <chain_iap_update_handle+0x98>)
 8003e44:	0028      	movs	r0, r5
 8003e46:	f005 f961 	bl	800910c <LL_USART_DeInit>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003e4a:	682b      	ldr	r3, [r5, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4393      	bics	r3, r2
 8003e50:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	321f      	adds	r2, #31
 8003e5e:	4393      	bics	r3, r2
 8003e60:	602b      	str	r3, [r5, #0]
 8003e62:	f381 8810 	msr	PRIMASK, r1
		iap_gpio_init(); // Initialize GPIO for IAP
 8003e66:	f7ff fe5f 	bl	8003b28 <iap_gpio_init>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8003e6a:	e006      	b.n	8003e7a <chain_iap_update_handle+0x62>
			if (HAL_GetTick() - reset_wait_start > 1000) // Check timeout
 8003e6c:	f002 fa76 	bl	800635c <HAL_GetTick>
 8003e70:	1b00      	subs	r0, r0, r4
 8003e72:	22fa      	movs	r2, #250	@ 0xfa
 8003e74:	0092      	lsls	r2, r2, #2
 8003e76:	4290      	cmp	r0, r2
 8003e78:	d80d      	bhi.n	8003e96 <chain_iap_update_handle+0x7e>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8003e7a:	20a0      	movs	r0, #160	@ 0xa0
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	05c0      	lsls	r0, r0, #23
 8003e80:	f003 fc46 	bl	8007710 <HAL_GPIO_ReadPin>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d1f1      	bne.n	8003e6c <chain_iap_update_handle+0x54>
 8003e88:	30a0      	adds	r0, #160	@ 0xa0
 8003e8a:	2108      	movs	r1, #8
 8003e8c:	05c0      	lsls	r0, r0, #23
 8003e8e:	f003 fc3f 	bl	8007710 <HAL_GPIO_ReadPin>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1ea      	bne.n	8003e6c <chain_iap_update_handle+0x54>
		if (HAL_GetTick() - reset_wait_start > 1000) // Check if timed out
 8003e96:	f002 fa61 	bl	800635c <HAL_GetTick>
 8003e9a:	1b00      	subs	r0, r0, r4
 8003e9c:	23fa      	movs	r3, #250	@ 0xfa
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4298      	cmp	r0, r3
 8003ea2:	d903      	bls.n	8003eac <chain_iap_update_handle+0x94>
			MX_USART1_UART_Init(); // Reinitialize USART1 if no reset occurred
 8003ea4:	f001 fef0 	bl	8005c88 <MX_USART1_UART_Init>
		NVIC_SystemReset(); // Reset the microcontroller again
 8003ea8:	f7ff fe30 	bl	8003b0c <__NVIC_SystemReset>
			NVIC_SystemReset(); // Reset the microcontroller
 8003eac:	f7ff fe2e 	bl	8003b0c <__NVIC_SystemReset>
 8003eb0:	40004400 	.word	0x40004400

08003eb4 <check_i2c_mode>:
	MX_I2C2_Init(g_gpio_status[0].i2c_speed);
	__enable_irq();
}

bool check_i2c_mode(void) {
	if (g_gpio_status[0].mode == CHAIN_I2C_WORK_STATUS
 8003eb4:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <check_i2c_mode+0x1c>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d001      	beq.n	8003ec0 <check_i2c_mode+0xc>
			&& g_gpio_status[1].mode == CHAIN_I2C_WORK_STATUS) {
		return true;
	}
	return false;
 8003ebc:	2000      	movs	r0, #0
}
 8003ebe:	4770      	bx	lr
			&& g_gpio_status[1].mode == CHAIN_I2C_WORK_STATUS) {
 8003ec0:	4b03      	ldr	r3, [pc, #12]	@ (8003ed0 <check_i2c_mode+0x1c>)
 8003ec2:	7a1b      	ldrb	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d001      	beq.n	8003ecc <check_i2c_mode+0x18>
	return false;
 8003ec8:	2000      	movs	r0, #0
 8003eca:	e7f8      	b.n	8003ebe <check_i2c_mode+0xa>
		return true;
 8003ecc:	2001      	movs	r0, #1
 8003ece:	e7f6      	b.n	8003ebe <check_i2c_mode+0xa>
 8003ed0:	20000390 	.word	0x20000390

08003ed4 <chain_uart_i2c_init>:
void chain_uart_i2c_init(i2c_speed_t speed) {
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	0004      	movs	r4, r0
	if (speed >= CHAIN_I2C_LOW_SPEED_100KHZ
 8003ed8:	2801      	cmp	r0, #1
 8003eda:	d90b      	bls.n	8003ef4 <chain_uart_i2c_init+0x20>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
		chain_command_complete_return(CHAIN_I2C_INIT, s_ret_buf,
				s_ret_buf_size);
	} else {
		s_ret_buf_size = 0;
 8003edc:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <chain_uart_i2c_init+0x54>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	7019      	strb	r1, [r3, #0]
 8003ee6:	4911      	ldr	r1, [pc, #68]	@ (8003f2c <chain_uart_i2c_init+0x58>)
 8003ee8:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_INIT, s_ret_buf,
 8003eea:	3201      	adds	r2, #1
 8003eec:	2010      	movs	r0, #16
 8003eee:	f7ff ff2b 	bl	8003d48 <chain_command_complete_return>
				s_ret_buf_size);
	}
}
 8003ef2:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef4:	b672      	cpsid	i
		HAL_I2C_MspDeInit(&hi2c2);
 8003ef6:	480e      	ldr	r0, [pc, #56]	@ (8003f30 <chain_uart_i2c_init+0x5c>)
 8003ef8:	f001 fa14 	bl	8005324 <HAL_I2C_MspDeInit>
		HAL_ADC_MspDeInit(&hadc1);
 8003efc:	480d      	ldr	r0, [pc, #52]	@ (8003f34 <chain_uart_i2c_init+0x60>)
 8003efe:	f001 f909 	bl	8005114 <HAL_ADC_MspDeInit>
		MX_I2C2_Init(speed);
 8003f02:	0020      	movs	r0, r4
 8003f04:	f001 f9c8 	bl	8005298 <MX_I2C2_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8003f08:	b662      	cpsie	i
		g_gpio_status[0].mode = CHAIN_I2C_WORK_STATUS;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <chain_uart_i2c_init+0x64>)
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	701a      	strb	r2, [r3, #0]
		g_gpio_status[1].mode = CHAIN_I2C_WORK_STATUS;
 8003f10:	721a      	strb	r2, [r3, #8]
		s_ret_buf_size = 0;
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <chain_uart_i2c_init+0x54>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8003f18:	3201      	adds	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	4903      	ldr	r1, [pc, #12]	@ (8003f2c <chain_uart_i2c_init+0x58>)
 8003f1e:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_INIT, s_ret_buf,
 8003f20:	2010      	movs	r0, #16
 8003f22:	f7ff ff11 	bl	8003d48 <chain_command_complete_return>
 8003f26:	e7e4      	b.n	8003ef2 <chain_uart_i2c_init+0x1e>
 8003f28:	200004a8 	.word	0x200004a8
 8003f2c:	200004ac 	.word	0x200004ac
 8003f30:	2000068c 	.word	0x2000068c
 8003f34:	20000628 	.word	0x20000628
 8003f38:	20000390 	.word	0x20000390

08003f3c <chain_i2c_read>:

void chain_i2c_read(uint8_t i2c_addr, uint8_t read_len) {
 8003f3c:	b530      	push	{r4, r5, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	0005      	movs	r5, r0
 8003f42:	000c      	movs	r4, r1
	if (check_i2c_mode()) {
 8003f44:	f7ff ffb6 	bl	8003eb4 <check_i2c_mode>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d041      	beq.n	8003fd0 <chain_i2c_read+0x94>
		if (i2c_addr <= 127) {
 8003f4c:	b26b      	sxtb	r3, r5
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db32      	blt.n	8003fb8 <chain_i2c_read+0x7c>
			HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2,
 8003f52:	4a26      	ldr	r2, [pc, #152]	@ (8003fec <chain_i2c_read+0xb0>)
 8003f54:	0069      	lsls	r1, r5, #1
 8003f56:	4826      	ldr	r0, [pc, #152]	@ (8003ff0 <chain_i2c_read+0xb4>)
 8003f58:	23fa      	movs	r3, #250	@ 0xfa
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	0023      	movs	r3, r4
 8003f60:	f003 ff4c 	bl	8007dfc <HAL_I2C_Master_Receive>
					(i2c_addr << 1), s_i2c_buffer, read_len, 1000);
			if (status == HAL_ERROR) {
 8003f64:	2801      	cmp	r0, #1
 8003f66:	d11b      	bne.n	8003fa0 <chain_i2c_read+0x64>
				s_ret_buf_size = 0;
 8003f68:	4b22      	ldr	r3, [pc, #136]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8003f6e:	3201      	adds	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003f74:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < read_len; i++) {
 8003f76:	2200      	movs	r2, #0
 8003f78:	e009      	b.n	8003f8e <chain_i2c_read+0x52>
					s_ret_buf[s_ret_buf_size++] = s_i2c_buffer[i];
 8003f7a:	491e      	ldr	r1, [pc, #120]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003f7c:	780b      	ldrb	r3, [r1, #0]
 8003f7e:	1c58      	adds	r0, r3, #1
 8003f80:	7008      	strb	r0, [r1, #0]
 8003f82:	491a      	ldr	r1, [pc, #104]	@ (8003fec <chain_i2c_read+0xb0>)
 8003f84:	5c88      	ldrb	r0, [r1, r2]
 8003f86:	491c      	ldr	r1, [pc, #112]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003f88:	54c8      	strb	r0, [r1, r3]
				for (uint8_t i = 0; i < read_len; i++) {
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	42a2      	cmp	r2, r4
 8003f90:	d3f3      	bcc.n	8003f7a <chain_i2c_read+0x3e>
				}
				chain_command_complete_return(CHAIN_I2C_READ, s_ret_buf,
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	4918      	ldr	r1, [pc, #96]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003f98:	2011      	movs	r0, #17
 8003f9a:	f7ff fed5 	bl	8003d48 <chain_command_complete_return>
 8003f9e:	e022      	b.n	8003fe6 <chain_i2c_read+0xaa>
						s_ret_buf_size);
			} else {
				if (status == HAL_ERROR) {
					reast_i2c();
				}
				s_ret_buf_size = 0;
 8003fa0:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	7019      	strb	r1, [r3, #0]
 8003faa:	4913      	ldr	r1, [pc, #76]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003fac:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_READ, s_ret_buf,
 8003fae:	3201      	adds	r2, #1
 8003fb0:	2011      	movs	r0, #17
 8003fb2:	f7ff fec9 	bl	8003d48 <chain_command_complete_return>
 8003fb6:	e016      	b.n	8003fe6 <chain_i2c_read+0xaa>
						s_ret_buf_size);
			}
		} else {
			s_ret_buf_size = 0;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
			s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	7019      	strb	r1, [r3, #0]
 8003fc2:	490d      	ldr	r1, [pc, #52]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003fc4:	700a      	strb	r2, [r1, #0]
			chain_command_complete_return(CHAIN_I2C_READ, s_ret_buf,
 8003fc6:	3201      	adds	r2, #1
 8003fc8:	2011      	movs	r0, #17
 8003fca:	f7ff febd 	bl	8003d48 <chain_command_complete_return>
 8003fce:	e00a      	b.n	8003fe6 <chain_i2c_read+0xaa>
					s_ret_buf_size);
		}
	} else {
		s_ret_buf_size = 0;
 8003fd0:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <chain_i2c_read+0xb8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	4907      	ldr	r1, [pc, #28]	@ (8003ff8 <chain_i2c_read+0xbc>)
 8003fdc:	2302      	movs	r3, #2
 8003fde:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_READ, s_ret_buf,
 8003fe0:	2011      	movs	r0, #17
 8003fe2:	f7ff feb1 	bl	8003d48 <chain_command_complete_return>
				s_ret_buf_size);
	}
}
 8003fe6:	b003      	add	sp, #12
 8003fe8:	bd30      	pop	{r4, r5, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	200003a8 	.word	0x200003a8
 8003ff0:	2000068c 	.word	0x2000068c
 8003ff4:	200004a8 	.word	0x200004a8
 8003ff8:	200004ac 	.word	0x200004ac

08003ffc <chain_i2c_write>:
void chain_i2c_write(uint8_t i2c_addr, uint8_t *buffer, uint16_t write_len) {
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	0004      	movs	r4, r0
 8004002:	000d      	movs	r5, r1
 8004004:	0016      	movs	r6, r2
	if (check_i2c_mode()) {
 8004006:	f7ff ff55 	bl	8003eb4 <check_i2c_mode>
 800400a:	2800      	cmp	r0, #0
 800400c:	d030      	beq.n	8004070 <chain_i2c_write+0x74>
		if (i2c_addr <= 127) {
 800400e:	b263      	sxtb	r3, r4
 8004010:	2b00      	cmp	r3, #0
 8004012:	db21      	blt.n	8004058 <chain_i2c_write+0x5c>
			HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2,
 8004014:	0061      	lsls	r1, r4, #1
 8004016:	481d      	ldr	r0, [pc, #116]	@ (800408c <chain_i2c_write+0x90>)
 8004018:	23fa      	movs	r3, #250	@ 0xfa
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0033      	movs	r3, r6
 8004020:	002a      	movs	r2, r5
 8004022:	f003 fe1f 	bl	8007c64 <HAL_I2C_Master_Transmit>
					(i2c_addr << 1), buffer, write_len, 1000);
			if (status == HAL_ERROR) {
 8004026:	2801      	cmp	r0, #1
 8004028:	d00b      	beq.n	8004042 <chain_i2c_write+0x46>
						s_ret_buf_size);
			} else {
				if (status == HAL_ERROR) {
					reast_i2c();
				}
				s_ret_buf_size = 0;
 800402a:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <chain_i2c_write+0x94>)
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8004030:	2101      	movs	r1, #1
 8004032:	7019      	strb	r1, [r3, #0]
 8004034:	4917      	ldr	r1, [pc, #92]	@ (8004094 <chain_i2c_write+0x98>)
 8004036:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_WRITE, s_ret_buf,
 8004038:	3201      	adds	r2, #1
 800403a:	2012      	movs	r0, #18
 800403c:	f7ff fe84 	bl	8003d48 <chain_command_complete_return>
 8004040:	e021      	b.n	8004086 <chain_i2c_write+0x8a>
				s_ret_buf_size = 0;
 8004042:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <chain_i2c_write+0x94>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8004048:	3201      	adds	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	4911      	ldr	r1, [pc, #68]	@ (8004094 <chain_i2c_write+0x98>)
 800404e:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_WRITE, s_ret_buf,
 8004050:	3011      	adds	r0, #17
 8004052:	f7ff fe79 	bl	8003d48 <chain_command_complete_return>
 8004056:	e016      	b.n	8004086 <chain_i2c_write+0x8a>
						s_ret_buf_size);
			}
		} else {
			s_ret_buf_size = 0;
 8004058:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <chain_i2c_write+0x94>)
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
			s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 800405e:	2101      	movs	r1, #1
 8004060:	7019      	strb	r1, [r3, #0]
 8004062:	490c      	ldr	r1, [pc, #48]	@ (8004094 <chain_i2c_write+0x98>)
 8004064:	700a      	strb	r2, [r1, #0]
			chain_command_complete_return(CHAIN_I2C_WRITE, s_ret_buf,
 8004066:	3201      	adds	r2, #1
 8004068:	2012      	movs	r0, #18
 800406a:	f7ff fe6d 	bl	8003d48 <chain_command_complete_return>
 800406e:	e00a      	b.n	8004086 <chain_i2c_write+0x8a>
					s_ret_buf_size);
		}
	} else {
		s_ret_buf_size = 0;
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <chain_i2c_write+0x94>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8004076:	3201      	adds	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	4906      	ldr	r1, [pc, #24]	@ (8004094 <chain_i2c_write+0x98>)
 800407c:	2302      	movs	r3, #2
 800407e:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_WRITE, s_ret_buf,
 8004080:	2012      	movs	r0, #18
 8004082:	f7ff fe61 	bl	8003d48 <chain_command_complete_return>
				s_ret_buf_size);
	}
}
 8004086:	b002      	add	sp, #8
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	2000068c 	.word	0x2000068c
 8004090:	200004a8 	.word	0x200004a8
 8004094:	200004ac 	.word	0x200004ac

08004098 <chain_i2c_mem_read>:

void chain_i2c_mem_read(uint8_t i2c_addr, uint16_t reg_addr, uint8_t reg_len,
		uint8_t read_len) {
 8004098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409a:	b085      	sub	sp, #20
 800409c:	0004      	movs	r4, r0
 800409e:	000f      	movs	r7, r1
 80040a0:	0016      	movs	r6, r2
 80040a2:	001d      	movs	r5, r3
	if (check_i2c_mode()) {
 80040a4:	f7ff ff06 	bl	8003eb4 <check_i2c_mode>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d049      	beq.n	8004140 <chain_i2c_mem_read+0xa8>
		if (i2c_addr <= 127 && (reg_len >= 1 && reg_len <= 2)) {
 80040ac:	b263      	sxtb	r3, r4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db03      	blt.n	80040ba <chain_i2c_mem_read+0x22>
 80040b2:	1e73      	subs	r3, r6, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d90c      	bls.n	80040d4 <chain_i2c_mem_read+0x3c>
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
				chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
						s_ret_buf_size);
			}
		} else {
			s_ret_buf_size = 0;
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
			s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 80040c0:	2101      	movs	r1, #1
 80040c2:	7019      	strb	r1, [r3, #0]
 80040c4:	4925      	ldr	r1, [pc, #148]	@ (800415c <chain_i2c_mem_read+0xc4>)
 80040c6:	700a      	strb	r2, [r1, #0]
			chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
 80040c8:	3201      	adds	r2, #1
 80040ca:	2013      	movs	r0, #19
 80040cc:	f7ff fe3c 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
				s_ret_buf_size);
	}
}
 80040d0:	b005      	add	sp, #20
 80040d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, (i2c_addr << 1),
 80040d4:	0061      	lsls	r1, r4, #1
 80040d6:	4822      	ldr	r0, [pc, #136]	@ (8004160 <chain_i2c_mem_read+0xc8>)
 80040d8:	23fa      	movs	r3, #250	@ 0xfa
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	9302      	str	r3, [sp, #8]
 80040de:	9501      	str	r5, [sp, #4]
 80040e0:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <chain_i2c_mem_read+0xcc>)
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	0033      	movs	r3, r6
 80040e6:	003a      	movs	r2, r7
 80040e8:	f004 f812 	bl	8008110 <HAL_I2C_Mem_Read>
			if (status == HAL_ERROR) {
 80040ec:	2801      	cmp	r0, #1
 80040ee:	d11b      	bne.n	8004128 <chain_i2c_mem_read+0x90>
				s_ret_buf_size = 0;
 80040f0:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 80040f6:	3201      	adds	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	4b18      	ldr	r3, [pc, #96]	@ (800415c <chain_i2c_mem_read+0xc4>)
 80040fc:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < read_len; i++) {
 80040fe:	2300      	movs	r3, #0
 8004100:	e009      	b.n	8004116 <chain_i2c_mem_read+0x7e>
					s_ret_buf[s_ret_buf_size++] = s_i2c_buffer[i];
 8004102:	4915      	ldr	r1, [pc, #84]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 8004104:	780a      	ldrb	r2, [r1, #0]
 8004106:	1c50      	adds	r0, r2, #1
 8004108:	7008      	strb	r0, [r1, #0]
 800410a:	4916      	ldr	r1, [pc, #88]	@ (8004164 <chain_i2c_mem_read+0xcc>)
 800410c:	5cc8      	ldrb	r0, [r1, r3]
 800410e:	4913      	ldr	r1, [pc, #76]	@ (800415c <chain_i2c_mem_read+0xc4>)
 8004110:	5488      	strb	r0, [r1, r2]
				for (uint8_t i = 0; i < read_len; i++) {
 8004112:	3301      	adds	r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	42ab      	cmp	r3, r5
 8004118:	d3f3      	bcc.n	8004102 <chain_i2c_mem_read+0x6a>
				chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	490f      	ldr	r1, [pc, #60]	@ (800415c <chain_i2c_mem_read+0xc4>)
 8004120:	2013      	movs	r0, #19
 8004122:	f7ff fe11 	bl	8003d48 <chain_command_complete_return>
 8004126:	e7d3      	b.n	80040d0 <chain_i2c_mem_read+0x38>
				s_ret_buf_size = 0;
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 800412e:	2101      	movs	r1, #1
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	490a      	ldr	r1, [pc, #40]	@ (800415c <chain_i2c_mem_read+0xc4>)
 8004134:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
 8004136:	3201      	adds	r2, #1
 8004138:	2013      	movs	r0, #19
 800413a:	f7ff fe05 	bl	8003d48 <chain_command_complete_return>
 800413e:	e7c7      	b.n	80040d0 <chain_i2c_mem_read+0x38>
		s_ret_buf_size = 0;
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <chain_i2c_mem_read+0xc0>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8004146:	3201      	adds	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	4904      	ldr	r1, [pc, #16]	@ (800415c <chain_i2c_mem_read+0xc4>)
 800414c:	2302      	movs	r3, #2
 800414e:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_MEM_READ, s_ret_buf,
 8004150:	2013      	movs	r0, #19
 8004152:	f7ff fdf9 	bl	8003d48 <chain_command_complete_return>
}
 8004156:	e7bb      	b.n	80040d0 <chain_i2c_mem_read+0x38>
 8004158:	200004a8 	.word	0x200004a8
 800415c:	200004ac 	.word	0x200004ac
 8004160:	2000068c 	.word	0x2000068c
 8004164:	200003a8 	.word	0x200003a8

08004168 <chain_i2c_mem_write>:
void chain_i2c_mem_write(uint8_t i2c_addr, uint16_t reg_addr, uint8_t reg_len,
		uint8_t write_len, uint8_t *buffer) {
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	b085      	sub	sp, #20
 800416c:	0004      	movs	r4, r0
 800416e:	000e      	movs	r6, r1
 8004170:	0015      	movs	r5, r2
 8004172:	001f      	movs	r7, r3
	if (check_i2c_mode()) {
 8004174:	f7ff fe9e 	bl	8003eb4 <check_i2c_mode>
 8004178:	2800      	cmp	r0, #0
 800417a:	d038      	beq.n	80041ee <chain_i2c_mem_write+0x86>
		if (i2c_addr <= 127 && (reg_len >= 1 && reg_len <= 2)) {
 800417c:	b263      	sxtb	r3, r4
 800417e:	2b00      	cmp	r3, #0
 8004180:	db03      	blt.n	800418a <chain_i2c_mem_write+0x22>
 8004182:	1e6b      	subs	r3, r5, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d90c      	bls.n	80041a4 <chain_i2c_mem_write+0x3c>
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
				chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
						s_ret_buf_size);
			}
		} else {
			s_ret_buf_size = 0;
 800418a:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <chain_i2c_mem_write+0xa0>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
			s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8004190:	2101      	movs	r1, #1
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	491d      	ldr	r1, [pc, #116]	@ (800420c <chain_i2c_mem_write+0xa4>)
 8004196:	700a      	strb	r2, [r1, #0]
			chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
 8004198:	3201      	adds	r2, #1
 800419a:	2014      	movs	r0, #20
 800419c:	f7ff fdd4 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
				s_ret_buf_size);
	}
}
 80041a0:	b005      	add	sp, #20
 80041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2,
 80041a4:	0061      	lsls	r1, r4, #1
 80041a6:	481a      	ldr	r0, [pc, #104]	@ (8004210 <chain_i2c_mem_write+0xa8>)
 80041a8:	23fa      	movs	r3, #250	@ 0xfa
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	9302      	str	r3, [sp, #8]
 80041ae:	9701      	str	r7, [sp, #4]
 80041b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	002b      	movs	r3, r5
 80041b6:	0032      	movs	r2, r6
 80041b8:	f003 feda 	bl	8007f70 <HAL_I2C_Mem_Write>
			if (status == HAL_ERROR) {
 80041bc:	2801      	cmp	r0, #1
 80041be:	d00b      	beq.n	80041d8 <chain_i2c_mem_write+0x70>
				s_ret_buf_size = 0;
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <chain_i2c_mem_write+0xa0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 80041c6:	2101      	movs	r1, #1
 80041c8:	7019      	strb	r1, [r3, #0]
 80041ca:	4910      	ldr	r1, [pc, #64]	@ (800420c <chain_i2c_mem_write+0xa4>)
 80041cc:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
 80041ce:	3201      	adds	r2, #1
 80041d0:	2014      	movs	r0, #20
 80041d2:	f7ff fdb9 	bl	8003d48 <chain_command_complete_return>
 80041d6:	e7e3      	b.n	80041a0 <chain_i2c_mem_write+0x38>
				s_ret_buf_size = 0;
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <chain_i2c_mem_write+0xa0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
				s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 80041de:	3201      	adds	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	490a      	ldr	r1, [pc, #40]	@ (800420c <chain_i2c_mem_write+0xa4>)
 80041e4:	700a      	strb	r2, [r1, #0]
				chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
 80041e6:	3013      	adds	r0, #19
 80041e8:	f7ff fdae 	bl	8003d48 <chain_command_complete_return>
 80041ec:	e7d8      	b.n	80041a0 <chain_i2c_mem_write+0x38>
		s_ret_buf_size = 0;
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <chain_i2c_mem_write+0xa0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 80041f4:	3201      	adds	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	4904      	ldr	r1, [pc, #16]	@ (800420c <chain_i2c_mem_write+0xa4>)
 80041fa:	2302      	movs	r3, #2
 80041fc:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_MEM_WRITE, s_ret_buf,
 80041fe:	2014      	movs	r0, #20
 8004200:	f7ff fda2 	bl	8003d48 <chain_command_complete_return>
}
 8004204:	e7cc      	b.n	80041a0 <chain_i2c_mem_write+0x38>
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	200004a8 	.word	0x200004a8
 800420c:	200004ac 	.word	0x200004ac
 8004210:	2000068c 	.word	0x2000068c

08004214 <chain_get_i2c_device_addr>:

void chain_get_i2c_device_addr(void) {
 8004214:	b570      	push	{r4, r5, r6, lr}
	if (check_i2c_mode()) {
 8004216:	f7ff fe4d 	bl	8003eb4 <check_i2c_mode>
 800421a:	2800      	cmp	r0, #0
 800421c:	d029      	beq.n	8004272 <chain_get_i2c_device_addr+0x5e>
		uint8_t i2c_addr_num = 0;
		s_ret_buf_size = 0;
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <chain_get_i2c_device_addr+0x78>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8004224:	3201      	adds	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	4919      	ldr	r1, [pc, #100]	@ (8004290 <chain_get_i2c_device_addr+0x7c>)
 800422a:	700a      	strb	r2, [r1, #0]
		s_ret_buf[s_ret_buf_size++];
 800422c:	3201      	adds	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 1; i < 128; i++) {
 8004230:	2401      	movs	r4, #1
		uint8_t i2c_addr_num = 0;
 8004232:	2500      	movs	r5, #0
		for (uint8_t i = 1; i < 128; i++) {
 8004234:	e001      	b.n	800423a <chain_get_i2c_device_addr+0x26>
 8004236:	3401      	adds	r4, #1
 8004238:	b2e4      	uxtb	r4, r4
 800423a:	b263      	sxtb	r3, r4
 800423c:	2b00      	cmp	r3, #0
 800423e:	db10      	blt.n	8004262 <chain_get_i2c_device_addr+0x4e>
			HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c2,
 8004240:	0061      	lsls	r1, r4, #1
 8004242:	4814      	ldr	r0, [pc, #80]	@ (8004294 <chain_get_i2c_device_addr+0x80>)
 8004244:	230a      	movs	r3, #10
 8004246:	2201      	movs	r2, #1
 8004248:	f004 f836 	bl	80082b8 <HAL_I2C_IsDeviceReady>
					(uint16_t) (i << 1), 1, 10);
			if (result == HAL_OK) {
 800424c:	2800      	cmp	r0, #0
 800424e:	d1f2      	bne.n	8004236 <chain_get_i2c_device_addr+0x22>
				i2c_addr_num++;
 8004250:	3501      	adds	r5, #1
 8004252:	b2ed      	uxtb	r5, r5
				s_ret_buf[s_ret_buf_size++] = i;
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <chain_get_i2c_device_addr+0x78>)
 8004256:	7813      	ldrb	r3, [r2, #0]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	7011      	strb	r1, [r2, #0]
 800425c:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <chain_get_i2c_device_addr+0x7c>)
 800425e:	54d4      	strb	r4, [r2, r3]
 8004260:	e7e9      	b.n	8004236 <chain_get_i2c_device_addr+0x22>
			}
		}
		s_ret_buf[1] = i2c_addr_num;
 8004262:	490b      	ldr	r1, [pc, #44]	@ (8004290 <chain_get_i2c_device_addr+0x7c>)
 8004264:	704d      	strb	r5, [r1, #1]
		chain_command_complete_return(CHAIN_I2C_GET_DEVICE_ADDR, s_ret_buf,
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <chain_get_i2c_device_addr+0x78>)
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	2015      	movs	r0, #21
 800426c:	f7ff fd6c 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_I2C_GET_DEVICE_ADDR, s_ret_buf,
				s_ret_buf_size);
	}
}
 8004270:	bd70      	pop	{r4, r5, r6, pc}
		s_ret_buf_size = 0;
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <chain_get_i2c_device_addr+0x78>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8004278:	3201      	adds	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	4904      	ldr	r1, [pc, #16]	@ (8004290 <chain_get_i2c_device_addr+0x7c>)
 800427e:	2302      	movs	r3, #2
 8004280:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_I2C_GET_DEVICE_ADDR, s_ret_buf,
 8004282:	2015      	movs	r0, #21
 8004284:	f7ff fd60 	bl	8003d48 <chain_command_complete_return>
}
 8004288:	e7f2      	b.n	8004270 <chain_get_i2c_device_addr+0x5c>
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	200004a8 	.word	0x200004a8
 8004290:	200004ac 	.word	0x200004ac
 8004294:	2000068c 	.word	0x2000068c

08004298 <GPIO_OUTPUT_Init>:

void GPIO_OUTPUT_Init(gpio_pin_t gpio_pin, gpio_level_t gpio_level,
		gpio_mode_t gpio_mode, gpio_up_mode_t gpio_up_mode,
		gpio_speed_t gpio_speed) {
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429a:	46c6      	mov	lr, r8
 800429c:	b500      	push	{lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	4680      	mov	r8, r0
 80042a2:	000f      	movs	r7, r1
 80042a4:	0016      	movs	r6, r2
 80042a6:	001d      	movs	r5, r3
 80042a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80042aa:	781c      	ldrb	r4, [r3, #0]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80042ac:	2218      	movs	r2, #24
 80042ae:	2100      	movs	r1, #0
 80042b0:	4668      	mov	r0, sp
 80042b2:	f005 f895 	bl	80093e0 <memset>
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT; // 输出模式
 80042b6:	2301      	movs	r3, #1
 80042b8:	9301      	str	r3, [sp, #4]
	// GPIO配置
	switch (gpio_pin) {
 80042ba:	4643      	mov	r3, r8
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d023      	beq.n	8004308 <GPIO_OUTPUT_Init+0x70>
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d109      	bne.n	80042d8 <GPIO_OUTPUT_Init+0x40>
	case CHAIN_GPIO_PIN_12:
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	015b      	lsls	r3, r3, #5
 80042c8:	4698      	mov	r8, r3
 80042ca:	20a0      	movs	r0, #160	@ 0xa0
 80042cc:	0019      	movs	r1, r3
 80042ce:	05c0      	lsls	r0, r0, #23
 80042d0:	f003 f99e 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80042d4:	4643      	mov	r3, r8
 80042d6:	9300      	str	r3, [sp, #0]
		break;
	default:
		break;
	}
	// 输出水平配置
	switch (gpio_level) {
 80042d8:	2f00      	cmp	r7, #0
 80042da:	d020      	beq.n	800431e <GPIO_OUTPUT_Init+0x86>
 80042dc:	2f01      	cmp	r7, #1
 80042de:	d023      	beq.n	8004328 <GPIO_OUTPUT_Init+0x90>
		break;
	default:
		break;
	}
	// 输出模式配置
	switch (gpio_mode) {
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	d026      	beq.n	8004332 <GPIO_OUTPUT_Init+0x9a>
 80042e4:	2e01      	cmp	r6, #1
 80042e6:	d027      	beq.n	8004338 <GPIO_OUTPUT_Init+0xa0>
		break;
	default:
		break;
	}
	// 上拉下拉配置
	switch (gpio_up_mode) {
 80042e8:	2d01      	cmp	r5, #1
 80042ea:	d02b      	beq.n	8004344 <GPIO_OUTPUT_Init+0xac>
 80042ec:	2d02      	cmp	r5, #2
 80042ee:	d02c      	beq.n	800434a <GPIO_OUTPUT_Init+0xb2>
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d024      	beq.n	800433e <GPIO_OUTPUT_Init+0xa6>
		break;
	default:
		break;
	}
	// 输出速度配置
	switch (gpio_speed) {
 80042f4:	2c02      	cmp	r4, #2
 80042f6:	d03b      	beq.n	8004370 <GPIO_OUTPUT_Init+0xd8>
 80042f8:	d82a      	bhi.n	8004350 <GPIO_OUTPUT_Init+0xb8>
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	d02d      	beq.n	800435a <GPIO_OUTPUT_Init+0xc2>
 80042fe:	2c01      	cmp	r4, #1
 8004300:	d12d      	bne.n	800435e <GPIO_OUTPUT_Init+0xc6>
	case CHAIN_GPIO_SPEED_FREQ_LOW:
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
		break;
	case CHAIN_GPIO_SPEED_FREQ_MEDIUM:
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8004302:	2301      	movs	r3, #1
 8004304:	9302      	str	r3, [sp, #8]
		break;
 8004306:	e02a      	b.n	800435e <GPIO_OUTPUT_Init+0xc6>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4698      	mov	r8, r3
 800430e:	20a0      	movs	r0, #160	@ 0xa0
 8004310:	0019      	movs	r1, r3
 8004312:	05c0      	lsls	r0, r0, #23
 8004314:	f003 f97c 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8004318:	4643      	mov	r3, r8
 800431a:	9300      	str	r3, [sp, #0]
		break;
 800431c:	e7dc      	b.n	80042d8 <GPIO_OUTPUT_Init+0x40>
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_InitStruct.Pin);
 800431e:	9a00      	ldr	r2, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004320:	23a0      	movs	r3, #160	@ 0xa0
 8004322:	05db      	lsls	r3, r3, #23
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004326:	e7db      	b.n	80042e0 <GPIO_OUTPUT_Init+0x48>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_InitStruct.Pin);
 8004328:	9a00      	ldr	r2, [sp, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800432a:	23a0      	movs	r3, #160	@ 0xa0
 800432c:	05db      	lsls	r3, r3, #23
 800432e:	619a      	str	r2, [r3, #24]
}
 8004330:	e7d6      	b.n	80042e0 <GPIO_OUTPUT_Init+0x48>
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	9303      	str	r3, [sp, #12]
		break;
 8004336:	e7d7      	b.n	80042e8 <GPIO_OUTPUT_Init+0x50>
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004338:	2301      	movs	r3, #1
 800433a:	9303      	str	r3, [sp, #12]
		break;
 800433c:	e7d4      	b.n	80042e8 <GPIO_OUTPUT_Init+0x50>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800433e:	2301      	movs	r3, #1
 8004340:	9304      	str	r3, [sp, #16]
		break;
 8004342:	e7d7      	b.n	80042f4 <GPIO_OUTPUT_Init+0x5c>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004344:	2302      	movs	r3, #2
 8004346:	9304      	str	r3, [sp, #16]
		break;
 8004348:	e7d4      	b.n	80042f4 <GPIO_OUTPUT_Init+0x5c>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800434a:	2300      	movs	r3, #0
 800434c:	9304      	str	r3, [sp, #16]
		break;
 800434e:	e7d1      	b.n	80042f4 <GPIO_OUTPUT_Init+0x5c>
	switch (gpio_speed) {
 8004350:	2c03      	cmp	r4, #3
 8004352:	d104      	bne.n	800435e <GPIO_OUTPUT_Init+0xc6>
	case CHAIN_GPIO_SPEED_FREQ_HIGH:
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
		break;
	case CHAIN_GPIO_SPEED_FREQ_VERY_HIGH:
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	2303      	movs	r3, #3
 8004356:	9302      	str	r3, [sp, #8]
		break;
 8004358:	e001      	b.n	800435e <GPIO_OUTPUT_Init+0xc6>
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800435a:	2300      	movs	r3, #0
 800435c:	9302      	str	r3, [sp, #8]
	default:
		break;
	}
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435e:	20a0      	movs	r0, #160	@ 0xa0
 8004360:	4669      	mov	r1, sp
 8004362:	05c0      	lsls	r0, r0, #23
 8004364:	f004 fd4e 	bl	8008e04 <LL_GPIO_Init>
}
 8004368:	b006      	add	sp, #24
 800436a:	bc80      	pop	{r7}
 800436c:	46b8      	mov	r8, r7
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004370:	2302      	movs	r3, #2
 8004372:	9302      	str	r3, [sp, #8]
		break;
 8004374:	e7f3      	b.n	800435e <GPIO_OUTPUT_Init+0xc6>
	...

08004378 <chian_uart_output_init>:

void GPIO_OUTPUT_DeInit(uint16_t GPIO_Pin) {
	HAL_GPIO_DeInit(GPIOA, GPIO_Pin);
}

void chian_uart_output_init(uint8_t *buffer, uint16_t size) {
 8004378:	b530      	push	{r4, r5, lr}
 800437a:	b083      	sub	sp, #12
 800437c:	0004      	movs	r4, r0
	if (size == 5) {
 800437e:	2905      	cmp	r1, #5
 8004380:	d000      	beq.n	8004384 <chian_uart_output_init+0xc>
 8004382:	e06f      	b.n	8004464 <chian_uart_output_init+0xec>
		if (g_gpio_status[0].mode == CHAIN_I2C_WORK_STATUS
 8004384:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <chian_uart_output_init+0x104>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d03b      	beq.n	8004404 <chian_uart_output_init+0x8c>
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
			GPIO_OUTPUT_Init(buffer[0], buffer[1], buffer[2], buffer[3],
					buffer[4]);
			__enable_irq();
		} else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 800438c:	4b3b      	ldr	r3, [pc, #236]	@ (800447c <chian_uart_output_init+0x104>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d103      	bne.n	800439c <chian_uart_output_init+0x24>
				&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004394:	4b39      	ldr	r3, [pc, #228]	@ (800447c <chian_uart_output_init+0x104>)
 8004396:	7a1b      	ldrb	r3, [r3, #8]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d049      	beq.n	8004430 <chian_uart_output_init+0xb8>
  __ASM volatile ("cpsid i" : : : "memory");
 800439c:	b672      	cpsid	i
			GPIO_OUTPUT_Init(buffer[0], buffer[1], buffer[2], buffer[3],
					buffer[4]);
			__enable_irq();
		} else {
			__disable_irq();
			GPIO_OUTPUT_Init(buffer[0], buffer[1], buffer[2], buffer[3],
 800439e:	78e3      	ldrb	r3, [r4, #3]
 80043a0:	78a2      	ldrb	r2, [r4, #2]
 80043a2:	7861      	ldrb	r1, [r4, #1]
 80043a4:	7820      	ldrb	r0, [r4, #0]
 80043a6:	7925      	ldrb	r5, [r4, #4]
 80043a8:	9500      	str	r5, [sp, #0]
 80043aa:	f7ff ff75 	bl	8004298 <GPIO_OUTPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80043ae:	b662      	cpsie	i
					buffer[4]);
			__enable_irq();
		}
		g_gpio_status[buffer[0] - 1].mode = CHAIN_OUTPUT_WORK_STATUS;
 80043b0:	7822      	ldrb	r2, [r4, #0]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	4b31      	ldr	r3, [pc, #196]	@ (800447c <chian_uart_output_init+0x104>)
 80043b6:	00d2      	lsls	r2, r2, #3
 80043b8:	2001      	movs	r0, #1
 80043ba:	54d0      	strb	r0, [r2, r3]
		g_gpio_status[buffer[0] - 1].gpio_level = buffer[1];
 80043bc:	7822      	ldrb	r2, [r4, #0]
 80043be:	3a01      	subs	r2, #1
 80043c0:	7861      	ldrb	r1, [r4, #1]
 80043c2:	00d2      	lsls	r2, r2, #3
 80043c4:	189a      	adds	r2, r3, r2
 80043c6:	7091      	strb	r1, [r2, #2]
		g_gpio_status[buffer[0] - 1].gpio_mode = buffer[2];
 80043c8:	7822      	ldrb	r2, [r4, #0]
 80043ca:	3a01      	subs	r2, #1
 80043cc:	78a1      	ldrb	r1, [r4, #2]
 80043ce:	00d2      	lsls	r2, r2, #3
 80043d0:	189a      	adds	r2, r3, r2
 80043d2:	70d1      	strb	r1, [r2, #3]
		g_gpio_status[buffer[0] - 1].gpio_up_mode = buffer[3];
 80043d4:	7822      	ldrb	r2, [r4, #0]
 80043d6:	3a01      	subs	r2, #1
 80043d8:	78e1      	ldrb	r1, [r4, #3]
 80043da:	00d2      	lsls	r2, r2, #3
 80043dc:	189a      	adds	r2, r3, r2
 80043de:	7111      	strb	r1, [r2, #4]
		g_gpio_status[buffer[0] - 1].gpio_speed = buffer[4];
 80043e0:	7822      	ldrb	r2, [r4, #0]
 80043e2:	3a01      	subs	r2, #1
 80043e4:	7921      	ldrb	r1, [r4, #4]
 80043e6:	00d2      	lsls	r2, r2, #3
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	7159      	strb	r1, [r3, #5]
		s_ret_buf_size = 0;
 80043ec:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <chian_uart_output_init+0x108>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 80043f2:	7018      	strb	r0, [r3, #0]
 80043f4:	4923      	ldr	r1, [pc, #140]	@ (8004484 <chian_uart_output_init+0x10c>)
 80043f6:	7008      	strb	r0, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_OUTPUT_INIT, s_ret_buf,
 80043f8:	3201      	adds	r2, #1
 80043fa:	302f      	adds	r0, #47	@ 0x2f
 80043fc:	f7ff fca4 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
		chain_command_complete_return(CHAIN_GPIO_OUTPUT_INIT, s_ret_buf,
				s_ret_buf_size);
	}
}
 8004400:	b003      	add	sp, #12
 8004402:	bd30      	pop	{r4, r5, pc}
				&& g_gpio_status[1].mode == CHAIN_I2C_WORK_STATUS) {
 8004404:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <chian_uart_output_init+0x104>)
 8004406:	7a1b      	ldrb	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d1bf      	bne.n	800438c <chian_uart_output_init+0x14>
  __ASM volatile ("cpsid i" : : : "memory");
 800440c:	b672      	cpsid	i
			HAL_I2C_MspDeInit(&hi2c2);
 800440e:	481e      	ldr	r0, [pc, #120]	@ (8004488 <chian_uart_output_init+0x110>)
 8004410:	f000 ff88 	bl	8005324 <HAL_I2C_MspDeInit>
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <chian_uart_output_init+0x104>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
 800441a:	721a      	strb	r2, [r3, #8]
			GPIO_OUTPUT_Init(buffer[0], buffer[1], buffer[2], buffer[3],
 800441c:	78e3      	ldrb	r3, [r4, #3]
 800441e:	78a2      	ldrb	r2, [r4, #2]
 8004420:	7861      	ldrb	r1, [r4, #1]
 8004422:	7820      	ldrb	r0, [r4, #0]
 8004424:	7925      	ldrb	r5, [r4, #4]
 8004426:	9500      	str	r5, [sp, #0]
 8004428:	f7ff ff36 	bl	8004298 <GPIO_OUTPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800442c:	b662      	cpsie	i
}
 800442e:	e7bf      	b.n	80043b0 <chian_uart_output_init+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
			HAL_ADC_MspDeInit(&hadc1);
 8004432:	4816      	ldr	r0, [pc, #88]	@ (800448c <chian_uart_output_init+0x114>)
 8004434:	f000 fe6e 	bl	8005114 <HAL_ADC_MspDeInit>
			g_gpio_status[buffer[0] - 1].mode = CHAIN_NOT_WORK_STATUS;
 8004438:	7823      	ldrb	r3, [r4, #0]
 800443a:	3b01      	subs	r3, #1
 800443c:	4a0f      	ldr	r2, [pc, #60]	@ (800447c <chian_uart_output_init+0x104>)
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]
			MX_ADC1_Init();
 8004444:	f000 fd58 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 8004448:	f000 fd56 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 800444c:	f000 fd54 	bl	8004ef8 <MX_ADC1_Init>
			GPIO_OUTPUT_Init(buffer[0], buffer[1], buffer[2], buffer[3],
 8004450:	78e3      	ldrb	r3, [r4, #3]
 8004452:	78a2      	ldrb	r2, [r4, #2]
 8004454:	7861      	ldrb	r1, [r4, #1]
 8004456:	7820      	ldrb	r0, [r4, #0]
 8004458:	7925      	ldrb	r5, [r4, #4]
 800445a:	9500      	str	r5, [sp, #0]
 800445c:	f7ff ff1c 	bl	8004298 <GPIO_OUTPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8004460:	b662      	cpsie	i
}
 8004462:	e7a5      	b.n	80043b0 <chian_uart_output_init+0x38>
		s_ret_buf_size = 0;
 8004464:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <chian_uart_output_init+0x108>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 800446a:	2101      	movs	r1, #1
 800446c:	7019      	strb	r1, [r3, #0]
 800446e:	4905      	ldr	r1, [pc, #20]	@ (8004484 <chian_uart_output_init+0x10c>)
 8004470:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_OUTPUT_INIT, s_ret_buf,
 8004472:	3201      	adds	r2, #1
 8004474:	2030      	movs	r0, #48	@ 0x30
 8004476:	f7ff fc67 	bl	8003d48 <chain_command_complete_return>
}
 800447a:	e7c1      	b.n	8004400 <chian_uart_output_init+0x88>
 800447c:	20000390 	.word	0x20000390
 8004480:	200004a8 	.word	0x200004a8
 8004484:	200004ac 	.word	0x200004ac
 8004488:	2000068c 	.word	0x2000068c
 800448c:	20000628 	.word	0x20000628

08004490 <GPIO_INPUT_Init>:

void GPIO_INPUT_Init(gpio_pin_t gpio, gpio_up_mode_t gpio_up_mode) {
 8004490:	b530      	push	{r4, r5, lr}
 8004492:	b087      	sub	sp, #28
 8004494:	0005      	movs	r5, r0
 8004496:	000c      	movs	r4, r1
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004498:	2218      	movs	r2, #24
 800449a:	2100      	movs	r1, #0
 800449c:	4668      	mov	r0, sp
 800449e:	f004 ff9f 	bl	80093e0 <memset>
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
	// GPIO配置
	switch (gpio) {
 80044a2:	2d01      	cmp	r5, #1
 80044a4:	d016      	beq.n	80044d4 <GPIO_INPUT_Init+0x44>
 80044a6:	2d02      	cmp	r5, #2
 80044a8:	d107      	bne.n	80044ba <GPIO_INPUT_Init+0x2a>
	case CHAIN_GPIO_PIN_12:
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80044aa:	2580      	movs	r5, #128	@ 0x80
 80044ac:	016d      	lsls	r5, r5, #5
 80044ae:	20a0      	movs	r0, #160	@ 0xa0
 80044b0:	0029      	movs	r1, r5
 80044b2:	05c0      	lsls	r0, r0, #23
 80044b4:	f003 f8ac 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80044b8:	9500      	str	r5, [sp, #0]
		break;
	default:
		break;
	}
	// 上拉下拉配置
	switch (gpio_up_mode) {
 80044ba:	2c01      	cmp	r4, #1
 80044bc:	d016      	beq.n	80044ec <GPIO_INPUT_Init+0x5c>
 80044be:	2c02      	cmp	r4, #2
 80044c0:	d017      	beq.n	80044f2 <GPIO_INPUT_Init+0x62>
 80044c2:	2c00      	cmp	r4, #0
 80044c4:	d00f      	beq.n	80044e6 <GPIO_INPUT_Init+0x56>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		break;
	default:
		break;
	}
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	20a0      	movs	r0, #160	@ 0xa0
 80044c8:	4669      	mov	r1, sp
 80044ca:	05c0      	lsls	r0, r0, #23
 80044cc:	f004 fc9a 	bl	8008e04 <LL_GPIO_Init>
}
 80044d0:	b007      	add	sp, #28
 80044d2:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 80044d4:	2580      	movs	r5, #128	@ 0x80
 80044d6:	012d      	lsls	r5, r5, #4
 80044d8:	20a0      	movs	r0, #160	@ 0xa0
 80044da:	0029      	movs	r1, r5
 80044dc:	05c0      	lsls	r0, r0, #23
 80044de:	f003 f897 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80044e2:	9500      	str	r5, [sp, #0]
		break;
 80044e4:	e7e9      	b.n	80044ba <GPIO_INPUT_Init+0x2a>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	9304      	str	r3, [sp, #16]
		break;
 80044ea:	e7ec      	b.n	80044c6 <GPIO_INPUT_Init+0x36>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80044ec:	2302      	movs	r3, #2
 80044ee:	9304      	str	r3, [sp, #16]
		break;
 80044f0:	e7e9      	b.n	80044c6 <GPIO_INPUT_Init+0x36>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044f2:	2300      	movs	r3, #0
 80044f4:	9304      	str	r3, [sp, #16]
		break;
 80044f6:	e7e6      	b.n	80044c6 <GPIO_INPUT_Init+0x36>

080044f8 <GPIO_INPUT_DeInit>:

void GPIO_INPUT_DeInit(uint16_t GPIO_Pin) {
 80044f8:	b510      	push	{r4, lr}
 80044fa:	0001      	movs	r1, r0
	HAL_GPIO_DeInit(GPIOA, GPIO_Pin);
 80044fc:	20a0      	movs	r0, #160	@ 0xa0
 80044fe:	05c0      	lsls	r0, r0, #23
 8004500:	f003 f886 	bl	8007610 <HAL_GPIO_DeInit>
}
 8004504:	bd10      	pop	{r4, pc}
	...

08004508 <chain_uart_input_init>:

void chain_uart_input_init(uint8_t *buffer, uint16_t size) {
 8004508:	b510      	push	{r4, lr}
 800450a:	0004      	movs	r4, r0
	if (size == 2) {
 800450c:	2902      	cmp	r1, #2
 800450e:	d153      	bne.n	80045b8 <chain_uart_input_init+0xb0>
		if (g_gpio_status[0].mode == CHAIN_I2C_WORK_STATUS
 8004510:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <chain_uart_input_init+0xc8>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b05      	cmp	r3, #5
 8004516:	d027      	beq.n	8004568 <chain_uart_input_init+0x60>
			HAL_I2C_MspDeInit(&hi2c2);
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
			GPIO_INPUT_Init(buffer[0], buffer[1]);
			__enable_irq();
		} else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 8004518:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <chain_uart_input_init+0xc8>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d103      	bne.n	8004528 <chain_uart_input_init+0x20>
				&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <chain_uart_input_init+0xc8>)
 8004522:	7a1b      	ldrb	r3, [r3, #8]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d031      	beq.n	800458c <chain_uart_input_init+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 8004528:	b672      	cpsid	i
			MX_ADC1_Init();
			GPIO_INPUT_Init(buffer[0], buffer[1]);
			__enable_irq();
		} else {
			__disable_irq();
			GPIO_INPUT_DeInit(buffer[0]);
 800452a:	7820      	ldrb	r0, [r4, #0]
 800452c:	f7ff ffe4 	bl	80044f8 <GPIO_INPUT_DeInit>
			GPIO_INPUT_Init(buffer[0], buffer[1]);
 8004530:	7861      	ldrb	r1, [r4, #1]
 8004532:	7820      	ldrb	r0, [r4, #0]
 8004534:	f7ff ffac 	bl	8004490 <GPIO_INPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8004538:	b662      	cpsie	i
			__enable_irq();
		}
		g_gpio_status[buffer[0] - 1].mode = CHAIN_INPUT_WORK_STATUS;
 800453a:	7822      	ldrb	r2, [r4, #0]
 800453c:	3a01      	subs	r2, #1
 800453e:	4b24      	ldr	r3, [pc, #144]	@ (80045d0 <chain_uart_input_init+0xc8>)
 8004540:	00d2      	lsls	r2, r2, #3
 8004542:	2102      	movs	r1, #2
 8004544:	54d1      	strb	r1, [r2, r3]
		g_gpio_status[buffer[0] - 1].gpio_up_mode = buffer[1];
 8004546:	7822      	ldrb	r2, [r4, #0]
 8004548:	3a01      	subs	r2, #1
 800454a:	7861      	ldrb	r1, [r4, #1]
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	189b      	adds	r3, r3, r2
 8004550:	7119      	strb	r1, [r3, #4]
		s_ret_buf_size = 0;
 8004552:	4b20      	ldr	r3, [pc, #128]	@ (80045d4 <chain_uart_input_init+0xcc>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8004558:	3201      	adds	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	491e      	ldr	r1, [pc, #120]	@ (80045d8 <chain_uart_input_init+0xd0>)
 800455e:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_INPUT_INIT, s_ret_buf,
 8004560:	2040      	movs	r0, #64	@ 0x40
 8004562:	f7ff fbf1 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_GPIO_READ_GPIO_LEVEL, s_ret_buf,
				s_ret_buf_size);
	}
}
 8004566:	bd10      	pop	{r4, pc}
				&& g_gpio_status[1].mode == CHAIN_I2C_WORK_STATUS) {
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <chain_uart_input_init+0xc8>)
 800456a:	7a1b      	ldrb	r3, [r3, #8]
 800456c:	2b05      	cmp	r3, #5
 800456e:	d1d3      	bne.n	8004518 <chain_uart_input_init+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8004570:	b672      	cpsid	i
			HAL_I2C_MspDeInit(&hi2c2);
 8004572:	481a      	ldr	r0, [pc, #104]	@ (80045dc <chain_uart_input_init+0xd4>)
 8004574:	f000 fed6 	bl	8005324 <HAL_I2C_MspDeInit>
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
 8004578:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <chain_uart_input_init+0xc8>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
 800457e:	721a      	strb	r2, [r3, #8]
			GPIO_INPUT_Init(buffer[0], buffer[1]);
 8004580:	7861      	ldrb	r1, [r4, #1]
 8004582:	7820      	ldrb	r0, [r4, #0]
 8004584:	f7ff ff84 	bl	8004490 <GPIO_INPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8004588:	b662      	cpsie	i
}
 800458a:	e7d6      	b.n	800453a <chain_uart_input_init+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 800458c:	b672      	cpsid	i
			HAL_ADC_MspDeInit(&hadc1);
 800458e:	4814      	ldr	r0, [pc, #80]	@ (80045e0 <chain_uart_input_init+0xd8>)
 8004590:	f000 fdc0 	bl	8005114 <HAL_ADC_MspDeInit>
			g_gpio_status[buffer[0] - 1].mode = CHAIN_NOT_WORK_STATUS;
 8004594:	7823      	ldrb	r3, [r4, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <chain_uart_input_init+0xc8>)
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]
			MX_ADC1_Init();
 80045a0:	f000 fcaa 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 80045a4:	f000 fca8 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 80045a8:	f000 fca6 	bl	8004ef8 <MX_ADC1_Init>
			GPIO_INPUT_Init(buffer[0], buffer[1]);
 80045ac:	7861      	ldrb	r1, [r4, #1]
 80045ae:	7820      	ldrb	r0, [r4, #0]
 80045b0:	f7ff ff6e 	bl	8004490 <GPIO_INPUT_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80045b4:	b662      	cpsie	i
}
 80045b6:	e7c0      	b.n	800453a <chain_uart_input_init+0x32>
		s_ret_buf_size = 0;
 80045b8:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <chain_uart_input_init+0xcc>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 80045be:	3201      	adds	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	4905      	ldr	r1, [pc, #20]	@ (80045d8 <chain_uart_input_init+0xd0>)
 80045c4:	2302      	movs	r3, #2
 80045c6:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_READ_GPIO_LEVEL, s_ret_buf,
 80045c8:	2041      	movs	r0, #65	@ 0x41
 80045ca:	f7ff fbbd 	bl	8003d48 <chain_command_complete_return>
}
 80045ce:	e7ca      	b.n	8004566 <chain_uart_input_init+0x5e>
 80045d0:	20000390 	.word	0x20000390
 80045d4:	200004a8 	.word	0x200004a8
 80045d8:	200004ac 	.word	0x200004ac
 80045dc:	2000068c 	.word	0x2000068c
 80045e0:	20000628 	.word	0x20000628

080045e4 <check_input_mode>:
bool check_input_mode(gpio_pin_t gpio_pin) {
	if (g_gpio_status[gpio_pin - 1].mode == CHAIN_INPUT_WORK_STATUS) {
 80045e4:	3801      	subs	r0, #1
 80045e6:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <check_input_mode+0x14>)
 80045e8:	00c0      	lsls	r0, r0, #3
 80045ea:	5cc3      	ldrb	r3, [r0, r3]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d001      	beq.n	80045f4 <check_input_mode+0x10>
		return true;
	}
	return false;
 80045f0:	2000      	movs	r0, #0
}
 80045f2:	4770      	bx	lr
		return true;
 80045f4:	2001      	movs	r0, #1
 80045f6:	e7fc      	b.n	80045f2 <check_input_mode+0xe>
 80045f8:	20000390 	.word	0x20000390

080045fc <chain_uart_read_pin_level>:

void chain_uart_read_pin_level(gpio_pin_t gpio_pin) {
 80045fc:	b510      	push	{r4, lr}
 80045fe:	0004      	movs	r4, r0
	if (check_input_mode(gpio_pin)) {
 8004600:	f7ff fff0 	bl	80045e4 <check_input_mode>
 8004604:	2800      	cmp	r0, #0
 8004606:	d029      	beq.n	800465c <chain_uart_read_pin_level+0x60>
		s_ret_buf_size = 0;
 8004608:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <chain_uart_read_pin_level+0x78>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 800460e:	3201      	adds	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <chain_uart_read_pin_level+0x7c>)
 8004614:	701a      	strb	r2, [r3, #0]
		if (gpio_pin == CHAIN_GPIO_PIN_11) {
 8004616:	2c01      	cmp	r4, #1
 8004618:	d008      	beq.n	800462c <chain_uart_read_pin_level+0x30>
			s_ret_buf[s_ret_buf_size++] = HAL_GPIO_ReadPin(GPIOA,
			LL_GPIO_PIN_11);
		} else if (gpio_pin == CHAIN_GPIO_PIN_12) {
 800461a:	2c02      	cmp	r4, #2
 800461c:	d012      	beq.n	8004644 <chain_uart_read_pin_level+0x48>
			s_ret_buf[s_ret_buf_size++] = HAL_GPIO_ReadPin(GPIOA,
			LL_GPIO_PIN_12);
		}
		chain_command_complete_return(CHAIN_GPIO_READ_GPIO_LEVEL, s_ret_buf,
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <chain_uart_read_pin_level+0x78>)
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	4915      	ldr	r1, [pc, #84]	@ (8004678 <chain_uart_read_pin_level+0x7c>)
 8004624:	2041      	movs	r0, #65	@ 0x41
 8004626:	f7ff fb8f 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_GPIO_INPUT_INIT, s_ret_buf,
				s_ret_buf_size);
	}
}
 800462a:	bd10      	pop	{r4, pc}
			s_ret_buf[s_ret_buf_size++] = HAL_GPIO_ReadPin(GPIOA,
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <chain_uart_read_pin_level+0x78>)
 800462e:	3201      	adds	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	2180      	movs	r1, #128	@ 0x80
 8004634:	20a0      	movs	r0, #160	@ 0xa0
 8004636:	0109      	lsls	r1, r1, #4
 8004638:	05c0      	lsls	r0, r0, #23
 800463a:	f003 f869 	bl	8007710 <HAL_GPIO_ReadPin>
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <chain_uart_read_pin_level+0x7c>)
 8004640:	7058      	strb	r0, [r3, #1]
 8004642:	e7ec      	b.n	800461e <chain_uart_read_pin_level+0x22>
			s_ret_buf[s_ret_buf_size++] = HAL_GPIO_ReadPin(GPIOA,
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <chain_uart_read_pin_level+0x78>)
 8004646:	2202      	movs	r2, #2
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	2180      	movs	r1, #128	@ 0x80
 800464c:	20a0      	movs	r0, #160	@ 0xa0
 800464e:	0149      	lsls	r1, r1, #5
 8004650:	05c0      	lsls	r0, r0, #23
 8004652:	f003 f85d 	bl	8007710 <HAL_GPIO_ReadPin>
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <chain_uart_read_pin_level+0x7c>)
 8004658:	7058      	strb	r0, [r3, #1]
 800465a:	e7e0      	b.n	800461e <chain_uart_read_pin_level+0x22>
		s_ret_buf_size = 0;
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <chain_uart_read_pin_level+0x78>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8004662:	3201      	adds	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	4904      	ldr	r1, [pc, #16]	@ (8004678 <chain_uart_read_pin_level+0x7c>)
 8004668:	2302      	movs	r3, #2
 800466a:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_INPUT_INIT, s_ret_buf,
 800466c:	2040      	movs	r0, #64	@ 0x40
 800466e:	f7ff fb6b 	bl	8003d48 <chain_command_complete_return>
}
 8004672:	e7da      	b.n	800462a <chain_uart_read_pin_level+0x2e>
 8004674:	200004a8 	.word	0x200004a8
 8004678:	200004ac 	.word	0x200004ac

0800467c <GPIO_NVIC_Init>:
void GPIO_NVIC_Init(gpio_pin_t gpio, gpio_up_mode_t gpio_up_mode,
		gpio_nvic_trigger_detection_t trigger_detection) {
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	0006      	movs	r6, r0
 8004682:	000c      	movs	r4, r1
 8004684:	0015      	movs	r5, r2
	GPIO_InitTypeDef GPIO_InitStruct = { 0 }; // 初始化结构体
 8004686:	2214      	movs	r2, #20
 8004688:	2100      	movs	r1, #0
 800468a:	a801      	add	r0, sp, #4
 800468c:	f004 fea8 	bl	80093e0 <memset>
	// GPIO配置
	switch (gpio) {
 8004690:	2e01      	cmp	r6, #1
 8004692:	d024      	beq.n	80046de <GPIO_NVIC_Init+0x62>
 8004694:	2e02      	cmp	r6, #2
 8004696:	d107      	bne.n	80046a8 <GPIO_NVIC_Init+0x2c>
	case CHAIN_GPIO_PIN_12:
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8004698:	2680      	movs	r6, #128	@ 0x80
 800469a:	0176      	lsls	r6, r6, #5
 800469c:	20a0      	movs	r0, #160	@ 0xa0
 800469e:	0031      	movs	r1, r6
 80046a0:	05c0      	lsls	r0, r0, #23
 80046a2:	f002 ffb5 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80046a6:	9601      	str	r6, [sp, #4]
		break;
	default:
		break;
	}
	// GPIO配置
	switch (trigger_detection) {
 80046a8:	2d01      	cmp	r5, #1
 80046aa:	d025      	beq.n	80046f8 <GPIO_NVIC_Init+0x7c>
 80046ac:	2d02      	cmp	r5, #2
 80046ae:	d027      	beq.n	8004700 <GPIO_NVIC_Init+0x84>
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d01d      	beq.n	80046f0 <GPIO_NVIC_Init+0x74>
		break;
	default:
		break;
	}
	// 上拉下拉配置
	switch (gpio_up_mode) {
 80046b4:	2c01      	cmp	r4, #1
 80046b6:	d02a      	beq.n	800470e <GPIO_NVIC_Init+0x92>
 80046b8:	2c02      	cmp	r4, #2
 80046ba:	d02b      	beq.n	8004714 <GPIO_NVIC_Init+0x98>
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d023      	beq.n	8004708 <GPIO_NVIC_Init+0x8c>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		break;
	default:
		break;
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c0:	20a0      	movs	r0, #160	@ 0xa0
 80046c2:	a901      	add	r1, sp, #4
 80046c4:	05c0      	lsls	r0, r0, #23
 80046c6:	f002 fee9 	bl	800749c <HAL_GPIO_Init>
	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 80046ca:	2201      	movs	r2, #1
 80046cc:	2100      	movs	r1, #0
 80046ce:	2007      	movs	r0, #7
 80046d0:	f002 fbc8 	bl	8006e64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80046d4:	2007      	movs	r0, #7
 80046d6:	f002 fbc9 	bl	8006e6c <HAL_NVIC_EnableIRQ>
}
 80046da:	b006      	add	sp, #24
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 80046de:	2680      	movs	r6, #128	@ 0x80
 80046e0:	0136      	lsls	r6, r6, #4
 80046e2:	20a0      	movs	r0, #160	@ 0xa0
 80046e4:	0031      	movs	r1, r6
 80046e6:	05c0      	lsls	r0, r0, #23
 80046e8:	f002 ff92 	bl	8007610 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80046ec:	9601      	str	r6, [sp, #4]
		break;
 80046ee:	e7db      	b.n	80046a8 <GPIO_NVIC_Init+0x2c>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046f0:	2388      	movs	r3, #136	@ 0x88
 80046f2:	035b      	lsls	r3, r3, #13
 80046f4:	9302      	str	r3, [sp, #8]
		break;
 80046f6:	e7dd      	b.n	80046b4 <GPIO_NVIC_Init+0x38>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046f8:	2384      	movs	r3, #132	@ 0x84
 80046fa:	039b      	lsls	r3, r3, #14
 80046fc:	9302      	str	r3, [sp, #8]
		break;
 80046fe:	e7d9      	b.n	80046b4 <GPIO_NVIC_Init+0x38>
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004700:	23c4      	movs	r3, #196	@ 0xc4
 8004702:	039b      	lsls	r3, r3, #14
 8004704:	9302      	str	r3, [sp, #8]
		break;
 8004706:	e7d5      	b.n	80046b4 <GPIO_NVIC_Init+0x38>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004708:	2301      	movs	r3, #1
 800470a:	9303      	str	r3, [sp, #12]
		break;
 800470c:	e7d8      	b.n	80046c0 <GPIO_NVIC_Init+0x44>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800470e:	2302      	movs	r3, #2
 8004710:	9303      	str	r3, [sp, #12]
		break;
 8004712:	e7d5      	b.n	80046c0 <GPIO_NVIC_Init+0x44>
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004714:	2300      	movs	r3, #0
 8004716:	9303      	str	r3, [sp, #12]
		break;
 8004718:	e7d2      	b.n	80046c0 <GPIO_NVIC_Init+0x44>
	...

0800471c <HAL_GPIO_EXTI_Rising_Callback>:
void GPIO_NVIC_DeInit(uint16_t GPIO_Pin) {
	HAL_GPIO_DeInit(GPIOA, GPIO_Pin);
}

// 外部中断回调函数，上升沿触发
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800471c:	b510      	push	{r4, lr}
 800471e:	0004      	movs	r4, r0
	if (GPIO_Pin == GPIO_PIN_12) {
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	015b      	lsls	r3, r3, #5
 8004724:	4298      	cmp	r0, r3
 8004726:	d007      	beq.n	8004738 <HAL_GPIO_EXTI_Rising_Callback+0x1c>
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_12;
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_RISING;
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
				s_ret_buf, s_ret_buf_size);
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	429c      	cmp	r4, r3
 800472e:	d012      	beq.n	8004756 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_11;
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_RISING;
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
				s_ret_buf, s_ret_buf_size);
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004730:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 8004732:	60dc      	str	r4, [r3, #12]
 8004734:	611c      	str	r4, [r3, #16]
}
 8004736:	bd10      	pop	{r4, pc}
		s_ret_buf_size = 0;
 8004738:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_12;
 800473e:	2101      	movs	r1, #1
 8004740:	7019      	strb	r1, [r3, #0]
 8004742:	490e      	ldr	r1, [pc, #56]	@ (800477c <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8004744:	2002      	movs	r0, #2
 8004746:	7008      	strb	r0, [r1, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_RISING;
 8004748:	7018      	strb	r0, [r3, #0]
 800474a:	704a      	strb	r2, [r1, #1]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
 800474c:	3202      	adds	r2, #2
 800474e:	304f      	adds	r0, #79	@ 0x4f
 8004750:	f7ff fafa 	bl	8003d48 <chain_command_complete_return>
 8004754:	e7e8      	b.n	8004728 <HAL_GPIO_EXTI_Rising_Callback+0xc>
		s_ret_buf_size = 0;
 8004756:	4b08      	ldr	r3, [pc, #32]	@ (8004778 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_11;
 800475c:	2001      	movs	r0, #1
 800475e:	7018      	strb	r0, [r3, #0]
 8004760:	4906      	ldr	r1, [pc, #24]	@ (800477c <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8004762:	7008      	strb	r0, [r1, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_RISING;
 8004764:	3001      	adds	r0, #1
 8004766:	7018      	strb	r0, [r3, #0]
 8004768:	704a      	strb	r2, [r1, #1]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
 800476a:	3202      	adds	r2, #2
 800476c:	304f      	adds	r0, #79	@ 0x4f
 800476e:	f7ff faeb 	bl	8003d48 <chain_command_complete_return>
 8004772:	e7dd      	b.n	8004730 <HAL_GPIO_EXTI_Rising_Callback+0x14>
 8004774:	40021800 	.word	0x40021800
 8004778:	200004a8 	.word	0x200004a8
 800477c:	200004ac 	.word	0x200004ac

08004780 <HAL_GPIO_EXTI_Falling_Callback>:
// 外部中断回调函数，下降沿触发
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8004780:	b510      	push	{r4, lr}
 8004782:	0004      	movs	r4, r0
	if (GPIO_Pin == GPIO_PIN_12) {
 8004784:	2380      	movs	r3, #128	@ 0x80
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	4298      	cmp	r0, r3
 800478a:	d007      	beq.n	800479c <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_12;
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_FALLING;
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
				s_ret_buf, s_ret_buf_size);
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	429c      	cmp	r4, r3
 8004792:	d012      	beq.n	80047ba <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_11;
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_FALLING;
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
				s_ret_buf, s_ret_buf_size);
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004794:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8004796:	60dc      	str	r4, [r3, #12]
 8004798:	611c      	str	r4, [r3, #16]
}
 800479a:	bd10      	pop	{r4, pc}
		s_ret_buf_size = 0;
 800479c:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_12;
 80047a2:	3201      	adds	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	490e      	ldr	r1, [pc, #56]	@ (80047e0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80047a8:	2002      	movs	r0, #2
 80047aa:	7008      	strb	r0, [r1, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_FALLING;
 80047ac:	7018      	strb	r0, [r3, #0]
 80047ae:	704a      	strb	r2, [r1, #1]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
 80047b0:	3201      	adds	r2, #1
 80047b2:	304f      	adds	r0, #79	@ 0x4f
 80047b4:	f7ff fac8 	bl	8003d48 <chain_command_complete_return>
 80047b8:	e7e8      	b.n	800478c <HAL_GPIO_EXTI_Falling_Callback+0xc>
		s_ret_buf_size = 0;
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_PIN_11;
 80047c0:	3201      	adds	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	4906      	ldr	r1, [pc, #24]	@ (80047e0 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80047c6:	700a      	strb	r2, [r1, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_GPIO_MODE_IT_FALLING;
 80047c8:	2002      	movs	r0, #2
 80047ca:	7018      	strb	r0, [r3, #0]
 80047cc:	704a      	strb	r2, [r1, #1]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_RETURN,
 80047ce:	3201      	adds	r2, #1
 80047d0:	304f      	adds	r0, #79	@ 0x4f
 80047d2:	f7ff fab9 	bl	8003d48 <chain_command_complete_return>
 80047d6:	e7dd      	b.n	8004794 <HAL_GPIO_EXTI_Falling_Callback+0x14>
 80047d8:	40021800 	.word	0x40021800
 80047dc:	200004a8 	.word	0x200004a8
 80047e0:	200004ac 	.word	0x200004ac

080047e4 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void) {
 80047e4:	b510      	push	{r4, lr}
	if (g_gpio_status[0].mode == CHAIN_NVIC_WORK_STATUS) {
 80047e6:	4b09      	ldr	r3, [pc, #36]	@ (800480c <EXTI4_15_IRQHandler+0x28>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d004      	beq.n	80047f8 <EXTI4_15_IRQHandler+0x14>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
	}
	if (g_gpio_status[1].mode == CHAIN_NVIC_WORK_STATUS) {
 80047ee:	4b07      	ldr	r3, [pc, #28]	@ (800480c <EXTI4_15_IRQHandler+0x28>)
 80047f0:	7a1b      	ldrb	r3, [r3, #8]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d005      	beq.n	8004802 <EXTI4_15_IRQHandler+0x1e>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
	}
}
 80047f6:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80047f8:	2080      	movs	r0, #128	@ 0x80
 80047fa:	0100      	lsls	r0, r0, #4
 80047fc:	f002 ff90 	bl	8007720 <HAL_GPIO_EXTI_IRQHandler>
 8004800:	e7f5      	b.n	80047ee <EXTI4_15_IRQHandler+0xa>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004802:	2080      	movs	r0, #128	@ 0x80
 8004804:	0140      	lsls	r0, r0, #5
 8004806:	f002 ff8b 	bl	8007720 <HAL_GPIO_EXTI_IRQHandler>
}
 800480a:	e7f4      	b.n	80047f6 <EXTI4_15_IRQHandler+0x12>
 800480c:	20000390 	.word	0x20000390

08004810 <chian_uart_nvic_init>:

void chian_uart_nvic_init(uint8_t *buffer, uint16_t size) {
 8004810:	b510      	push	{r4, lr}
 8004812:	0004      	movs	r4, r0
	if (size == 3) {
 8004814:	2903      	cmp	r1, #3
 8004816:	d159      	bne.n	80048cc <chian_uart_nvic_init+0xbc>
		if (g_gpio_status[0].mode == CHAIN_I2C_WORK_STATUS
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b05      	cmp	r3, #5
 800481e:	d02b      	beq.n	8004878 <chian_uart_nvic_init+0x68>
			HAL_I2C_MspDeInit(&hi2c2);
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
			GPIO_NVIC_Init(buffer[0], buffer[1], buffer[2]);
			__enable_irq();
		} else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 8004820:	4b30      	ldr	r3, [pc, #192]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d103      	bne.n	8004830 <chian_uart_nvic_init+0x20>
				&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004828:	4b2e      	ldr	r3, [pc, #184]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 800482a:	7a1b      	ldrb	r3, [r3, #8]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d036      	beq.n	800489e <chian_uart_nvic_init+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 8004830:	b672      	cpsid	i
			MX_ADC1_Init();
			GPIO_NVIC_Init(buffer[0], buffer[1], buffer[2]);
			__enable_irq();
		} else {
			__disable_irq();
			GPIO_NVIC_Init(buffer[0], buffer[1], buffer[2]);
 8004832:	78a2      	ldrb	r2, [r4, #2]
 8004834:	7861      	ldrb	r1, [r4, #1]
 8004836:	7820      	ldrb	r0, [r4, #0]
 8004838:	f7ff ff20 	bl	800467c <GPIO_NVIC_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800483c:	b662      	cpsie	i
			__enable_irq();
		}

		g_gpio_status[buffer[0] - 1].mode = CHAIN_NVIC_WORK_STATUS;
 800483e:	7822      	ldrb	r2, [r4, #0]
 8004840:	3a01      	subs	r2, #1
 8004842:	4b28      	ldr	r3, [pc, #160]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 8004844:	00d2      	lsls	r2, r2, #3
 8004846:	2103      	movs	r1, #3
 8004848:	54d1      	strb	r1, [r2, r3]
		g_gpio_status[buffer[0] - 1].gpio_up_mode = buffer[1];
 800484a:	7822      	ldrb	r2, [r4, #0]
 800484c:	3a01      	subs	r2, #1
 800484e:	7861      	ldrb	r1, [r4, #1]
 8004850:	00d2      	lsls	r2, r2, #3
 8004852:	189a      	adds	r2, r3, r2
 8004854:	7111      	strb	r1, [r2, #4]
		g_gpio_status[buffer[0] - 1].gpio_nvic_trigger_detection = buffer[2];
 8004856:	7822      	ldrb	r2, [r4, #0]
 8004858:	3a01      	subs	r2, #1
 800485a:	78a1      	ldrb	r1, [r4, #2]
 800485c:	00d2      	lsls	r2, r2, #3
 800485e:	189b      	adds	r3, r3, r2
 8004860:	7199      	strb	r1, [r3, #6]
		s_ret_buf_size = 0;
 8004862:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <chian_uart_nvic_init+0xd8>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8004868:	3201      	adds	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	491f      	ldr	r1, [pc, #124]	@ (80048ec <chian_uart_nvic_init+0xdc>)
 800486e:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_INIT, s_ret_buf,
 8004870:	2050      	movs	r0, #80	@ 0x50
 8004872:	f7ff fa69 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_INIT, s_ret_buf,
				s_ret_buf_size);
	}
}
 8004876:	bd10      	pop	{r4, pc}
				&& g_gpio_status[1].mode == CHAIN_I2C_WORK_STATUS) {
 8004878:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 800487a:	7a1b      	ldrb	r3, [r3, #8]
 800487c:	2b05      	cmp	r3, #5
 800487e:	d1cf      	bne.n	8004820 <chian_uart_nvic_init+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8004880:	b672      	cpsid	i
			HAL_I2C_MspDeInit(&hi2c2);
 8004882:	481b      	ldr	r0, [pc, #108]	@ (80048f0 <chian_uart_nvic_init+0xe0>)
 8004884:	f000 fd4e 	bl	8005324 <HAL_I2C_MspDeInit>
			g_gpio_status[0].mode = CHAIN_NOT_WORK_STATUS;
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
			g_gpio_status[1].mode = CHAIN_NOT_WORK_STATUS;
 800488e:	721a      	strb	r2, [r3, #8]
			GPIO_NVIC_Init(buffer[0], buffer[1], buffer[2]);
 8004890:	78a2      	ldrb	r2, [r4, #2]
 8004892:	7861      	ldrb	r1, [r4, #1]
 8004894:	7820      	ldrb	r0, [r4, #0]
 8004896:	f7ff fef1 	bl	800467c <GPIO_NVIC_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800489a:	b662      	cpsie	i
}
 800489c:	e7cf      	b.n	800483e <chian_uart_nvic_init+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800489e:	b672      	cpsid	i
			HAL_ADC_MspDeInit(&hadc1);
 80048a0:	4814      	ldr	r0, [pc, #80]	@ (80048f4 <chian_uart_nvic_init+0xe4>)
 80048a2:	f000 fc37 	bl	8005114 <HAL_ADC_MspDeInit>
			g_gpio_status[buffer[0] - 1].mode = CHAIN_NOT_WORK_STATUS;
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4a0e      	ldr	r2, [pc, #56]	@ (80048e4 <chian_uart_nvic_init+0xd4>)
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]
			MX_ADC1_Init();
 80048b2:	f000 fb21 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 80048b6:	f000 fb1f 	bl	8004ef8 <MX_ADC1_Init>
			MX_ADC1_Init();
 80048ba:	f000 fb1d 	bl	8004ef8 <MX_ADC1_Init>
			GPIO_NVIC_Init(buffer[0], buffer[1], buffer[2]);
 80048be:	78a2      	ldrb	r2, [r4, #2]
 80048c0:	7861      	ldrb	r1, [r4, #1]
 80048c2:	7820      	ldrb	r0, [r4, #0]
 80048c4:	f7ff feda 	bl	800467c <GPIO_NVIC_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80048c8:	b662      	cpsie	i
}
 80048ca:	e7b8      	b.n	800483e <chian_uart_nvic_init+0x2e>
		s_ret_buf_size = 0;
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <chian_uart_nvic_init+0xd8>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 80048d2:	2101      	movs	r1, #1
 80048d4:	7019      	strb	r1, [r3, #0]
 80048d6:	4905      	ldr	r1, [pc, #20]	@ (80048ec <chian_uart_nvic_init+0xdc>)
 80048d8:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_EXTERNAL_NVIC_INIT, s_ret_buf,
 80048da:	3201      	adds	r2, #1
 80048dc:	2050      	movs	r0, #80	@ 0x50
 80048de:	f7ff fa33 	bl	8003d48 <chain_command_complete_return>
}
 80048e2:	e7c8      	b.n	8004876 <chian_uart_nvic_init+0x66>
 80048e4:	20000390 	.word	0x20000390
 80048e8:	200004a8 	.word	0x200004a8
 80048ec:	200004ac 	.word	0x200004ac
 80048f0:	2000068c 	.word	0x2000068c
 80048f4:	20000628 	.word	0x20000628

080048f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) // DMA采集完成中断服务函数
{
 80048f8:	b510      	push	{r4, lr}
	s_ret_buf_size = 0;
 80048fa:	4b2d      	ldr	r3, [pc, #180]	@ (80049b0 <HAL_ADC_ConvCpltCallback+0xb8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
	if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 8004900:	4b2c      	ldr	r3, [pc, #176]	@ (80049b4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d00e      	beq.n	8004926 <HAL_ADC_ConvCpltCallback+0x2e>
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[1] & 0xFF);
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[1] >> 8) & 0xFF);
	} else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS) {
 8004908:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d029      	beq.n	8004964 <HAL_ADC_ConvCpltCallback+0x6c>
		s_ret_buf[s_ret_buf_size++] = 1;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
	} else if (g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004910:	4b28      	ldr	r3, [pc, #160]	@ (80049b4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8004912:	7a1b      	ldrb	r3, [r3, #8]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d038      	beq.n	800498a <HAL_ADC_ConvCpltCallback+0x92>
		s_ret_buf[s_ret_buf_size++] = 1;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
	}
	chain_command_complete_return(CHAIN_GPIO_ADC_READ, s_ret_buf,
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	4926      	ldr	r1, [pc, #152]	@ (80049b8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800491e:	2061      	movs	r0, #97	@ 0x61
 8004920:	f7ff fa12 	bl	8003d48 <chain_command_complete_return>
			s_ret_buf_size);
}
 8004924:	bd10      	pop	{r4, pc}
			&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004926:	4b23      	ldr	r3, [pc, #140]	@ (80049b4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8004928:	7a1b      	ldrb	r3, [r3, #8]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d1ec      	bne.n	8004908 <HAL_ADC_ConvCpltCallback+0x10>
		s_ret_buf[s_ret_buf_size++] = 2;
 800492e:	4a20      	ldr	r2, [pc, #128]	@ (80049b0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8004930:	2101      	movs	r1, #1
 8004932:	7011      	strb	r1, [r2, #0]
 8004934:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8004936:	2002      	movs	r0, #2
 8004938:	7018      	strb	r0, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 800493a:	7010      	strb	r0, [r2, #0]
 800493c:	7059      	strb	r1, [r3, #1]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
 800493e:	491f      	ldr	r1, [pc, #124]	@ (80049bc <HAL_ADC_ConvCpltCallback+0xc4>)
 8004940:	8808      	ldrh	r0, [r1, #0]
 8004942:	2403      	movs	r4, #3
 8004944:	7014      	strb	r4, [r2, #0]
 8004946:	780c      	ldrb	r4, [r1, #0]
 8004948:	709c      	strb	r4, [r3, #2]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
 800494a:	2404      	movs	r4, #4
 800494c:	7014      	strb	r4, [r2, #0]
 800494e:	0a00      	lsrs	r0, r0, #8
 8004950:	70d8      	strb	r0, [r3, #3]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[1] & 0xFF);
 8004952:	8849      	ldrh	r1, [r1, #2]
 8004954:	2005      	movs	r0, #5
 8004956:	7010      	strb	r0, [r2, #0]
 8004958:	7119      	strb	r1, [r3, #4]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[1] >> 8) & 0xFF);
 800495a:	3001      	adds	r0, #1
 800495c:	7010      	strb	r0, [r2, #0]
 800495e:	0a09      	lsrs	r1, r1, #8
 8004960:	7159      	strb	r1, [r3, #5]
 8004962:	e7d9      	b.n	8004918 <HAL_ADC_ConvCpltCallback+0x20>
		s_ret_buf[s_ret_buf_size++] = 1;
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8004966:	2101      	movs	r1, #1
 8004968:	7019      	strb	r1, [r3, #0]
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800496c:	7011      	strb	r1, [r2, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 800496e:	2002      	movs	r0, #2
 8004970:	7018      	strb	r0, [r3, #0]
 8004972:	7051      	strb	r1, [r2, #1]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
 8004974:	4811      	ldr	r0, [pc, #68]	@ (80049bc <HAL_ADC_ConvCpltCallback+0xc4>)
 8004976:	8801      	ldrh	r1, [r0, #0]
 8004978:	2403      	movs	r4, #3
 800497a:	701c      	strb	r4, [r3, #0]
 800497c:	7800      	ldrb	r0, [r0, #0]
 800497e:	7090      	strb	r0, [r2, #2]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
 8004980:	2004      	movs	r0, #4
 8004982:	7018      	strb	r0, [r3, #0]
 8004984:	0a09      	lsrs	r1, r1, #8
 8004986:	70d1      	strb	r1, [r2, #3]
 8004988:	e7c6      	b.n	8004918 <HAL_ADC_ConvCpltCallback+0x20>
		s_ret_buf[s_ret_buf_size++] = 1;
 800498a:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800498c:	2101      	movs	r1, #1
 800498e:	7019      	strb	r1, [r3, #0]
 8004990:	4a09      	ldr	r2, [pc, #36]	@ (80049b8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8004992:	7011      	strb	r1, [r2, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 8004994:	2002      	movs	r0, #2
 8004996:	7018      	strb	r0, [r3, #0]
 8004998:	7051      	strb	r1, [r2, #1]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) (s_adc_buffer[0] & 0xFF);
 800499a:	4808      	ldr	r0, [pc, #32]	@ (80049bc <HAL_ADC_ConvCpltCallback+0xc4>)
 800499c:	8801      	ldrh	r1, [r0, #0]
 800499e:	2403      	movs	r4, #3
 80049a0:	701c      	strb	r4, [r3, #0]
 80049a2:	7800      	ldrb	r0, [r0, #0]
 80049a4:	7090      	strb	r0, [r2, #2]
		s_ret_buf[s_ret_buf_size++] = (uint8_t) ((s_adc_buffer[0] >> 8) & 0xFF);
 80049a6:	2004      	movs	r0, #4
 80049a8:	7018      	strb	r0, [r3, #0]
 80049aa:	0a09      	lsrs	r1, r1, #8
 80049ac:	70d1      	strb	r1, [r2, #3]
 80049ae:	e7b3      	b.n	8004918 <HAL_ADC_ConvCpltCallback+0x20>
 80049b0:	200004a8 	.word	0x200004a8
 80049b4:	20000390 	.word	0x20000390
 80049b8:	200004ac 	.word	0x200004ac
 80049bc:	200003a4 	.word	0x200003a4

080049c0 <chain_uart_adc_init>:

void chain_uart_adc_init(uint8_t *buffer, uint16_t size) {
 80049c0:	b510      	push	{r4, lr}
	if (size == 2) {
 80049c2:	2902      	cmp	r1, #2
 80049c4:	d11e      	bne.n	8004a04 <chain_uart_adc_init+0x44>
		if (buffer[0] == CHAIN_ADC_CHANNEL_ENABLE) {
 80049c6:	7803      	ldrb	r3, [r0, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d00f      	beq.n	80049ec <chain_uart_adc_init+0x2c>
			g_gpio_status[0].mode = CHAIN_ADC_WORK_STATUS;
			g_gpio_status[0].adc_channel = CHAIN_ADC_CHANNEL_ENABLE;
		}
		if (buffer[1] == CHAIN_ADC_CHANNEL_ENABLE) {
 80049cc:	7843      	ldrb	r3, [r0, #1]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d012      	beq.n	80049f8 <chain_uart_adc_init+0x38>
			g_gpio_status[1].mode = CHAIN_ADC_WORK_STATUS;
			g_gpio_status[1].adc_channel = CHAIN_ADC_CHANNEL_ENABLE;
		}
		MX_ADC1_Init();
 80049d2:	f000 fa91 	bl	8004ef8 <MX_ADC1_Init>
		s_ret_buf_size = 0;
 80049d6:	4b11      	ldr	r3, [pc, #68]	@ (8004a1c <chain_uart_adc_init+0x5c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_SUCCESS;
 80049dc:	3201      	adds	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	490f      	ldr	r1, [pc, #60]	@ (8004a20 <chain_uart_adc_init+0x60>)
 80049e2:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_ADC_INIT, s_ret_buf,
 80049e4:	2060      	movs	r0, #96	@ 0x60
 80049e6:	f7ff f9af 	bl	8003d48 <chain_command_complete_return>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
		chain_command_complete_return(CHAIN_GPIO_ADC_INIT, s_ret_buf,
				s_ret_buf_size);
	}
}
 80049ea:	bd10      	pop	{r4, pc}
			g_gpio_status[0].mode = CHAIN_ADC_WORK_STATUS;
 80049ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <chain_uart_adc_init+0x64>)
 80049ee:	2204      	movs	r2, #4
 80049f0:	701a      	strb	r2, [r3, #0]
			g_gpio_status[0].adc_channel = CHAIN_ADC_CHANNEL_ENABLE;
 80049f2:	3a03      	subs	r2, #3
 80049f4:	71da      	strb	r2, [r3, #7]
 80049f6:	e7e9      	b.n	80049cc <chain_uart_adc_init+0xc>
			g_gpio_status[1].mode = CHAIN_ADC_WORK_STATUS;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <chain_uart_adc_init+0x64>)
 80049fa:	2204      	movs	r2, #4
 80049fc:	721a      	strb	r2, [r3, #8]
			g_gpio_status[1].adc_channel = CHAIN_ADC_CHANNEL_ENABLE;
 80049fe:	3a03      	subs	r2, #3
 8004a00:	73da      	strb	r2, [r3, #15]
 8004a02:	e7e6      	b.n	80049d2 <chain_uart_adc_init+0x12>
		s_ret_buf_size = 0;
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <chain_uart_adc_init+0x5c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_UART_OPERATION_FAIL;
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	7019      	strb	r1, [r3, #0]
 8004a0e:	4904      	ldr	r1, [pc, #16]	@ (8004a20 <chain_uart_adc_init+0x60>)
 8004a10:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_ADC_INIT, s_ret_buf,
 8004a12:	3201      	adds	r2, #1
 8004a14:	2060      	movs	r0, #96	@ 0x60
 8004a16:	f7ff f997 	bl	8003d48 <chain_command_complete_return>
}
 8004a1a:	e7e6      	b.n	80049ea <chain_uart_adc_init+0x2a>
 8004a1c:	200004a8 	.word	0x200004a8
 8004a20:	200004ac 	.word	0x200004ac
 8004a24:	20000390 	.word	0x20000390

08004a28 <check_adc_mode>:

bool check_adc_mode(void) {
	if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 8004a28:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <check_adc_mode+0x1c>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d005      	beq.n	8004a3c <check_adc_mode+0x14>
			|| g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <check_adc_mode+0x1c>)
 8004a32:	7a1b      	ldrb	r3, [r3, #8]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d003      	beq.n	8004a40 <check_adc_mode+0x18>
		return true;
	}
	return false;
 8004a38:	2000      	movs	r0, #0
}
 8004a3a:	4770      	bx	lr
		return true;
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	e7fc      	b.n	8004a3a <check_adc_mode+0x12>
 8004a40:	2001      	movs	r0, #1
 8004a42:	e7fa      	b.n	8004a3a <check_adc_mode+0x12>
 8004a44:	20000390 	.word	0x20000390

08004a48 <chian_uart_adc_read>:

void chian_uart_adc_read(void) {
 8004a48:	b510      	push	{r4, lr}
	if (check_adc_mode()) {
 8004a4a:	f7ff ffed 	bl	8004a28 <check_adc_mode>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d026      	beq.n	8004aa0 <chian_uart_adc_read+0x58>
		if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS
 8004a52:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <chian_uart_adc_read+0x70>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d012      	beq.n	8004a80 <chian_uart_adc_read+0x38>
				&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
			s_adc_size = 2;
		} else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS) {
 8004a5a:	4b17      	ldr	r3, [pc, #92]	@ (8004ab8 <chian_uart_adc_read+0x70>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d016      	beq.n	8004a90 <chian_uart_adc_read+0x48>
			s_adc_size = 1;
		} else if (g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <chian_uart_adc_read+0x70>)
 8004a64:	7a1b      	ldrb	r3, [r3, #8]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d016      	beq.n	8004a98 <chian_uart_adc_read+0x50>
			s_adc_size = 1;
		}
		HAL_ADCEx_Calibration_Start(&hadc1); // AD校准
 8004a6a:	4c14      	ldr	r4, [pc, #80]	@ (8004abc <chian_uart_adc_read+0x74>)
 8004a6c:	0020      	movs	r0, r4
 8004a6e:	f002 f8f1 	bl	8006c54 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) s_adc_buffer, s_adc_size);
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <chian_uart_adc_read+0x78>)
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	4913      	ldr	r1, [pc, #76]	@ (8004ac4 <chian_uart_adc_read+0x7c>)
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f001 ffe3 	bl	8006a44 <HAL_ADC_Start_DMA>
		s_ret_buf_size = 0;
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
		chain_command_complete_return(CHAIN_GPIO_ADC_INIT, s_ret_buf,
				s_ret_buf_size);
	}
}
 8004a7e:	bd10      	pop	{r4, pc}
				&& g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004a80:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <chian_uart_adc_read+0x70>)
 8004a82:	7a1b      	ldrb	r3, [r3, #8]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d1e8      	bne.n	8004a5a <chian_uart_adc_read+0x12>
			s_adc_size = 2;
 8004a88:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <chian_uart_adc_read+0x78>)
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e7ec      	b.n	8004a6a <chian_uart_adc_read+0x22>
			s_adc_size = 1;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <chian_uart_adc_read+0x78>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e7e8      	b.n	8004a6a <chian_uart_adc_read+0x22>
			s_adc_size = 1;
 8004a98:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <chian_uart_adc_read+0x78>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e7e4      	b.n	8004a6a <chian_uart_adc_read+0x22>
		s_ret_buf_size = 0;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <chian_uart_adc_read+0x80>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = CHAIN_WORK_MODE_MISMATCHED;
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	4908      	ldr	r1, [pc, #32]	@ (8004acc <chian_uart_adc_read+0x84>)
 8004aac:	2302      	movs	r3, #2
 8004aae:	700b      	strb	r3, [r1, #0]
		chain_command_complete_return(CHAIN_GPIO_ADC_INIT, s_ret_buf,
 8004ab0:	2060      	movs	r0, #96	@ 0x60
 8004ab2:	f7ff f949 	bl	8003d48 <chain_command_complete_return>
}
 8004ab6:	e7e2      	b.n	8004a7e <chian_uart_adc_read+0x36>
 8004ab8:	20000390 	.word	0x20000390
 8004abc:	20000628 	.word	0x20000628
 8004ac0:	200003a0 	.word	0x200003a0
 8004ac4:	200003a4 	.word	0x200003a4
 8004ac8:	200004a8 	.word	0x200004a8
 8004acc:	200004ac 	.word	0x200004ac

08004ad0 <chain_get_gpio_work_status>:

void chain_get_gpio_work_status(void) {
 8004ad0:	b510      	push	{r4, lr}
	s_ret_buf_size = 0;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <chain_get_gpio_work_status+0x28>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
	s_ret_buf[s_ret_buf_size++] = g_gpio_status[0].mode;
 8004ad8:	3201      	adds	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	4a07      	ldr	r2, [pc, #28]	@ (8004afc <chain_get_gpio_work_status+0x2c>)
 8004ade:	7810      	ldrb	r0, [r2, #0]
 8004ae0:	4907      	ldr	r1, [pc, #28]	@ (8004b00 <chain_get_gpio_work_status+0x30>)
 8004ae2:	7008      	strb	r0, [r1, #0]
	s_ret_buf[s_ret_buf_size++] = g_gpio_status[1].mode;
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	7018      	strb	r0, [r3, #0]
 8004ae8:	7a13      	ldrb	r3, [r2, #8]
 8004aea:	704b      	strb	r3, [r1, #1]
	chain_command_complete_return(CHAIN_GET_WORK_STATION, s_ret_buf,
 8004aec:	2202      	movs	r2, #2
 8004aee:	306e      	adds	r0, #110	@ 0x6e
 8004af0:	f7ff f92a 	bl	8003d48 <chain_command_complete_return>
			s_ret_buf_size);
}
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	200004a8 	.word	0x200004a8
 8004afc:	20000390 	.word	0x20000390
 8004b00:	200004ac 	.word	0x200004ac

08004b04 <GPIO_init>:
 * 
 * @param None
 * @retval None
 */
void GPIO_init(void)
{
 8004b04:	b500      	push	{lr}
 8004b06:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Structure to hold GPIO initialization parameters
 8004b08:	2214      	movs	r2, #20
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	a801      	add	r0, sp, #4
 8004b0e:	f004 fc67 	bl	80093e0 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_8; // Specify the GPIO pin to configure
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Set pin mode to output push-pull
 8004b18:	3bff      	subs	r3, #255	@ 0xff
 8004b1a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No internal pull-up or pull-down
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Set speed to medium frequency
 8004b1c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Initialize GPIO with the specified settings
 8004b1e:	20a0      	movs	r0, #160	@ 0xa0
 8004b20:	a901      	add	r1, sp, #4
 8004b22:	05c0      	lsls	r0, r0, #23
 8004b24:	f002 fcba 	bl	800749c <HAL_GPIO_Init>
}
 8004b28:	b007      	add	sp, #28
 8004b2a:	bd00      	pop	{pc}

08004b2c <rgb_send_data>:
 * @param color 32-bit integer representing the RGB color value
 * @retval None
 */
void rgb_send_data(uint32_t color)
{
	for (uint8_t i = 0; i < 24; i++) // Loop through each bit of the 24-bit color value
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e04d      	b.n	8004bcc <rgb_send_data+0xa0>
		{
			out_bit_high(); // Set the output high if the bit is 1
		}
		else
		{
			out_bit_low(); // Set the output low if the bit is 0
 8004b30:	22a0      	movs	r2, #160	@ 0xa0
 8004b32:	05d2      	lsls	r2, r2, #23
 8004b34:	2180      	movs	r1, #128	@ 0x80
 8004b36:	0049      	lsls	r1, r1, #1
 8004b38:	6191      	str	r1, [r2, #24]
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	46c0      	nop			@ (mov r8, r8)
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	46c0      	nop			@ (mov r8, r8)
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	46c0      	nop			@ (mov r8, r8)
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	46c0      	nop			@ (mov r8, r8)
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	46c0      	nop			@ (mov r8, r8)
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	6291      	str	r1, [r2, #40]	@ 0x28
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46c0      	nop			@ (mov r8, r8)
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	46c0      	nop			@ (mov r8, r8)
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46c0      	nop			@ (mov r8, r8)
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	46c0      	nop			@ (mov r8, r8)
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	46c0      	nop			@ (mov r8, r8)
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	46c0      	nop			@ (mov r8, r8)
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46c0      	nop			@ (mov r8, r8)
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	46c0      	nop			@ (mov r8, r8)
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	46c0      	nop			@ (mov r8, r8)
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	46c0      	nop			@ (mov r8, r8)
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t i = 0; i < 24; i++) // Loop through each bit of the 24-bit color value
 8004bc8:	3301      	adds	r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b17      	cmp	r3, #23
 8004bce:	d900      	bls.n	8004bd2 <rgb_send_data+0xa6>
 8004bd0:	e055      	b.n	8004c7e <rgb_send_data+0x152>
		if (color & (1 << (23 - i))) // Check if the current bit is set
 8004bd2:	2117      	movs	r1, #23
 8004bd4:	1ac9      	subs	r1, r1, r3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	408a      	lsls	r2, r1
 8004bda:	4210      	tst	r0, r2
 8004bdc:	d100      	bne.n	8004be0 <rgb_send_data+0xb4>
 8004bde:	e7a7      	b.n	8004b30 <rgb_send_data+0x4>
			out_bit_high(); // Set the output high if the bit is 1
 8004be0:	22a0      	movs	r2, #160	@ 0xa0
 8004be2:	05d2      	lsls	r2, r2, #23
 8004be4:	2180      	movs	r1, #128	@ 0x80
 8004be6:	0049      	lsls	r1, r1, #1
 8004be8:	6191      	str	r1, [r2, #24]
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	46c0      	nop			@ (mov r8, r8)
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	46c0      	nop			@ (mov r8, r8)
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46c0      	nop			@ (mov r8, r8)
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	46c0      	nop			@ (mov r8, r8)
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	46c0      	nop			@ (mov r8, r8)
 8004c32:	6291      	str	r1, [r2, #40]	@ 0x28
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	46c0      	nop			@ (mov r8, r8)
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	46c0      	nop			@ (mov r8, r8)
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46c0      	nop			@ (mov r8, r8)
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	46c0      	nop			@ (mov r8, r8)
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	46c0      	nop			@ (mov r8, r8)
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	46c0      	nop			@ (mov r8, r8)
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	46c0      	nop			@ (mov r8, r8)
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	e7a4      	b.n	8004bc8 <rgb_send_data+0x9c>
		}
	}
}
 8004c7e:	4770      	bx	lr

08004c80 <set_color>:
 * @param color 32-bit integer representing the RGB color value to set
 * @retval None
 */
void set_color(uint8_t num, uint32_t color)
{
	s_color_buf[num] = color; // Update the color buffer at the specified index
 8004c80:	4b02      	ldr	r3, [pc, #8]	@ (8004c8c <set_color+0xc>)
 8004c82:	0080      	lsls	r0, r0, #2
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	5019      	str	r1, [r3, r0]
}
 8004c88:	4770      	bx	lr
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	200005c4 	.word	0x200005c4

08004c90 <rgb_show>:
 * 
 * @param None
 * @retval None
 */
void rgb_show(void)
{
 8004c90:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004c92:	b672      	cpsid	i
	__disable_irq(); // Disable interrupts for safe operation
	for (uint8_t i = 0; i < s_led_num; i++)
 8004c94:	2400      	movs	r4, #0
 8004c96:	e007      	b.n	8004ca8 <rgb_show+0x18>
	{
		rgb_send_data(s_color_buf[i]); // Send RGB data to each LED
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <rgb_show+0x78>)
 8004c9a:	00a2      	lsls	r2, r4, #2
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	5898      	ldr	r0, [r3, r2]
 8004ca0:	f7ff ff44 	bl	8004b2c <rgb_send_data>
	for (uint8_t i = 0; i < s_led_num; i++)
 8004ca4:	3401      	adds	r4, #1
 8004ca6:	b2e4      	uxtb	r4, r4
 8004ca8:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <rgb_show+0x7c>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d8f3      	bhi.n	8004c98 <rgb_show+0x8>
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb0:	b662      	cpsie	i
	}
	__enable_irq(); // Re-enable interrupts after sending data
	restart(); // Refresh the LED display
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e025      	b.n	8004d02 <rgb_show+0x72>
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	46c0      	nop			@ (mov r8, r8)
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	46c0      	nop			@ (mov r8, r8)
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	46c0      	nop			@ (mov r8, r8)
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	46c0      	nop			@ (mov r8, r8)
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46c0      	nop			@ (mov r8, r8)
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	46c0      	nop			@ (mov r8, r8)
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b84      	cmp	r3, #132	@ 0x84
 8004d04:	d9d7      	bls.n	8004cb6 <rgb_show+0x26>
}
 8004d06:	bd10      	pop	{r4, pc}
 8004d08:	200005c4 	.word	0x200005c4
 8004d0c:	200005c8 	.word	0x200005c8

08004d10 <rgb_value_convert>:
 * 
 * @param None
 * @retval uint32_t Combined RGB value as a single 32-bit integer
 */
uint32_t rgb_value_convert(void)
{
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d12:	b083      	sub	sp, #12
	uint8_t buf[3] = {0}; // Buffer to hold adjusted RGB values
 8004d14:	ab01      	add	r3, sp, #4
 8004d16:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <rgb_value_convert+0x60>)
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 3; i++)
 8004d20:	2600      	movs	r6, #0
 8004d22:	e019      	b.n	8004d58 <rgb_value_convert+0x48>
	{
		buf[i] = s_rgb_color[i] * (g_light / 100.0); // Adjust RGB values based on brightness
 8004d24:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <rgb_value_convert+0x64>)
 8004d26:	5d9f      	ldrb	r7, [r3, r6]
 8004d28:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <rgb_value_convert+0x68>)
 8004d2a:	7818      	ldrb	r0, [r3, #0]
 8004d2c:	b2c0      	uxtb	r0, r0
 8004d2e:	f7fe fd39 	bl	80037a4 <__aeabi_i2d>
 8004d32:	2200      	movs	r2, #0
 8004d34:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <rgb_value_convert+0x6c>)
 8004d36:	f7fd fb7b 	bl	8002430 <__aeabi_ddiv>
 8004d3a:	0004      	movs	r4, r0
 8004d3c:	000d      	movs	r5, r1
 8004d3e:	0038      	movs	r0, r7
 8004d40:	f7fe fd30 	bl	80037a4 <__aeabi_i2d>
 8004d44:	0022      	movs	r2, r4
 8004d46:	002b      	movs	r3, r5
 8004d48:	f7fd fe8c 	bl	8002a64 <__aeabi_dmul>
 8004d4c:	f7fd fb52 	bl	80023f4 <__aeabi_d2uiz>
 8004d50:	ab01      	add	r3, sp, #4
 8004d52:	5598      	strb	r0, [r3, r6]
	for (uint8_t i = 0; i < 3; i++)
 8004d54:	3601      	adds	r6, #1
 8004d56:	b2f6      	uxtb	r6, r6
 8004d58:	2e02      	cmp	r6, #2
 8004d5a:	d9e3      	bls.n	8004d24 <rgb_value_convert+0x14>
	}

	return (uint32_t)buf[2] | ((uint32_t)buf[0] << 8) | ((uint32_t)buf[1] << 16); // Combine RGB values
 8004d5c:	ab01      	add	r3, sp, #4
 8004d5e:	7898      	ldrb	r0, [r3, #2]
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	0212      	lsls	r2, r2, #8
 8004d64:	4310      	orrs	r0, r2
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	4318      	orrs	r0, r3
}
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d70:	08009498 	.word	0x08009498
 8004d74:	200005ac 	.word	0x200005ac
 8004d78:	200006e0 	.word	0x200006e0
 8004d7c:	40590000 	.word	0x40590000

08004d80 <rgb_init>:
 * 
 * @param None
 * @retval None
 */
void rgb_init(void)
{
 8004d80:	b510      	push	{r4, lr}
	GPIO_init(); // Initialize GPIO settings
 8004d82:	f7ff febf 	bl	8004b04 <GPIO_init>
	restart(); // Restart the LED display
 8004d86:	2300      	movs	r3, #0
 8004d88:	e025      	b.n	8004dd6 <rgb_init+0x56>
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46c0      	nop			@ (mov r8, r8)
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	46c0      	nop			@ (mov r8, r8)
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46c0      	nop			@ (mov r8, r8)
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	46c0      	nop			@ (mov r8, r8)
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	46c0      	nop			@ (mov r8, r8)
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46c0      	nop			@ (mov r8, r8)
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	46c0      	nop			@ (mov r8, r8)
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b84      	cmp	r3, #132	@ 0x84
 8004dd8:	d9d7      	bls.n	8004d8a <rgb_init+0xa>
	s_color_buf = (uint32_t *)calloc(RGB_NUM, sizeof(uint32_t)); // Allocate memory for color buffer
 8004dda:	2104      	movs	r1, #4
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f004 fa15 	bl	800920c <calloc>
 8004de2:	4b03      	ldr	r3, [pc, #12]	@ (8004df0 <rgb_init+0x70>)
 8004de4:	6018      	str	r0, [r3, #0]
	s_led_num = RGB_NUM; // Set the number of LEDs
 8004de6:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <rgb_init+0x74>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	701a      	strb	r2, [r3, #0]
}
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	200005c4 	.word	0x200005c4
 8004df4:	200005c8 	.word	0x200005c8

08004df8 <chain_set_rgb_value>:
 * @param buffer Pointer to the input buffer containing RGB values
 * @param size Length of the input RGB data
 * @retval None
 */
void chain_set_rgb_value(uint8_t *buffer, uint16_t size)
{
 8004df8:	b510      	push	{r4, lr}
	if (size == 3) // Check if the size of the buffer is 3
 8004dfa:	2903      	cmp	r1, #3
 8004dfc:	d00b      	beq.n	8004e16 <chain_set_rgb_value+0x1e>
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
									  s_ret_buf_size); // Return success response
	}
	else
	{
		s_ret_buf_size = 0; // Reset response buffer size for failure
 8004dfe:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <chain_set_rgb_value+0x54>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
 8004e04:	2101      	movs	r1, #1
 8004e06:	7019      	strb	r1, [r3, #0]
 8004e08:	4911      	ldr	r1, [pc, #68]	@ (8004e50 <chain_set_rgb_value+0x58>)
 8004e0a:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 8004e0c:	3201      	adds	r2, #1
 8004e0e:	2020      	movs	r0, #32
 8004e10:	f7fe ff9a 	bl	8003d48 <chain_command_complete_return>
									  s_ret_buf_size); // Return failure response
	}
}
 8004e14:	bd10      	pop	{r4, pc}
		s_rgb_color[0] = buffer[0]; // Set red value
 8004e16:	7802      	ldrb	r2, [r0, #0]
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <chain_set_rgb_value+0x5c>)
 8004e1a:	701a      	strb	r2, [r3, #0]
		s_rgb_color[1] = buffer[1]; // Set green value
 8004e1c:	7842      	ldrb	r2, [r0, #1]
 8004e1e:	705a      	strb	r2, [r3, #1]
		s_rgb_color[2] = buffer[2]; // Set blue value
 8004e20:	7882      	ldrb	r2, [r0, #2]
 8004e22:	709a      	strb	r2, [r3, #2]
		set_color(0, rgb_value_convert()); // Set the color based on converted RGB values
 8004e24:	f7ff ff74 	bl	8004d10 <rgb_value_convert>
 8004e28:	0001      	movs	r1, r0
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7ff ff28 	bl	8004c80 <set_color>
		rgb_show(); // Display the updated RGB values
 8004e30:	f7ff ff2e 	bl	8004c90 <rgb_show>
		s_ret_buf_size = 0; // Reset response buffer size
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <chain_set_rgb_value+0x54>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS; // Indicate success
 8004e3a:	3201      	adds	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	4904      	ldr	r1, [pc, #16]	@ (8004e50 <chain_set_rgb_value+0x58>)
 8004e40:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 8004e42:	2020      	movs	r0, #32
 8004e44:	f7fe ff80 	bl	8003d48 <chain_command_complete_return>
 8004e48:	e7e4      	b.n	8004e14 <chain_set_rgb_value+0x1c>
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	200005af 	.word	0x200005af
 8004e50:	200005b0 	.word	0x200005b0
 8004e54:	200005ac 	.word	0x200005ac

08004e58 <chain_get_rgb_value>:
 * 
 * @param None
 * @retval None
 */
void chain_get_rgb_value(void)
{
 8004e58:	b510      	push	{r4, lr}
    // Call the command complete function to return the current RGB color
    chain_command_complete_return(CHAIN_GET_RGB_VALUE, s_rgb_color,
 8004e5a:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <chain_get_rgb_value+0x10>)
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	2021      	movs	r0, #33	@ 0x21
 8004e60:	f7fe ff72 	bl	8003d48 <chain_command_complete_return>
                                  sizeof(s_rgb_color));
}
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	200005ac 	.word	0x200005ac

08004e6c <chain_set_light_value>:
 * 
 * @param value The desired brightness level (0-100).
 * @retval None
 */
void chain_set_light_value(uint8_t value)
{
 8004e6c:	b510      	push	{r4, lr}
    // Check if the brightness value is within valid range
    if (g_light <= 100)
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <chain_set_light_value+0x58>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b64      	cmp	r3, #100	@ 0x64
 8004e76:	d818      	bhi.n	8004eaa <chain_set_light_value+0x3e>
    {
        g_light = value; // Set the global brightness value
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <chain_set_light_value+0x58>)
 8004e7a:	7018      	strb	r0, [r3, #0]
        set_rgb_light(g_light); // Update the RGB light
 8004e7c:	7818      	ldrb	r0, [r3, #0]
 8004e7e:	b2c0      	uxtb	r0, r0
 8004e80:	f001 f9f8 	bl	8006274 <set_rgb_light>
        set_color(0, rgb_value_convert()); // Set the RGB color based on the current value
 8004e84:	f7ff ff44 	bl	8004d10 <rgb_value_convert>
 8004e88:	0001      	movs	r1, r0
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7ff fef8 	bl	8004c80 <set_color>
        rgb_show(); // Display the RGB light with updated settings
 8004e90:	f7ff fefe 	bl	8004c90 <rgb_show>
        s_ret_buf_size = 0; // Reset response buffer size
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <chain_set_light_value+0x5c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS; // Indicate success
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	490b      	ldr	r1, [pc, #44]	@ (8004ecc <chain_set_light_value+0x60>)
 8004ea0:	700a      	strb	r2, [r1, #0]
        // Return the command completion response
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
 8004ea2:	2022      	movs	r0, #34	@ 0x22
 8004ea4:	f7fe ff50 	bl	8003d48 <chain_command_complete_return>
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
        // Return the command completion response
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
                                      s_ret_buf_size);
    }
}
 8004ea8:	bd10      	pop	{r4, pc}
        s_ret_buf_size = 0; // Reset response buffer size for failure
 8004eaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <chain_set_light_value+0x5c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	7019      	strb	r1, [r3, #0]
 8004eb4:	4905      	ldr	r1, [pc, #20]	@ (8004ecc <chain_set_light_value+0x60>)
 8004eb6:	700a      	strb	r2, [r1, #0]
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
 8004eb8:	3201      	adds	r2, #1
 8004eba:	2022      	movs	r0, #34	@ 0x22
 8004ebc:	f7fe ff44 	bl	8003d48 <chain_command_complete_return>
}
 8004ec0:	e7f2      	b.n	8004ea8 <chain_set_light_value+0x3c>
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	200006e0 	.word	0x200006e0
 8004ec8:	200005af 	.word	0x200005af
 8004ecc:	200005b0 	.word	0x200005b0

08004ed0 <chain_get_light_value>:
 * 
 * @param None
 * @retval None
 */
void chain_get_light_value(void)
{
 8004ed0:	b510      	push	{r4, lr}
    s_ret_buf_size = 0; // Reset response buffer size
 8004ed2:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <chain_get_light_value+0x1c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
    s_ret_buf[s_ret_buf_size++] = g_light; // Add the current brightness value
 8004ed8:	3201      	adds	r2, #1
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <chain_get_light_value+0x20>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4904      	ldr	r1, [pc, #16]	@ (8004ef4 <chain_get_light_value+0x24>)
 8004ee2:	700b      	strb	r3, [r1, #0]
    // Return the command completion response
    chain_command_complete_return(CHAIN_GET_RGB_LIGHT, s_ret_buf,
 8004ee4:	2023      	movs	r0, #35	@ 0x23
 8004ee6:	f7fe ff2f 	bl	8003d48 <chain_command_complete_return>
                                  s_ret_buf_size);
}
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	200005af 	.word	0x200005af
 8004ef0:	200006e0 	.word	0x200006e0
 8004ef4:	200005b0 	.word	0x200005b0

08004ef8 <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

void MX_ADC1_Init(void) {
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */
  HAL_ADC_DeInit(&hadc1);
 8004efc:	4c37      	ldr	r4, [pc, #220]	@ (8004fdc <MX_ADC1_Init+0xe4>)
 8004efe:	0020      	movs	r0, r4
 8004f00:	f001 fe48 	bl	8006b94 <HAL_ADC_DeInit>
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f04:	220c      	movs	r2, #12
 8004f06:	2100      	movs	r1, #0
 8004f08:	a801      	add	r0, sp, #4
 8004f0a:	f004 fa69 	bl	80093e0 <memset>
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data
   * Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8004f0e:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <MX_ADC1_Init+0xe8>)
 8004f10:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	05db      	lsls	r3, r3, #23
 8004f16:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f1c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	0612      	lsls	r2, r2, #24
 8004f22:	6122      	str	r2, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f24:	2204      	movs	r2, #4
 8004f26:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004f28:	7623      	strb	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004f2a:	7663      	strb	r3, [r4, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004f2c:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004f2e:	3a03      	subs	r2, #3
 8004f30:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f32:	321f      	adds	r2, #31
 8004f34:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f36:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f38:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004f3a:	320c      	adds	r2, #12
 8004f3c:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f3e:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8004f40:	3a25      	subs	r2, #37	@ 0x25
 8004f42:	6362      	str	r2, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004f44:	3235      	adds	r2, #53	@ 0x35
 8004f46:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004f48:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004f4a:	0020      	movs	r0, r4
 8004f4c:	f001 fa1e 	bl	800638c <HAL_ADC_Init>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d10d      	bne.n	8004f70 <MX_ADC1_Init+0x78>
    Error_Handler();
  }

  /* USER CODE BEGIN ADC1_Init 2 */
  if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 8004f54:	4b23      	ldr	r3, [pc, #140]	@ (8004fe4 <MX_ADC1_Init+0xec>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d00c      	beq.n	8004f76 <MX_ADC1_Init+0x7e>
    }
    sConfig.Channel = ADC_CHANNEL_16;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
      Error_Handler();
    }
  } else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS) {
 8004f5c:	4b21      	ldr	r3, [pc, #132]	@ (8004fe4 <MX_ADC1_Init+0xec>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d024      	beq.n	8004fae <MX_ADC1_Init+0xb6>
    sConfig.Channel = ADC_CHANNEL_15;
    // sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
      Error_Handler();
    }
  } else if (g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <MX_ADC1_Init+0xec>)
 8004f66:	7a1b      	ldrb	r3, [r3, #8]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d02b      	beq.n	8004fc4 <MX_ADC1_Init+0xcc>
      Error_Handler();
    }
  }

  /* USER CODE END ADC1_Init 2 */
}
 8004f6c:	b004      	add	sp, #16
 8004f6e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004f70:	f000 fa58 	bl	8005424 <Error_Handler>
 8004f74:	e7ee      	b.n	8004f54 <MX_ADC1_Init+0x5c>
      g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8004f76:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <MX_ADC1_Init+0xec>)
 8004f78:	7a1b      	ldrb	r3, [r3, #8]
  if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d1ee      	bne.n	8004f5c <MX_ADC1_Init+0x64>
    sConfig.Channel = ADC_CHANNEL_15;
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <MX_ADC1_Init+0xf0>)
 8004f80:	9301      	str	r3, [sp, #4]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004f82:	2301      	movs	r3, #1
 8004f84:	9302      	str	r3, [sp, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004f86:	4815      	ldr	r0, [pc, #84]	@ (8004fdc <MX_ADC1_Init+0xe4>)
 8004f88:	a901      	add	r1, sp, #4
 8004f8a:	f001 fb75 	bl	8006678 <HAL_ADC_ConfigChannel>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d10a      	bne.n	8004fa8 <MX_ADC1_Init+0xb0>
    sConfig.Channel = ADC_CHANNEL_16;
 8004f92:	4b16      	ldr	r3, [pc, #88]	@ (8004fec <MX_ADC1_Init+0xf4>)
 8004f94:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004f96:	4811      	ldr	r0, [pc, #68]	@ (8004fdc <MX_ADC1_Init+0xe4>)
 8004f98:	a901      	add	r1, sp, #4
 8004f9a:	f001 fb6d 	bl	8006678 <HAL_ADC_ConfigChannel>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0e4      	beq.n	8004f6c <MX_ADC1_Init+0x74>
      Error_Handler();
 8004fa2:	f000 fa3f 	bl	8005424 <Error_Handler>
 8004fa6:	e7e1      	b.n	8004f6c <MX_ADC1_Init+0x74>
      Error_Handler();
 8004fa8:	f000 fa3c 	bl	8005424 <Error_Handler>
 8004fac:	e7f1      	b.n	8004f92 <MX_ADC1_Init+0x9a>
    sConfig.Channel = ADC_CHANNEL_15;
 8004fae:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <MX_ADC1_Init+0xf0>)
 8004fb0:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004fb2:	480a      	ldr	r0, [pc, #40]	@ (8004fdc <MX_ADC1_Init+0xe4>)
 8004fb4:	a901      	add	r1, sp, #4
 8004fb6:	f001 fb5f 	bl	8006678 <HAL_ADC_ConfigChannel>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0d6      	beq.n	8004f6c <MX_ADC1_Init+0x74>
      Error_Handler();
 8004fbe:	f000 fa31 	bl	8005424 <Error_Handler>
 8004fc2:	e7d3      	b.n	8004f6c <MX_ADC1_Init+0x74>
    sConfig.Channel = ADC_CHANNEL_16;
 8004fc4:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <MX_ADC1_Init+0xf4>)
 8004fc6:	9301      	str	r3, [sp, #4]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004fc8:	4804      	ldr	r0, [pc, #16]	@ (8004fdc <MX_ADC1_Init+0xe4>)
 8004fca:	a901      	add	r1, sp, #4
 8004fcc:	f001 fb54 	bl	8006678 <HAL_ADC_ConfigChannel>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0cb      	beq.n	8004f6c <MX_ADC1_Init+0x74>
      Error_Handler();
 8004fd4:	f000 fa26 	bl	8005424 <Error_Handler>
}
 8004fd8:	e7c8      	b.n	8004f6c <MX_ADC1_Init+0x74>
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	20000628 	.word	0x20000628
 8004fe0:	40012400 	.word	0x40012400
 8004fe4:	20000390 	.word	0x20000390
 8004fe8:	3c008000 	.word	0x3c008000
 8004fec:	40010000 	.word	0x40010000

08004ff0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff6:	2214      	movs	r2, #20
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	a803      	add	r0, sp, #12
 8004ffc:	f004 f9f0 	bl	80093e0 <memset>
  if (adcHandle->Instance == ADC1) {
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	4b3f      	ldr	r3, [pc, #252]	@ (8005100 <HAL_ADC_MspInit+0x110>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_ADC_MspInit+0x1c>
    __HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);

    /* USER CODE BEGIN ADC1_MspInit 1 */
    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005008:	b008      	add	sp, #32
 800500a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800500c:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <HAL_ADC_MspInit+0x114>)
 800500e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005010:	2180      	movs	r1, #128	@ 0x80
 8005012:	0349      	lsls	r1, r1, #13
 8005014:	430a      	orrs	r2, r1
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
 8005018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800501a:	400a      	ands	r2, r1
 800501c:	9201      	str	r2, [sp, #4]
 800501e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005020:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005022:	2201      	movs	r2, #1
 8005024:	4311      	orrs	r1, r2
 8005026:	6359      	str	r1, [r3, #52]	@ 0x34
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	401a      	ands	r2, r3
 800502c:	9202      	str	r2, [sp, #8]
 800502e:	9b02      	ldr	r3, [sp, #8]
    if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 8005030:	4b35      	ldr	r3, [pc, #212]	@ (8005108 <HAL_ADC_MspInit+0x118>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d020      	beq.n	800507a <HAL_ADC_MspInit+0x8a>
    } else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS) {
 8005038:	4b33      	ldr	r3, [pc, #204]	@ (8005108 <HAL_ADC_MspInit+0x118>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d038      	beq.n	80050b2 <HAL_ADC_MspInit+0xc2>
    } else if (g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <HAL_ADC_MspInit+0x118>)
 8005042:	7a1b      	ldrb	r3, [r3, #8]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d046      	beq.n	80050d6 <HAL_ADC_MspInit+0xe6>
    hdma_adc1.Instance = DMA1_Channel5;
 8005048:	4830      	ldr	r0, [pc, #192]	@ (800510c <HAL_ADC_MspInit+0x11c>)
 800504a:	4b31      	ldr	r3, [pc, #196]	@ (8005110 <HAL_ADC_MspInit+0x120>)
 800504c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800504e:	2305      	movs	r3, #5
 8005050:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005052:	2300      	movs	r3, #0
 8005054:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005056:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005058:	2280      	movs	r2, #128	@ 0x80
 800505a:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800505c:	3280      	adds	r2, #128	@ 0x80
 800505e:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	00d2      	lsls	r2, r2, #3
 8005064:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005066:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005068:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 800506a:	f001 ff63 	bl	8006f34 <HAL_DMA_Init>
 800506e:	2800      	cmp	r0, #0
 8005070:	d143      	bne.n	80050fa <HAL_ADC_MspInit+0x10a>
    __HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc1);
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <HAL_ADC_MspInit+0x11c>)
 8005074:	6523      	str	r3, [r4, #80]	@ 0x50
 8005076:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8005078:	e7c6      	b.n	8005008 <HAL_ADC_MspInit+0x18>
        g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 800507a:	4b23      	ldr	r3, [pc, #140]	@ (8005108 <HAL_ADC_MspInit+0x118>)
 800507c:	7a1b      	ldrb	r3, [r3, #8]
    if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 800507e:	2b04      	cmp	r3, #4
 8005080:	d1da      	bne.n	8005038 <HAL_ADC_MspInit+0x48>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 8005082:	2180      	movs	r1, #128	@ 0x80
 8005084:	25a0      	movs	r5, #160	@ 0xa0
 8005086:	05ed      	lsls	r5, r5, #23
 8005088:	0109      	lsls	r1, r1, #4
 800508a:	0028      	movs	r0, r5
 800508c:	f002 fac0 	bl	8007610 <HAL_GPIO_DeInit>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	0149      	lsls	r1, r1, #5
 8005094:	0028      	movs	r0, r5
 8005096:	f002 fabb 	bl	8007610 <HAL_GPIO_DeInit>
      GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800509a:	23c0      	movs	r3, #192	@ 0xc0
 800509c:	015b      	lsls	r3, r3, #5
 800509e:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a0:	2303      	movs	r3, #3
 80050a2:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a8:	a903      	add	r1, sp, #12
 80050aa:	0028      	movs	r0, r5
 80050ac:	f002 f9f6 	bl	800749c <HAL_GPIO_Init>
 80050b0:	e7ca      	b.n	8005048 <HAL_ADC_MspInit+0x58>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 80050b2:	2680      	movs	r6, #128	@ 0x80
 80050b4:	0136      	lsls	r6, r6, #4
 80050b6:	25a0      	movs	r5, #160	@ 0xa0
 80050b8:	05ed      	lsls	r5, r5, #23
 80050ba:	0031      	movs	r1, r6
 80050bc:	0028      	movs	r0, r5
 80050be:	f002 faa7 	bl	8007610 <HAL_GPIO_DeInit>
      GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050c2:	9603      	str	r6, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050c4:	2303      	movs	r3, #3
 80050c6:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050cc:	a903      	add	r1, sp, #12
 80050ce:	0028      	movs	r0, r5
 80050d0:	f002 f9e4 	bl	800749c <HAL_GPIO_Init>
 80050d4:	e7b8      	b.n	8005048 <HAL_ADC_MspInit+0x58>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80050d6:	2680      	movs	r6, #128	@ 0x80
 80050d8:	0176      	lsls	r6, r6, #5
 80050da:	25a0      	movs	r5, #160	@ 0xa0
 80050dc:	05ed      	lsls	r5, r5, #23
 80050de:	0031      	movs	r1, r6
 80050e0:	0028      	movs	r0, r5
 80050e2:	f002 fa95 	bl	8007610 <HAL_GPIO_DeInit>
      GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050e6:	9603      	str	r6, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050e8:	2303      	movs	r3, #3
 80050ea:	9304      	str	r3, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	9305      	str	r3, [sp, #20]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f0:	a903      	add	r1, sp, #12
 80050f2:	0028      	movs	r0, r5
 80050f4:	f002 f9d2 	bl	800749c <HAL_GPIO_Init>
 80050f8:	e7a6      	b.n	8005048 <HAL_ADC_MspInit+0x58>
      Error_Handler();
 80050fa:	f000 f993 	bl	8005424 <Error_Handler>
 80050fe:	e7b8      	b.n	8005072 <HAL_ADC_MspInit+0x82>
 8005100:	40012400 	.word	0x40012400
 8005104:	40021000 	.word	0x40021000
 8005108:	20000390 	.word	0x20000390
 800510c:	200005cc 	.word	0x200005cc
 8005110:	40020058 	.word	0x40020058

08005114 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle) {
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	0004      	movs	r4, r0

  if (adcHandle->Instance == ADC1) {
 8005118:	6802      	ldr	r2, [r0, #0]
 800511a:	4b1c      	ldr	r3, [pc, #112]	@ (800518c <HAL_ADC_MspDeInit+0x78>)
 800511c:	429a      	cmp	r2, r3
 800511e:	d000      	beq.n	8005122 <HAL_ADC_MspDeInit+0xe>
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8005120:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_DISABLE();
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_ADC_MspDeInit+0x7c>)
 8005124:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005126:	491b      	ldr	r1, [pc, #108]	@ (8005194 <HAL_ADC_MspDeInit+0x80>)
 8005128:	400b      	ands	r3, r1
 800512a:	6413      	str	r3, [r2, #64]	@ 0x40
    if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <HAL_ADC_MspDeInit+0x84>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d00b      	beq.n	800514c <HAL_ADC_MspDeInit+0x38>
    } else if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS) {
 8005134:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <HAL_ADC_MspDeInit+0x84>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d018      	beq.n	800516e <HAL_ADC_MspDeInit+0x5a>
    } else if (g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 800513c:	4b16      	ldr	r3, [pc, #88]	@ (8005198 <HAL_ADC_MspDeInit+0x84>)
 800513e:	7a1b      	ldrb	r3, [r3, #8]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d01b      	beq.n	800517c <HAL_ADC_MspDeInit+0x68>
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8005144:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005146:	f001 ff4d 	bl	8006fe4 <HAL_DMA_DeInit>
}
 800514a:	e7e9      	b.n	8005120 <HAL_ADC_MspDeInit+0xc>
        g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 800514c:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_ADC_MspDeInit+0x84>)
 800514e:	7a1b      	ldrb	r3, [r3, #8]
    if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS &&
 8005150:	2b04      	cmp	r3, #4
 8005152:	d1ef      	bne.n	8005134 <HAL_ADC_MspDeInit+0x20>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	25a0      	movs	r5, #160	@ 0xa0
 8005158:	05ed      	lsls	r5, r5, #23
 800515a:	0109      	lsls	r1, r1, #4
 800515c:	0028      	movs	r0, r5
 800515e:	f002 fa57 	bl	8007610 <HAL_GPIO_DeInit>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8005162:	2180      	movs	r1, #128	@ 0x80
 8005164:	0149      	lsls	r1, r1, #5
 8005166:	0028      	movs	r0, r5
 8005168:	f002 fa52 	bl	8007610 <HAL_GPIO_DeInit>
 800516c:	e7ea      	b.n	8005144 <HAL_ADC_MspDeInit+0x30>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 800516e:	2180      	movs	r1, #128	@ 0x80
 8005170:	20a0      	movs	r0, #160	@ 0xa0
 8005172:	0109      	lsls	r1, r1, #4
 8005174:	05c0      	lsls	r0, r0, #23
 8005176:	f002 fa4b 	bl	8007610 <HAL_GPIO_DeInit>
 800517a:	e7e3      	b.n	8005144 <HAL_ADC_MspDeInit+0x30>
      HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	20a0      	movs	r0, #160	@ 0xa0
 8005180:	0149      	lsls	r1, r1, #5
 8005182:	05c0      	lsls	r0, r0, #23
 8005184:	f002 fa44 	bl	8007610 <HAL_GPIO_DeInit>
 8005188:	e7dc      	b.n	8005144 <HAL_ADC_MspDeInit+0x30>
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	40012400 	.word	0x40012400
 8005190:	40021000 	.word	0x40021000
 8005194:	ffefffff 	.word	0xffefffff
 8005198:	20000390 	.word	0x20000390

0800519c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800519c:	b500      	push	{lr}
 800519e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051a0:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <MX_DMA_Init+0x58>)
 80051a2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80051a4:	2301      	movs	r3, #1
 80051a6:	4319      	orrs	r1, r3
 80051a8:	6391      	str	r1, [r2, #56]	@ 0x38
 80051aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051ac:	4013      	ands	r3, r2
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <MX_DMA_Init+0x5c>)
 80051b4:	22c2      	movs	r2, #194	@ 0xc2
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	5898      	ldr	r0, [r3, r2]
 80051ba:	4910      	ldr	r1, [pc, #64]	@ (80051fc <MX_DMA_Init+0x60>)
 80051bc:	4008      	ands	r0, r1
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	01c9      	lsls	r1, r1, #7
 80051c2:	4301      	orrs	r1, r0
 80051c4:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c6:	2180      	movs	r1, #128	@ 0x80
 80051c8:	0089      	lsls	r1, r1, #2
 80051ca:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051cc:	5898      	ldr	r0, [r3, r2]
 80051ce:	490c      	ldr	r1, [pc, #48]	@ (8005200 <MX_DMA_Init+0x64>)
 80051d0:	4008      	ands	r0, r1
 80051d2:	2180      	movs	r1, #128	@ 0x80
 80051d4:	03c9      	lsls	r1, r1, #15
 80051d6:	4301      	orrs	r1, r0
 80051d8:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051da:	32f8      	adds	r2, #248	@ 0xf8
 80051dc:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 1, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	2101      	movs	r1, #1
 80051e2:	200b      	movs	r0, #11
 80051e4:	f001 fe3e 	bl	8006e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80051e8:	200b      	movs	r0, #11
 80051ea:	f001 fe3f 	bl	8006e6c <HAL_NVIC_EnableIRQ>

}
 80051ee:	b003      	add	sp, #12
 80051f0:	bd00      	pop	{pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	40021000 	.word	0x40021000
 80051f8:	e000e100 	.word	0xe000e100
 80051fc:	ffff00ff 	.word	0xffff00ff
 8005200:	ff00ffff 	.word	0xff00ffff

08005204 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8005204:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <MX_GPIO_Init+0x28>)
 8005208:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800520a:	2201      	movs	r2, #1
 800520c:	4311      	orrs	r1, r2
 800520e:	6359      	str	r1, [r3, #52]	@ 0x34
 8005210:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005212:	400a      	ands	r2, r1
 8005214:	9200      	str	r2, [sp, #0]
 8005216:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005218:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800521a:	2202      	movs	r2, #2
 800521c:	4311      	orrs	r1, r2
 800521e:	6359      	str	r1, [r3, #52]	@ 0x34
 8005220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005222:	401a      	ands	r2, r3
 8005224:	9201      	str	r2, [sp, #4]
 8005226:	9b01      	ldr	r3, [sp, #4]

}
 8005228:	b002      	add	sp, #8
 800522a:	4770      	bx	lr
 800522c:	40021000 	.word	0x40021000

08005230 <HAL_I2C_MspInit>:
	/* USER CODE BEGIN I2C2_Init 2 */
	HAL_I2C_MspInit(&hi2c2);
	/* USER CODE END I2C2_Init 2 */
}
void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005230:	b510      	push	{r4, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	0004      	movs	r4, r0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005236:	2214      	movs	r2, #20
 8005238:	2100      	movs	r1, #0
 800523a:	a803      	add	r0, sp, #12
 800523c:	f004 f8d0 	bl	80093e0 <memset>
	if (i2cHandle->Instance == I2C2)
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	4b13      	ldr	r3, [pc, #76]	@ (8005290 <HAL_I2C_MspInit+0x60>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_I2C_MspInit+0x1c>
		/* I2C2 interrupt Init */
		/* USER CODE BEGIN I2C2_MspInit 1 */

		/* USER CODE END I2C2_MspInit 1 */
	}
}
 8005248:	b008      	add	sp, #32
 800524a:	bd10      	pop	{r4, pc}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800524c:	4c11      	ldr	r4, [pc, #68]	@ (8005294 <HAL_I2C_MspInit+0x64>)
 800524e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005250:	2301      	movs	r3, #1
 8005252:	431a      	orrs	r2, r3
 8005254:	6362      	str	r2, [r4, #52]	@ 0x34
 8005256:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005258:	401a      	ands	r2, r3
 800525a:	9201      	str	r2, [sp, #4]
 800525c:	9a01      	ldr	r2, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800525e:	22c0      	movs	r2, #192	@ 0xc0
 8005260:	0152      	lsls	r2, r2, #5
 8005262:	9203      	str	r2, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005264:	2212      	movs	r2, #18
 8005266:	9204      	str	r2, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005268:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800526a:	3301      	adds	r3, #1
 800526c:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800526e:	3304      	adds	r3, #4
 8005270:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005272:	20a0      	movs	r0, #160	@ 0xa0
 8005274:	a903      	add	r1, sp, #12
 8005276:	05c0      	lsls	r0, r0, #23
 8005278:	f002 f910 	bl	800749c <HAL_GPIO_Init>
		__HAL_RCC_I2C2_CLK_ENABLE();
 800527c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800527e:	2280      	movs	r2, #128	@ 0x80
 8005280:	03d2      	lsls	r2, r2, #15
 8005282:	4313      	orrs	r3, r2
 8005284:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005286:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005288:	4013      	ands	r3, r2
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	9b02      	ldr	r3, [sp, #8]
}
 800528e:	e7db      	b.n	8005248 <HAL_I2C_MspInit+0x18>
 8005290:	40005800 	.word	0x40005800
 8005294:	40021000 	.word	0x40021000

08005298 <MX_I2C2_Init>:
{
 8005298:	b510      	push	{r4, lr}
	hi2c2.Instance = I2C2;
 800529a:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <MX_I2C2_Init+0x78>)
 800529c:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <MX_I2C2_Init+0x7c>)
 800529e:	601a      	str	r2, [r3, #0]
	if (speed == CHAIN_I2C_LOW_SPEED_100KHZ)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d123      	bne.n	80052ec <MX_I2C2_Init+0x54>
		hi2c2.Init.Timing = 0x10B17DB5;
 80052a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <MX_I2C2_Init+0x80>)
 80052a6:	605a      	str	r2, [r3, #4]
		g_gpio_status[0].i2c_speed = CHAIN_I2C_LOW_SPEED_100KHZ;
 80052a8:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <MX_I2C2_Init+0x84>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	705a      	strb	r2, [r3, #1]
		g_gpio_status[1].i2c_speed = CHAIN_I2C_LOW_SPEED_100KHZ;
 80052ae:	725a      	strb	r2, [r3, #9]
	hi2c2.Init.OwnAddress1 = 0;
 80052b0:	4817      	ldr	r0, [pc, #92]	@ (8005310 <MX_I2C2_Init+0x78>)
 80052b2:	2300      	movs	r3, #0
 80052b4:	6083      	str	r3, [r0, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052b6:	2201      	movs	r2, #1
 80052b8:	60c2      	str	r2, [r0, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052ba:	6103      	str	r3, [r0, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80052bc:	6143      	str	r3, [r0, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052be:	6183      	str	r3, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052c0:	61c3      	str	r3, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052c2:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80052c4:	f002 fc60 	bl	8007b88 <HAL_I2C_Init>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d117      	bne.n	80052fc <MX_I2C2_Init+0x64>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052cc:	4810      	ldr	r0, [pc, #64]	@ (8005310 <MX_I2C2_Init+0x78>)
 80052ce:	2100      	movs	r1, #0
 80052d0:	f003 f8a0 	bl	8008414 <HAL_I2CEx_ConfigAnalogFilter>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d114      	bne.n	8005302 <MX_I2C2_Init+0x6a>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80052d8:	480d      	ldr	r0, [pc, #52]	@ (8005310 <MX_I2C2_Init+0x78>)
 80052da:	2100      	movs	r1, #0
 80052dc:	f003 f8c6 	bl	800846c <HAL_I2CEx_ConfigDigitalFilter>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d111      	bne.n	8005308 <MX_I2C2_Init+0x70>
	HAL_I2C_MspInit(&hi2c2);
 80052e4:	480a      	ldr	r0, [pc, #40]	@ (8005310 <MX_I2C2_Init+0x78>)
 80052e6:	f7ff ffa3 	bl	8005230 <HAL_I2C_MspInit>
}
 80052ea:	bd10      	pop	{r4, pc}
		hi2c2.Init.Timing = 0x00C12166;
 80052ec:	4b08      	ldr	r3, [pc, #32]	@ (8005310 <MX_I2C2_Init+0x78>)
 80052ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005320 <MX_I2C2_Init+0x88>)
 80052f0:	605a      	str	r2, [r3, #4]
		g_gpio_status[0].i2c_speed = CHAIN_I2C_MID_SPEED_400KHZ;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <MX_I2C2_Init+0x84>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	705a      	strb	r2, [r3, #1]
		g_gpio_status[1].i2c_speed = CHAIN_I2C_MID_SPEED_400KHZ;
 80052f8:	725a      	strb	r2, [r3, #9]
 80052fa:	e7d9      	b.n	80052b0 <MX_I2C2_Init+0x18>
		Error_Handler();
 80052fc:	f000 f892 	bl	8005424 <Error_Handler>
 8005300:	e7e4      	b.n	80052cc <MX_I2C2_Init+0x34>
		Error_Handler();
 8005302:	f000 f88f 	bl	8005424 <Error_Handler>
 8005306:	e7e7      	b.n	80052d8 <MX_I2C2_Init+0x40>
		Error_Handler();
 8005308:	f000 f88c 	bl	8005424 <Error_Handler>
 800530c:	e7ea      	b.n	80052e4 <MX_I2C2_Init+0x4c>
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	2000068c 	.word	0x2000068c
 8005314:	40005800 	.word	0x40005800
 8005318:	10b17db5 	.word	0x10b17db5
 800531c:	20000390 	.word	0x20000390
 8005320:	00c12166 	.word	0x00c12166

08005324 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef *i2cHandle)
{
 8005324:	b510      	push	{r4, lr}

	if (i2cHandle->Instance == I2C2)
 8005326:	6802      	ldr	r2, [r0, #0]
 8005328:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_I2C_MspDeInit+0x30>)
 800532a:	429a      	cmp	r2, r3
 800532c:	d000      	beq.n	8005330 <HAL_I2C_MspDeInit+0xc>

		/* I2C2 interrupt Deinit */
		/* USER CODE BEGIN I2C2_MspDeInit 1 */
		/* USER CODE END I2C2_MspDeInit 1 */
	}
}
 800532e:	bd10      	pop	{r4, pc}
		__HAL_RCC_I2C2_CLK_DISABLE();
 8005330:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <HAL_I2C_MspDeInit+0x34>)
 8005332:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8005334:	4909      	ldr	r1, [pc, #36]	@ (800535c <HAL_I2C_MspDeInit+0x38>)
 8005336:	400b      	ands	r3, r1
 8005338:	63d3      	str	r3, [r2, #60]	@ 0x3c
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 800533a:	2180      	movs	r1, #128	@ 0x80
 800533c:	24a0      	movs	r4, #160	@ 0xa0
 800533e:	05e4      	lsls	r4, r4, #23
 8005340:	0109      	lsls	r1, r1, #4
 8005342:	0020      	movs	r0, r4
 8005344:	f002 f964 	bl	8007610 <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8005348:	2180      	movs	r1, #128	@ 0x80
 800534a:	0149      	lsls	r1, r1, #5
 800534c:	0020      	movs	r0, r4
 800534e:	f002 f95f 	bl	8007610 <HAL_GPIO_DeInit>
}
 8005352:	e7ec      	b.n	800532e <HAL_I2C_MspDeInit+0xa>
 8005354:	40005800 	.word	0x40005800
 8005358:	40021000 	.word	0x40021000
 800535c:	ffbfffff 	.word	0xffbfffff

08005360 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <MX_IWDG_Init+0x30>)
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <MX_IWDG_Init+0x34>)
 8005364:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8005366:	4a0c      	ldr	r2, [pc, #48]	@ (8005398 <MX_IWDG_Init+0x38>)
 8005368:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800536a:	2202      	movs	r2, #2
 800536c:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 800536e:	4a0b      	ldr	r2, [pc, #44]	@ (800539c <MX_IWDG_Init+0x3c>)
 8005370:	609a      	str	r2, [r3, #8]
}
 8005372:	e002      	b.n	800537a <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8005374:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_16);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 8005376:	2b01      	cmp	r3, #1
 8005378:	d005      	beq.n	8005386 <MX_IWDG_Init+0x26>
 800537a:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <MX_IWDG_Init+0x30>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	075b      	lsls	r3, r3, #29
 8005380:	d1f8      	bne.n	8005374 <MX_IWDG_Init+0x14>
 8005382:	2301      	movs	r3, #1
 8005384:	e7f7      	b.n	8005376 <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8005386:	4b02      	ldr	r3, [pc, #8]	@ (8005390 <MX_IWDG_Init+0x30>)
 8005388:	4a05      	ldr	r2, [pc, #20]	@ (80053a0 <MX_IWDG_Init+0x40>)
 800538a:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800538c:	4770      	bx	lr
 800538e:	46c0      	nop			@ (mov r8, r8)
 8005390:	40003000 	.word	0x40003000
 8005394:	0000cccc 	.word	0x0000cccc
 8005398:	00005555 	.word	0x00005555
 800539c:	00000fff 	.word	0x00000fff
 80053a0:	0000aaaa 	.word	0x0000aaaa

080053a4 <iap_set>:
/**
 * @brief Set the Interrupt Vector Table for the application in SRAM.
 * @param None
 * @retval None
 */
void iap_set(void) {
 80053a4:	b082      	sub	sp, #8
  uint8_t i; // Loop index
  uint32_t *pVecTab =
 80053a6:	2280      	movs	r2, #128	@ 0x80
 80053a8:	0592      	lsls	r2, r2, #22
      (uint32_t *)(0x20000000); // Pointer to the vector table in SRAM

  // Copy the interrupt vector table from the application address to SRAM
  for (i = 0; i < 48; i++) {
 80053aa:	2300      	movs	r3, #0
 80053ac:	e007      	b.n	80053be <iap_set+0x1a>
    // Copy each vector entry to the SRAM vector table
    *(pVecTab++) = *(__IO uint32_t *)(APPLICATION_ADDRESS + (i << 2));
 80053ae:	0099      	lsls	r1, r3, #2
 80053b0:	480c      	ldr	r0, [pc, #48]	@ (80053e4 <iap_set+0x40>)
 80053b2:	4684      	mov	ip, r0
 80053b4:	4461      	add	r1, ip
 80053b6:	6809      	ldr	r1, [r1, #0]
 80053b8:	c202      	stmia	r2!, {r1}
  for (i = 0; i < 48; i++) {
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b2f      	cmp	r3, #47	@ 0x2f
 80053c0:	d9f5      	bls.n	80053ae <iap_set+0xa>
  }

  // Enable the SYSCFG peripheral clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c2:	4a09      	ldr	r2, [pc, #36]	@ (80053e8 <iap_set+0x44>)
 80053c4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80053c6:	2301      	movs	r3, #1
 80053c8:	4319      	orrs	r1, r3
 80053ca:	6411      	str	r1, [r2, #64]	@ 0x40
 80053cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80053ce:	4013      	ands	r3, r2
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	9b01      	ldr	r3, [sp, #4]

  // Remap the memory to use SRAM for the vector table
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 80053d4:	4a05      	ldr	r2, [pc, #20]	@ (80053ec <iap_set+0x48>)
 80053d6:	6813      	ldr	r3, [r2, #0]
 80053d8:	2103      	movs	r1, #3
 80053da:	430b      	orrs	r3, r1
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	b002      	add	sp, #8
 80053e0:	4770      	bx	lr
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	08002000 	.word	0x08002000
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40010000 	.word	0x40010000

080053f0 <chain_init>:
/**
 * @brief Initialize the chain device settings.
 * @param None
 * @retval None
 */
void chain_init(void) {
 80053f0:	b510      	push	{r4, lr}
  // Get the version of the bootloader
  g_bootloader_version = get_bootloader_version();
 80053f2:	f000 ff61 	bl	80062b8 <get_bootloader_version>
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <chain_init+0x2c>)
 80053f8:	7018      	strb	r0, [r3, #0]

  // Check if the RGB light setting is set to maximum (0xFF)
  if (get_rgb_light() == 0xFF) {
 80053fa:	f000 ff35 	bl	8006268 <get_rgb_light>
 80053fe:	28ff      	cmp	r0, #255	@ 0xff
 8005400:	d004      	beq.n	800540c <chain_init+0x1c>
    // Set the light to a base color if it is maximum
    g_light = RGB_LIGHT_BASE;
    set_rgb_light(g_light);
  } else {
    // Otherwise, get the current RGB light setting
    g_light = get_rgb_light();
 8005402:	f000 ff31 	bl	8006268 <get_rgb_light>
 8005406:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <chain_init+0x30>)
 8005408:	7018      	strb	r0, [r3, #0]
  }
}
 800540a:	bd10      	pop	{r4, pc}
    g_light = RGB_LIGHT_BASE;
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <chain_init+0x30>)
 800540e:	220a      	movs	r2, #10
 8005410:	701a      	strb	r2, [r3, #0]
    set_rgb_light(g_light);
 8005412:	7818      	ldrb	r0, [r3, #0]
 8005414:	b2c0      	uxtb	r0, r0
 8005416:	f000 ff2d 	bl	8006274 <set_rgb_light>
 800541a:	e7f6      	b.n	800540a <chain_init+0x1a>
 800541c:	200006e4 	.word	0x200006e4
 8005420:	200006e0 	.word	0x200006e0

08005424 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005424:	b672      	cpsid	i
  */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8005426:	e7fe      	b.n	8005426 <Error_Handler+0x2>

08005428 <SystemClock_Config>:
void SystemClock_Config(void) {
 8005428:	b500      	push	{lr}
 800542a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800542c:	2238      	movs	r2, #56	@ 0x38
 800542e:	2100      	movs	r1, #0
 8005430:	a804      	add	r0, sp, #16
 8005432:	f003 ffd5 	bl	80093e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005436:	2210      	movs	r2, #16
 8005438:	2100      	movs	r1, #0
 800543a:	4668      	mov	r0, sp
 800543c:	f003 ffd0 	bl	80093e0 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005440:	2080      	movs	r0, #128	@ 0x80
 8005442:	0080      	lsls	r0, r0, #2
 8005444:	f003 f83c 	bl	80084c0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType =
 8005448:	230a      	movs	r3, #10
 800544a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800544c:	33f6      	adds	r3, #246	@ 0xf6
 800544e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005450:	2300      	movs	r3, #0
 8005452:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005454:	2240      	movs	r2, #64	@ 0x40
 8005456:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005458:	3a3f      	subs	r2, #63	@ 0x3f
 800545a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800545c:	3201      	adds	r2, #1
 800545e:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005460:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005462:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005464:	3308      	adds	r3, #8
 8005466:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800546e:	23c0      	movs	r3, #192	@ 0xc0
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	059b      	lsls	r3, r3, #22
 8005478:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800547a:	a804      	add	r0, sp, #16
 800547c:	f003 f84a 	bl	8008514 <HAL_RCC_OscConfig>
 8005480:	2800      	cmp	r0, #0
 8005482:	d10e      	bne.n	80054a2 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType =
 8005484:	2307      	movs	r3, #7
 8005486:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005488:	3b05      	subs	r3, #5
 800548a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800548c:	2300      	movs	r3, #0
 800548e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005490:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8005492:	2102      	movs	r1, #2
 8005494:	4668      	mov	r0, sp
 8005496:	f003 faf5 	bl	8008a84 <HAL_RCC_ClockConfig>
 800549a:	2800      	cmp	r0, #0
 800549c:	d103      	bne.n	80054a6 <SystemClock_Config+0x7e>
}
 800549e:	b013      	add	sp, #76	@ 0x4c
 80054a0:	bd00      	pop	{pc}
    Error_Handler();
 80054a2:	f7ff ffbf 	bl	8005424 <Error_Handler>
    Error_Handler();
 80054a6:	f7ff ffbd 	bl	8005424 <Error_Handler>
	...

080054ac <main>:
int main(void) {
 80054ac:	b530      	push	{r4, r5, lr}
 80054ae:	b083      	sub	sp, #12
  iap_set();
 80054b0:	f7ff ff78 	bl	80053a4 <iap_set>
  chain_init();
 80054b4:	f7ff ff9c 	bl	80053f0 <chain_init>
  HAL_Init();
 80054b8:	f000 ff30 	bl	800631c <HAL_Init>
  SystemClock_Config();
 80054bc:	f7ff ffb4 	bl	8005428 <SystemClock_Config>
  MX_GPIO_Init();
 80054c0:	f7ff fea0 	bl	8005204 <MX_GPIO_Init>
  MX_DMA_Init();
 80054c4:	f7ff fe6a 	bl	800519c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80054c8:	f000 fbde 	bl	8005c88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80054cc:	f000 fd40 	bl	8005f50 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80054d0:	f7ff ff46 	bl	8005360 <MX_IWDG_Init>
  MX_TIM14_Init();
 80054d4:	f000 fb00 	bl	8005ad8 <MX_TIM14_Init>
  MX_TIM16_Init();
 80054d8:	f000 fb3a 	bl	8005b50 <MX_TIM16_Init>
  rgb_init();
 80054dc:	f7ff fc50 	bl	8004d80 <rgb_init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80054e0:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <main+0x19c>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	2101      	movs	r1, #1
 80054e6:	430a      	orrs	r2, r1
 80054e8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	e01e      	b.n	8005530 <main+0x84>
      switch (g_cmd_buf[0]) {
 80054f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80054f4:	d100      	bne.n	80054f8 <main+0x4c>
 80054f6:	e0a3      	b.n	8005640 <main+0x194>
 80054f8:	d907      	bls.n	800550a <main+0x5e>
 80054fa:	2bff      	cmp	r3, #255	@ 0xff
 80054fc:	d112      	bne.n	8005524 <main+0x78>
        chain_iap_update_handle(g_cmd_buf[1]);
 80054fe:	4b53      	ldr	r3, [pc, #332]	@ (800564c <main+0x1a0>)
 8005500:	7858      	ldrb	r0, [r3, #1]
 8005502:	b2c0      	uxtb	r0, r0
 8005504:	f7fe fc88 	bl	8003e18 <chain_iap_update_handle>
        break;
 8005508:	e00c      	b.n	8005524 <main+0x78>
      switch (g_cmd_buf[0]) {
 800550a:	2bf9      	cmp	r3, #249	@ 0xf9
 800550c:	d100      	bne.n	8005510 <main+0x64>
 800550e:	e094      	b.n	800563a <main+0x18e>
 8005510:	2bfa      	cmp	r3, #250	@ 0xfa
 8005512:	d107      	bne.n	8005524 <main+0x78>
        chain_get_firmware_version_handle();
 8005514:	f7fe fc6c 	bl	8003df0 <chain_get_firmware_version_handle>
        break;
 8005518:	e004      	b.n	8005524 <main+0x78>
        chain_uart_i2c_init(g_cmd_buf[1]);
 800551a:	4b4c      	ldr	r3, [pc, #304]	@ (800564c <main+0x1a0>)
 800551c:	7858      	ldrb	r0, [r3, #1]
 800551e:	b2c0      	uxtb	r0, r0
 8005520:	f7fe fcd8 	bl	8003ed4 <chain_uart_i2c_init>
      g_cmd_status = CMD_SPACE_IDLE_STATUS;
 8005524:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <main+0x1a4>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	4b4a      	ldr	r3, [pc, #296]	@ (8005654 <main+0x1a8>)
 800552c:	4a4a      	ldr	r2, [pc, #296]	@ (8005658 <main+0x1ac>)
 800552e:	601a      	str	r2, [r3, #0]
    if (g_cmd_status == CMD_SPACE_BUSY_STATUS) {
 8005530:	4b47      	ldr	r3, [pc, #284]	@ (8005650 <main+0x1a4>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d1f8      	bne.n	800552a <main+0x7e>
      switch (g_cmd_buf[0]) {
 8005538:	4b44      	ldr	r3, [pc, #272]	@ (800564c <main+0x1a0>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b70      	cmp	r3, #112	@ 0x70
 8005540:	d8d7      	bhi.n	80054f2 <main+0x46>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d3ee      	bcc.n	8005524 <main+0x78>
 8005546:	3b10      	subs	r3, #16
 8005548:	b2da      	uxtb	r2, r3
 800554a:	2a60      	cmp	r2, #96	@ 0x60
 800554c:	d8ea      	bhi.n	8005524 <main+0x78>
 800554e:	0093      	lsls	r3, r2, #2
 8005550:	4a42      	ldr	r2, [pc, #264]	@ (800565c <main+0x1b0>)
 8005552:	58d3      	ldr	r3, [r2, r3]
 8005554:	469f      	mov	pc, r3
        chain_i2c_read(g_cmd_buf[1], g_cmd_buf[2]);
 8005556:	4b3d      	ldr	r3, [pc, #244]	@ (800564c <main+0x1a0>)
 8005558:	7858      	ldrb	r0, [r3, #1]
 800555a:	b2c0      	uxtb	r0, r0
 800555c:	7899      	ldrb	r1, [r3, #2]
 800555e:	b2c9      	uxtb	r1, r1
 8005560:	f7fe fcec 	bl	8003f3c <chain_i2c_read>
        break;
 8005564:	e7de      	b.n	8005524 <main+0x78>
        chain_i2c_write(g_cmd_buf[1], (uint8_t *)(g_cmd_buf + 3), g_cmd_buf[2]);
 8005566:	4939      	ldr	r1, [pc, #228]	@ (800564c <main+0x1a0>)
 8005568:	7848      	ldrb	r0, [r1, #1]
 800556a:	b2c0      	uxtb	r0, r0
 800556c:	788a      	ldrb	r2, [r1, #2]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	3103      	adds	r1, #3
 8005572:	f7fe fd43 	bl	8003ffc <chain_i2c_write>
        break;
 8005576:	e7d5      	b.n	8005524 <main+0x78>
        chain_i2c_mem_read(g_cmd_buf[1], ((g_cmd_buf[4] << 8) | g_cmd_buf[3]),
 8005578:	4b34      	ldr	r3, [pc, #208]	@ (800564c <main+0x1a0>)
 800557a:	7858      	ldrb	r0, [r3, #1]
 800557c:	b2c0      	uxtb	r0, r0
 800557e:	791c      	ldrb	r4, [r3, #4]
 8005580:	0224      	lsls	r4, r4, #8
 8005582:	78d9      	ldrb	r1, [r3, #3]
                           g_cmd_buf[2], g_cmd_buf[5]);
 8005584:	789a      	ldrb	r2, [r3, #2]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	795b      	ldrb	r3, [r3, #5]
 800558a:	b2db      	uxtb	r3, r3
        chain_i2c_mem_read(g_cmd_buf[1], ((g_cmd_buf[4] << 8) | g_cmd_buf[3]),
 800558c:	4321      	orrs	r1, r4
 800558e:	f7fe fd83 	bl	8004098 <chain_i2c_mem_read>
        break;
 8005592:	e7c7      	b.n	8005524 <main+0x78>
        chain_i2c_mem_write(g_cmd_buf[1], ((g_cmd_buf[4] << 8) | g_cmd_buf[3]),
 8005594:	4c2d      	ldr	r4, [pc, #180]	@ (800564c <main+0x1a0>)
 8005596:	7860      	ldrb	r0, [r4, #1]
 8005598:	b2c0      	uxtb	r0, r0
 800559a:	7925      	ldrb	r5, [r4, #4]
 800559c:	022d      	lsls	r5, r5, #8
 800559e:	78e1      	ldrb	r1, [r4, #3]
                            g_cmd_buf[2], g_cmd_buf[5],
 80055a0:	78a2      	ldrb	r2, [r4, #2]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	7963      	ldrb	r3, [r4, #5]
 80055a6:	b2db      	uxtb	r3, r3
        chain_i2c_mem_write(g_cmd_buf[1], ((g_cmd_buf[4] << 8) | g_cmd_buf[3]),
 80055a8:	4329      	orrs	r1, r5
 80055aa:	3406      	adds	r4, #6
 80055ac:	9400      	str	r4, [sp, #0]
 80055ae:	f7fe fddb 	bl	8004168 <chain_i2c_mem_write>
        break;
 80055b2:	e7b7      	b.n	8005524 <main+0x78>
        chain_get_i2c_device_addr();
 80055b4:	f7fe fe2e 	bl	8004214 <chain_get_i2c_device_addr>
        break;
 80055b8:	e7b4      	b.n	8005524 <main+0x78>
        chian_uart_output_init((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 80055ba:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <main+0x1b4>)
 80055bc:	7819      	ldrb	r1, [r3, #0]
 80055be:	3901      	subs	r1, #1
 80055c0:	b289      	uxth	r1, r1
 80055c2:	4828      	ldr	r0, [pc, #160]	@ (8005664 <main+0x1b8>)
 80055c4:	f7fe fed8 	bl	8004378 <chian_uart_output_init>
        break;
 80055c8:	e7ac      	b.n	8005524 <main+0x78>
        chain_uart_input_init((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 80055ca:	4b25      	ldr	r3, [pc, #148]	@ (8005660 <main+0x1b4>)
 80055cc:	7819      	ldrb	r1, [r3, #0]
 80055ce:	3901      	subs	r1, #1
 80055d0:	b289      	uxth	r1, r1
 80055d2:	4824      	ldr	r0, [pc, #144]	@ (8005664 <main+0x1b8>)
 80055d4:	f7fe ff98 	bl	8004508 <chain_uart_input_init>
        break;
 80055d8:	e7a4      	b.n	8005524 <main+0x78>
        chain_uart_read_pin_level(g_cmd_buf[1]);
 80055da:	4b1c      	ldr	r3, [pc, #112]	@ (800564c <main+0x1a0>)
 80055dc:	7858      	ldrb	r0, [r3, #1]
 80055de:	b2c0      	uxtb	r0, r0
 80055e0:	f7ff f80c 	bl	80045fc <chain_uart_read_pin_level>
        break;
 80055e4:	e79e      	b.n	8005524 <main+0x78>
        chian_uart_nvic_init((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 80055e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005660 <main+0x1b4>)
 80055e8:	7819      	ldrb	r1, [r3, #0]
 80055ea:	3901      	subs	r1, #1
 80055ec:	b289      	uxth	r1, r1
 80055ee:	481d      	ldr	r0, [pc, #116]	@ (8005664 <main+0x1b8>)
 80055f0:	f7ff f90e 	bl	8004810 <chian_uart_nvic_init>
        break;
 80055f4:	e796      	b.n	8005524 <main+0x78>
        chain_uart_adc_init((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 80055f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005660 <main+0x1b4>)
 80055f8:	7819      	ldrb	r1, [r3, #0]
 80055fa:	3901      	subs	r1, #1
 80055fc:	b289      	uxth	r1, r1
 80055fe:	4819      	ldr	r0, [pc, #100]	@ (8005664 <main+0x1b8>)
 8005600:	f7ff f9de 	bl	80049c0 <chain_uart_adc_init>
        break;
 8005604:	e78e      	b.n	8005524 <main+0x78>
        chian_uart_adc_read();
 8005606:	f7ff fa1f 	bl	8004a48 <chian_uart_adc_read>
        break;
 800560a:	e78b      	b.n	8005524 <main+0x78>
        chain_get_gpio_work_status();
 800560c:	f7ff fa60 	bl	8004ad0 <chain_get_gpio_work_status>
        break;
 8005610:	e788      	b.n	8005524 <main+0x78>
        chain_set_rgb_value((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 8005612:	4b13      	ldr	r3, [pc, #76]	@ (8005660 <main+0x1b4>)
 8005614:	7819      	ldrb	r1, [r3, #0]
 8005616:	3901      	subs	r1, #1
 8005618:	b289      	uxth	r1, r1
 800561a:	4812      	ldr	r0, [pc, #72]	@ (8005664 <main+0x1b8>)
 800561c:	f7ff fbec 	bl	8004df8 <chain_set_rgb_value>
        break;
 8005620:	e780      	b.n	8005524 <main+0x78>
        chain_get_rgb_value();
 8005622:	f7ff fc19 	bl	8004e58 <chain_get_rgb_value>
        break;
 8005626:	e77d      	b.n	8005524 <main+0x78>
        chain_set_light_value(g_cmd_buf[1]);
 8005628:	4b08      	ldr	r3, [pc, #32]	@ (800564c <main+0x1a0>)
 800562a:	7858      	ldrb	r0, [r3, #1]
 800562c:	b2c0      	uxtb	r0, r0
 800562e:	f7ff fc1d 	bl	8004e6c <chain_set_light_value>
        break;
 8005632:	e777      	b.n	8005524 <main+0x78>
        chain_get_light_value();
 8005634:	f7ff fc4c 	bl	8004ed0 <chain_get_light_value>
        break;
 8005638:	e774      	b.n	8005524 <main+0x78>
        chain_get_bootloader_version_handle();
 800563a:	f7fe fbcf 	bl	8003ddc <chain_get_bootloader_version_handle>
        break;
 800563e:	e771      	b.n	8005524 <main+0x78>
        chain_get_device_type_handle();
 8005640:	f7fe fbe0 	bl	8003e04 <chain_get_device_type_handle>
        break;
 8005644:	e76e      	b.n	8005524 <main+0x78>
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	40002000 	.word	0x40002000
 800564c:	200006e8 	.word	0x200006e8
 8005650:	200006e5 	.word	0x200006e5
 8005654:	40003000 	.word	0x40003000
 8005658:	0000aaaa 	.word	0x0000aaaa
 800565c:	080094dc 	.word	0x080094dc
 8005660:	200006e6 	.word	0x200006e6
 8005664:	200006e9 	.word	0x200006e9

08005668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005668:	b500      	push	{lr}
 800566a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800566c:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <HAL_MspInit+0x3c>)
 800566e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005670:	2201      	movs	r2, #1
 8005672:	4311      	orrs	r1, r2
 8005674:	6419      	str	r1, [r3, #64]	@ 0x40
 8005676:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005678:	400a      	ands	r2, r1
 800567a:	9200      	str	r2, [sp, #0]
 800567c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005680:	2180      	movs	r1, #128	@ 0x80
 8005682:	0549      	lsls	r1, r1, #21
 8005684:	430a      	orrs	r2, r1
 8005686:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	400b      	ands	r3, r1
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2101      	movs	r1, #1
 8005694:	2003      	movs	r0, #3
 8005696:	f001 fbe5 	bl	8006e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800569a:	2003      	movs	r0, #3
 800569c:	f001 fbe6 	bl	8006e6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056a0:	b003      	add	sp, #12
 80056a2:	bd00      	pop	{pc}
 80056a4:	40021000 	.word	0x40021000

080056a8 <uart_in_data_pack_type>:
 * @param buffer Pointer to the data buffer containing the incoming packet.
 * @param size Length of the data in the buffer.
 * @retval The type of data packet as defined by various enumeration constants,
 *         or an error code if the packet check fails.
 */
uint8_t uart_in_data_pack_type(uint8_t *buffer, uint16_t size) {
 80056a8:	b510      	push	{r4, lr}
 80056aa:	0004      	movs	r4, r0
  // Check if the packet is valid
  if (pack_check(buffer, size) == CHECK_PASS) {
 80056ac:	f7fe faaf 	bl	8003c0e <pack_check>
 80056b0:	2801      	cmp	r0, #1
 80056b2:	d001      	beq.n	80056b8 <uart_in_data_pack_type+0x10>
      return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
    } else if (buffer[4] == 1) {
      return CHAIN_HANDLE_DATA_PACK; // Packet type: Chain Handle
    }
  }
  return ERROR_DATA_PACK; // Return error code for invalid packet
 80056b4:	2000      	movs	r0, #0
}
 80056b6:	bd10      	pop	{r4, pc}
    if (buffer[5] == CHAIN_ENUM) {
 80056b8:	7963      	ldrb	r3, [r4, #5]
 80056ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80056bc:	d006      	beq.n	80056cc <uart_in_data_pack_type+0x24>
    } else if (buffer[5] == CHAIN_HEARTBEAT) {
 80056be:	2bfd      	cmp	r3, #253	@ 0xfd
 80056c0:	d0f9      	beq.n	80056b6 <uart_in_data_pack_type+0xe>
    } else if (buffer[4] != 1) {
 80056c2:	7923      	ldrb	r3, [r4, #4]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d003      	beq.n	80056d0 <uart_in_data_pack_type+0x28>
      return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
 80056c8:	3003      	adds	r0, #3
 80056ca:	e7f4      	b.n	80056b6 <uart_in_data_pack_type+0xe>
      return CHAIN_ENUM_DATA_PACK; // Packet type: Chain Enum
 80056cc:	2002      	movs	r0, #2
 80056ce:	e7f2      	b.n	80056b6 <uart_in_data_pack_type+0xe>
      return CHAIN_HANDLE_DATA_PACK; // Packet type: Chain Handle
 80056d0:	2005      	movs	r0, #5
 80056d2:	e7f0      	b.n	80056b6 <uart_in_data_pack_type+0xe>

080056d4 <uart_out_data_pack_type>:
 * @param buffer Pointer to the data buffer containing the outgoing packet.
 * @param size Length of the data in the buffer.
 * @retval The type of data packet as defined by various enumeration constants,
 *         or an error code if the packet check fails.
 */
uint8_t uart_out_data_pack_type(uint8_t *buffer, uint16_t size) {
 80056d4:	b510      	push	{r4, lr}
 80056d6:	0004      	movs	r4, r0
  // Check if the packet is valid
  if (pack_check(buffer, size) == CHECK_PASS) {
 80056d8:	f7fe fa99 	bl	8003c0e <pack_check>
 80056dc:	2801      	cmp	r0, #1
 80056de:	d001      	beq.n	80056e4 <uart_out_data_pack_type+0x10>
      return CHAIN_ENUM_PLEASE_DATA_PACK; // Packet type: Chain Enum Please
    } else {
      return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
    }
  }
  return ERROR_DATA_PACK; // Return error code for invalid packet
 80056e0:	2000      	movs	r0, #0
}
 80056e2:	bd10      	pop	{r4, pc}
    if (buffer[5] == CHAIN_HEARTBEAT) {
 80056e4:	7963      	ldrb	r3, [r4, #5]
 80056e6:	2bfd      	cmp	r3, #253	@ 0xfd
 80056e8:	d0fb      	beq.n	80056e2 <uart_out_data_pack_type+0xe>
    } else if (buffer[5] == CHAIN_ENUM) {
 80056ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80056ec:	d005      	beq.n	80056fa <uart_out_data_pack_type+0x26>
    } else if (buffer[5] == CHAIN_ENUM_PLEASE) {
 80056ee:	2bfc      	cmp	r3, #252	@ 0xfc
 80056f0:	d001      	beq.n	80056f6 <uart_out_data_pack_type+0x22>
      return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
 80056f2:	2004      	movs	r0, #4
 80056f4:	e7f5      	b.n	80056e2 <uart_out_data_pack_type+0xe>
      return CHAIN_ENUM_PLEASE_DATA_PACK; // Packet type: Chain Enum Please
 80056f6:	3005      	adds	r0, #5
 80056f8:	e7f3      	b.n	80056e2 <uart_out_data_pack_type+0xe>
      return CHAIN_ENUM_RETURN_DATA_PACK; // Packet type: Chain Enum Return
 80056fa:	2003      	movs	r0, #3
 80056fc:	e7f1      	b.n	80056e2 <uart_out_data_pack_type+0xe>

080056fe <NMI_Handler>:
void NMI_Handler(void) {
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 80056fe:	e7fe      	b.n	80056fe <NMI_Handler>

08005700 <HardFault_Handler>:
  */
void HardFault_Handler(void) {
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 8005700:	e7fe      	b.n	8005700 <HardFault_Handler>

08005702 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005702:	4770      	bx	lr

08005704 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005704:	4770      	bx	lr

08005706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8005706:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005708:	f000 fe1c 	bl	8006344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800570c:	bd10      	pop	{r4, pc}

0800570e <FLASH_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void) {
 800570e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8005710:	f001 fd72 	bl	80071f8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005714:	bd10      	pop	{r4, pc}

08005716 <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005716:	4770      	bx	lr

08005718 <DMA1_Channel2_3_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(const DMA_TypeDef *DMAx)
{
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8005718:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <DMA1_Channel2_3_IRQHandler+0x20>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	069b      	lsls	r3, r3, #26
 800571e:	d509      	bpl.n	8005734 <DMA1_Channel2_3_IRQHandler+0x1c>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005722:	2220      	movs	r2, #32
 8005724:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005726:	4905      	ldr	r1, [pc, #20]	@ (800573c <DMA1_Channel2_3_IRQHandler+0x24>)
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	3a1f      	subs	r2, #31
 800572c:	4393      	bics	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
void DMA1_Channel2_3_IRQHandler(void) {
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC2(DMA1)) {
    LL_DMA_ClearFlag_TC2(DMA1);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
    g_uart_out_transmit_commplete = 1;
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <DMA1_Channel2_3_IRQHandler+0x28>)
 8005732:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005734:	4770      	bx	lr
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	40020000 	.word	0x40020000
 800573c:	4002001c 	.word	0x4002001c
 8005740:	200000c2 	.word	0x200000c2

08005744 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1
 * interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void) {
 8005744:	b510      	push	{r4, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8005746:	4b0e      	ldr	r3, [pc, #56]	@ (8005780 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x3c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	049b      	lsls	r3, r3, #18
 800574c:	d50a      	bpl.n	8005764 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x20>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x3c>)
 8005750:	2280      	movs	r2, #128	@ 0x80
 8005752:	0192      	lsls	r2, r2, #6
 8005754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005756:	490b      	ldr	r1, [pc, #44]	@ (8005784 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x40>)
 8005758:	680b      	ldr	r3, [r1, #0]
 800575a:	2201      	movs	r2, #1
 800575c:	4393      	bics	r3, r2
 800575e:	600b      	str	r3, [r1, #0]
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC4(DMA1)) {
    LL_DMA_ClearFlag_TC4(DMA1);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
    g_uart_in_transmit_commplete = 1;
 8005760:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x44>)
 8005762:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
  if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS ||
 8005764:	4b09      	ldr	r3, [pc, #36]	@ (800578c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x48>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d004      	beq.n	8005776 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x32>
      g_gpio_status[1].mode == CHAIN_ADC_WORK_STATUS) {
 800576c:	4b07      	ldr	r3, [pc, #28]	@ (800578c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x48>)
 800576e:	7a1b      	ldrb	r3, [r3, #8]
  if (g_gpio_status[0].mode == CHAIN_ADC_WORK_STATUS ||
 8005770:	2b04      	cmp	r3, #4
 8005772:	d000      	beq.n	8005776 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x32>
    HAL_DMA_IRQHandler(&hdma_adc1);
  }
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 8005774:	bd10      	pop	{r4, pc}
    HAL_DMA_IRQHandler(&hdma_adc1);
 8005776:	4806      	ldr	r0, [pc, #24]	@ (8005790 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x4c>)
 8005778:	f001 fcc8 	bl	800710c <HAL_DMA_IRQHandler>
}
 800577c:	e7fa      	b.n	8005774 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x30>
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	40020000 	.word	0x40020000
 8005784:	40020044 	.word	0x40020044
 8005788:	200000c3 	.word	0x200000c3
 800578c:	20000390 	.word	0x20000390
 8005790:	200005cc 	.word	0x200005cc

08005794 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void) {
 8005794:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <TIM14_IRQHandler+0x50>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	07db      	lsls	r3, r3, #31
 800579c:	d520      	bpl.n	80057e0 <TIM14_IRQHandler+0x4c>
  /* USER CODE BEGIN TIM14_IRQn 0 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM14) == SET) {
    s_enum_please_nums--;
 800579e:	4c12      	ldr	r4, [pc, #72]	@ (80057e8 <TIM14_IRQHandler+0x54>)
 80057a0:	7823      	ldrb	r3, [r4, #0]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	7023      	strb	r3, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <TIM14_IRQHandler+0x50>)
 80057a8:	2202      	movs	r2, #2
 80057aa:	4252      	negs	r2, r2
 80057ac:	611a      	str	r2, [r3, #16]
    LL_TIM_ClearFlag_UPDATE(TIM14); // Clear the timer update flag
    usart2_transmit_dma(s_enum_please_data_packet_buf,
 80057ae:	480f      	ldr	r0, [pc, #60]	@ (80057ec <TIM14_IRQHandler+0x58>)
 80057b0:	2109      	movs	r1, #9
 80057b2:	f000 fcbd 	bl	8006130 <usart2_transmit_dma>
                        sizeof(s_enum_please_data_packet_buf));
    if (s_enum_please_nums == 0) {
 80057b6:	7823      	ldrb	r3, [r4, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <TIM14_IRQHandler+0x4c>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <TIM14_IRQHandler+0x50>)
 80057be:	68d9      	ldr	r1, [r3, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4391      	bics	r1, r2
 80057c4:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80057c6:	6819      	ldr	r1, [r3, #0]
 80057c8:	4391      	bics	r1, r2
 80057ca:	6019      	str	r1, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <TIM14_IRQHandler+0x5c>)
 80057ce:	2102      	movs	r1, #2
 80057d0:	4249      	negs	r1, r1
 80057d2:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	4311      	orrs	r1, r2
 80057d8:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80057da:	6819      	ldr	r1, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	40002000 	.word	0x40002000
 80057e8:	200000d9 	.word	0x200000d9
 80057ec:	200000d0 	.word	0x200000d0
 80057f0:	40014400 	.word	0x40014400

080057f4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void) {
 80057f4:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80057f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005868 <TIM16_IRQHandler+0x74>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	07db      	lsls	r3, r3, #31
 80057fc:	d532      	bpl.n	8005864 <TIM16_IRQHandler+0x70>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80057fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <TIM16_IRQHandler+0x74>)
 8005800:	2202      	movs	r2, #2
 8005802:	4252      	negs	r2, r2
 8005804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN TIM16_IRQn 0 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM16) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM16);
    usart1_transmit_dma(g_heartbeat_data_pack_buf,
 8005806:	4819      	ldr	r0, [pc, #100]	@ (800586c <TIM16_IRQHandler+0x78>)
 8005808:	2109      	movs	r1, #9
 800580a:	f000 fc79 	bl	8006100 <usart1_transmit_dma>
                        sizeof(g_heartbeat_data_pack_buf));
    g_heartbeat_reply_status_buf[g_reply_index] = 0;
 800580e:	4d18      	ldr	r5, [pc, #96]	@ (8005870 <TIM16_IRQHandler+0x7c>)
 8005810:	7828      	ldrb	r0, [r5, #0]
 8005812:	4c18      	ldr	r4, [pc, #96]	@ (8005874 <TIM16_IRQHandler+0x80>)
 8005814:	2300      	movs	r3, #0
 8005816:	5423      	strb	r3, [r4, r0]
    g_reply_index++;                   // Increment the reply index
 8005818:	3001      	adds	r0, #1
 800581a:	b2c0      	uxtb	r0, r0
 800581c:	7028      	strb	r0, [r5, #0]
    g_reply_index = g_reply_index % 3; // Wrap around if index exceeds 2
 800581e:	2103      	movs	r1, #3
 8005820:	f7fc fcf8 	bl	8002214 <__aeabi_uidivmod>
 8005824:	7029      	strb	r1, [r5, #0]

    if (g_heartbeat_reply_status_buf[0] == 0 &&
 8005826:	7823      	ldrb	r3, [r4, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d118      	bne.n	800585e <TIM16_IRQHandler+0x6a>
        g_heartbeat_reply_status_buf[1] == 0 &&
 800582c:	7863      	ldrb	r3, [r4, #1]
    if (g_heartbeat_reply_status_buf[0] == 0 &&
 800582e:	2b00      	cmp	r3, #0
 8005830:	d115      	bne.n	800585e <TIM16_IRQHandler+0x6a>
        g_heartbeat_reply_status_buf[2] == 0) {
 8005832:	78a3      	ldrb	r3, [r4, #2]
        g_heartbeat_reply_status_buf[1] == 0 &&
 8005834:	2b00      	cmp	r3, #0
 8005836:	d112      	bne.n	800585e <TIM16_IRQHandler+0x6a>
      if (g_tail_status == CHAIN_NON_TAIL_DEVICE) {
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <TIM16_IRQHandler+0x84>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <TIM16_IRQHandler+0x62>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005840:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <TIM16_IRQHandler+0x88>)
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	2101      	movs	r1, #1
 8005846:	430a      	orrs	r2, r1
 8005848:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM14); // ENABLE TIM14
        LL_TIM_EnableCounter(TIM14);   // ENABLE TIM14
        s_enum_please_nums = ENUM_PLEASE_NUM;
 8005850:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <TIM16_IRQHandler+0x8c>)
 8005852:	2203      	movs	r2, #3
 8005854:	701a      	strb	r2, [r3, #0]
      }
      g_tail_status = CHAIN_TAIL_DEVICE;
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <TIM16_IRQHandler+0x84>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e002      	b.n	8005864 <TIM16_IRQHandler+0x70>
    } else {
      g_tail_status = CHAIN_NON_TAIL_DEVICE;
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <TIM16_IRQHandler+0x84>)
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM16_IRQn 0 */
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	40014400 	.word	0x40014400
 800586c:	200000c4 	.word	0x200000c4
 8005870:	200010ec 	.word	0x200010ec
 8005874:	200010f0 	.word	0x200010f0
 8005878:	200000c1 	.word	0x200000c1
 800587c:	40002000 	.word	0x40002000
 8005880:	200000d9 	.word	0x200000d9

08005884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up
 * interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void) {
 8005884:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8005886:	4b3a      	ldr	r3, [pc, #232]	@ (8005970 <USART1_IRQHandler+0xec>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	06db      	lsls	r3, r3, #27
 800588c:	d533      	bpl.n	80058f6 <USART1_IRQHandler+0x72>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800588e:	4b38      	ldr	r3, [pc, #224]	@ (8005970 <USART1_IRQHandler+0xec>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	06db      	lsls	r3, r3, #27
 8005894:	d52f      	bpl.n	80058f6 <USART1_IRQHandler+0x72>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005896:	4936      	ldr	r1, [pc, #216]	@ (8005970 <USART1_IRQHandler+0xec>)
 8005898:	2310      	movs	r3, #16
 800589a:	620b      	str	r3, [r1, #32]
 800589c:	4b35      	ldr	r3, [pc, #212]	@ (8005974 <USART1_IRQHandler+0xf0>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2001      	movs	r0, #1
 80058a2:	4382      	bics	r2, r0
 80058a4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	0412      	lsls	r2, r2, #16
 80058aa:	0c12      	lsrs	r2, r2, #16
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (LL_USART_IsActiveFlag_IDLE(USART1) && LL_USART_IsEnabledIT_IDLE(USART1)) {
    // Clear the idle interrupt flag
    LL_USART_ClearFlag_IDLE(USART1);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 80058ac:	4252      	negs	r2, r2
 80058ae:	4c32      	ldr	r4, [pc, #200]	@ (8005978 <USART1_IRQHandler+0xf4>)
 80058b0:	7022      	strb	r2, [r4, #0]
    // Switch buffer and enable DMA reception
    g_uart_out_buf_status = 1 - g_uart_out_buf_status;
 80058b2:	4d32      	ldr	r5, [pc, #200]	@ (800597c <USART1_IRQHandler+0xf8>)
 80058b4:	782e      	ldrb	r6, [r5, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	1b92      	subs	r2, r2, r6
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	702a      	strb	r2, [r5, #0]
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                            (uint32_t)g_uart_out_rx_buf[g_uart_out_buf_status]);
 80058be:	782a      	ldrb	r2, [r5, #0]
 80058c0:	0252      	lsls	r2, r2, #9
 80058c2:	4d2f      	ldr	r5, [pc, #188]	@ (8005980 <USART1_IRQHandler+0xfc>)
 80058c4:	1952      	adds	r2, r2, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80058c6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	0412      	lsls	r2, r2, #16
 80058ce:	2580      	movs	r5, #128	@ 0x80
 80058d0:	00ad      	lsls	r5, r5, #2
 80058d2:	432a      	orrs	r2, r5
 80058d4:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4302      	orrs	r2, r0
 80058da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058dc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e0:	f380 8810 	msr	PRIMASK, r0
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80058e4:	688b      	ldr	r3, [r1, #8]
 80058e6:	303f      	adds	r0, #63	@ 0x3f
 80058e8:	4303      	orrs	r3, r0
 80058ea:	608b      	str	r3, [r1, #8]
 80058ec:	f382 8810 	msr	PRIMASK, r2
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, BUFFER_SIZE);
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_USART_EnableDMAReq_RX(USART1);
    if (s_len > 0) {
 80058f0:	7821      	ldrb	r1, [r4, #0]
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d100      	bne.n	80058f8 <USART1_IRQHandler+0x74>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
              (uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_buf_status], s_len);
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <USART1_IRQHandler+0xf8>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	383f      	subs	r0, #63	@ 0x3f
 80058fe:	1ac0      	subs	r0, r0, r3
 8005900:	0240      	lsls	r0, r0, #9
 8005902:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <USART1_IRQHandler+0xfc>)
 8005904:	18c0      	adds	r0, r0, r3
        s_data_pack_type = uart_out_data_pack_type(
 8005906:	f7ff fee5 	bl	80056d4 <uart_out_data_pack_type>
 800590a:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <USART1_IRQHandler+0x100>)
 800590c:	7010      	strb	r0, [r2, #0]
          switch (s_data_pack_type) {
 800590e:	2804      	cmp	r0, #4
 8005910:	d021      	beq.n	8005956 <USART1_IRQHandler+0xd2>
 8005912:	d80f      	bhi.n	8005934 <USART1_IRQHandler+0xb0>
 8005914:	2801      	cmp	r0, #1
 8005916:	d01b      	beq.n	8005950 <USART1_IRQHandler+0xcc>
 8005918:	2803      	cmp	r0, #3
 800591a:	d1ec      	bne.n	80058f6 <USART1_IRQHandler+0x72>
                (uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_buf_status], s_len);
 800591c:	4b17      	ldr	r3, [pc, #92]	@ (800597c <USART1_IRQHandler+0xf8>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2001      	movs	r0, #1
 8005922:	1ac0      	subs	r0, r0, r3
 8005924:	0240      	lsls	r0, r0, #9
 8005926:	4b16      	ldr	r3, [pc, #88]	@ (8005980 <USART1_IRQHandler+0xfc>)
 8005928:	18c0      	adds	r0, r0, r3
            chain_enum_return_handle(
 800592a:	4b13      	ldr	r3, [pc, #76]	@ (8005978 <USART1_IRQHandler+0xf4>)
 800592c:	7819      	ldrb	r1, [r3, #0]
 800592e:	f7fe f9ad 	bl	8003c8c <chain_enum_return_handle>
            break;
 8005932:	e7e0      	b.n	80058f6 <USART1_IRQHandler+0x72>
          switch (s_data_pack_type) {
 8005934:	2806      	cmp	r0, #6
 8005936:	d1de      	bne.n	80058f6 <USART1_IRQHandler+0x72>
                (uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_buf_status], s_len);
 8005938:	4b10      	ldr	r3, [pc, #64]	@ (800597c <USART1_IRQHandler+0xf8>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2001      	movs	r0, #1
 800593e:	1ac0      	subs	r0, r0, r3
 8005940:	0240      	lsls	r0, r0, #9
 8005942:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <USART1_IRQHandler+0xfc>)
 8005944:	18c0      	adds	r0, r0, r3
            chain_enum_please_handle(
 8005946:	4b0c      	ldr	r3, [pc, #48]	@ (8005978 <USART1_IRQHandler+0xf4>)
 8005948:	7819      	ldrb	r1, [r3, #0]
 800594a:	f7fe f9a3 	bl	8003c94 <chain_enum_please_handle>
            break;
 800594e:	e7d2      	b.n	80058f6 <USART1_IRQHandler+0x72>
            chain_heartbeat_out_receive_handle();
 8005950:	f7fe f9ac 	bl	8003cac <chain_heartbeat_out_receive_handle>
            break;
 8005954:	e7cf      	b.n	80058f6 <USART1_IRQHandler+0x72>
                (uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_buf_status], s_len);
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <USART1_IRQHandler+0xf8>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2001      	movs	r0, #1
 800595c:	1ac0      	subs	r0, r0, r3
 800595e:	0240      	lsls	r0, r0, #9
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <USART1_IRQHandler+0xfc>)
 8005962:	18c0      	adds	r0, r0, r3
            chain_in_relay_handle(
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <USART1_IRQHandler+0xf4>)
 8005966:	7819      	ldrb	r1, [r3, #0]
 8005968:	f7fe f9e3 	bl	8003d32 <chain_in_relay_handle>
}
 800596c:	e7c3      	b.n	80058f6 <USART1_IRQHandler+0x72>
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	40013800 	.word	0x40013800
 8005974:	40020008 	.word	0x40020008
 8005978:	200010f4 	.word	0x200010f4
 800597c:	200008e8 	.word	0x200008e8
 8005980:	200008ec 	.word	0x200008ec
 8005984:	200010f3 	.word	0x200010f3

08005988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up
 * interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void) {
 8005988:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800598a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a74 <USART2_IRQHandler+0xec>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	06db      	lsls	r3, r3, #27
 8005990:	d533      	bpl.n	80059fa <USART2_IRQHandler+0x72>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005992:	4b38      	ldr	r3, [pc, #224]	@ (8005a74 <USART2_IRQHandler+0xec>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	06db      	lsls	r3, r3, #27
 8005998:	d52f      	bpl.n	80059fa <USART2_IRQHandler+0x72>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800599a:	4936      	ldr	r1, [pc, #216]	@ (8005a74 <USART2_IRQHandler+0xec>)
 800599c:	2310      	movs	r3, #16
 800599e:	620b      	str	r3, [r1, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80059a0:	4b35      	ldr	r3, [pc, #212]	@ (8005a78 <USART2_IRQHandler+0xf0>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2001      	movs	r0, #1
 80059a6:	4382      	bics	r2, r0
 80059a8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	0412      	lsls	r2, r2, #16
 80059ae:	0c12      	lsrs	r2, r2, #16
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_IDLE(USART2) && LL_USART_IsEnabledIT_IDLE(USART2)) {
    // Clear the idle interrupt flag
    LL_USART_ClearFlag_IDLE(USART2);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
    s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 80059b0:	4252      	negs	r2, r2
 80059b2:	4c32      	ldr	r4, [pc, #200]	@ (8005a7c <USART2_IRQHandler+0xf4>)
 80059b4:	7022      	strb	r2, [r4, #0]
    // Switch buffer and enable DMA reception
    g_uart_in_buf_status = 1 - g_uart_in_buf_status;
 80059b6:	4d32      	ldr	r5, [pc, #200]	@ (8005a80 <USART2_IRQHandler+0xf8>)
 80059b8:	782e      	ldrb	r6, [r5, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	1b92      	subs	r2, r2, r6
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	702a      	strb	r2, [r5, #0]
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                            (uint32_t)g_uart_in_rx_buf[g_uart_in_buf_status]);
 80059c2:	782a      	ldrb	r2, [r5, #0]
 80059c4:	0252      	lsls	r2, r2, #9
 80059c6:	4d2f      	ldr	r5, [pc, #188]	@ (8005a84 <USART2_IRQHandler+0xfc>)
 80059c8:	1952      	adds	r2, r2, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80059ca:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	0c12      	lsrs	r2, r2, #16
 80059d0:	0412      	lsls	r2, r2, #16
 80059d2:	2580      	movs	r5, #128	@ 0x80
 80059d4:	00ad      	lsls	r5, r5, #2
 80059d6:	432a      	orrs	r2, r5
 80059d8:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4302      	orrs	r2, r0
 80059de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e4:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80059e8:	688b      	ldr	r3, [r1, #8]
 80059ea:	303f      	adds	r0, #63	@ 0x3f
 80059ec:	4303      	orrs	r3, r0
 80059ee:	608b      	str	r3, [r1, #8]
 80059f0:	f382 8810 	msr	PRIMASK, r2
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, BUFFER_SIZE);
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
    LL_USART_EnableDMAReq_RX(USART2);
    if (s_len > 0) {
 80059f4:	7821      	ldrb	r1, [r4, #0]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d100      	bne.n	80059fc <USART2_IRQHandler+0x74>
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
    	          (uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_buf_status], s_len);
 80059fc:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <USART2_IRQHandler+0xf8>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	383f      	subs	r0, #63	@ 0x3f
 8005a02:	1ac0      	subs	r0, r0, r3
 8005a04:	0240      	lsls	r0, r0, #9
 8005a06:	4b1f      	ldr	r3, [pc, #124]	@ (8005a84 <USART2_IRQHandler+0xfc>)
 8005a08:	18c0      	adds	r0, r0, r3
    	s_data_pack_type = uart_in_data_pack_type(
 8005a0a:	f7ff fe4d 	bl	80056a8 <uart_in_data_pack_type>
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a88 <USART2_IRQHandler+0x100>)
 8005a10:	7010      	strb	r0, [r2, #0]
    	      switch (s_data_pack_type) {
 8005a12:	2804      	cmp	r0, #4
 8005a14:	d021      	beq.n	8005a5a <USART2_IRQHandler+0xd2>
 8005a16:	d80f      	bhi.n	8005a38 <USART2_IRQHandler+0xb0>
 8005a18:	2801      	cmp	r0, #1
 8005a1a:	d01b      	beq.n	8005a54 <USART2_IRQHandler+0xcc>
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	d1ec      	bne.n	80059fa <USART2_IRQHandler+0x72>
    	        chain_enum_handle((uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_buf_status],
 8005a20:	4b17      	ldr	r3, [pc, #92]	@ (8005a80 <USART2_IRQHandler+0xf8>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2001      	movs	r0, #1
 8005a26:	1ac0      	subs	r0, r0, r3
 8005a28:	0240      	lsls	r0, r0, #9
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <USART2_IRQHandler+0xfc>)
 8005a2c:	18c0      	adds	r0, r0, r3
 8005a2e:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <USART2_IRQHandler+0xf4>)
 8005a30:	7819      	ldrb	r1, [r3, #0]
 8005a32:	f7fe f917 	bl	8003c64 <chain_enum_handle>
    	        break;
 8005a36:	e7e0      	b.n	80059fa <USART2_IRQHandler+0x72>
    	      switch (s_data_pack_type) {
 8005a38:	2805      	cmp	r0, #5
 8005a3a:	d1de      	bne.n	80059fa <USART2_IRQHandler+0x72>
    	            (uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_buf_status], s_len);
 8005a3c:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <USART2_IRQHandler+0xf8>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2001      	movs	r0, #1
 8005a42:	1ac0      	subs	r0, r0, r3
 8005a44:	0240      	lsls	r0, r0, #9
 8005a46:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <USART2_IRQHandler+0xfc>)
 8005a48:	18c0      	adds	r0, r0, r3
    	        chain_deal_data_packet_handle(
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <USART2_IRQHandler+0xf4>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	f7fe f93d 	bl	8003ccc <chain_deal_data_packet_handle>
}
 8005a52:	e7d2      	b.n	80059fa <USART2_IRQHandler+0x72>
    	        chain_heartbeat_in_receive_handle();
 8005a54:	f7fe f922 	bl	8003c9c <chain_heartbeat_in_receive_handle>
    	        break;
 8005a58:	e7cf      	b.n	80059fa <USART2_IRQHandler+0x72>
    	            (uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_buf_status], s_len);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <USART2_IRQHandler+0xf8>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2001      	movs	r0, #1
 8005a60:	1ac0      	subs	r0, r0, r3
 8005a62:	0240      	lsls	r0, r0, #9
 8005a64:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <USART2_IRQHandler+0xfc>)
 8005a66:	18c0      	adds	r0, r0, r3
    	        chain_out_relay_handle(
 8005a68:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <USART2_IRQHandler+0xf4>)
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	f7fe f956 	bl	8003d1c <chain_out_relay_handle>
    	        break;
 8005a70:	e7c3      	b.n	80059fa <USART2_IRQHandler+0x72>
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	40004400 	.word	0x40004400
 8005a78:	40020030 	.word	0x40020030
 8005a7c:	200010f4 	.word	0x200010f4
 8005a80:	200008e9 	.word	0x200008e9
 8005a84:	20000cec 	.word	0x20000cec
 8005a88:	200010f3 	.word	0x200010f3

08005a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a90:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac4 <_sbrk+0x38>)
 8005a92:	490d      	ldr	r1, [pc, #52]	@ (8005ac8 <_sbrk+0x3c>)
 8005a94:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a96:	490d      	ldr	r1, [pc, #52]	@ (8005acc <_sbrk+0x40>)
 8005a98:	6809      	ldr	r1, [r1, #0]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d007      	beq.n	8005aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a9e:	490b      	ldr	r1, [pc, #44]	@ (8005acc <_sbrk+0x40>)
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	18c3      	adds	r3, r0, r3
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d806      	bhi.n	8005ab6 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005aa8:	4a08      	ldr	r2, [pc, #32]	@ (8005acc <_sbrk+0x40>)
 8005aaa:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005aac:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005aae:	4907      	ldr	r1, [pc, #28]	@ (8005acc <_sbrk+0x40>)
 8005ab0:	4807      	ldr	r0, [pc, #28]	@ (8005ad0 <_sbrk+0x44>)
 8005ab2:	6008      	str	r0, [r1, #0]
 8005ab4:	e7f3      	b.n	8005a9e <_sbrk+0x12>
    errno = ENOMEM;
 8005ab6:	f003 fcad 	bl	8009414 <__errno>
 8005aba:	230c      	movs	r3, #12
 8005abc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005abe:	2001      	movs	r0, #1
 8005ac0:	4240      	negs	r0, r0
 8005ac2:	e7f3      	b.n	8005aac <_sbrk+0x20>
 8005ac4:	20002000 	.word	0x20002000
 8005ac8:	00000400 	.word	0x00000400
 8005acc:	200010f8 	.word	0x200010f8
 8005ad0:	20001268 	.word	0x20001268

08005ad4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ad4:	4770      	bx	lr
	...

08005ad8 <MX_TIM14_Init>:

/* USER CODE END 0 */

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005ad8:	b530      	push	{r4, r5, lr}
 8005ada:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005adc:	ac01      	add	r4, sp, #4
 8005ade:	2214      	movs	r2, #20
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	f003 fc7c 	bl	80093e0 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8005ae8:	4b14      	ldr	r3, [pc, #80]	@ (8005b3c <MX_TIM14_Init+0x64>)
 8005aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aec:	2180      	movs	r1, #128	@ 0x80
 8005aee:	0209      	lsls	r1, r1, #8
 8005af0:	430a      	orrs	r2, r1
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	400b      	ands	r3, r1
 8005af8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005afa:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005afc:	4a10      	ldr	r2, [pc, #64]	@ (8005b40 <MX_TIM14_Init+0x68>)
 8005afe:	20c4      	movs	r0, #196	@ 0xc4
 8005b00:	0080      	lsls	r0, r0, #2
 8005b02:	5813      	ldr	r3, [r2, r0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	2180      	movs	r1, #128	@ 0x80
 8005b0a:	05c9      	lsls	r1, r1, #23
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b10:	2380      	movs	r3, #128	@ 0x80
 8005b12:	031b      	lsls	r3, r3, #12
 8005b14:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(TIM14_IRQn);

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <MX_TIM14_Init+0x6c>)
 8005b18:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 1699;
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b48 <MX_TIM14_Init+0x70>)
 8005b20:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005b22:	60e3      	str	r3, [r4, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8005b24:	4d09      	ldr	r5, [pc, #36]	@ (8005b4c <MX_TIM14_Init+0x74>)
 8005b26:	0021      	movs	r1, r4
 8005b28:	0028      	movs	r0, r5
 8005b2a:	f003 fa6f 	bl	800900c <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	4313      	orrs	r3, r2
 8005b34:	602b      	str	r3, [r5, #0]
  LL_TIM_EnableARRPreload(TIM14);
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005b36:	b007      	add	sp, #28
 8005b38:	bd30      	pop	{r4, r5, pc}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	e000e100 	.word	0xe000e100
 8005b44:	000018ff 	.word	0x000018ff
 8005b48:	000006a3 	.word	0x000006a3
 8005b4c:	40002000 	.word	0x40002000

08005b50 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005b50:	b530      	push	{r4, r5, lr}
 8005b52:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005b54:	ac01      	add	r4, sp, #4
 8005b56:	2214      	movs	r2, #20
 8005b58:	2100      	movs	r1, #0
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	f003 fc40 	bl	80093e0 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8005b60:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <MX_TIM16_Init+0x64>)
 8005b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b64:	2180      	movs	r1, #128	@ 0x80
 8005b66:	0289      	lsls	r1, r1, #10
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	400b      	ands	r3, r1
 8005b70:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005b72:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b74:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <MX_TIM16_Init+0x68>)
 8005b76:	20c5      	movs	r0, #197	@ 0xc5
 8005b78:	0080      	lsls	r0, r0, #2
 8005b7a:	5819      	ldr	r1, [r3, r0]
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8005bbc <MX_TIM16_Init+0x6c>)
 8005b7e:	4011      	ands	r1, r2
 8005b80:	2280      	movs	r2, #128	@ 0x80
 8005b82:	01d2      	lsls	r2, r2, #7
 8005b84:	430a      	orrs	r2, r1
 8005b86:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b88:	2280      	movs	r2, #128	@ 0x80
 8005b8a:	0392      	lsls	r2, r2, #14
 8005b8c:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM16_IRQn);

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <MX_TIM16_Init+0x70>)
 8005b90:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005b92:	2300      	movs	r3, #0
 8005b94:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 9999;
 8005b96:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc4 <MX_TIM16_Init+0x74>)
 8005b98:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005b9a:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8005b9c:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8005b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8005bc8 <MX_TIM16_Init+0x78>)
 8005ba0:	0021      	movs	r1, r4
 8005ba2:	0028      	movs	r0, r5
 8005ba4:	f003 fa32 	bl	800900c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2280      	movs	r2, #128	@ 0x80
 8005bac:	4393      	bics	r3, r2
 8005bae:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM16);
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005bb0:	b007      	add	sp, #28
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	e000e100 	.word	0xe000e100
 8005bbc:	ffff00ff 	.word	0xffff00ff
 8005bc0:	000018ff 	.word	0x000018ff
 8005bc4:	0000270f 	.word	0x0000270f
 8005bc8:	40014400 	.word	0x40014400

08005bcc <usart1_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart1_hart_init(void) {
 8005bcc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005bd8:	4a24      	ldr	r2, [pc, #144]	@ (8005c6c <usart1_hart_init+0xa0>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	200c      	movs	r0, #12
 8005bde:	4383      	bics	r3, r0
 8005be0:	4303      	orrs	r3, r0
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005bf0:	6813      	ldr	r3, [r2, #0]
 8005bf2:	2410      	movs	r4, #16
 8005bf4:	4323      	orrs	r3, r4
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c70 <usart1_hart_init+0xa4>)
 8005bfe:	481d      	ldr	r0, [pc, #116]	@ (8005c74 <usart1_hart_init+0xa8>)
 8005c00:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_1,
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address where received data will be stored
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                          (uint32_t)g_uart_out_rx_buf[g_uart_out_buf_status]);
 8005c02:	481d      	ldr	r0, [pc, #116]	@ (8005c78 <usart1_hart_init+0xac>)
 8005c04:	7800      	ldrb	r0, [r0, #0]
 8005c06:	0240      	lsls	r0, r0, #9
 8005c08:	4d1c      	ldr	r5, [pc, #112]	@ (8005c7c <usart1_hart_init+0xb0>)
 8005c0a:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005c0c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005c0e:	6858      	ldr	r0, [r3, #4]
 8005c10:	0c00      	lsrs	r0, r0, #16
 8005c12:	0400      	lsls	r0, r0, #16
 8005c14:	2580      	movs	r5, #128	@ 0x80
 8005c16:	00ad      	lsls	r5, r5, #2
 8005c18:	4328      	orrs	r0, r5
 8005c1a:	6058      	str	r0, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	3dff      	subs	r5, #255	@ 0xff
 8005c20:	3dff      	subs	r5, #255	@ 0xff
 8005c22:	4328      	orrs	r0, r5
 8005c24:	6018      	str	r0, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	2608      	movs	r6, #8
 8005c2a:	4330      	orrs	r0, r6
 8005c2c:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	4308      	orrs	r0, r1
 8005c32:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005c3c:	6893      	ldr	r3, [r2, #8]
 8005c3e:	3638      	adds	r6, #56	@ 0x38
 8005c40:	4333      	orrs	r3, r6
 8005c42:	6093      	str	r3, [r2, #8]
 8005c44:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005c48:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <usart1_hart_init+0xb4>)
 8005c4c:	480d      	ldr	r0, [pc, #52]	@ (8005c84 <usart1_hart_init+0xb8>)
 8005c4e:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c54:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005c58:	6891      	ldr	r1, [r2, #8]
 8005c5a:	3470      	adds	r4, #112	@ 0x70
 8005c5c:	4321      	orrs	r1, r4
 8005c5e:	6091      	str	r1, [r2, #8]
 8005c60:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	432a      	orrs	r2, r5
 8005c68:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART1 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART1);
  // Enable DMA transfer complete interrupt for USART1 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
}
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	40013800 	.word	0x40013800
 8005c70:	40020008 	.word	0x40020008
 8005c74:	40013824 	.word	0x40013824
 8005c78:	200008e8 	.word	0x200008e8
 8005c7c:	200008ec 	.word	0x200008ec
 8005c80:	4002001c 	.word	0x4002001c
 8005c84:	40013828 	.word	0x40013828

08005c88 <MX_USART1_UART_Init>:
void MX_USART1_UART_Init(void) {
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	46de      	mov	lr, fp
 8005c8c:	4657      	mov	r7, sl
 8005c8e:	464e      	mov	r6, r9
 8005c90:	4645      	mov	r5, r8
 8005c92:	b5e0      	push	{r5, r6, r7, lr}
 8005c94:	b09b      	sub	sp, #108	@ 0x6c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005c96:	2220      	movs	r2, #32
 8005c98:	2100      	movs	r1, #0
 8005c9a:	a812      	add	r0, sp, #72	@ 0x48
 8005c9c:	f003 fba0 	bl	80093e0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	2218      	movs	r2, #24
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	a80c      	add	r0, sp, #48	@ 0x30
 8005ca6:	f003 fb9b 	bl	80093e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005caa:	2228      	movs	r2, #40	@ 0x28
 8005cac:	2100      	movs	r1, #0
 8005cae:	a802      	add	r0, sp, #8
 8005cb0:	f003 fb96 	bl	80093e0 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005cb8:	a802      	add	r0, sp, #8
 8005cba:	f002 ffa9 	bl	8008c10 <HAL_RCCEx_PeriphCLKConfig>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d000      	beq.n	8005cc4 <MX_USART1_UART_Init+0x3c>
 8005cc2:	e0c6      	b.n	8005e52 <MX_USART1_UART_Init+0x1ca>
  SET_BIT(RCC->APBENR2, Periphs);
 8005cc4:	4b64      	ldr	r3, [pc, #400]	@ (8005e58 <MX_USART1_UART_Init+0x1d0>)
 8005cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc8:	2180      	movs	r1, #128	@ 0x80
 8005cca:	01c9      	lsls	r1, r1, #7
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005cd6:	9a01      	ldr	r2, [sp, #4]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cda:	2502      	movs	r5, #2
 8005cdc:	432a      	orrs	r2, r5
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce2:	402b      	ands	r3, r5
 8005ce4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005ce6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005ce8:	2340      	movs	r3, #64	@ 0x40
 8005cea:	4698      	mov	r8, r3
 8005cec:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cee:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005cf0:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005cf2:	2400      	movs	r4, #0
 8005cf4:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005cf6:	2601      	movs	r6, #1
 8005cf8:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8005cfa:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cfc:	4b57      	ldr	r3, [pc, #348]	@ (8005e5c <MX_USART1_UART_Init+0x1d4>)
 8005cfe:	4699      	mov	r9, r3
 8005d00:	a90c      	add	r1, sp, #48	@ 0x30
 8005d02:	0018      	movs	r0, r3
 8005d04:	f003 f87e 	bl	8008e04 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8005d08:	2780      	movs	r7, #128	@ 0x80
 8005d0a:	970c      	str	r7, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d0c:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005d0e:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d10:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005d12:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8005d14:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d16:	a90c      	add	r1, sp, #48	@ 0x30
 8005d18:	4648      	mov	r0, r9
 8005d1a:	f003 f873 	bl	8008e04 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005d1e:	4a50      	ldr	r2, [pc, #320]	@ (8005e60 <MX_USART1_UART_Init+0x1d8>)
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	213f      	movs	r1, #63	@ 0x3f
 8005d24:	468a      	mov	sl, r1
 8005d26:	438b      	bics	r3, r1
 8005d28:	390d      	subs	r1, #13
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e64 <MX_USART1_UART_Init+0x1dc>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	494d      	ldr	r1, [pc, #308]	@ (8005e68 <MX_USART1_UART_Init+0x1e0>)
 8005d34:	4689      	mov	r9, r1
 8005d36:	400a      	ands	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	494b      	ldr	r1, [pc, #300]	@ (8005e6c <MX_USART1_UART_Init+0x1e4>)
 8005d3e:	468c      	mov	ip, r1
 8005d40:	400a      	ands	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	351e      	adds	r5, #30
 8005d48:	43aa      	bics	r2, r5
 8005d4a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4641      	mov	r1, r8
 8005d50:	438a      	bics	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	43ba      	bics	r2, r7
 8005d58:	433a      	orrs	r2, r7
 8005d5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4844      	ldr	r0, [pc, #272]	@ (8005e70 <MX_USART1_UART_Init+0x1e8>)
 8005d60:	4002      	ands	r2, r0
 8005d62:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4943      	ldr	r1, [pc, #268]	@ (8005e74 <MX_USART1_UART_Init+0x1ec>)
 8005d68:	468b      	mov	fp, r1
 8005d6a:	400a      	ands	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005d6e:	4a42      	ldr	r2, [pc, #264]	@ (8005e78 <MX_USART1_UART_Init+0x1f0>)
 8005d70:	6813      	ldr	r3, [r2, #0]
 8005d72:	4651      	mov	r1, sl
 8005d74:	438b      	bics	r3, r1
 8005d76:	390c      	subs	r1, #12
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <MX_USART1_UART_Init+0x1f4>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4649      	mov	r1, r9
 8005d82:	400a      	ands	r2, r1
 8005d84:	2110      	movs	r1, #16
 8005d86:	430a      	orrs	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4661      	mov	r1, ip
 8005d8e:	400a      	ands	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	43aa      	bics	r2, r5
 8005d96:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	43ba      	bics	r2, r7
 8005da4:	433a      	orrs	r2, r7
 8005da6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4002      	ands	r2, r0
 8005dac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4659      	mov	r1, fp
 8005db2:	400a      	ands	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005db6:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <MX_USART1_UART_Init+0x1f8>)
 8005db8:	21c6      	movs	r1, #198	@ 0xc6
 8005dba:	0089      	lsls	r1, r1, #2
 8005dbc:	5853      	ldr	r3, [r2, r1]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	6013      	str	r3, [r2, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005dca:	9412      	str	r4, [sp, #72]	@ 0x48
  USART_InitStruct.BaudRate = 115200;
 8005dcc:	23e1      	movs	r3, #225	@ 0xe1
 8005dce:	025b      	lsls	r3, r3, #9
 8005dd0:	9313      	str	r3, [sp, #76]	@ 0x4c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005dd2:	9414      	str	r4, [sp, #80]	@ 0x50
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005dd4:	9415      	str	r4, [sp, #84]	@ 0x54
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005dd6:	9416      	str	r4, [sp, #88]	@ 0x58
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005dd8:	230c      	movs	r3, #12
 8005dda:	9317      	str	r3, [sp, #92]	@ 0x5c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005ddc:	9418      	str	r4, [sp, #96]	@ 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005dde:	9419      	str	r4, [sp, #100]	@ 0x64
  LL_USART_Init(USART1, &USART_InitStruct);
 8005de0:	4c28      	ldr	r4, [pc, #160]	@ (8005e84 <MX_USART1_UART_Init+0x1fc>)
 8005de2:	a912      	add	r1, sp, #72	@ 0x48
 8005de4:	0020      	movs	r0, r4
 8005de6:	f003 f9bb 	bl	8009160 <LL_USART_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dea:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e02:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	491f      	ldr	r1, [pc, #124]	@ (8005e88 <MX_USART1_UART_Init+0x200>)
 8005e0a:	400b      	ands	r3, r1
 8005e0c:	60a3      	str	r3, [r4, #8]
 8005e0e:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <MX_USART1_UART_Init+0x204>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <MX_USART1_UART_Init+0x208>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	222a      	movs	r2, #42	@ 0x2a
 8005e26:	4393      	bics	r3, r2
 8005e28:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	4333      	orrs	r3, r6
 8005e2e:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8005e30:	4b14      	ldr	r3, [pc, #80]	@ (8005e84 <MX_USART1_UART_Init+0x1fc>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	029b      	lsls	r3, r3, #10
 8005e36:	d5fb      	bpl.n	8005e30 <MX_USART1_UART_Init+0x1a8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005e38:	4b12      	ldr	r3, [pc, #72]	@ (8005e84 <MX_USART1_UART_Init+0x1fc>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	025b      	lsls	r3, r3, #9
 8005e3e:	d5f7      	bpl.n	8005e30 <MX_USART1_UART_Init+0x1a8>
  usart1_hart_init();
 8005e40:	f7ff fec4 	bl	8005bcc <usart1_hart_init>
}
 8005e44:	b01b      	add	sp, #108	@ 0x6c
 8005e46:	bcf0      	pop	{r4, r5, r6, r7}
 8005e48:	46bb      	mov	fp, r7
 8005e4a:	46b2      	mov	sl, r6
 8005e4c:	46a9      	mov	r9, r5
 8005e4e:	46a0      	mov	r8, r4
 8005e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8005e52:	f7ff fae7 	bl	8005424 <Error_Handler>
 8005e56:	e735      	b.n	8005cc4 <MX_USART1_UART_Init+0x3c>
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	50000400 	.word	0x50000400
 8005e60:	40020800 	.word	0x40020800
 8005e64:	40020008 	.word	0x40020008
 8005e68:	ffffbfef 	.word	0xffffbfef
 8005e6c:	ffffcfff 	.word	0xffffcfff
 8005e70:	fffffcff 	.word	0xfffffcff
 8005e74:	fffff3ff 	.word	0xfffff3ff
 8005e78:	40020804 	.word	0x40020804
 8005e7c:	4002001c 	.word	0x4002001c
 8005e80:	e000e100 	.word	0xe000e100
 8005e84:	40013800 	.word	0x40013800
 8005e88:	f1ffffff 	.word	0xf1ffffff
 8005e8c:	dfffffff 	.word	0xdfffffff
 8005e90:	ffffb7ff 	.word	0xffffb7ff

08005e94 <usart2_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart2_hart_init(void) {
 8005e94:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005ea0:	4a24      	ldr	r2, [pc, #144]	@ (8005f34 <usart2_hart_init+0xa0>)
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	200c      	movs	r0, #12
 8005ea6:	4383      	bics	r3, r0
 8005ea8:	4303      	orrs	r3, r0
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	2410      	movs	r4, #16
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f38 <usart2_hart_init+0xa4>)
 8005ec6:	481d      	ldr	r0, [pc, #116]	@ (8005f3c <usart2_hart_init+0xa8>)
 8005ec8:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_3,
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address for storing the received data
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                          (uint32_t)g_uart_in_rx_buf[g_uart_in_buf_status]);
 8005eca:	481d      	ldr	r0, [pc, #116]	@ (8005f40 <usart2_hart_init+0xac>)
 8005ecc:	7800      	ldrb	r0, [r0, #0]
 8005ece:	0240      	lsls	r0, r0, #9
 8005ed0:	4d1c      	ldr	r5, [pc, #112]	@ (8005f44 <usart2_hart_init+0xb0>)
 8005ed2:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005ed4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005ed6:	6858      	ldr	r0, [r3, #4]
 8005ed8:	0c00      	lsrs	r0, r0, #16
 8005eda:	0400      	lsls	r0, r0, #16
 8005edc:	2580      	movs	r5, #128	@ 0x80
 8005ede:	00ad      	lsls	r5, r5, #2
 8005ee0:	4328      	orrs	r0, r5
 8005ee2:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	3dff      	subs	r5, #255	@ 0xff
 8005ee8:	3dff      	subs	r5, #255	@ 0xff
 8005eea:	4328      	orrs	r0, r5
 8005eec:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	2608      	movs	r6, #8
 8005ef2:	4330      	orrs	r0, r6
 8005ef4:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4308      	orrs	r0, r1
 8005efa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f00:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005f04:	6893      	ldr	r3, [r2, #8]
 8005f06:	3638      	adds	r6, #56	@ 0x38
 8005f08:	4333      	orrs	r3, r6
 8005f0a:	6093      	str	r3, [r2, #8]
 8005f0c:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005f10:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005f12:	4b0d      	ldr	r3, [pc, #52]	@ (8005f48 <usart2_hart_init+0xb4>)
 8005f14:	480d      	ldr	r0, [pc, #52]	@ (8005f4c <usart2_hart_init+0xb8>)
 8005f16:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005f20:	6891      	ldr	r1, [r2, #8]
 8005f22:	3470      	adds	r4, #112	@ 0x70
 8005f24:	4321      	orrs	r1, r4
 8005f26:	6091      	str	r1, [r2, #8]
 8005f28:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	432a      	orrs	r2, r5
 8005f30:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART2 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART2);
  // Enable DMA transfer complete interrupt for USART2 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
}
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	40004400 	.word	0x40004400
 8005f38:	40020030 	.word	0x40020030
 8005f3c:	40004424 	.word	0x40004424
 8005f40:	200008e9 	.word	0x200008e9
 8005f44:	20000cec 	.word	0x20000cec
 8005f48:	40020044 	.word	0x40020044
 8005f4c:	40004428 	.word	0x40004428

08005f50 <MX_USART2_UART_Init>:
void MX_USART2_UART_Init(void) {
 8005f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f52:	46de      	mov	lr, fp
 8005f54:	4657      	mov	r7, sl
 8005f56:	464e      	mov	r6, r9
 8005f58:	4645      	mov	r5, r8
 8005f5a:	b5e0      	push	{r5, r6, r7, lr}
 8005f5c:	b091      	sub	sp, #68	@ 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005f5e:	2620      	movs	r6, #32
 8005f60:	2220      	movs	r2, #32
 8005f62:	2100      	movs	r1, #0
 8005f64:	a808      	add	r0, sp, #32
 8005f66:	f003 fa3b 	bl	80093e0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f6a:	2218      	movs	r2, #24
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	a802      	add	r0, sp, #8
 8005f70:	f003 fa36 	bl	80093e0 <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 8005f74:	4b56      	ldr	r3, [pc, #344]	@ (80060d0 <MX_USART2_UART_Init+0x180>)
 8005f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f78:	2180      	movs	r1, #128	@ 0x80
 8005f7a:	0289      	lsls	r1, r1, #10
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8005f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f82:	400a      	ands	r2, r1
 8005f84:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005f86:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8005f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f8a:	2501      	movs	r5, #1
 8005f8c:	432a      	orrs	r2, r5
 8005f8e:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f92:	402b      	ands	r3, r5
 8005f94:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005f96:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005f98:	2304      	movs	r3, #4
 8005f9a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005f9c:	2402      	movs	r4, #2
 8005f9e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005fa0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005fa2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005fa4:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa6:	27a0      	movs	r7, #160	@ 0xa0
 8005fa8:	05ff      	lsls	r7, r7, #23
 8005faa:	a902      	add	r1, sp, #8
 8005fac:	0038      	movs	r0, r7
 8005fae:	f002 ff29 	bl	8008e04 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005fb6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005fb8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005fba:	2400      	movs	r4, #0
 8005fbc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005fbe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005fc0:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc2:	a902      	add	r1, sp, #8
 8005fc4:	0038      	movs	r0, r7
 8005fc6:	f002 ff1d 	bl	8008e04 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005fca:	4a42      	ldr	r2, [pc, #264]	@ (80060d4 <MX_USART2_UART_Init+0x184>)
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	213f      	movs	r1, #63	@ 0x3f
 8005fd0:	468a      	mov	sl, r1
 8005fd2:	438b      	bics	r3, r1
 8005fd4:	390b      	subs	r1, #11
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005fda:	4b3f      	ldr	r3, [pc, #252]	@ (80060d8 <MX_USART2_UART_Init+0x188>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	493f      	ldr	r1, [pc, #252]	@ (80060dc <MX_USART2_UART_Init+0x18c>)
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	493d      	ldr	r1, [pc, #244]	@ (80060e0 <MX_USART2_UART_Init+0x190>)
 8005fea:	4688      	mov	r8, r1
 8005fec:	400a      	ands	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	43b2      	bics	r2, r6
 8005ff4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	2140      	movs	r1, #64	@ 0x40
 8005ffa:	468c      	mov	ip, r1
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	2780      	movs	r7, #128	@ 0x80
 8006004:	43ba      	bics	r2, r7
 8006006:	433a      	orrs	r2, r7
 8006008:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4835      	ldr	r0, [pc, #212]	@ (80060e4 <MX_USART2_UART_Init+0x194>)
 800600e:	4002      	ands	r2, r0
 8006010:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4934      	ldr	r1, [pc, #208]	@ (80060e8 <MX_USART2_UART_Init+0x198>)
 8006016:	468b      	mov	fp, r1
 8006018:	400a      	ands	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800601c:	4a33      	ldr	r2, [pc, #204]	@ (80060ec <MX_USART2_UART_Init+0x19c>)
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	4651      	mov	r1, sl
 8006022:	438b      	bics	r3, r1
 8006024:	390a      	subs	r1, #10
 8006026:	430b      	orrs	r3, r1
 8006028:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800602a:	4b31      	ldr	r3, [pc, #196]	@ (80060f0 <MX_USART2_UART_Init+0x1a0>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4649      	mov	r1, r9
 8006030:	400a      	ands	r2, r1
 8006032:	2110      	movs	r1, #16
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4641      	mov	r1, r8
 800603c:	400a      	ands	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	43b2      	bics	r2, r6
 8006044:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4661      	mov	r1, ip
 800604a:	438a      	bics	r2, r1
 800604c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	43ba      	bics	r2, r7
 8006052:	433a      	orrs	r2, r7
 8006054:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4002      	ands	r2, r0
 800605a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4659      	mov	r1, fp
 8006060:	400a      	ands	r2, r1
 8006062:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006064:	4b23      	ldr	r3, [pc, #140]	@ (80060f4 <MX_USART2_UART_Init+0x1a4>)
 8006066:	21c7      	movs	r1, #199	@ 0xc7
 8006068:	0089      	lsls	r1, r1, #2
 800606a:	585a      	ldr	r2, [r3, r1]
 800606c:	20ff      	movs	r0, #255	@ 0xff
 800606e:	4382      	bics	r2, r0
 8006070:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006072:	2280      	movs	r2, #128	@ 0x80
 8006074:	0552      	lsls	r2, r2, #21
 8006076:	601a      	str	r2, [r3, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8006078:	9408      	str	r4, [sp, #32]
  USART_InitStruct.BaudRate = 115200;
 800607a:	23e1      	movs	r3, #225	@ 0xe1
 800607c:	025b      	lsls	r3, r3, #9
 800607e:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006080:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006082:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006084:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006086:	230c      	movs	r3, #12
 8006088:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800608a:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800608c:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800608e:	4c1a      	ldr	r4, [pc, #104]	@ (80060f8 <MX_USART2_UART_Init+0x1a8>)
 8006090:	a908      	add	r1, sp, #32
 8006092:	0020      	movs	r0, r4
 8006094:	f003 f864 	bl	8009160 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006098:	6863      	ldr	r3, [r4, #4]
 800609a:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <MX_USART2_UART_Init+0x1ac>)
 800609c:	4013      	ands	r3, r2
 800609e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80060a0:	68a3      	ldr	r3, [r4, #8]
 80060a2:	222a      	movs	r2, #42	@ 0x2a
 80060a4:	4393      	bics	r3, r2
 80060a6:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	432b      	orrs	r3, r5
 80060ac:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80060ae:	4b12      	ldr	r3, [pc, #72]	@ (80060f8 <MX_USART2_UART_Init+0x1a8>)
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	d5fb      	bpl.n	80060ae <MX_USART2_UART_Init+0x15e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <MX_USART2_UART_Init+0x1a8>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	025b      	lsls	r3, r3, #9
 80060bc:	d5f7      	bpl.n	80060ae <MX_USART2_UART_Init+0x15e>
  usart2_hart_init();
 80060be:	f7ff fee9 	bl	8005e94 <usart2_hart_init>
}
 80060c2:	b011      	add	sp, #68	@ 0x44
 80060c4:	bcf0      	pop	{r4, r5, r6, r7}
 80060c6:	46bb      	mov	fp, r7
 80060c8:	46b2      	mov	sl, r6
 80060ca:	46a9      	mov	r9, r5
 80060cc:	46a0      	mov	r8, r4
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40020808 	.word	0x40020808
 80060d8:	40020030 	.word	0x40020030
 80060dc:	ffffbfef 	.word	0xffffbfef
 80060e0:	ffffcfff 	.word	0xffffcfff
 80060e4:	fffffcff 	.word	0xfffffcff
 80060e8:	fffff3ff 	.word	0xfffff3ff
 80060ec:	4002080c 	.word	0x4002080c
 80060f0:	40020044 	.word	0x40020044
 80060f4:	e000e100 	.word	0xe000e100
 80060f8:	40004400 	.word	0x40004400
 80060fc:	ffffb7ff 	.word	0xffffb7ff

08006100 <usart1_transmit_dma>:
 * bytes
 *             in the buffer to send.
 * @retval None
 */
void usart1_transmit_dma(uint8_t *buf, uint16_t size) {
  if (g_uart_out_transmit_commplete == 1) {
 8006100:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <usart1_transmit_dma+0x28>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d000      	beq.n	800610a <usart1_transmit_dma+0xa>
    // Set the DMA transmission size
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, size);
    // Start the DMA transmission
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
  }
}
 8006108:	4770      	bx	lr
    g_uart_out_transmit_commplete = 0; // Mark transmission as ongoing
 800610a:	4b07      	ldr	r3, [pc, #28]	@ (8006128 <usart1_transmit_dma+0x28>)
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <usart1_transmit_dma+0x2c>)
 8006112:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	0c12      	lsrs	r2, r2, #16
 8006118:	0412      	lsls	r2, r2, #16
 800611a:	4311      	orrs	r1, r2
 800611c:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	2101      	movs	r1, #1
 8006122:	430a      	orrs	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
}
 8006126:	e7ef      	b.n	8006108 <usart1_transmit_dma+0x8>
 8006128:	200000c2 	.word	0x200000c2
 800612c:	4002001c 	.word	0x4002001c

08006130 <usart2_transmit_dma>:
 * bytes
 *             in the buffer to send.
 * @retval None
 */
void usart2_transmit_dma(uint8_t *buf, uint16_t size) {
  if (g_uart_in_transmit_commplete == 1) {
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <usart2_transmit_dma+0x28>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d000      	beq.n	800613a <usart2_transmit_dma+0xa>
    // Set the DMA transmission size
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, size);
    // Start the DMA transmission
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
  }
}
 8006138:	4770      	bx	lr
    g_uart_in_transmit_commplete = 0; // Mark transmission as ongoing
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <usart2_transmit_dma+0x28>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8006140:	4b06      	ldr	r3, [pc, #24]	@ (800615c <usart2_transmit_dma+0x2c>)
 8006142:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	0c12      	lsrs	r2, r2, #16
 8006148:	0412      	lsls	r2, r2, #16
 800614a:	4311      	orrs	r1, r2
 800614c:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2101      	movs	r1, #1
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	e7ef      	b.n	8006138 <usart2_transmit_dma+0x8>
 8006158:	200000c3 	.word	0x200000c3
 800615c:	40020044 	.word	0x40020044

08006160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006160:	480d      	ldr	r0, [pc, #52]	@ (8006198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006162:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006164:	f7ff fcb6 	bl	8005ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006168:	480c      	ldr	r0, [pc, #48]	@ (800619c <LoopForever+0x6>)
  ldr r1, =_edata
 800616a:	490d      	ldr	r1, [pc, #52]	@ (80061a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800616c:	4a0d      	ldr	r2, [pc, #52]	@ (80061a4 <LoopForever+0xe>)
  movs r3, #0
 800616e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006170:	e002      	b.n	8006178 <LoopCopyDataInit>

08006172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006176:	3304      	adds	r3, #4

08006178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800617a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800617c:	d3f9      	bcc.n	8006172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800617e:	4a0a      	ldr	r2, [pc, #40]	@ (80061a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006180:	4c0a      	ldr	r4, [pc, #40]	@ (80061ac <LoopForever+0x16>)
  movs r3, #0
 8006182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006184:	e001      	b.n	800618a <LoopFillZerobss>

08006186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006188:	3204      	adds	r2, #4

0800618a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800618a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800618c:	d3fb      	bcc.n	8006186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800618e:	f003 f947 	bl	8009420 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006192:	f7ff f98b 	bl	80054ac <main>

08006196 <LoopForever>:

LoopForever:
  b LoopForever
 8006196:	e7fe      	b.n	8006196 <LoopForever>
  ldr   r0, =_estack
 8006198:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800619c:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 80061a0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80061a4:	080096f8 	.word	0x080096f8
  ldr r2, =_sbss
 80061a8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80061ac:	20001264 	.word	0x20001264

080061b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061b0:	e7fe      	b.n	80061b0 <ADC1_IRQHandler>

080061b2 <get_page>:
 * @param addr The memory address to check.
 * @retval The page number corresponding to the provided address.
 */
static uint32_t get_page(uint32_t addr)
{
    return (addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / STM32G0xx_PAGE_SIZE; // Return the page number
 80061b2:	23f8      	movs	r3, #248	@ 0xf8
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	469c      	mov	ip, r3
 80061b8:	4460      	add	r0, ip
 80061ba:	0ac0      	lsrs	r0, r0, #11
}
 80061bc:	4770      	bx	lr

080061be <set_byte_in_uint64>:
 * @param byte_index The index of the byte to modify (0-7).
 * @param new_value The new byte value to set (0-255).
 * @retval None
 */
static void set_byte_in_uint64(uint64_t *data, uint8_t byte_index, uint8_t new_value)
{
 80061be:	b570      	push	{r4, r5, r6, lr}
    // Clear the byte at the specified index
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 80061c0:	6804      	ldr	r4, [r0, #0]
 80061c2:	6843      	ldr	r3, [r0, #4]
 80061c4:	00c9      	lsls	r1, r1, #3
 80061c6:	000e      	movs	r6, r1
 80061c8:	3e20      	subs	r6, #32
 80061ca:	d413      	bmi.n	80061f4 <set_byte_in_uint64+0x36>
 80061cc:	25ff      	movs	r5, #255	@ 0xff
 80061ce:	40b5      	lsls	r5, r6
 80061d0:	26ff      	movs	r6, #255	@ 0xff
 80061d2:	408e      	lsls	r6, r1
 80061d4:	43b4      	bics	r4, r6
 80061d6:	43ab      	bics	r3, r5
 80061d8:	6004      	str	r4, [r0, #0]
 80061da:	6043      	str	r3, [r0, #4]
    // Set the new byte value
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 80061dc:	000d      	movs	r5, r1
 80061de:	3d20      	subs	r5, #32
 80061e0:	d40d      	bmi.n	80061fe <set_byte_in_uint64+0x40>
 80061e2:	0016      	movs	r6, r2
 80061e4:	40ae      	lsls	r6, r5
 80061e6:	0035      	movs	r5, r6
 80061e8:	408a      	lsls	r2, r1
 80061ea:	4314      	orrs	r4, r2
 80061ec:	6004      	str	r4, [r0, #0]
 80061ee:	432b      	orrs	r3, r5
 80061f0:	6043      	str	r3, [r0, #4]
}
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 80061f4:	2620      	movs	r6, #32
 80061f6:	1a76      	subs	r6, r6, r1
 80061f8:	25ff      	movs	r5, #255	@ 0xff
 80061fa:	40f5      	lsrs	r5, r6
 80061fc:	e7e8      	b.n	80061d0 <set_byte_in_uint64+0x12>
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 80061fe:	2520      	movs	r5, #32
 8006200:	1a6d      	subs	r5, r5, r1
 8006202:	0016      	movs	r6, r2
 8006204:	40ee      	lsrs	r6, r5
 8006206:	0035      	movs	r5, r6
 8006208:	e7ee      	b.n	80061e8 <set_byte_in_uint64+0x2a>

0800620a <my_flash_read_double_word>:
 * @param address The memory address from which to read.
 * @retval The 64-bit value read from the memory address.
 */
static uint64_t my_flash_read_double_word(uint32_t address)
{
    return *((__IO uint64_t *)(address)); // Read and return the 64-bit value
 800620a:	6841      	ldr	r1, [r0, #4]
 800620c:	6800      	ldr	r0, [r0, #0]
}
 800620e:	4770      	bx	lr

08006210 <my_flash_earse_pages>:
 * 
 * @param page_address The address of the page to be erased.
 * @retval Success status (true if successful, false otherwise).
 */
static bool my_flash_earse_pages(uint32_t page_address)
{
 8006210:	b510      	push	{r4, lr}
 8006212:	b086      	sub	sp, #24
    uint32_t page_error = 0; // Variable to hold error information if the erase fails
 8006214:	2300      	movs	r3, #0
 8006216:	9305      	str	r3, [sp, #20]
    FLASH_EraseInitTypeDef my_flash; // Structure for flash erase initialization
    
    my_flash.TypeErase = FLASH_TYPEERASE_PAGES; // Specify that we are erasing pages
 8006218:	3302      	adds	r3, #2
 800621a:	9301      	str	r3, [sp, #4]
    my_flash.Page = get_page(page_address); // Get the page number based on the address
 800621c:	f7ff ffc9 	bl	80061b2 <get_page>
 8006220:	9003      	str	r0, [sp, #12]
    my_flash.NbPages = 1; // Specify that we want to erase one page
 8006222:	2301      	movs	r3, #1
 8006224:	9304      	str	r3, [sp, #16]
    
    HAL_FLASH_Unlock(); // Unlock the flash memory for write access
 8006226:	f001 f847 	bl	80072b8 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&my_flash, &page_error); // Perform the erase operation
 800622a:	a905      	add	r1, sp, #20
 800622c:	a801      	add	r0, sp, #4
 800622e:	f001 f8f1 	bl	8007414 <HAL_FLASHEx_Erase>
 8006232:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 8006234:	f001 f8c0 	bl	80073b8 <HAL_FLASH_Lock>
    
    // Return true if the erase was successful, false otherwise
    return (status == HAL_OK) ? true : false;
 8006238:	4263      	negs	r3, r4
 800623a:	415c      	adcs	r4, r3
 800623c:	b2e0      	uxtb	r0, r4
}
 800623e:	b006      	add	sp, #24
 8006240:	bd10      	pop	{r4, pc}

08006242 <my_flash_write_double_word>:
 * @param address The memory address to which the data will be written.
 * @param data The 64-bit data to be written.
 * @retval true if the write operation is successful, false otherwise.
 */
static bool my_flash_write_double_word(uint32_t address, uint64_t data)
{
 8006242:	b570      	push	{r4, r5, r6, lr}
 8006244:	0004      	movs	r4, r0
 8006246:	0016      	movs	r6, r2
 8006248:	001d      	movs	r5, r3
    HAL_FLASH_Unlock(); // Unlock the flash memory for writing
 800624a:	f001 f835 	bl	80072b8 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data); // Program the double word
 800624e:	0032      	movs	r2, r6
 8006250:	002b      	movs	r3, r5
 8006252:	0021      	movs	r1, r4
 8006254:	2001      	movs	r0, #1
 8006256:	f001 f87d 	bl	8007354 <HAL_FLASH_Program>
 800625a:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 800625c:	f001 f8ac 	bl	80073b8 <HAL_FLASH_Lock>

    return (status == HAL_OK); // Return success status
 8006260:	4263      	negs	r3, r4
 8006262:	415c      	adcs	r4, r3
 8006264:	b2e0      	uxtb	r0, r4
}
 8006266:	bd70      	pop	{r4, r5, r6, pc}

08006268 <get_rgb_light>:
 * @param None
 * @retval The current RGB brightness value.
 */
uint8_t get_rgb_light(void)
{
    return *((__IO uint8_t *)(RGB_LIGHT_ADDR)); // Read and return the current RGB brightness value
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <get_rgb_light+0x8>)
 800626a:	7818      	ldrb	r0, [r3, #0]
 800626c:	b2c0      	uxtb	r0, r0
}
 800626e:	4770      	bx	lr
 8006270:	0800c001 	.word	0x0800c001

08006274 <set_rgb_light>:
{
 8006274:	b530      	push	{r4, r5, lr}
 8006276:	b083      	sub	sp, #12
 8006278:	0004      	movs	r4, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR); // Read current RGB light data
 800627a:	4d0e      	ldr	r5, [pc, #56]	@ (80062b4 <set_rgb_light+0x40>)
 800627c:	0028      	movs	r0, r5
 800627e:	f7ff ffc4 	bl	800620a <my_flash_read_double_word>
 8006282:	9000      	str	r0, [sp, #0]
 8006284:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 1, data); // Modify the brightness byte
 8006286:	0022      	movs	r2, r4
 8006288:	2101      	movs	r1, #1
 800628a:	4668      	mov	r0, sp
 800628c:	f7ff ff97 	bl	80061be <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR); // Erase the flash page
 8006290:	0028      	movs	r0, r5
 8006292:	f7ff ffbd 	bl	8006210 <my_flash_earse_pages>
    while (!my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp))
 8006296:	9a00      	ldr	r2, [sp, #0]
 8006298:	9b01      	ldr	r3, [sp, #4]
 800629a:	4806      	ldr	r0, [pc, #24]	@ (80062b4 <set_rgb_light+0x40>)
 800629c:	f7ff ffd1 	bl	8006242 <my_flash_write_double_word>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0f8      	beq.n	8006296 <set_rgb_light+0x22>
    return (get_rgb_light() == data);
 80062a4:	f7ff ffe0 	bl	8006268 <get_rgb_light>
 80062a8:	1b00      	subs	r0, r0, r4
 80062aa:	4243      	negs	r3, r0
 80062ac:	4158      	adcs	r0, r3
 80062ae:	b2c0      	uxtb	r0, r0
}
 80062b0:	b003      	add	sp, #12
 80062b2:	bd30      	pop	{r4, r5, pc}
 80062b4:	0800c000 	.word	0x0800c000

080062b8 <get_bootloader_version>:
 * @param None
 * @retval The bootloader version number.
 */
uint8_t get_bootloader_version(void)
{
    return *((__IO uint8_t *)(BOOTLOADER_VERSION_ADDR)); // Read and return the bootloader version number
 80062b8:	4b01      	ldr	r3, [pc, #4]	@ (80062c0 <get_bootloader_version+0x8>)
 80062ba:	7818      	ldrb	r0, [r3, #0]
 80062bc:	b2c0      	uxtb	r0, r0
}
 80062be:	4770      	bx	lr
 80062c0:	08001fff 	.word	0x08001fff

080062c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062c4:	b510      	push	{r4, lr}
 80062c6:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80062c8:	4b11      	ldr	r3, [pc, #68]	@ (8006310 <HAL_InitTick+0x4c>)
 80062ca:	7819      	ldrb	r1, [r3, #0]
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80062d2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80062d4:	20fa      	movs	r0, #250	@ 0xfa
 80062d6:	0080      	lsls	r0, r0, #2
 80062d8:	f7fb ff16 	bl	8002108 <__udivsi3>
 80062dc:	0001      	movs	r1, r0
 80062de:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <HAL_InitTick+0x50>)
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f7fb ff11 	bl	8002108 <__udivsi3>
 80062e6:	f000 fdcd 	bl	8006e84 <HAL_SYSTICK_Config>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d10d      	bne.n	800630a <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062ee:	2c03      	cmp	r4, #3
 80062f0:	d901      	bls.n	80062f6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80062f2:	2001      	movs	r0, #1
 80062f4:	e7ed      	b.n	80062d2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062f6:	3001      	adds	r0, #1
 80062f8:	2200      	movs	r2, #0
 80062fa:	0021      	movs	r1, r4
 80062fc:	4240      	negs	r0, r0
 80062fe:	f000 fdb1 	bl	8006e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HAL_InitTick+0x54>)
 8006304:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8006306:	2000      	movs	r0, #0
 8006308:	e7e3      	b.n	80062d2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800630a:	2001      	movs	r0, #1
 800630c:	e7e1      	b.n	80062d2 <HAL_InitTick+0xe>
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	200000e0 	.word	0x200000e0
 8006314:	200000dc 	.word	0x200000dc
 8006318:	200000e4 	.word	0x200000e4

0800631c <HAL_Init>:
{
 800631c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800631e:	4a08      	ldr	r2, [pc, #32]	@ (8006340 <HAL_Init+0x24>)
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	2380      	movs	r3, #128	@ 0x80
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	430b      	orrs	r3, r1
 8006328:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800632a:	2003      	movs	r0, #3
 800632c:	f7ff ffca 	bl	80062c4 <HAL_InitTick>
 8006330:	1e04      	subs	r4, r0, #0
 8006332:	d002      	beq.n	800633a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8006334:	2401      	movs	r4, #1
}
 8006336:	0020      	movs	r0, r4
 8006338:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800633a:	f7ff f995 	bl	8005668 <HAL_MspInit>
 800633e:	e7fa      	b.n	8006336 <HAL_Init+0x1a>
 8006340:	40022000 	.word	0x40022000

08006344 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006344:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <HAL_IncTick+0x10>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4a03      	ldr	r2, [pc, #12]	@ (8006358 <HAL_IncTick+0x14>)
 800634a:	6811      	ldr	r1, [r2, #0]
 800634c:	185b      	adds	r3, r3, r1
 800634e:	6013      	str	r3, [r2, #0]
}
 8006350:	4770      	bx	lr
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	200000e0 	.word	0x200000e0
 8006358:	200010fc 	.word	0x200010fc

0800635c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800635c:	4b01      	ldr	r3, [pc, #4]	@ (8006364 <HAL_GetTick+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
}
 8006360:	4770      	bx	lr
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	200010fc 	.word	0x200010fc

08006368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800636c:	f7ff fff6 	bl	800635c <HAL_GetTick>
 8006370:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006372:	1c63      	adds	r3, r4, #1
 8006374:	d002      	beq.n	800637c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006376:	4b04      	ldr	r3, [pc, #16]	@ (8006388 <HAL_Delay+0x20>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800637c:	f7ff ffee 	bl	800635c <HAL_GetTick>
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	42a0      	cmp	r0, r4
 8006384:	d3fa      	bcc.n	800637c <HAL_Delay+0x14>
  {
  }
}
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	200000e0 	.word	0x200000e0

0800638c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800638c:	b530      	push	{r4, r5, lr}
 800638e:	b083      	sub	sp, #12
 8006390:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006392:	2300      	movs	r3, #0
 8006394:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8006396:	2800      	cmp	r0, #0
 8006398:	d100      	bne.n	800639c <HAL_ADC_Init+0x10>
 800639a:	e106      	b.n	80065aa <HAL_ADC_Init+0x21e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800639c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <HAL_ADC_Init+0x3e>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063a2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	00d2      	lsls	r2, r2, #3
 80063a8:	d41c      	bmi.n	80063e4 <HAL_ADC_Init+0x58>
  MODIFY_REG(ADCx->CR,
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	4a80      	ldr	r2, [pc, #512]	@ (80065b0 <HAL_ADC_Init+0x224>)
 80063ae:	4011      	ands	r1, r2
 80063b0:	2280      	movs	r2, #128	@ 0x80
 80063b2:	0552      	lsls	r2, r2, #21
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063b8:	4b7e      	ldr	r3, [pc, #504]	@ (80065b4 <HAL_ADC_Init+0x228>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	497e      	ldr	r1, [pc, #504]	@ (80065b8 <HAL_ADC_Init+0x22c>)
 80063be:	f7fb fea3 	bl	8002108 <__udivsi3>
 80063c2:	3001      	adds	r0, #1
 80063c4:	0040      	lsls	r0, r0, #1
 80063c6:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80063c8:	e009      	b.n	80063de <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 80063ca:	f7fe fe11 	bl	8004ff0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80063ce:	2300      	movs	r3, #0
 80063d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80063d2:	2254      	movs	r2, #84	@ 0x54
 80063d4:	54a3      	strb	r3, [r4, r2]
 80063d6:	e7e4      	b.n	80063a2 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	3b01      	subs	r3, #1
 80063dc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f9      	bne.n	80063d8 <HAL_ADC_Init+0x4c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063e4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	00d2      	lsls	r2, r2, #3
 80063ea:	d500      	bpl.n	80063ee <HAL_ADC_Init+0x62>
 80063ec:	e09d      	b.n	800652a <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80063f0:	2110      	movs	r1, #16
 80063f2:	430a      	orrs	r2, r1
 80063f4:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80063f8:	390f      	subs	r1, #15
 80063fa:	430a      	orrs	r2, r1
 80063fc:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80063fe:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	2104      	movs	r1, #4
 8006404:	000d      	movs	r5, r1
 8006406:	4015      	ands	r5, r2
 8006408:	4211      	tst	r1, r2
 800640a:	d000      	beq.n	800640e <HAL_ADC_Init+0x82>
 800640c:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800640e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006410:	06d2      	lsls	r2, r2, #27
 8006412:	d500      	bpl.n	8006416 <HAL_ADC_Init+0x8a>
 8006414:	e0c2      	b.n	800659c <HAL_ADC_Init+0x210>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006416:	2d00      	cmp	r5, #0
 8006418:	d000      	beq.n	800641c <HAL_ADC_Init+0x90>
 800641a:	e0bf      	b.n	800659c <HAL_ADC_Init+0x210>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800641c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800641e:	4967      	ldr	r1, [pc, #412]	@ (80065bc <HAL_ADC_Init+0x230>)
 8006420:	400a      	ands	r2, r1
 8006422:	3106      	adds	r1, #6
 8006424:	31ff      	adds	r1, #255	@ 0xff
 8006426:	430a      	orrs	r2, r1
 8006428:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	07d2      	lsls	r2, r2, #31
 800642e:	d452      	bmi.n	80064d6 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006430:	68a2      	ldr	r2, [r4, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006432:	7e21      	ldrb	r1, [r4, #24]
 8006434:	0389      	lsls	r1, r1, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006436:	430a      	orrs	r2, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006438:	7e61      	ldrb	r1, [r4, #25]
 800643a:	03c9      	lsls	r1, r1, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800643c:	430a      	orrs	r2, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800643e:	7ea5      	ldrb	r5, [r4, #26]
 8006440:	0369      	lsls	r1, r5, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006442:	430a      	orrs	r2, r1
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006444:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006446:	2900      	cmp	r1, #0
 8006448:	d001      	beq.n	800644e <HAL_ADC_Init+0xc2>
 800644a:	2180      	movs	r1, #128	@ 0x80
 800644c:	0149      	lsls	r1, r1, #5
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800644e:	430a      	orrs	r2, r1
                    hadc->Init.DataAlign                                           |
 8006450:	68e1      	ldr	r1, [r4, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006452:	430a      	orrs	r2, r1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	2900      	cmp	r1, #0
 8006458:	db69      	blt.n	800652e <HAL_ADC_Init+0x1a2>
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	0389      	lsls	r1, r1, #14
                    hadc->Init.DataAlign                                           |
 800645e:	430a      	orrs	r2, r1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006460:	212c      	movs	r1, #44	@ 0x2c
 8006462:	5c61      	ldrb	r1, [r4, r1]
 8006464:	0049      	lsls	r1, r1, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006466:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006468:	2120      	movs	r1, #32
 800646a:	5c61      	ldrb	r1, [r4, r1]
 800646c:	2901      	cmp	r1, #1
 800646e:	d061      	beq.n	8006534 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006470:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006472:	2900      	cmp	r1, #0
 8006474:	d005      	beq.n	8006482 <HAL_ADC_Init+0xf6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006476:	25e0      	movs	r5, #224	@ 0xe0
 8006478:	006d      	lsls	r5, r5, #1
 800647a:	4029      	ands	r1, r5
                      hadc->Init.ExternalTrigConvEdge);
 800647c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800647e:	4329      	orrs	r1, r5
 8006480:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006482:	68d9      	ldr	r1, [r3, #12]
 8006484:	4d4e      	ldr	r5, [pc, #312]	@ (80065c0 <HAL_ADC_Init+0x234>)
 8006486:	4029      	ands	r1, r5
 8006488:	430a      	orrs	r2, r1
 800648a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	0f9b      	lsrs	r3, r3, #30
 8006490:	079b      	lsls	r3, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006492:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006494:	431a      	orrs	r2, r3
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006496:	213c      	movs	r1, #60	@ 0x3c
 8006498:	5c61      	ldrb	r1, [r4, r1]
 800649a:	2901      	cmp	r1, #1
 800649c:	d059      	beq.n	8006552 <HAL_ADC_Init+0x1c6>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	690b      	ldr	r3, [r1, #16]
 80064a2:	4d48      	ldr	r5, [pc, #288]	@ (80065c4 <HAL_ADC_Init+0x238>)
 80064a4:	402b      	ands	r3, r5
 80064a6:	4313      	orrs	r3, r2
 80064a8:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	22c0      	movs	r2, #192	@ 0xc0
 80064ae:	0612      	lsls	r2, r2, #24
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d010      	beq.n	80064d6 <HAL_ADC_Init+0x14a>
 80064b4:	2280      	movs	r2, #128	@ 0x80
 80064b6:	05d2      	lsls	r2, r2, #23
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00c      	beq.n	80064d6 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80064bc:	2280      	movs	r2, #128	@ 0x80
 80064be:	0612      	lsls	r2, r2, #24
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d008      	beq.n	80064d6 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80064c4:	4940      	ldr	r1, [pc, #256]	@ (80065c8 <HAL_ADC_Init+0x23c>)
 80064c6:	680a      	ldr	r2, [r1, #0]
 80064c8:	4d40      	ldr	r5, [pc, #256]	@ (80065cc <HAL_ADC_Init+0x240>)
 80064ca:	402a      	ands	r2, r5
 80064cc:	25f0      	movs	r5, #240	@ 0xf0
 80064ce:	03ad      	lsls	r5, r5, #14
 80064d0:	402b      	ands	r3, r5
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80064da:	694a      	ldr	r2, [r1, #20]
 80064dc:	2507      	movs	r5, #7
 80064de:	43aa      	bics	r2, r5
 80064e0:	4313      	orrs	r3, r2
 80064e2:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80064e4:	6821      	ldr	r1, [r4, #0]
 80064e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80064e8:	694b      	ldr	r3, [r1, #20]
 80064ea:	3569      	adds	r5, #105	@ 0x69
 80064ec:	43ab      	bics	r3, r5
 80064ee:	0112      	lsls	r2, r2, #4
 80064f0:	4313      	orrs	r3, r2
 80064f2:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d135      	bne.n	8006566 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80064fe:	3b10      	subs	r3, #16
 8006500:	430b      	orrs	r3, r1
 8006502:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006504:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	2307      	movs	r3, #7
 800650a:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 800650c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800650e:	429a      	cmp	r2, r3
 8006510:	d03b      	beq.n	800658a <HAL_ADC_Init+0x1fe>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006514:	2212      	movs	r2, #18
 8006516:	4393      	bics	r3, r2
 8006518:	3a02      	subs	r2, #2
 800651a:	4313      	orrs	r3, r2
 800651c:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800651e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006520:	3a0f      	subs	r2, #15
 8006522:	4313      	orrs	r3, r2
 8006524:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006526:	2001      	movs	r0, #1
 8006528:	e03d      	b.n	80065a6 <HAL_ADC_Init+0x21a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800652a:	2000      	movs	r0, #0
 800652c:	e768      	b.n	8006400 <HAL_ADC_Init+0x74>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800652e:	0049      	lsls	r1, r1, #1
 8006530:	0849      	lsrs	r1, r1, #1
 8006532:	e794      	b.n	800645e <HAL_ADC_Init+0xd2>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006534:	2d00      	cmp	r5, #0
 8006536:	d103      	bne.n	8006540 <HAL_ADC_Init+0x1b4>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006538:	2180      	movs	r1, #128	@ 0x80
 800653a:	0249      	lsls	r1, r1, #9
 800653c:	430a      	orrs	r2, r1
 800653e:	e797      	b.n	8006470 <HAL_ADC_Init+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006540:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006542:	2520      	movs	r5, #32
 8006544:	4329      	orrs	r1, r5
 8006546:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006548:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800654a:	3d1f      	subs	r5, #31
 800654c:	4329      	orrs	r1, r5
 800654e:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8006550:	e78e      	b.n	8006470 <HAL_ADC_Init+0xe4>
                      hadc->Init.Oversampling.Ratio         |
 8006552:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006554:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.RightBitShift |
 8006556:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006558:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.TriggeredMode
 800655a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800655c:	430b      	orrs	r3, r1
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800655e:	4313      	orrs	r3, r2
 8006560:	2201      	movs	r2, #1
 8006562:	431a      	orrs	r2, r3
 8006564:	e79b      	b.n	800649e <HAL_ADC_Init+0x112>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006566:	2280      	movs	r2, #128	@ 0x80
 8006568:	0392      	lsls	r2, r2, #14
 800656a:	4293      	cmp	r3, r2
 800656c:	d1ca      	bne.n	8006504 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8006572:	69e3      	ldr	r3, [r4, #28]
 8006574:	3b01      	subs	r3, #1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	221c      	movs	r2, #28
 800657a:	401a      	ands	r2, r3
 800657c:	2310      	movs	r3, #16
 800657e:	425b      	negs	r3, r3
 8006580:	4093      	lsls	r3, r2
 8006582:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006584:	4313      	orrs	r3, r2
 8006586:	628b      	str	r3, [r1, #40]	@ 0x28
 8006588:	e7bc      	b.n	8006504 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 800658a:	2300      	movs	r3, #0
 800658c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800658e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006590:	2203      	movs	r2, #3
 8006592:	4393      	bics	r3, r2
 8006594:	3a02      	subs	r2, #2
 8006596:	4313      	orrs	r3, r2
 8006598:	65a3      	str	r3, [r4, #88]	@ 0x58
 800659a:	e004      	b.n	80065a6 <HAL_ADC_Init+0x21a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800659c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800659e:	2210      	movs	r2, #16
 80065a0:	4313      	orrs	r3, r2
 80065a2:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80065a4:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80065a6:	b003      	add	sp, #12
 80065a8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80065aa:	2001      	movs	r0, #1
 80065ac:	e7fb      	b.n	80065a6 <HAL_ADC_Init+0x21a>
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	6fffffe8 	.word	0x6fffffe8
 80065b4:	200000dc 	.word	0x200000dc
 80065b8:	00030d40 	.word	0x00030d40
 80065bc:	fffffefd 	.word	0xfffffefd
 80065c0:	ffde0201 	.word	0xffde0201
 80065c4:	1ffffc02 	.word	0x1ffffc02
 80065c8:	40012708 	.word	0x40012708
 80065cc:	ffc3ffff 	.word	0xffc3ffff

080065d0 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065d0:	4770      	bx	lr

080065d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065d2:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d4:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065d6:	f7ff fffb 	bl	80065d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065da:	bd10      	pop	{r4, pc}

080065dc <HAL_ADC_ErrorCallback>:
}
 80065dc:	4770      	bx	lr

080065de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80065de:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e0:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80065e2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80065e4:	2240      	movs	r2, #64	@ 0x40
 80065e6:	4313      	orrs	r3, r2
 80065e8:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80065ea:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80065ec:	3a3c      	subs	r2, #60	@ 0x3c
 80065ee:	4313      	orrs	r3, r2
 80065f0:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065f2:	f7ff fff3 	bl	80065dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065f6:	bd10      	pop	{r4, pc}

080065f8 <ADC_DMAConvCplt>:
{
 80065f8:	b510      	push	{r4, lr}
 80065fa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065fe:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006600:	2150      	movs	r1, #80	@ 0x50
 8006602:	4211      	tst	r1, r2
 8006604:	d12a      	bne.n	800665c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006606:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4313      	orrs	r3, r2
 800660e:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006610:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006612:	68d9      	ldr	r1, [r3, #12]
 8006614:	22c0      	movs	r2, #192	@ 0xc0
 8006616:	0112      	lsls	r2, r2, #4
 8006618:	4211      	tst	r1, r2
 800661a:	d113      	bne.n	8006644 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800661c:	7e82      	ldrb	r2, [r0, #26]
 800661e:	2a00      	cmp	r2, #0
 8006620:	d110      	bne.n	8006644 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	0712      	lsls	r2, r2, #28
 8006626:	d50d      	bpl.n	8006644 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	0752      	lsls	r2, r2, #29
 800662c:	d40d      	bmi.n	800664a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	210c      	movs	r1, #12
 8006632:	438a      	bics	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8006636:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006638:	4a0e      	ldr	r2, [pc, #56]	@ (8006674 <ADC_DMAConvCplt+0x7c>)
 800663a:	4013      	ands	r3, r2
 800663c:	3204      	adds	r2, #4
 800663e:	32ff      	adds	r2, #255	@ 0xff
 8006640:	4313      	orrs	r3, r2
 8006642:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8006644:	f7fe f958 	bl	80048f8 <HAL_ADC_ConvCpltCallback>
}
 8006648:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800664a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800664c:	2220      	movs	r2, #32
 800664e:	4313      	orrs	r3, r2
 8006650:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006652:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006654:	3a1f      	subs	r2, #31
 8006656:	4313      	orrs	r3, r2
 8006658:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800665a:	e7f3      	b.n	8006644 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800665c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800665e:	06d2      	lsls	r2, r2, #27
 8006660:	d404      	bmi.n	800666c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006662:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006664:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006666:	0018      	movs	r0, r3
 8006668:	4790      	blx	r2
}
 800666a:	e7ed      	b.n	8006648 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 800666c:	f7ff ffb6 	bl	80065dc <HAL_ADC_ErrorCallback>
 8006670:	e7ea      	b.n	8006648 <ADC_DMAConvCplt+0x50>
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	fffffefe 	.word	0xfffffefe

08006678 <HAL_ADC_ConfigChannel>:
{
 8006678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667a:	b083      	sub	sp, #12
 800667c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800667e:	2300      	movs	r3, #0
 8006680:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006682:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8006684:	3354      	adds	r3, #84	@ 0x54
 8006686:	5cc3      	ldrb	r3, [r0, r3]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d100      	bne.n	800668e <HAL_ADC_ConfigChannel+0x16>
 800668c:	e12f      	b.n	80068ee <HAL_ADC_ConfigChannel+0x276>
 800668e:	2354      	movs	r3, #84	@ 0x54
 8006690:	2201      	movs	r2, #1
 8006692:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	6883      	ldr	r3, [r0, #8]
 8006698:	3203      	adds	r2, #3
 800669a:	0016      	movs	r6, r2
 800669c:	401e      	ands	r6, r3
 800669e:	421a      	tst	r2, r3
 80066a0:	d009      	beq.n	80066b6 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066a4:	321c      	adds	r2, #28
 80066a6:	4313      	orrs	r3, r2
 80066a8:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80066aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80066ac:	2354      	movs	r3, #84	@ 0x54
 80066ae:	2200      	movs	r2, #0
 80066b0:	54e2      	strb	r2, [r4, r3]
}
 80066b2:	b003      	add	sp, #12
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80066b6:	684b      	ldr	r3, [r1, #4]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d100      	bne.n	80066be <HAL_ADC_ConfigChannel+0x46>
 80066bc:	e0d5      	b.n	800686a <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80066be:	2280      	movs	r2, #128	@ 0x80
 80066c0:	0612      	lsls	r2, r2, #24
 80066c2:	4295      	cmp	r5, r2
 80066c4:	d025      	beq.n	8006712 <HAL_ADC_ConfigChannel+0x9a>
 80066c6:	4a8b      	ldr	r2, [pc, #556]	@ (80068f4 <HAL_ADC_ConfigChannel+0x27c>)
 80066c8:	4295      	cmp	r5, r2
 80066ca:	d022      	beq.n	8006712 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80066cc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80066ce:	271f      	movs	r7, #31
 80066d0:	401f      	ands	r7, r3
 80066d2:	250f      	movs	r5, #15
 80066d4:	40bd      	lsls	r5, r7
 80066d6:	43aa      	bics	r2, r5
 80066d8:	680b      	ldr	r3, [r1, #0]
 80066da:	035d      	lsls	r5, r3, #13
 80066dc:	d12f      	bne.n	800673e <HAL_ADC_ConfigChannel+0xc6>
 80066de:	0e9b      	lsrs	r3, r3, #26
 80066e0:	261f      	movs	r6, #31
 80066e2:	401e      	ands	r6, r3
 80066e4:	40be      	lsls	r6, r7
 80066e6:	4332      	orrs	r2, r6
 80066e8:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80066ea:	684d      	ldr	r5, [r1, #4]
 80066ec:	08ab      	lsrs	r3, r5, #2
 80066ee:	3301      	adds	r3, #1
 80066f0:	69e2      	ldr	r2, [r4, #28]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d813      	bhi.n	800671e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80066f6:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80066f8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80066fa:	231f      	movs	r3, #31
 80066fc:	401d      	ands	r5, r3
 80066fe:	3b10      	subs	r3, #16
 8006700:	001f      	movs	r7, r3
 8006702:	40af      	lsls	r7, r5
 8006704:	43ba      	bics	r2, r7
 8006706:	0eb6      	lsrs	r6, r6, #26
 8006708:	4033      	ands	r3, r6
 800670a:	40ab      	lsls	r3, r5
 800670c:	4313      	orrs	r3, r2
 800670e:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8006710:	e005      	b.n	800671e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006712:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006714:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8006716:	035b      	lsls	r3, r3, #13
 8006718:	0b5b      	lsrs	r3, r3, #13
 800671a:	4313      	orrs	r3, r2
 800671c:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	680b      	ldr	r3, [r1, #0]
 8006722:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8006724:	6942      	ldr	r2, [r0, #20]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	439a      	bics	r2, r3
 800672a:	402b      	ands	r3, r5
 800672c:	4d72      	ldr	r5, [pc, #456]	@ (80068f8 <HAL_ADC_ConfigChannel+0x280>)
 800672e:	402b      	ands	r3, r5
 8006730:	4313      	orrs	r3, r2
 8006732:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006734:	680b      	ldr	r3, [r1, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db4f      	blt.n	80067da <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800673a:	2000      	movs	r0, #0
 800673c:	e7b6      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800673e:	07dd      	lsls	r5, r3, #31
 8006740:	d4d0      	bmi.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 8006742:	079d      	lsls	r5, r3, #30
 8006744:	d427      	bmi.n	8006796 <HAL_ADC_ConfigChannel+0x11e>
 8006746:	075d      	lsls	r5, r3, #29
 8006748:	d427      	bmi.n	800679a <HAL_ADC_ConfigChannel+0x122>
 800674a:	071d      	lsls	r5, r3, #28
 800674c:	d427      	bmi.n	800679e <HAL_ADC_ConfigChannel+0x126>
 800674e:	06dd      	lsls	r5, r3, #27
 8006750:	d427      	bmi.n	80067a2 <HAL_ADC_ConfigChannel+0x12a>
 8006752:	069d      	lsls	r5, r3, #26
 8006754:	d427      	bmi.n	80067a6 <HAL_ADC_ConfigChannel+0x12e>
 8006756:	065d      	lsls	r5, r3, #25
 8006758:	d427      	bmi.n	80067aa <HAL_ADC_ConfigChannel+0x132>
 800675a:	061d      	lsls	r5, r3, #24
 800675c:	d427      	bmi.n	80067ae <HAL_ADC_ConfigChannel+0x136>
 800675e:	05dd      	lsls	r5, r3, #23
 8006760:	d427      	bmi.n	80067b2 <HAL_ADC_ConfigChannel+0x13a>
 8006762:	059d      	lsls	r5, r3, #22
 8006764:	d427      	bmi.n	80067b6 <HAL_ADC_ConfigChannel+0x13e>
 8006766:	055d      	lsls	r5, r3, #21
 8006768:	d427      	bmi.n	80067ba <HAL_ADC_ConfigChannel+0x142>
 800676a:	051d      	lsls	r5, r3, #20
 800676c:	d427      	bmi.n	80067be <HAL_ADC_ConfigChannel+0x146>
 800676e:	04dd      	lsls	r5, r3, #19
 8006770:	d427      	bmi.n	80067c2 <HAL_ADC_ConfigChannel+0x14a>
 8006772:	049d      	lsls	r5, r3, #18
 8006774:	d427      	bmi.n	80067c6 <HAL_ADC_ConfigChannel+0x14e>
 8006776:	045d      	lsls	r5, r3, #17
 8006778:	d427      	bmi.n	80067ca <HAL_ADC_ConfigChannel+0x152>
 800677a:	041d      	lsls	r5, r3, #16
 800677c:	d427      	bmi.n	80067ce <HAL_ADC_ConfigChannel+0x156>
 800677e:	03dd      	lsls	r5, r3, #15
 8006780:	d427      	bmi.n	80067d2 <HAL_ADC_ConfigChannel+0x15a>
 8006782:	039d      	lsls	r5, r3, #14
 8006784:	d427      	bmi.n	80067d6 <HAL_ADC_ConfigChannel+0x15e>
 8006786:	2580      	movs	r5, #128	@ 0x80
 8006788:	02ed      	lsls	r5, r5, #11
 800678a:	001e      	movs	r6, r3
 800678c:	402e      	ands	r6, r5
 800678e:	422b      	tst	r3, r5
 8006790:	d0a8      	beq.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 8006792:	2612      	movs	r6, #18
 8006794:	e7a6      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 8006796:	2601      	movs	r6, #1
 8006798:	e7a4      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 800679a:	2602      	movs	r6, #2
 800679c:	e7a2      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 800679e:	2603      	movs	r6, #3
 80067a0:	e7a0      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067a2:	2604      	movs	r6, #4
 80067a4:	e79e      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067a6:	2605      	movs	r6, #5
 80067a8:	e79c      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067aa:	2606      	movs	r6, #6
 80067ac:	e79a      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067ae:	2607      	movs	r6, #7
 80067b0:	e798      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067b2:	2608      	movs	r6, #8
 80067b4:	e796      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067b6:	2609      	movs	r6, #9
 80067b8:	e794      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067ba:	260a      	movs	r6, #10
 80067bc:	e792      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067be:	260b      	movs	r6, #11
 80067c0:	e790      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067c2:	260c      	movs	r6, #12
 80067c4:	e78e      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067c6:	260d      	movs	r6, #13
 80067c8:	e78c      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067ca:	260e      	movs	r6, #14
 80067cc:	e78a      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067ce:	260f      	movs	r6, #15
 80067d0:	e788      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067d2:	2610      	movs	r6, #16
 80067d4:	e786      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
 80067d6:	2611      	movs	r6, #17
 80067d8:	e784      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80067da:	4a48      	ldr	r2, [pc, #288]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	22e0      	movs	r2, #224	@ 0xe0
 80067e0:	0452      	lsls	r2, r2, #17
 80067e2:	400a      	ands	r2, r1
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067e4:	4846      	ldr	r0, [pc, #280]	@ (8006900 <HAL_ADC_ConfigChannel+0x288>)
 80067e6:	4283      	cmp	r3, r0
 80067e8:	d007      	beq.n	80067fa <HAL_ADC_ConfigChannel+0x182>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80067ea:	4846      	ldr	r0, [pc, #280]	@ (8006904 <HAL_ADC_ConfigChannel+0x28c>)
 80067ec:	4283      	cmp	r3, r0
 80067ee:	d022      	beq.n	8006836 <HAL_ADC_ConfigChannel+0x1be>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80067f0:	4845      	ldr	r0, [pc, #276]	@ (8006908 <HAL_ADC_ConfigChannel+0x290>)
 80067f2:	4283      	cmp	r3, r0
 80067f4:	d02c      	beq.n	8006850 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f6:	2000      	movs	r0, #0
 80067f8:	e758      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80067fa:	0208      	lsls	r0, r1, #8
 80067fc:	d4f5      	bmi.n	80067ea <HAL_ADC_ConfigChannel+0x172>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067fe:	2380      	movs	r3, #128	@ 0x80
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006804:	493d      	ldr	r1, [pc, #244]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 8006806:	680a      	ldr	r2, [r1, #0]
 8006808:	4840      	ldr	r0, [pc, #256]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 800680a:	4002      	ands	r2, r0
 800680c:	4313      	orrs	r3, r2
 800680e:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006810:	4b3f      	ldr	r3, [pc, #252]	@ (8006910 <HAL_ADC_ConfigChannel+0x298>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	493f      	ldr	r1, [pc, #252]	@ (8006914 <HAL_ADC_ConfigChannel+0x29c>)
 8006816:	f7fb fc77 	bl	8002108 <__udivsi3>
 800681a:	3001      	adds	r0, #1
 800681c:	0043      	lsls	r3, r0, #1
 800681e:	181b      	adds	r3, r3, r0
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8006824:	e002      	b.n	800682c <HAL_ADC_ConfigChannel+0x1b4>
            wait_loop_index--;
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	3b01      	subs	r3, #1
 800682a:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f9      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006832:	2000      	movs	r0, #0
 8006834:	e73a      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006836:	01c8      	lsls	r0, r1, #7
 8006838:	d4da      	bmi.n	80067f0 <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800683a:	2380      	movs	r3, #128	@ 0x80
 800683c:	045b      	lsls	r3, r3, #17
 800683e:	4313      	orrs	r3, r2
 8006840:	492e      	ldr	r1, [pc, #184]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 8006842:	680a      	ldr	r2, [r1, #0]
 8006844:	4831      	ldr	r0, [pc, #196]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 8006846:	4002      	ands	r2, r0
 8006848:	4313      	orrs	r3, r2
 800684a:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800684c:	2000      	movs	r0, #0
}
 800684e:	e72d      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006850:	0249      	lsls	r1, r1, #9
 8006852:	d44a      	bmi.n	80068ea <HAL_ADC_ConfigChannel+0x272>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	03db      	lsls	r3, r3, #15
 8006858:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800685a:	4928      	ldr	r1, [pc, #160]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 800685c:	680a      	ldr	r2, [r1, #0]
 800685e:	482b      	ldr	r0, [pc, #172]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 8006860:	4002      	ands	r2, r0
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006866:	2000      	movs	r0, #0
}
 8006868:	e720      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800686a:	2380      	movs	r3, #128	@ 0x80
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	429d      	cmp	r5, r3
 8006870:	d002      	beq.n	8006878 <HAL_ADC_ConfigChannel+0x200>
 8006872:	4b20      	ldr	r3, [pc, #128]	@ (80068f4 <HAL_ADC_ConfigChannel+0x27c>)
 8006874:	429d      	cmp	r5, r3
 8006876:	d105      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006878:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800687a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800687c:	035b      	lsls	r3, r3, #13
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	439a      	bics	r2, r3
 8006882:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006884:	680b      	ldr	r3, [r1, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	db01      	blt.n	800688e <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800688a:	2000      	movs	r0, #0
 800688c:	e70e      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800688e:	4a1b      	ldr	r2, [pc, #108]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 8006890:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006892:	491b      	ldr	r1, [pc, #108]	@ (8006900 <HAL_ADC_ConfigChannel+0x288>)
 8006894:	428b      	cmp	r3, r1
 8006896:	d007      	beq.n	80068a8 <HAL_ADC_ConfigChannel+0x230>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006898:	491a      	ldr	r1, [pc, #104]	@ (8006904 <HAL_ADC_ConfigChannel+0x28c>)
 800689a:	428b      	cmp	r3, r1
 800689c:	d00f      	beq.n	80068be <HAL_ADC_ConfigChannel+0x246>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800689e:	491a      	ldr	r1, [pc, #104]	@ (8006908 <HAL_ADC_ConfigChannel+0x290>)
 80068a0:	428b      	cmp	r3, r1
 80068a2:	d017      	beq.n	80068d4 <HAL_ADC_ConfigChannel+0x25c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068a4:	2000      	movs	r0, #0
 80068a6:	e701      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068a8:	23a0      	movs	r3, #160	@ 0xa0
 80068aa:	045b      	lsls	r3, r3, #17
 80068ac:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80068ae:	4913      	ldr	r1, [pc, #76]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 80068b0:	680b      	ldr	r3, [r1, #0]
 80068b2:	4816      	ldr	r0, [pc, #88]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 80068b4:	4003      	ands	r3, r0
 80068b6:	431a      	orrs	r2, r3
 80068b8:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ba:	2000      	movs	r0, #0
}
 80068bc:	e6f6      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068be:	23c0      	movs	r3, #192	@ 0xc0
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80068c4:	490d      	ldr	r1, [pc, #52]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	4810      	ldr	r0, [pc, #64]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 80068ca:	4003      	ands	r3, r0
 80068cc:	431a      	orrs	r2, r3
 80068ce:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d0:	2000      	movs	r0, #0
}
 80068d2:	e6eb      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068d4:	23c0      	movs	r3, #192	@ 0xc0
 80068d6:	045b      	lsls	r3, r3, #17
 80068d8:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80068da:	4908      	ldr	r1, [pc, #32]	@ (80068fc <HAL_ADC_ConfigChannel+0x284>)
 80068dc:	680b      	ldr	r3, [r1, #0]
 80068de:	480b      	ldr	r0, [pc, #44]	@ (800690c <HAL_ADC_ConfigChannel+0x294>)
 80068e0:	4003      	ands	r3, r0
 80068e2:	431a      	orrs	r2, r3
 80068e4:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068e6:	2000      	movs	r0, #0
}
 80068e8:	e6e0      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
 80068ea:	2000      	movs	r0, #0
 80068ec:	e6de      	b.n	80066ac <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80068ee:	2002      	movs	r0, #2
 80068f0:	e6df      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x3a>
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	80000004 	.word	0x80000004
 80068f8:	07ffff00 	.word	0x07ffff00
 80068fc:	40012708 	.word	0x40012708
 8006900:	b0001000 	.word	0xb0001000
 8006904:	b8004000 	.word	0xb8004000
 8006908:	b4002000 	.word	0xb4002000
 800690c:	fe3fffff 	.word	0xfe3fffff
 8006910:	200000dc 	.word	0x200000dc
 8006914:	00030d40 	.word	0x00030d40

08006918 <ADC_ConversionStop>:
{
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800691c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800691e:	6893      	ldr	r3, [r2, #8]
 8006920:	075b      	lsls	r3, r3, #29
 8006922:	d524      	bpl.n	800696e <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006924:	6893      	ldr	r3, [r2, #8]
 8006926:	079b      	lsls	r3, r3, #30
 8006928:	d405      	bmi.n	8006936 <ADC_ConversionStop+0x1e>
  MODIFY_REG(ADCx->CR,
 800692a:	6893      	ldr	r3, [r2, #8]
 800692c:	4911      	ldr	r1, [pc, #68]	@ (8006974 <ADC_ConversionStop+0x5c>)
 800692e:	400b      	ands	r3, r1
 8006930:	2110      	movs	r1, #16
 8006932:	430b      	orrs	r3, r1
 8006934:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006936:	f7ff fd11 	bl	800635c <HAL_GetTick>
 800693a:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	075b      	lsls	r3, r3, #29
 8006942:	d512      	bpl.n	800696a <ADC_ConversionStop+0x52>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006944:	f7ff fd0a 	bl	800635c <HAL_GetTick>
 8006948:	1b40      	subs	r0, r0, r5
 800694a:	2802      	cmp	r0, #2
 800694c:	d9f6      	bls.n	800693c <ADC_ConversionStop+0x24>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	075b      	lsls	r3, r3, #29
 8006954:	d5f2      	bpl.n	800693c <ADC_ConversionStop+0x24>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006958:	2210      	movs	r2, #16
 800695a:	4313      	orrs	r3, r2
 800695c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800695e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006960:	3a0f      	subs	r2, #15
 8006962:	4313      	orrs	r3, r2
 8006964:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8006966:	2001      	movs	r0, #1
 8006968:	e002      	b.n	8006970 <ADC_ConversionStop+0x58>
  return HAL_OK;
 800696a:	2000      	movs	r0, #0
 800696c:	e000      	b.n	8006970 <ADC_ConversionStop+0x58>
 800696e:	2000      	movs	r0, #0
}
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	7fffffe8 	.word	0x7fffffe8

08006978 <ADC_Enable>:
{
 8006978:	b530      	push	{r4, r5, lr}
 800697a:	b083      	sub	sp, #12
 800697c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800697e:	2300      	movs	r3, #0
 8006980:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006982:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	07d2      	lsls	r2, r2, #31
 8006988:	d44f      	bmi.n	8006a2a <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800698a:	6899      	ldr	r1, [r3, #8]
 800698c:	4a28      	ldr	r2, [pc, #160]	@ (8006a30 <ADC_Enable+0xb8>)
 800698e:	4211      	tst	r1, r2
 8006990:	d111      	bne.n	80069b6 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	4927      	ldr	r1, [pc, #156]	@ (8006a34 <ADC_Enable+0xbc>)
 8006996:	400a      	ands	r2, r1
 8006998:	2101      	movs	r1, #1
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800699e:	4b26      	ldr	r3, [pc, #152]	@ (8006a38 <ADC_Enable+0xc0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	d517      	bpl.n	80069d6 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069a6:	4b25      	ldr	r3, [pc, #148]	@ (8006a3c <ADC_Enable+0xc4>)
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	4925      	ldr	r1, [pc, #148]	@ (8006a40 <ADC_Enable+0xc8>)
 80069ac:	f7fb fbac 	bl	8002108 <__udivsi3>
 80069b0:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80069b2:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80069b4:	e00c      	b.n	80069d0 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80069b8:	2210      	movs	r2, #16
 80069ba:	4313      	orrs	r3, r2
 80069bc:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069be:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80069c0:	3a0f      	subs	r2, #15
 80069c2:	4313      	orrs	r3, r2
 80069c4:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 80069c6:	2001      	movs	r0, #1
 80069c8:	e030      	b.n	8006a2c <ADC_Enable+0xb4>
        wait_loop_index--;
 80069ca:	9b01      	ldr	r3, [sp, #4]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f9      	bne.n	80069ca <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80069d6:	7e63      	ldrb	r3, [r4, #25]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <ADC_Enable+0x68>
  return HAL_OK;
 80069dc:	2000      	movs	r0, #0
 80069de:	e025      	b.n	8006a2c <ADC_Enable+0xb4>
      tickstart = HAL_GetTick();
 80069e0:	f7ff fcbc 	bl	800635c <HAL_GetTick>
 80069e4:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	07d2      	lsls	r2, r2, #31
 80069ec:	d41b      	bmi.n	8006a26 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	07d2      	lsls	r2, r2, #31
 80069f2:	d405      	bmi.n	8006a00 <ADC_Enable+0x88>
  MODIFY_REG(ADCx->CR,
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	490f      	ldr	r1, [pc, #60]	@ (8006a34 <ADC_Enable+0xbc>)
 80069f8:	400a      	ands	r2, r1
 80069fa:	2101      	movs	r1, #1
 80069fc:	430a      	orrs	r2, r1
 80069fe:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a00:	f7ff fcac 	bl	800635c <HAL_GetTick>
 8006a04:	1b40      	subs	r0, r0, r5
 8006a06:	2802      	cmp	r0, #2
 8006a08:	d9ed      	bls.n	80069e6 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d4e9      	bmi.n	80069e6 <ADC_Enable+0x6e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a14:	2210      	movs	r2, #16
 8006a16:	4313      	orrs	r3, r2
 8006a18:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a1a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006a1c:	3a0f      	subs	r2, #15
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8006a22:	2001      	movs	r0, #1
 8006a24:	e002      	b.n	8006a2c <ADC_Enable+0xb4>
  return HAL_OK;
 8006a26:	2000      	movs	r0, #0
 8006a28:	e000      	b.n	8006a2c <ADC_Enable+0xb4>
 8006a2a:	2000      	movs	r0, #0
}
 8006a2c:	b003      	add	sp, #12
 8006a2e:	bd30      	pop	{r4, r5, pc}
 8006a30:	80000017 	.word	0x80000017
 8006a34:	7fffffe8 	.word	0x7fffffe8
 8006a38:	40012708 	.word	0x40012708
 8006a3c:	200000dc 	.word	0x200000dc
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <HAL_ADC_Start_DMA>:
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	0004      	movs	r4, r0
 8006a48:	000d      	movs	r5, r1
 8006a4a:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a4c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a4e:	6893      	ldr	r3, [r2, #8]
 8006a50:	075b      	lsls	r3, r3, #29
 8006a52:	d447      	bmi.n	8006ae4 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8006a54:	2354      	movs	r3, #84	@ 0x54
 8006a56:	5cc3      	ldrb	r3, [r0, r3]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d045      	beq.n	8006ae8 <HAL_ADC_Start_DMA+0xa4>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	2154      	movs	r1, #84	@ 0x54
 8006a60:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006a62:	68d1      	ldr	r1, [r2, #12]
 8006a64:	420b      	tst	r3, r1
 8006a66:	d10d      	bne.n	8006a84 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a68:	6893      	ldr	r3, [r2, #8]
 8006a6a:	07db      	lsls	r3, r3, #31
 8006a6c:	d505      	bpl.n	8006a7a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8006a6e:	6893      	ldr	r3, [r2, #8]
 8006a70:	491e      	ldr	r1, [pc, #120]	@ (8006aec <HAL_ADC_Start_DMA+0xa8>)
 8006a72:	400b      	ands	r3, r1
 8006a74:	2102      	movs	r1, #2
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	68d3      	ldr	r3, [r2, #12]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	430b      	orrs	r3, r1
 8006a82:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8006a84:	0020      	movs	r0, r4
 8006a86:	f7ff ff77 	bl	8006978 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d12b      	bne.n	8006ae6 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8006a8e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006a90:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <HAL_ADC_Start_DMA+0xac>)
 8006a92:	401a      	ands	r2, r3
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006aa0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006aa2:	4914      	ldr	r1, [pc, #80]	@ (8006af4 <HAL_ADC_Start_DMA+0xb0>)
 8006aa4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006aa6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006aa8:	4913      	ldr	r1, [pc, #76]	@ (8006af8 <HAL_ADC_Start_DMA+0xb4>)
 8006aaa:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006aac:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006aae:	4913      	ldr	r1, [pc, #76]	@ (8006afc <HAL_ADC_Start_DMA+0xb8>)
 8006ab0:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	211c      	movs	r1, #28
 8006ab6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8006ab8:	2254      	movs	r2, #84	@ 0x54
 8006aba:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	6853      	ldr	r3, [r2, #4]
 8006ac0:	390c      	subs	r1, #12
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	3140      	adds	r1, #64	@ 0x40
 8006aca:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8006acc:	0033      	movs	r3, r6
 8006ace:	002a      	movs	r2, r5
 8006ad0:	f000 face 	bl	8007070 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006ad4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006ad6:	6893      	ldr	r3, [r2, #8]
 8006ad8:	4904      	ldr	r1, [pc, #16]	@ (8006aec <HAL_ADC_Start_DMA+0xa8>)
 8006ada:	400b      	ands	r3, r1
 8006adc:	2104      	movs	r1, #4
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	6093      	str	r3, [r2, #8]
}
 8006ae2:	e000      	b.n	8006ae6 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8006ae4:	2002      	movs	r0, #2
}
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8006ae8:	2002      	movs	r0, #2
 8006aea:	e7fc      	b.n	8006ae6 <HAL_ADC_Start_DMA+0xa2>
 8006aec:	7fffffe8 	.word	0x7fffffe8
 8006af0:	fffff0fe 	.word	0xfffff0fe
 8006af4:	080065f9 	.word	0x080065f9
 8006af8:	080065d3 	.word	0x080065d3
 8006afc:	080065df 	.word	0x080065df

08006b00 <ADC_Disable>:
{
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b04:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	2102      	movs	r1, #2
 8006b0a:	0008      	movs	r0, r1
 8006b0c:	4010      	ands	r0, r2
 8006b0e:	4211      	tst	r1, r2
 8006b10:	d000      	beq.n	8006b14 <ADC_Disable+0x14>
 8006b12:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	07d2      	lsls	r2, r2, #31
 8006b18:	d535      	bpl.n	8006b86 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d135      	bne.n	8006b8a <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b1e:	6899      	ldr	r1, [r3, #8]
 8006b20:	2205      	movs	r2, #5
 8006b22:	400a      	ands	r2, r1
 8006b24:	2a01      	cmp	r2, #1
 8006b26:	d009      	beq.n	8006b3c <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006b32:	3a0f      	subs	r2, #15
 8006b34:	4313      	orrs	r3, r2
 8006b36:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e025      	b.n	8006b88 <ADC_Disable+0x88>
  MODIFY_REG(ADCx->CR,
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	4914      	ldr	r1, [pc, #80]	@ (8006b90 <ADC_Disable+0x90>)
 8006b40:	400a      	ands	r2, r1
 8006b42:	2102      	movs	r1, #2
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006b4e:	f7ff fc05 	bl	800635c <HAL_GetTick>
 8006b52:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	07db      	lsls	r3, r3, #31
 8006b5a:	d512      	bpl.n	8006b82 <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b5c:	f7ff fbfe 	bl	800635c <HAL_GetTick>
 8006b60:	1b40      	subs	r0, r0, r5
 8006b62:	2802      	cmp	r0, #2
 8006b64:	d9f6      	bls.n	8006b54 <ADC_Disable+0x54>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d5f2      	bpl.n	8006b54 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b70:	2210      	movs	r2, #16
 8006b72:	4313      	orrs	r3, r2
 8006b74:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b76:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006b78:	3a0f      	subs	r2, #15
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8006b7e:	2001      	movs	r0, #1
 8006b80:	e002      	b.n	8006b88 <ADC_Disable+0x88>
  return HAL_OK;
 8006b82:	2000      	movs	r0, #0
 8006b84:	e000      	b.n	8006b88 <ADC_Disable+0x88>
 8006b86:	2000      	movs	r0, #0
}
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7fc      	b.n	8006b88 <ADC_Disable+0x88>
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	7fffffe8 	.word	0x7fffffe8

08006b94 <HAL_ADC_DeInit>:
{
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 8006b98:	d04b      	beq.n	8006c32 <HAL_ADC_DeInit+0x9e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006b9a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006ba2:	f7ff feb9 	bl	8006918 <ADC_ConversionStop>
 8006ba6:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8006ba8:	d036      	beq.n	8006c18 <HAL_ADC_DeInit+0x84>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	6853      	ldr	r3, [r2, #4]
 8006bae:	4922      	ldr	r1, [pc, #136]	@ (8006c38 <HAL_ADC_DeInit+0xa4>)
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <HAL_ADC_DeInit+0xa8>)
 8006bb8:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	68d3      	ldr	r3, [r2, #12]
 8006bbe:	4920      	ldr	r1, [pc, #128]	@ (8006c40 <HAL_ADC_DeInit+0xac>)
 8006bc0:	400b      	ands	r3, r1
 8006bc2:	60d3      	str	r3, [r2, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	6953      	ldr	r3, [r2, #20]
 8006bc8:	2107      	movs	r1, #7
 8006bca:	438b      	bics	r3, r1
 8006bcc:	6153      	str	r3, [r2, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	629e      	str	r6, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	6a0b      	ldr	r3, [r1, #32]
 8006bda:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <HAL_ADC_DeInit+0xb0>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	620b      	str	r3, [r1, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006be0:	6821      	ldr	r1, [r4, #0]
 8006be2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8006be4:	4013      	ands	r3, r2
 8006be6:	624b      	str	r3, [r1, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8006be8:	6821      	ldr	r1, [r4, #0]
 8006bea:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8006bec:	4013      	ands	r3, r2
 8006bee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	6913      	ldr	r3, [r2, #16]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	6113      	str	r3, [r2, #16]
  ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8006bfa:	4a13      	ldr	r2, [pc, #76]	@ (8006c48 <HAL_ADC_DeInit+0xb4>)
 8006bfc:	6813      	ldr	r3, [r2, #0]
 8006bfe:	4913      	ldr	r1, [pc, #76]	@ (8006c4c <HAL_ADC_DeInit+0xb8>)
 8006c00:	400b      	ands	r3, r1
 8006c02:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8006c04:	0020      	movs	r0, r4
 8006c06:	f7fe fa85 	bl	8005114 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006c0a:	6626      	str	r6, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8006c0c:	65e6      	str	r6, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8006c0e:	65a6      	str	r6, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8006c10:	2354      	movs	r3, #84	@ 0x54
 8006c12:	54e6      	strb	r6, [r4, r3]
}
 8006c14:	0028      	movs	r0, r5
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f7ff ff71 	bl	8006b00 <ADC_Disable>
 8006c1e:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8006c20:	d101      	bne.n	8006c26 <HAL_ADC_DeInit+0x92>
      hadc->State = HAL_ADC_STATE_READY;
 8006c22:	2301      	movs	r3, #1
 8006c24:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8006c26:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8006c28:	6893      	ldr	r3, [r2, #8]
 8006c2a:	4909      	ldr	r1, [pc, #36]	@ (8006c50 <HAL_ADC_DeInit+0xbc>)
 8006c2c:	400b      	ands	r3, r1
 8006c2e:	6093      	str	r3, [r2, #8]
}
 8006c30:	e7bb      	b.n	8006baa <HAL_ADC_DeInit+0x16>
    return HAL_ERROR;
 8006c32:	2501      	movs	r5, #1
 8006c34:	e7ee      	b.n	8006c14 <HAL_ADC_DeInit+0x80>
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	fffffc60 	.word	0xfffffc60
 8006c3c:	0000039f 	.word	0x0000039f
 8006c40:	831e0200 	.word	0x831e0200
 8006c44:	f000f000 	.word	0xf000f000
 8006c48:	40012708 	.word	0x40012708
 8006c4c:	fe03ffff 	.word	0xfe03ffff
 8006c50:	6fffffe8 	.word	0x6fffffe8

08006c54 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	b083      	sub	sp, #12
 8006c58:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006c5e:	3354      	adds	r3, #84	@ 0x54
 8006c60:	5cc3      	ldrb	r3, [r0, r3]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d100      	bne.n	8006c68 <HAL_ADCEx_Calibration_Start+0x14>
 8006c66:	e0a2      	b.n	8006dae <HAL_ADCEx_Calibration_Start+0x15a>
 8006c68:	2601      	movs	r6, #1
 8006c6a:	2354      	movs	r3, #84	@ 0x54
 8006c6c:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006c6e:	f7ff ff47 	bl	8006b00 <ADC_Disable>
 8006c72:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c74:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	0031      	movs	r1, r6
 8006c7a:	4011      	ands	r1, r2
 8006c7c:	4216      	tst	r6, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c82:	2210      	movs	r2, #16
 8006c84:	4313      	orrs	r3, r2
 8006c86:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006c88:	2354      	movs	r3, #84	@ 0x54
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8006c8e:	0028      	movs	r0, r5
 8006c90:	b003      	add	sp, #12
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8006c94:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006c96:	4847      	ldr	r0, [pc, #284]	@ (8006db4 <HAL_ADCEx_Calibration_Start+0x160>)
 8006c98:	4002      	ands	r2, r0
 8006c9a:	3006      	adds	r0, #6
 8006c9c:	30ff      	adds	r0, #255	@ 0xff
 8006c9e:	4302      	orrs	r2, r0
 8006ca0:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006ca2:	68de      	ldr	r6, [r3, #12]
 8006ca4:	4a44      	ldr	r2, [pc, #272]	@ (8006db8 <HAL_ADCEx_Calibration_Start+0x164>)
 8006ca6:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	4844      	ldr	r0, [pc, #272]	@ (8006dbc <HAL_ADCEx_Calibration_Start+0x168>)
 8006cac:	4002      	ands	r2, r0
 8006cae:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8006cb0:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006cb2:	e005      	b.n	8006cc0 <HAL_ADCEx_Calibration_Start+0x6c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006cb4:	22b4      	movs	r2, #180	@ 0xb4
 8006cb6:	589a      	ldr	r2, [r3, r2]
 8006cb8:	237f      	movs	r3, #127	@ 0x7f
 8006cba:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006cbc:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006cbe:	3101      	adds	r1, #1
 8006cc0:	2907      	cmp	r1, #7
 8006cc2:	d81c      	bhi.n	8006cfe <HAL_ADCEx_Calibration_Start+0xaa>
      LL_ADC_StartCalibration(hadc->Instance);
 8006cc4:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8006cca:	401a      	ands	r2, r3
 8006ccc:	3318      	adds	r3, #24
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006cd2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	2a00      	cmp	r2, #0
 8006cd8:	daec      	bge.n	8006cb4 <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	4b38      	ldr	r3, [pc, #224]	@ (8006dc4 <HAL_ADCEx_Calibration_Start+0x170>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d9f4      	bls.n	8006cd2 <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 8006ce8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cea:	2212      	movs	r2, #18
 8006cec:	4393      	bics	r3, r2
 8006cee:	3a02      	subs	r2, #2
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8006cf4:	2354      	movs	r3, #84	@ 0x54
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8006cfa:	2501      	movs	r5, #1
 8006cfc:	e7c7      	b.n	8006c8e <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 8006cfe:	f7fb fa03 	bl	8002108 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8006d02:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006d04:	6893      	ldr	r3, [r2, #8]
 8006d06:	492e      	ldr	r1, [pc, #184]	@ (8006dc0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8006d08:	400b      	ands	r3, r1
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8006d10:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006d12:	6911      	ldr	r1, [r2, #16]
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	d217      	bcs.n	8006d4c <HAL_ADCEx_Calibration_Start+0xf8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc8 <HAL_ADCEx_Calibration_Start+0x174>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	21f0      	movs	r1, #240	@ 0xf0
 8006d22:	0389      	lsls	r1, r1, #14
 8006d24:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006d26:	21e0      	movs	r1, #224	@ 0xe0
 8006d28:	0349      	lsls	r1, r1, #13
 8006d2a:	428b      	cmp	r3, r1
 8006d2c:	d30e      	bcc.n	8006d4c <HAL_ADCEx_Calibration_Start+0xf8>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006d2e:	0c9b      	lsrs	r3, r3, #18
 8006d30:	3b03      	subs	r3, #3
 8006d32:	2101      	movs	r1, #1
 8006d34:	4099      	lsls	r1, r3
 8006d36:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8006d38:	9b00      	ldr	r3, [sp, #0]
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8006d3e:	e002      	b.n	8006d46 <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f9      	bne.n	8006d40 <HAL_ADCEx_Calibration_Start+0xec>
  MODIFY_REG(ADCx->CALFACT,
 8006d4c:	21b4      	movs	r1, #180	@ 0xb4
 8006d4e:	5853      	ldr	r3, [r2, r1]
 8006d50:	277f      	movs	r7, #127	@ 0x7f
 8006d52:	43bb      	bics	r3, r7
 8006d54:	4318      	orrs	r0, r3
 8006d56:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8006d58:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006d5a:	6893      	ldr	r3, [r2, #8]
 8006d5c:	4918      	ldr	r1, [pc, #96]	@ (8006dc0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8006d5e:	400b      	ands	r3, r1
 8006d60:	2102      	movs	r1, #2
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006d66:	f7ff faf9 	bl	800635c <HAL_GetTick>
 8006d6a:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d6c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	07d2      	lsls	r2, r2, #31
 8006d72:	d409      	bmi.n	8006d88 <HAL_ADCEx_Calibration_Start+0x134>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	4332      	orrs	r2, r6
 8006d78:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8006d7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	4393      	bics	r3, r2
 8006d80:	3a02      	subs	r2, #2
 8006d82:	4313      	orrs	r3, r2
 8006d84:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006d86:	e77f      	b.n	8006c88 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d88:	f7ff fae8 	bl	800635c <HAL_GetTick>
 8006d8c:	1bc0      	subs	r0, r0, r7
 8006d8e:	2802      	cmp	r0, #2
 8006d90:	d9ec      	bls.n	8006d6c <HAL_ADCEx_Calibration_Start+0x118>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d5e8      	bpl.n	8006d6c <HAL_ADCEx_Calibration_Start+0x118>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006da4:	3a0f      	subs	r2, #15
 8006da6:	4313      	orrs	r3, r2
 8006da8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8006daa:	2501      	movs	r5, #1
 8006dac:	e76f      	b.n	8006c8e <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8006dae:	2502      	movs	r5, #2
 8006db0:	e76d      	b.n	8006c8e <HAL_ADCEx_Calibration_Start+0x3a>
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	fffffefd 	.word	0xfffffefd
 8006db8:	00008003 	.word	0x00008003
 8006dbc:	ffff7ffc 	.word	0xffff7ffc
 8006dc0:	7fffffe8 	.word	0x7fffffe8
 8006dc4:	0002f1ff 	.word	0x0002f1ff
 8006dc8:	40012708 	.word	0x40012708

08006dcc <__NVIC_SetPriority>:
{
 8006dcc:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	db11      	blt.n	8006df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006dd2:	0883      	lsrs	r3, r0, #2
 8006dd4:	4d13      	ldr	r5, [pc, #76]	@ (8006e24 <__NVIC_SetPriority+0x58>)
 8006dd6:	33c0      	adds	r3, #192	@ 0xc0
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	595c      	ldr	r4, [r3, r5]
 8006ddc:	2203      	movs	r2, #3
 8006dde:	4010      	ands	r0, r2
 8006de0:	00c0      	lsls	r0, r0, #3
 8006de2:	32fc      	adds	r2, #252	@ 0xfc
 8006de4:	0016      	movs	r6, r2
 8006de6:	4086      	lsls	r6, r0
 8006de8:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006dea:	0189      	lsls	r1, r1, #6
 8006dec:	400a      	ands	r2, r1
 8006dee:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006df0:	4322      	orrs	r2, r4
 8006df2:	515a      	str	r2, [r3, r5]
}
 8006df4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006df6:	230f      	movs	r3, #15
 8006df8:	4003      	ands	r3, r0
 8006dfa:	3b08      	subs	r3, #8
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	3306      	adds	r3, #6
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4a09      	ldr	r2, [pc, #36]	@ (8006e28 <__NVIC_SetPriority+0x5c>)
 8006e04:	4694      	mov	ip, r2
 8006e06:	4463      	add	r3, ip
 8006e08:	685c      	ldr	r4, [r3, #4]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4010      	ands	r0, r2
 8006e0e:	00c0      	lsls	r0, r0, #3
 8006e10:	32fc      	adds	r2, #252	@ 0xfc
 8006e12:	0015      	movs	r5, r2
 8006e14:	4085      	lsls	r5, r0
 8006e16:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e18:	0189      	lsls	r1, r1, #6
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e1e:	4322      	orrs	r2, r4
 8006e20:	605a      	str	r2, [r3, #4]
}
 8006e22:	e7e7      	b.n	8006df4 <__NVIC_SetPriority+0x28>
 8006e24:	e000e100 	.word	0xe000e100
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e2c:	3801      	subs	r0, #1
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	045b      	lsls	r3, r3, #17
 8006e32:	4298      	cmp	r0, r3
 8006e34:	d20f      	bcs.n	8006e56 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e36:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <SysTick_Config+0x30>)
 8006e38:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e3a:	4809      	ldr	r0, [pc, #36]	@ (8006e60 <SysTick_Config+0x34>)
 8006e3c:	6a03      	ldr	r3, [r0, #32]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	21c0      	movs	r1, #192	@ 0xc0
 8006e44:	0609      	lsls	r1, r1, #24
 8006e46:	430b      	orrs	r3, r1
 8006e48:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e4e:	3307      	adds	r3, #7
 8006e50:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e52:	2000      	movs	r0, #0
}
 8006e54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7fc      	b.n	8006e54 <SysTick_Config+0x28>
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	e000e010 	.word	0xe000e010
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e64:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006e66:	f7ff ffb1 	bl	8006dcc <__NVIC_SetPriority>
}
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	db05      	blt.n	8006e7c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e70:	221f      	movs	r2, #31
 8006e72:	4002      	ands	r2, r0
 8006e74:	2301      	movs	r3, #1
 8006e76:	4093      	lsls	r3, r2
 8006e78:	4a01      	ldr	r2, [pc, #4]	@ (8006e80 <HAL_NVIC_EnableIRQ+0x14>)
 8006e7a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e7c:	4770      	bx	lr
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	e000e100 	.word	0xe000e100

08006e84 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e84:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8006e86:	f7ff ffd1 	bl	8006e2c <SysTick_Config>
}
 8006e8a:	bd10      	pop	{r4, pc}

08006e8c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e8e:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006e90:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8006e92:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e94:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	d002      	beq.n	8006ea0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e9a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8006e9c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8006e9e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006ea0:	4f0b      	ldr	r7, [pc, #44]	@ (8006ed0 <DMA_SetConfig+0x44>)
 8006ea2:	687c      	ldr	r4, [r7, #4]
 8006ea4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006ea6:	261c      	movs	r6, #28
 8006ea8:	402e      	ands	r6, r5
 8006eaa:	2501      	movs	r5, #1
 8006eac:	40b5      	lsls	r5, r6
 8006eae:	432c      	orrs	r4, r5
 8006eb0:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006eb2:	6804      	ldr	r4, [r0, #0]
 8006eb4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eb6:	6883      	ldr	r3, [r0, #8]
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d004      	beq.n	8006ec6 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006ebc:	6803      	ldr	r3, [r0, #0]
 8006ebe:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006ec0:	6803      	ldr	r3, [r0, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
  }
}
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006eca:	6803      	ldr	r3, [r0, #0]
 8006ecc:	60d9      	str	r1, [r3, #12]
 8006ece:	e7f9      	b.n	8006ec4 <DMA_SetConfig+0x38>
 8006ed0:	40020000 	.word	0x40020000

08006ed4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ed8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006eda:	089b      	lsrs	r3, r3, #2
 8006edc:	4a09      	ldr	r2, [pc, #36]	@ (8006f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8006ede:	4694      	mov	ip, r2
 8006ee0:	4463      	add	r3, ip
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ee6:	6803      	ldr	r3, [r0, #0]
 8006ee8:	20ff      	movs	r0, #255	@ 0xff
 8006eea:	4018      	ands	r0, r3
 8006eec:	3808      	subs	r0, #8
 8006eee:	2114      	movs	r1, #20
 8006ef0:	f7fb f90a 	bl	8002108 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ef4:	4b04      	ldr	r3, [pc, #16]	@ (8006f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8006ef6:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ef8:	231f      	movs	r3, #31
 8006efa:	4018      	ands	r0, r3
 8006efc:	3b1e      	subs	r3, #30
 8006efe:	4083      	lsls	r3, r0
 8006f00:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8006f02:	bd10      	pop	{r4, pc}
 8006f04:	10008200 	.word	0x10008200
 8006f08:	40020880 	.word	0x40020880

08006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f0c:	6842      	ldr	r2, [r0, #4]
 8006f0e:	233f      	movs	r3, #63	@ 0x3f
 8006f10:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f12:	4a06      	ldr	r2, [pc, #24]	@ (8006f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8006f14:	189a      	adds	r2, r3, r2
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	6502      	str	r2, [r0, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f1a:	4a05      	ldr	r2, [pc, #20]	@ (8006f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8006f1c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	2203      	movs	r2, #3
 8006f22:	401a      	ands	r2, r3
 8006f24:	2301      	movs	r3, #1
 8006f26:	4093      	lsls	r3, r2
 8006f28:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8006f2a:	4770      	bx	lr
 8006f2c:	1000823f 	.word	0x1000823f
 8006f30:	40020940 	.word	0x40020940

08006f34 <HAL_DMA_Init>:
{
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8006f38:	d04d      	beq.n	8006fd6 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f3a:	6805      	ldr	r5, [r0, #0]
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <HAL_DMA_Init+0xa8>)
 8006f3e:	18e8      	adds	r0, r5, r3
 8006f40:	2114      	movs	r1, #20
 8006f42:	f7fb f8e1 	bl	8002108 <__udivsi3>
 8006f46:	0080      	lsls	r0, r0, #2
 8006f48:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f4a:	2325      	movs	r3, #37	@ 0x25
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	4a23      	ldr	r2, [pc, #140]	@ (8006fe0 <HAL_DMA_Init+0xac>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006f58:	6821      	ldr	r1, [r4, #0]
 8006f5a:	680a      	ldr	r2, [r1, #0]
 8006f5c:	68a3      	ldr	r3, [r4, #8]
 8006f5e:	68e0      	ldr	r0, [r4, #12]
 8006f60:	4303      	orrs	r3, r0
 8006f62:	6920      	ldr	r0, [r4, #16]
 8006f64:	4303      	orrs	r3, r0
 8006f66:	6960      	ldr	r0, [r4, #20]
 8006f68:	4303      	orrs	r3, r0
 8006f6a:	69a0      	ldr	r0, [r4, #24]
 8006f6c:	4303      	orrs	r3, r0
 8006f6e:	69e0      	ldr	r0, [r4, #28]
 8006f70:	4303      	orrs	r3, r0
 8006f72:	6a20      	ldr	r0, [r4, #32]
 8006f74:	4303      	orrs	r3, r0
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f7a:	0020      	movs	r0, r4
 8006f7c:	f7ff ffaa 	bl	8006ed4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f80:	68a2      	ldr	r2, [r4, #8]
 8006f82:	2380      	movs	r3, #128	@ 0x80
 8006f84:	01db      	lsls	r3, r3, #7
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d018      	beq.n	8006fbc <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f8a:	6861      	ldr	r1, [r4, #4]
 8006f8c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006f8e:	233f      	movs	r3, #63	@ 0x3f
 8006f90:	400b      	ands	r3, r1
 8006f92:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f94:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006f96:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8006f98:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d90f      	bls.n	8006fc2 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006fa6:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fa8:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006fae:	2225      	movs	r2, #37	@ 0x25
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8006fb4:	3a01      	subs	r2, #1
 8006fb6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8006fb8:	2000      	movs	r0, #0
}
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6063      	str	r3, [r4, #4]
 8006fc0:	e7e3      	b.n	8006f8a <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f7ff ffa2 	bl	8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fc8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006fd0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	e7e9      	b.n	8006faa <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	e7ef      	b.n	8006fba <HAL_DMA_Init+0x86>
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	bffdfff8 	.word	0xbffdfff8
 8006fe0:	ffff800f 	.word	0xffff800f

08006fe4 <HAL_DMA_DeInit>:
{
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 8006fe8:	d03b      	beq.n	8007062 <HAL_DMA_DeInit+0x7e>
  __HAL_DMA_DISABLE(hdma);
 8006fea:	6802      	ldr	r2, [r0, #0]
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	2501      	movs	r5, #1
 8006ff0:	43ab      	bics	r3, r5
 8006ff2:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006ff4:	6807      	ldr	r7, [r0, #0]
 8006ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8007068 <HAL_DMA_DeInit+0x84>)
 8006ff8:	18f8      	adds	r0, r7, r3
 8006ffa:	2114      	movs	r1, #20
 8006ffc:	f7fb f884 	bl	8002108 <__udivsi3>
 8007000:	0080      	lsls	r0, r0, #2
 8007002:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8007004:	2600      	movs	r6, #0
 8007006:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007008:	4918      	ldr	r1, [pc, #96]	@ (800706c <HAL_DMA_DeInit+0x88>)
 800700a:	684b      	ldr	r3, [r1, #4]
 800700c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800700e:	221c      	movs	r2, #28
 8007010:	4002      	ands	r2, r0
 8007012:	4095      	lsls	r5, r2
 8007014:	432b      	orrs	r3, r5
 8007016:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007018:	0020      	movs	r0, r4
 800701a:	f7ff ff5b 	bl	8006ed4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800701e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007020:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007022:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007024:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8007026:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007028:	6863      	ldr	r3, [r4, #4]
 800702a:	3b01      	subs	r3, #1
 800702c:	2b03      	cmp	r3, #3
 800702e:	d90e      	bls.n	800704e <HAL_DMA_DeInit+0x6a>
  hdma->DMAmuxRequestGen = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8007034:	6563      	str	r3, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8007036:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->XferCpltCallback = NULL;
 8007038:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800703a:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800703c:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800703e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007040:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8007042:	2225      	movs	r2, #37	@ 0x25
 8007044:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8007046:	3a01      	subs	r2, #1
 8007048:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800704a:	2000      	movs	r0, #0
}
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800704e:	0020      	movs	r0, r4
 8007050:	f7ff ff5c 	bl	8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007054:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800705a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800705c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	e7e6      	b.n	8007030 <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 8007062:	2001      	movs	r0, #1
 8007064:	e7f2      	b.n	800704c <HAL_DMA_DeInit+0x68>
 8007066:	46c0      	nop			@ (mov r8, r8)
 8007068:	bffdfff8 	.word	0xbffdfff8
 800706c:	40020000 	.word	0x40020000

08007070 <HAL_DMA_Start_IT>:
{
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8007074:	2024      	movs	r0, #36	@ 0x24
 8007076:	5c20      	ldrb	r0, [r4, r0]
 8007078:	2801      	cmp	r0, #1
 800707a:	d045      	beq.n	8007108 <HAL_DMA_Start_IT+0x98>
 800707c:	2024      	movs	r0, #36	@ 0x24
 800707e:	2501      	movs	r5, #1
 8007080:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8007082:	3001      	adds	r0, #1
 8007084:	5c20      	ldrb	r0, [r4, r0]
 8007086:	2801      	cmp	r0, #1
 8007088:	d006      	beq.n	8007098 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800708a:	2380      	movs	r3, #128	@ 0x80
 800708c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800708e:	3b5c      	subs	r3, #92	@ 0x5c
 8007090:	2200      	movs	r2, #0
 8007092:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8007094:	2001      	movs	r0, #1
}
 8007096:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007098:	3024      	adds	r0, #36	@ 0x24
 800709a:	3501      	adds	r5, #1
 800709c:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800709e:	2000      	movs	r0, #0
 80070a0:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80070a2:	6825      	ldr	r5, [r4, #0]
 80070a4:	6828      	ldr	r0, [r5, #0]
 80070a6:	2601      	movs	r6, #1
 80070a8:	43b0      	bics	r0, r6
 80070aa:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070ac:	0020      	movs	r0, r4
 80070ae:	f7ff feed 	bl	8006e8c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80070b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01c      	beq.n	80070f2 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	210e      	movs	r1, #14
 80070be:	430b      	orrs	r3, r1
 80070c0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	03db      	lsls	r3, r3, #15
 80070c8:	d504      	bpl.n	80070d4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80070ca:	6811      	ldr	r1, [r2, #0]
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80070d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070da:	6819      	ldr	r1, [r3, #0]
 80070dc:	2280      	movs	r2, #128	@ 0x80
 80070de:	0052      	lsls	r2, r2, #1
 80070e0:	430a      	orrs	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	2101      	movs	r1, #1
 80070ea:	430b      	orrs	r3, r1
 80070ec:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7d1      	b.n	8007096 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	2104      	movs	r1, #4
 80070f8:	438b      	bics	r3, r1
 80070fa:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	3106      	adds	r1, #6
 8007102:	430b      	orrs	r3, r1
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e7dc      	b.n	80070c2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8007108:	2002      	movs	r0, #2
 800710a:	e7c4      	b.n	8007096 <HAL_DMA_Start_IT+0x26>

0800710c <HAL_DMA_IRQHandler>:
{
 800710c:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800710e:	4b31      	ldr	r3, [pc, #196]	@ (80071d4 <HAL_DMA_IRQHandler+0xc8>)
 8007110:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007112:	6804      	ldr	r4, [r0, #0]
 8007114:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007116:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007118:	231c      	movs	r3, #28
 800711a:	4013      	ands	r3, r2
 800711c:	2204      	movs	r2, #4
 800711e:	409a      	lsls	r2, r3
 8007120:	4211      	tst	r1, r2
 8007122:	d016      	beq.n	8007152 <HAL_DMA_IRQHandler+0x46>
 8007124:	076a      	lsls	r2, r5, #29
 8007126:	d514      	bpl.n	8007152 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	069b      	lsls	r3, r3, #26
 800712c:	d403      	bmi.n	8007136 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	2204      	movs	r2, #4
 8007132:	4393      	bics	r3, r2
 8007134:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007136:	4c27      	ldr	r4, [pc, #156]	@ (80071d4 <HAL_DMA_IRQHandler+0xc8>)
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800713c:	211c      	movs	r1, #28
 800713e:	4011      	ands	r1, r2
 8007140:	2204      	movs	r2, #4
 8007142:	408a      	lsls	r2, r1
 8007144:	4313      	orrs	r3, r2
 8007146:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8007148:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800714a:	2b00      	cmp	r3, #0
 800714c:	d000      	beq.n	8007150 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 800714e:	4798      	blx	r3
}
 8007150:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007152:	2202      	movs	r2, #2
 8007154:	409a      	lsls	r2, r3
 8007156:	4211      	tst	r1, r2
 8007158:	d01c      	beq.n	8007194 <HAL_DMA_IRQHandler+0x88>
 800715a:	07aa      	lsls	r2, r5, #30
 800715c:	d51a      	bpl.n	8007194 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	069b      	lsls	r3, r3, #26
 8007162:	d406      	bmi.n	8007172 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	220a      	movs	r2, #10
 8007168:	4393      	bics	r3, r2
 800716a:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800716c:	2325      	movs	r3, #37	@ 0x25
 800716e:	3a09      	subs	r2, #9
 8007170:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007172:	4c18      	ldr	r4, [pc, #96]	@ (80071d4 <HAL_DMA_IRQHandler+0xc8>)
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8007178:	211c      	movs	r1, #28
 800717a:	4011      	ands	r1, r2
 800717c:	2202      	movs	r2, #2
 800717e:	408a      	lsls	r2, r1
 8007180:	4313      	orrs	r3, r2
 8007182:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 8007184:	2324      	movs	r3, #36	@ 0x24
 8007186:	2200      	movs	r2, #0
 8007188:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800718a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0df      	beq.n	8007150 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8007190:	4798      	blx	r3
 8007192:	e7dd      	b.n	8007150 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007194:	2208      	movs	r2, #8
 8007196:	409a      	lsls	r2, r3
 8007198:	4211      	tst	r1, r2
 800719a:	d0d9      	beq.n	8007150 <HAL_DMA_IRQHandler+0x44>
 800719c:	072d      	lsls	r5, r5, #28
 800719e:	d5d7      	bpl.n	8007150 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	220e      	movs	r2, #14
 80071a4:	4393      	bics	r3, r2
 80071a6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80071a8:	4c0a      	ldr	r4, [pc, #40]	@ (80071d4 <HAL_DMA_IRQHandler+0xc8>)
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80071ae:	211c      	movs	r1, #28
 80071b0:	4019      	ands	r1, r3
 80071b2:	2301      	movs	r3, #1
 80071b4:	001d      	movs	r5, r3
 80071b6:	408d      	lsls	r5, r1
 80071b8:	432a      	orrs	r2, r5
 80071ba:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071bc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80071be:	2225      	movs	r2, #37	@ 0x25
 80071c0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80071c2:	3323      	adds	r3, #35	@ 0x23
 80071c4:	2200      	movs	r2, #0
 80071c6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80071c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c0      	beq.n	8007150 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80071ce:	4798      	blx	r3
  return;
 80071d0:	e7be      	b.n	8007150 <HAL_DMA_IRQHandler+0x44>
 80071d2:	46c0      	nop			@ (mov r8, r8)
 80071d4:	40020000 	.word	0x40020000

080071d8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80071d8:	b530      	push	{r4, r5, lr}
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80071da:	4c05      	ldr	r4, [pc, #20]	@ (80071f0 <FLASH_Program_DoubleWord+0x18>)
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	2501      	movs	r5, #1
 80071e0:	4329      	orrs	r1, r5
 80071e2:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80071e4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80071e6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80071ea:	6043      	str	r3, [r0, #4]
}
 80071ec:	bd30      	pop	{r4, r5, pc}
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	40022000 	.word	0x40022000

080071f4 <HAL_FLASH_EndOfOperationCallback>:
}
 80071f4:	4770      	bx	lr

080071f6 <HAL_FLASH_OperationErrorCallback>:
}
 80071f6:	4770      	bx	lr

080071f8 <HAL_FLASH_IRQHandler>:
{
 80071f8:	b510      	push	{r4, lr}
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80071fa:	4b2a      	ldr	r3, [pc, #168]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	4a2a      	ldr	r2, [pc, #168]	@ (80072a8 <HAL_FLASH_IRQHandler+0xb0>)
 8007200:	4013      	ands	r3, r2
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 8007202:	4a2a      	ldr	r2, [pc, #168]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007204:	6892      	ldr	r2, [r2, #8]
 8007206:	0751      	lsls	r1, r2, #29
 8007208:	d521      	bpl.n	800724e <HAL_FLASH_IRQHandler+0x56>
    param = pFlash.Banks;
 800720a:	4a28      	ldr	r2, [pc, #160]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 800720c:	6914      	ldr	r4, [r2, #16]
  if (error != 0x00U)
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12a      	bne.n	8007268 <HAL_FLASH_IRQHandler+0x70>
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8007212:	4b24      	ldr	r3, [pc, #144]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d50c      	bpl.n	8007234 <HAL_FLASH_IRQHandler+0x3c>
    FLASH->SR = FLASH_SR_EOP;
 800721a:	4b22      	ldr	r3, [pc, #136]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 800721c:	2201      	movs	r2, #1
 800721e:	611a      	str	r2, [r3, #16]
    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8007220:	4b22      	ldr	r3, [pc, #136]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d02c      	beq.n	8007282 <HAL_FLASH_IRQHandler+0x8a>
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8007228:	4b20      	ldr	r3, [pc, #128]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
    HAL_FLASH_EndOfOperationCallback(param);
 800722e:	0020      	movs	r0, r4
 8007230:	f7ff ffe0 	bl	80071f4 <HAL_FLASH_EndOfOperationCallback>
  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d107      	bne.n	800724c <HAL_FLASH_IRQHandler+0x54>
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 800723c:	4a19      	ldr	r2, [pc, #100]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 800723e:	6953      	ldr	r3, [r2, #20]
 8007240:	491b      	ldr	r1, [pc, #108]	@ (80072b0 <HAL_FLASH_IRQHandler+0xb8>)
 8007242:	400b      	ands	r3, r1
 8007244:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 8007246:	4b19      	ldr	r3, [pc, #100]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
}
 800724c:	bd10      	pop	{r4, pc}
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800724e:	4815      	ldr	r0, [pc, #84]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 8007250:	6941      	ldr	r1, [r0, #20]
 8007252:	4391      	bics	r1, r2
 8007254:	6141      	str	r1, [r0, #20]
    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8007256:	4917      	ldr	r1, [pc, #92]	@ (80072b4 <HAL_FLASH_IRQHandler+0xbc>)
 8007258:	420a      	tst	r2, r1
 800725a:	d002      	beq.n	8007262 <HAL_FLASH_IRQHandler+0x6a>
      param = pFlash.Address;
 800725c:	4a13      	ldr	r2, [pc, #76]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 800725e:	68d4      	ldr	r4, [r2, #12]
 8007260:	e7d5      	b.n	800720e <HAL_FLASH_IRQHandler+0x16>
      param = pFlash.Page;
 8007262:	4a12      	ldr	r2, [pc, #72]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007264:	6954      	ldr	r4, [r2, #20]
 8007266:	e7d2      	b.n	800720e <HAL_FLASH_IRQHandler+0x16>
    pFlash.ErrorCode |= error;
 8007268:	4a10      	ldr	r2, [pc, #64]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 800726a:	6851      	ldr	r1, [r2, #4]
 800726c:	430b      	orrs	r3, r1
 800726e:	6053      	str	r3, [r2, #4]
    FLASH->SR = FLASH_SR_ERRORS;
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <HAL_FLASH_IRQHandler+0xac>)
 8007272:	490d      	ldr	r1, [pc, #52]	@ (80072a8 <HAL_FLASH_IRQHandler+0xb0>)
 8007274:	6119      	str	r1, [r3, #16]
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8007276:	2300      	movs	r3, #0
 8007278:	6093      	str	r3, [r2, #8]
    HAL_FLASH_OperationErrorCallback(param);
 800727a:	0020      	movs	r0, r4
 800727c:	f7ff ffbb 	bl	80071f6 <HAL_FLASH_OperationErrorCallback>
 8007280:	e7c7      	b.n	8007212 <HAL_FLASH_IRQHandler+0x1a>
      pFlash.NbPagesToErase--;
 8007282:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007284:	6993      	ldr	r3, [r2, #24]
 8007286:	3b01      	subs	r3, #1
 8007288:	6193      	str	r3, [r2, #24]
      if (pFlash.NbPagesToErase != 0x00U)
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <HAL_FLASH_IRQHandler+0x9e>
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800728e:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <HAL_FLASH_IRQHandler+0xb4>)
 8007290:	2200      	movs	r2, #0
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	e7cb      	b.n	800722e <HAL_FLASH_IRQHandler+0x36>
        pFlash.Page++;
 8007296:	6951      	ldr	r1, [r2, #20]
 8007298:	3101      	adds	r1, #1
 800729a:	6151      	str	r1, [r2, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 800729c:	6910      	ldr	r0, [r2, #16]
 800729e:	f000 f8a9 	bl	80073f4 <FLASH_PageErase>
 80072a2:	e7c4      	b.n	800722e <HAL_FLASH_IRQHandler+0x36>
 80072a4:	40022000 	.word	0x40022000
 80072a8:	0000c3fa 	.word	0x0000c3fa
 80072ac:	20001100 	.word	0x20001100
 80072b0:	fcffffff 	.word	0xfcffffff
 80072b4:	00040001 	.word	0x00040001

080072b8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80072b8:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <HAL_FLASH_Unlock+0x24>)
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	db01      	blt.n	80072c4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2000      	movs	r0, #0
}
 80072c2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <HAL_FLASH_Unlock+0x24>)
 80072c6:	4a06      	ldr	r2, [pc, #24]	@ (80072e0 <HAL_FLASH_Unlock+0x28>)
 80072c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80072ca:	4a06      	ldr	r2, [pc, #24]	@ (80072e4 <HAL_FLASH_Unlock+0x2c>)
 80072cc:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db01      	blt.n	80072d8 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7f4      	b.n	80072c2 <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 80072d8:	2001      	movs	r0, #1
 80072da:	e7f2      	b.n	80072c2 <HAL_FLASH_Unlock+0xa>
 80072dc:	40022000 	.word	0x40022000
 80072e0:	45670123 	.word	0x45670123
 80072e4:	cdef89ab 	.word	0xcdef89ab

080072e8 <FLASH_WaitForLastOperation>:
{
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072ec:	f7ff f836 	bl	800635c <HAL_GetTick>
 80072f0:	0005      	movs	r5, r0
  while ((FLASH->SR & error) != 0x00U)
 80072f2:	4b14      	ldr	r3, [pc, #80]	@ (8007344 <FLASH_WaitForLastOperation+0x5c>)
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	03db      	lsls	r3, r3, #15
 80072f8:	d508      	bpl.n	800730c <FLASH_WaitForLastOperation+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80072fa:	1c63      	adds	r3, r4, #1
 80072fc:	d0f9      	beq.n	80072f2 <FLASH_WaitForLastOperation+0xa>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80072fe:	f7ff f82d 	bl	800635c <HAL_GetTick>
 8007302:	1b40      	subs	r0, r0, r5
 8007304:	42a0      	cmp	r0, r4
 8007306:	d3f4      	bcc.n	80072f2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8007308:	2003      	movs	r0, #3
 800730a:	e01a      	b.n	8007342 <FLASH_WaitForLastOperation+0x5a>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800730c:	490d      	ldr	r1, [pc, #52]	@ (8007344 <FLASH_WaitForLastOperation+0x5c>)
 800730e:	690a      	ldr	r2, [r1, #16]
 8007310:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <FLASH_WaitForLastOperation+0x60>)
 8007312:	0016      	movs	r6, r2
 8007314:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8007316:	480d      	ldr	r0, [pc, #52]	@ (800734c <FLASH_WaitForLastOperation+0x64>)
 8007318:	6108      	str	r0, [r1, #16]
  if (error != 0x00U)
 800731a:	421a      	tst	r2, r3
 800731c:	d10c      	bne.n	8007338 <FLASH_WaitForLastOperation+0x50>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800731e:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <FLASH_WaitForLastOperation+0x5c>)
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	035b      	lsls	r3, r3, #13
 8007324:	d50c      	bpl.n	8007340 <FLASH_WaitForLastOperation+0x58>
    if(Timeout != HAL_MAX_DELAY)
 8007326:	1c63      	adds	r3, r4, #1
 8007328:	d0f9      	beq.n	800731e <FLASH_WaitForLastOperation+0x36>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800732a:	f7ff f817 	bl	800635c <HAL_GetTick>
 800732e:	1b40      	subs	r0, r0, r5
 8007330:	42a0      	cmp	r0, r4
 8007332:	d3f4      	bcc.n	800731e <FLASH_WaitForLastOperation+0x36>
        return HAL_TIMEOUT;
 8007334:	2003      	movs	r0, #3
 8007336:	e004      	b.n	8007342 <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode = error;
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <FLASH_WaitForLastOperation+0x68>)
 800733a:	605e      	str	r6, [r3, #4]
    return HAL_ERROR;
 800733c:	2001      	movs	r0, #1
 800733e:	e000      	b.n	8007342 <FLASH_WaitForLastOperation+0x5a>
  return HAL_OK;
 8007340:	2000      	movs	r0, #0
}
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	40022000 	.word	0x40022000
 8007348:	0000c3fa 	.word	0x0000c3fa
 800734c:	0000c3fb 	.word	0x0000c3fb
 8007350:	20001100 	.word	0x20001100

08007354 <HAL_FLASH_Program>:
{
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	0007      	movs	r7, r0
 8007358:	000c      	movs	r4, r1
 800735a:	0015      	movs	r5, r2
 800735c:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 800735e:	4b14      	ldr	r3, [pc, #80]	@ (80073b0 <HAL_FLASH_Program+0x5c>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d022      	beq.n	80073ac <HAL_FLASH_Program+0x58>
 8007366:	4b12      	ldr	r3, [pc, #72]	@ (80073b0 <HAL_FLASH_Program+0x5c>)
 8007368:	2201      	movs	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007370:	20fa      	movs	r0, #250	@ 0xfa
 8007372:	0080      	lsls	r0, r0, #2
 8007374:	f7ff ffb8 	bl	80072e8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007378:	2800      	cmp	r0, #0
 800737a:	d10d      	bne.n	8007398 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800737c:	2f01      	cmp	r7, #1
 800737e:	d00f      	beq.n	80073a0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007380:	0029      	movs	r1, r5
 8007382:	0020      	movs	r0, r4
 8007384:	f002 f880 	bl	8009488 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007388:	20fa      	movs	r0, #250	@ 0xfa
 800738a:	0080      	lsls	r0, r0, #2
 800738c:	f7ff ffac 	bl	80072e8 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8007390:	4a08      	ldr	r2, [pc, #32]	@ (80073b4 <HAL_FLASH_Program+0x60>)
 8007392:	6953      	ldr	r3, [r2, #20]
 8007394:	43bb      	bics	r3, r7
 8007396:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_FLASH_Program+0x5c>)
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
}
 800739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80073a0:	002a      	movs	r2, r5
 80073a2:	0033      	movs	r3, r6
 80073a4:	0020      	movs	r0, r4
 80073a6:	f7ff ff17 	bl	80071d8 <FLASH_Program_DoubleWord>
 80073aa:	e7ed      	b.n	8007388 <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 80073ac:	2002      	movs	r0, #2
 80073ae:	e7f6      	b.n	800739e <HAL_FLASH_Program+0x4a>
 80073b0:	20001100 	.word	0x20001100
 80073b4:	40022000 	.word	0x40022000

080073b8 <HAL_FLASH_Lock>:
{
 80073b8:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80073ba:	20fa      	movs	r0, #250	@ 0xfa
 80073bc:	0080      	lsls	r0, r0, #2
 80073be:	f7ff ff93 	bl	80072e8 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_FLASH_Lock+0x24>)
 80073c4:	6959      	ldr	r1, [r3, #20]
 80073c6:	2280      	movs	r2, #128	@ 0x80
 80073c8:	0612      	lsls	r2, r2, #24
 80073ca:	430a      	orrs	r2, r1
 80073cc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db01      	blt.n	80073d8 <HAL_FLASH_Lock+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 80073d4:	2001      	movs	r0, #1
}
 80073d6:	bd10      	pop	{r4, pc}
    status = HAL_OK;
 80073d8:	2000      	movs	r0, #0
 80073da:	e7fc      	b.n	80073d6 <HAL_FLASH_Lock+0x1e>
 80073dc:	40022000 	.word	0x40022000

080073e0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80073e0:	4a03      	ldr	r2, [pc, #12]	@ (80073f0 <FLASH_MassErase+0x10>)
 80073e2:	6953      	ldr	r3, [r2, #20]
 80073e4:	4303      	orrs	r3, r0
 80073e6:	2080      	movs	r0, #128	@ 0x80
 80073e8:	0240      	lsls	r0, r0, #9
 80073ea:	4318      	orrs	r0, r3
 80073ec:	6150      	str	r0, [r2, #20]
}
 80073ee:	4770      	bx	lr
 80073f0:	40022000 	.word	0x40022000

080073f4 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80073f4:	4a04      	ldr	r2, [pc, #16]	@ (8007408 <FLASH_PageErase+0x14>)
 80073f6:	6953      	ldr	r3, [r2, #20]
 80073f8:	4804      	ldr	r0, [pc, #16]	@ (800740c <FLASH_PageErase+0x18>)
 80073fa:	4003      	ands	r3, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80073fc:	00c9      	lsls	r1, r1, #3
 80073fe:	4319      	orrs	r1, r3
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <FLASH_PageErase+0x1c>)
 8007402:	430b      	orrs	r3, r1
 8007404:	6153      	str	r3, [r2, #20]
}
 8007406:	4770      	bx	lr
 8007408:	40022000 	.word	0x40022000
 800740c:	ffffe007 	.word	0xffffe007
 8007410:	00010002 	.word	0x00010002

08007414 <HAL_FLASHEx_Erase>:
{
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	0004      	movs	r4, r0
 8007418:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800741a:	4b1e      	ldr	r3, [pc, #120]	@ (8007494 <HAL_FLASHEx_Erase+0x80>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d036      	beq.n	8007490 <HAL_FLASHEx_Erase+0x7c>
 8007422:	4b1c      	ldr	r3, [pc, #112]	@ (8007494 <HAL_FLASHEx_Erase+0x80>)
 8007424:	2201      	movs	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800742c:	20fa      	movs	r0, #250	@ 0xfa
 800742e:	0080      	lsls	r0, r0, #2
 8007430:	f7ff ff5a 	bl	80072e8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007434:	2800      	cmp	r0, #0
 8007436:	d127      	bne.n	8007488 <HAL_FLASHEx_Erase+0x74>
    pEraseInit->Banks = FLASH_BANK_1;
 8007438:	2304      	movs	r3, #4
 800743a:	6063      	str	r3, [r4, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	2b04      	cmp	r3, #4
 8007440:	d014      	beq.n	800746c <HAL_FLASHEx_Erase+0x58>
      *PageError = 0xFFFFFFFFU;
 8007442:	2301      	movs	r3, #1
 8007444:	425b      	negs	r3, r3
 8007446:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007448:	68a5      	ldr	r5, [r4, #8]
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	68e2      	ldr	r2, [r4, #12]
 800744e:	189b      	adds	r3, r3, r2
 8007450:	42ab      	cmp	r3, r5
 8007452:	d914      	bls.n	800747e <HAL_FLASHEx_Erase+0x6a>
        FLASH_PageErase(pEraseInit->Banks, index);
 8007454:	6860      	ldr	r0, [r4, #4]
 8007456:	0029      	movs	r1, r5
 8007458:	f7ff ffcc 	bl	80073f4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800745c:	20fa      	movs	r0, #250	@ 0xfa
 800745e:	0080      	lsls	r0, r0, #2
 8007460:	f7ff ff42 	bl	80072e8 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8007464:	2800      	cmp	r0, #0
 8007466:	d109      	bne.n	800747c <HAL_FLASHEx_Erase+0x68>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007468:	3501      	adds	r5, #1
 800746a:	e7ee      	b.n	800744a <HAL_FLASHEx_Erase+0x36>
      FLASH_MassErase(pEraseInit->Banks);
 800746c:	3004      	adds	r0, #4
 800746e:	f7ff ffb7 	bl	80073e0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007472:	20fa      	movs	r0, #250	@ 0xfa
 8007474:	0080      	lsls	r0, r0, #2
 8007476:	f7ff ff37 	bl	80072e8 <FLASH_WaitForLastOperation>
 800747a:	e005      	b.n	8007488 <HAL_FLASHEx_Erase+0x74>
          *PageError = index;
 800747c:	6035      	str	r5, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800747e:	4a06      	ldr	r2, [pc, #24]	@ (8007498 <HAL_FLASHEx_Erase+0x84>)
 8007480:	6953      	ldr	r3, [r2, #20]
 8007482:	2102      	movs	r1, #2
 8007484:	438b      	bics	r3, r1
 8007486:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8007488:	4b02      	ldr	r3, [pc, #8]	@ (8007494 <HAL_FLASHEx_Erase+0x80>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
}
 800748e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8007490:	2002      	movs	r0, #2
 8007492:	e7fc      	b.n	800748e <HAL_FLASHEx_Erase+0x7a>
 8007494:	20001100 	.word	0x20001100
 8007498:	40022000 	.word	0x40022000

0800749c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800749e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074a0:	e059      	b.n	8007556 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074a4:	005f      	lsls	r7, r3, #1
 80074a6:	2403      	movs	r4, #3
 80074a8:	40bc      	lsls	r4, r7
 80074aa:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80074ac:	68cc      	ldr	r4, [r1, #12]
 80074ae:	40bc      	lsls	r4, r7
 80074b0:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80074b2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074b4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074b6:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074b8:	684e      	ldr	r6, [r1, #4]
 80074ba:	0936      	lsrs	r6, r6, #4
 80074bc:	2201      	movs	r2, #1
 80074be:	4032      	ands	r2, r6
 80074c0:	409a      	lsls	r2, r3
 80074c2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80074c4:	6042      	str	r2, [r0, #4]
 80074c6:	e056      	b.n	8007576 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074c8:	08de      	lsrs	r6, r3, #3
 80074ca:	3608      	adds	r6, #8
 80074cc:	00b6      	lsls	r6, r6, #2
 80074ce:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074d0:	3205      	adds	r2, #5
 80074d2:	401a      	ands	r2, r3
 80074d4:	0092      	lsls	r2, r2, #2
 80074d6:	240f      	movs	r4, #15
 80074d8:	4094      	lsls	r4, r2
 80074da:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074dc:	690c      	ldr	r4, [r1, #16]
 80074de:	4094      	lsls	r4, r2
 80074e0:	0022      	movs	r2, r4
 80074e2:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 80074e4:	5032      	str	r2, [r6, r0]
 80074e6:	e059      	b.n	800759c <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80074e8:	2603      	movs	r6, #3
 80074ea:	e000      	b.n	80074ee <HAL_GPIO_Init+0x52>
 80074ec:	2600      	movs	r6, #0
 80074ee:	40a6      	lsls	r6, r4
 80074f0:	0034      	movs	r4, r6
 80074f2:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80074f4:	4e42      	ldr	r6, [pc, #264]	@ (8007600 <HAL_GPIO_Init+0x164>)
 80074f6:	3218      	adds	r2, #24
 80074f8:	0092      	lsls	r2, r2, #2
 80074fa:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074fc:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 80074fe:	43ea      	mvns	r2, r5
 8007500:	003e      	movs	r6, r7
 8007502:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007504:	684c      	ldr	r4, [r1, #4]
 8007506:	02e4      	lsls	r4, r4, #11
 8007508:	d501      	bpl.n	800750e <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800750a:	003e      	movs	r6, r7
 800750c:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 800750e:	4c3c      	ldr	r4, [pc, #240]	@ (8007600 <HAL_GPIO_Init+0x164>)
 8007510:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8007512:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8007514:	003e      	movs	r6, r7
 8007516:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007518:	684c      	ldr	r4, [r1, #4]
 800751a:	02a4      	lsls	r4, r4, #10
 800751c:	d501      	bpl.n	8007522 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800751e:	003e      	movs	r6, r7
 8007520:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8007522:	4c37      	ldr	r4, [pc, #220]	@ (8007600 <HAL_GPIO_Init+0x164>)
 8007524:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007526:	2684      	movs	r6, #132	@ 0x84
 8007528:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 800752a:	003e      	movs	r6, r7
 800752c:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800752e:	684c      	ldr	r4, [r1, #4]
 8007530:	03a4      	lsls	r4, r4, #14
 8007532:	d501      	bpl.n	8007538 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8007534:	003e      	movs	r6, r7
 8007536:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8007538:	4c31      	ldr	r4, [pc, #196]	@ (8007600 <HAL_GPIO_Init+0x164>)
 800753a:	2784      	movs	r7, #132	@ 0x84
 800753c:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 800753e:	2680      	movs	r6, #128	@ 0x80
 8007540:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8007542:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007544:	684c      	ldr	r4, [r1, #4]
 8007546:	03e4      	lsls	r4, r4, #15
 8007548:	d501      	bpl.n	800754e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800754a:	002a      	movs	r2, r5
 800754c:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 800754e:	4d2c      	ldr	r5, [pc, #176]	@ (8007600 <HAL_GPIO_Init+0x164>)
 8007550:	2480      	movs	r4, #128	@ 0x80
 8007552:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8007554:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007556:	680c      	ldr	r4, [r1, #0]
 8007558:	0022      	movs	r2, r4
 800755a:	40da      	lsrs	r2, r3
 800755c:	d04e      	beq.n	80075fc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800755e:	2201      	movs	r2, #1
 8007560:	409a      	lsls	r2, r3
 8007562:	0025      	movs	r5, r4
 8007564:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8007566:	4214      	tst	r4, r2
 8007568:	d0f4      	beq.n	8007554 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800756a:	684e      	ldr	r6, [r1, #4]
 800756c:	2403      	movs	r4, #3
 800756e:	4034      	ands	r4, r6
 8007570:	3c01      	subs	r4, #1
 8007572:	2c01      	cmp	r4, #1
 8007574:	d995      	bls.n	80074a2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007576:	684c      	ldr	r4, [r1, #4]
 8007578:	2203      	movs	r2, #3
 800757a:	4022      	ands	r2, r4
 800757c:	2a03      	cmp	r2, #3
 800757e:	d008      	beq.n	8007592 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8007580:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007582:	005e      	lsls	r6, r3, #1
 8007584:	2203      	movs	r2, #3
 8007586:	40b2      	lsls	r2, r6
 8007588:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800758a:	688a      	ldr	r2, [r1, #8]
 800758c:	40b2      	lsls	r2, r6
 800758e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8007590:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007592:	684c      	ldr	r4, [r1, #4]
 8007594:	2203      	movs	r2, #3
 8007596:	4022      	ands	r2, r4
 8007598:	2a02      	cmp	r2, #2
 800759a:	d095      	beq.n	80074c8 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 800759c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800759e:	005e      	lsls	r6, r3, #1
 80075a0:	2203      	movs	r2, #3
 80075a2:	0017      	movs	r7, r2
 80075a4:	40b7      	lsls	r7, r6
 80075a6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80075a8:	684f      	ldr	r7, [r1, #4]
 80075aa:	403a      	ands	r2, r7
 80075ac:	40b2      	lsls	r2, r6
 80075ae:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80075b0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075b2:	684c      	ldr	r4, [r1, #4]
 80075b4:	22c0      	movs	r2, #192	@ 0xc0
 80075b6:	0292      	lsls	r2, r2, #10
 80075b8:	4214      	tst	r4, r2
 80075ba:	d0cb      	beq.n	8007554 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 80075bc:	089a      	lsrs	r2, r3, #2
 80075be:	0014      	movs	r4, r2
 80075c0:	3418      	adds	r4, #24
 80075c2:	00a4      	lsls	r4, r4, #2
 80075c4:	4e0e      	ldr	r6, [pc, #56]	@ (8007600 <HAL_GPIO_Init+0x164>)
 80075c6:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80075c8:	2403      	movs	r4, #3
 80075ca:	401c      	ands	r4, r3
 80075cc:	00e4      	lsls	r4, r4, #3
 80075ce:	260f      	movs	r6, #15
 80075d0:	40a6      	lsls	r6, r4
 80075d2:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80075d4:	26a0      	movs	r6, #160	@ 0xa0
 80075d6:	05f6      	lsls	r6, r6, #23
 80075d8:	42b0      	cmp	r0, r6
 80075da:	d087      	beq.n	80074ec <HAL_GPIO_Init+0x50>
 80075dc:	4e09      	ldr	r6, [pc, #36]	@ (8007604 <HAL_GPIO_Init+0x168>)
 80075de:	42b0      	cmp	r0, r6
 80075e0:	d008      	beq.n	80075f4 <HAL_GPIO_Init+0x158>
 80075e2:	4e09      	ldr	r6, [pc, #36]	@ (8007608 <HAL_GPIO_Init+0x16c>)
 80075e4:	42b0      	cmp	r0, r6
 80075e6:	d007      	beq.n	80075f8 <HAL_GPIO_Init+0x15c>
 80075e8:	4e08      	ldr	r6, [pc, #32]	@ (800760c <HAL_GPIO_Init+0x170>)
 80075ea:	42b0      	cmp	r0, r6
 80075ec:	d100      	bne.n	80075f0 <HAL_GPIO_Init+0x154>
 80075ee:	e77b      	b.n	80074e8 <HAL_GPIO_Init+0x4c>
 80075f0:	2605      	movs	r6, #5
 80075f2:	e77c      	b.n	80074ee <HAL_GPIO_Init+0x52>
 80075f4:	2601      	movs	r6, #1
 80075f6:	e77a      	b.n	80074ee <HAL_GPIO_Init+0x52>
 80075f8:	2602      	movs	r6, #2
 80075fa:	e778      	b.n	80074ee <HAL_GPIO_Init+0x52>
  }
}
 80075fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075fe:	46c0      	nop			@ (mov r8, r8)
 8007600:	40021800 	.word	0x40021800
 8007604:	50000400 	.word	0x50000400
 8007608:	50000800 	.word	0x50000800
 800760c:	50000c00 	.word	0x50000c00

08007610 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007612:	46ce      	mov	lr, r9
 8007614:	4647      	mov	r7, r8
 8007616:	b580      	push	{r7, lr}
 8007618:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 800761a:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800761c:	e023      	b.n	8007666 <HAL_GPIO_DeInit+0x56>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800761e:	2103      	movs	r1, #3
 8007620:	4688      	mov	r8, r1
 8007622:	e001      	b.n	8007628 <HAL_GPIO_DeInit+0x18>
 8007624:	2100      	movs	r1, #0
 8007626:	4688      	mov	r8, r1
 8007628:	4641      	mov	r1, r8
 800762a:	40a1      	lsls	r1, r4
 800762c:	42a9      	cmp	r1, r5
 800762e:	d047      	beq.n	80076c0 <HAL_GPIO_DeInit+0xb0>
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007630:	6804      	ldr	r4, [r0, #0]
 8007632:	005e      	lsls	r6, r3, #1
 8007634:	2503      	movs	r5, #3
 8007636:	40b5      	lsls	r5, r6
 8007638:	432c      	orrs	r4, r5
 800763a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800763c:	08dc      	lsrs	r4, r3, #3
 800763e:	3408      	adds	r4, #8
 8007640:	00a4      	lsls	r4, r4, #2
 8007642:	5827      	ldr	r7, [r4, r0]
 8007644:	2607      	movs	r6, #7
 8007646:	401e      	ands	r6, r3
 8007648:	00b6      	lsls	r6, r6, #2
 800764a:	210f      	movs	r1, #15
 800764c:	40b1      	lsls	r1, r6
 800764e:	438f      	bics	r7, r1
 8007650:	5027      	str	r7, [r4, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007652:	6884      	ldr	r4, [r0, #8]
 8007654:	43ac      	bics	r4, r5
 8007656:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007658:	6844      	ldr	r4, [r0, #4]
 800765a:	4394      	bics	r4, r2
 800765c:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800765e:	68c2      	ldr	r2, [r0, #12]
 8007660:	43aa      	bics	r2, r5
 8007662:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8007664:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8007666:	464a      	mov	r2, r9
 8007668:	40da      	lsrs	r2, r3
 800766a:	d045      	beq.n	80076f8 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	464c      	mov	r4, r9
 8007672:	4014      	ands	r4, r2
 8007674:	46a4      	mov	ip, r4
    if (iocurrent != 0x00u)
 8007676:	4649      	mov	r1, r9
 8007678:	4211      	tst	r1, r2
 800767a:	d0f3      	beq.n	8007664 <HAL_GPIO_DeInit+0x54>
      tmp = EXTI->EXTICR[position >> 2u];
 800767c:	089f      	lsrs	r7, r3, #2
 800767e:	003c      	movs	r4, r7
 8007680:	3418      	adds	r4, #24
 8007682:	00a4      	lsls	r4, r4, #2
 8007684:	4d1e      	ldr	r5, [pc, #120]	@ (8007700 <HAL_GPIO_DeInit+0xf0>)
 8007686:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8007688:	2603      	movs	r6, #3
 800768a:	401e      	ands	r6, r3
 800768c:	00f4      	lsls	r4, r6, #3
 800768e:	260f      	movs	r6, #15
 8007690:	40a6      	lsls	r6, r4
 8007692:	4035      	ands	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8007694:	21a0      	movs	r1, #160	@ 0xa0
 8007696:	05c9      	lsls	r1, r1, #23
 8007698:	4288      	cmp	r0, r1
 800769a:	d0c3      	beq.n	8007624 <HAL_GPIO_DeInit+0x14>
 800769c:	4919      	ldr	r1, [pc, #100]	@ (8007704 <HAL_GPIO_DeInit+0xf4>)
 800769e:	4288      	cmp	r0, r1
 80076a0:	d008      	beq.n	80076b4 <HAL_GPIO_DeInit+0xa4>
 80076a2:	4919      	ldr	r1, [pc, #100]	@ (8007708 <HAL_GPIO_DeInit+0xf8>)
 80076a4:	4288      	cmp	r0, r1
 80076a6:	d008      	beq.n	80076ba <HAL_GPIO_DeInit+0xaa>
 80076a8:	4918      	ldr	r1, [pc, #96]	@ (800770c <HAL_GPIO_DeInit+0xfc>)
 80076aa:	4288      	cmp	r0, r1
 80076ac:	d0b7      	beq.n	800761e <HAL_GPIO_DeInit+0xe>
 80076ae:	2105      	movs	r1, #5
 80076b0:	4688      	mov	r8, r1
 80076b2:	e7b9      	b.n	8007628 <HAL_GPIO_DeInit+0x18>
 80076b4:	2101      	movs	r1, #1
 80076b6:	4688      	mov	r8, r1
 80076b8:	e7b6      	b.n	8007628 <HAL_GPIO_DeInit+0x18>
 80076ba:	2102      	movs	r1, #2
 80076bc:	4688      	mov	r8, r1
 80076be:	e7b3      	b.n	8007628 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 80076c0:	4d0f      	ldr	r5, [pc, #60]	@ (8007700 <HAL_GPIO_DeInit+0xf0>)
 80076c2:	2180      	movs	r1, #128	@ 0x80
 80076c4:	4688      	mov	r8, r1
 80076c6:	586c      	ldr	r4, [r5, r1]
 80076c8:	4661      	mov	r1, ip
 80076ca:	438c      	bics	r4, r1
 80076cc:	4641      	mov	r1, r8
 80076ce:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 80076d0:	3104      	adds	r1, #4
 80076d2:	4688      	mov	r8, r1
 80076d4:	586c      	ldr	r4, [r5, r1]
 80076d6:	4661      	mov	r1, ip
 80076d8:	438c      	bics	r4, r1
 80076da:	4641      	mov	r1, r8
 80076dc:	506c      	str	r4, [r5, r1]
        EXTI->FTSR1 &= ~(iocurrent);
 80076de:	686c      	ldr	r4, [r5, #4]
 80076e0:	4661      	mov	r1, ip
 80076e2:	438c      	bics	r4, r1
 80076e4:	606c      	str	r4, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80076e6:	682c      	ldr	r4, [r5, #0]
 80076e8:	438c      	bics	r4, r1
 80076ea:	602c      	str	r4, [r5, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80076ec:	3718      	adds	r7, #24
 80076ee:	00bc      	lsls	r4, r7, #2
 80076f0:	5967      	ldr	r7, [r4, r5]
 80076f2:	43b7      	bics	r7, r6
 80076f4:	5167      	str	r7, [r4, r5]
 80076f6:	e79b      	b.n	8007630 <HAL_GPIO_DeInit+0x20>
  }
}
 80076f8:	bcc0      	pop	{r6, r7}
 80076fa:	46b9      	mov	r9, r7
 80076fc:	46b0      	mov	r8, r6
 80076fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007700:	40021800 	.word	0x40021800
 8007704:	50000400 	.word	0x50000400
 8007708:	50000800 	.word	0x50000800
 800770c:	50000c00 	.word	0x50000c00

08007710 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007710:	6903      	ldr	r3, [r0, #16]
 8007712:	420b      	tst	r3, r1
 8007714:	d001      	beq.n	800771a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8007716:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007718:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 800771a:	2000      	movs	r0, #0
 800771c:	e7fc      	b.n	8007718 <HAL_GPIO_ReadPin+0x8>
	...

08007720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007720:	b510      	push	{r4, lr}
 8007722:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007724:	4b09      	ldr	r3, [pc, #36]	@ (800774c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4218      	tst	r0, r3
 800772a:	d104      	bne.n	8007736 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800772c:	4b07      	ldr	r3, [pc, #28]	@ (800774c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	4223      	tst	r3, r4
 8007732:	d105      	bne.n	8007740 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8007734:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007736:	4b05      	ldr	r3, [pc, #20]	@ (800774c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007738:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800773a:	f7fc ffef 	bl	800471c <HAL_GPIO_EXTI_Rising_Callback>
 800773e:	e7f5      	b.n	800772c <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007740:	4b02      	ldr	r3, [pc, #8]	@ (800774c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007742:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007744:	0020      	movs	r0, r4
 8007746:	f7fd f81b 	bl	8004780 <HAL_GPIO_EXTI_Falling_Callback>
}
 800774a:	e7f3      	b.n	8007734 <HAL_GPIO_EXTI_IRQHandler+0x14>
 800774c:	40021800 	.word	0x40021800

08007750 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007750:	6802      	ldr	r2, [r0, #0]
 8007752:	6993      	ldr	r3, [r2, #24]
 8007754:	079b      	lsls	r3, r3, #30
 8007756:	d501      	bpl.n	800775c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007758:	2300      	movs	r3, #0
 800775a:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800775c:	6803      	ldr	r3, [r0, #0]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	07d2      	lsls	r2, r2, #31
 8007762:	d403      	bmi.n	800776c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	2101      	movs	r1, #1
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
  }
}
 800776c:	4770      	bx	lr
	...

08007770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007770:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007772:	0589      	lsls	r1, r1, #22
 8007774:	0d89      	lsrs	r1, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007776:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007778:	4311      	orrs	r1, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800777a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800777c:	9b02      	ldr	r3, [sp, #8]
 800777e:	4319      	orrs	r1, r3
 8007780:	0049      	lsls	r1, r1, #1
 8007782:	0849      	lsrs	r1, r1, #1
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007784:	6804      	ldr	r4, [r0, #0]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	0d5b      	lsrs	r3, r3, #21
 800778a:	2080      	movs	r0, #128	@ 0x80
 800778c:	00c0      	lsls	r0, r0, #3
 800778e:	4003      	ands	r3, r0
 8007790:	4803      	ldr	r0, [pc, #12]	@ (80077a0 <I2C_TransferConfig+0x30>)
 8007792:	4303      	orrs	r3, r0
 8007794:	439a      	bics	r2, r3
 8007796:	0013      	movs	r3, r2
 8007798:	430b      	orrs	r3, r1
 800779a:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800779c:	bd10      	pop	{r4, pc}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	03ff63ff 	.word	0x03ff63ff

080077a4 <I2C_IsErrorOccurred>:
{
 80077a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a6:	46c6      	mov	lr, r8
 80077a8:	b500      	push	{lr}
 80077aa:	0004      	movs	r4, r0
 80077ac:	000d      	movs	r5, r1
 80077ae:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80077b0:	6801      	ldr	r1, [r0, #0]
 80077b2:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80077b4:	2210      	movs	r2, #16
 80077b6:	0016      	movs	r6, r2
 80077b8:	401e      	ands	r6, r3
 80077ba:	421a      	tst	r2, r3
 80077bc:	d100      	bne.n	80077c0 <I2C_IsErrorOccurred+0x1c>
 80077be:	e075      	b.n	80078ac <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077c0:	2310      	movs	r3, #16
 80077c2:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 80077c8:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	6983      	ldr	r3, [r0, #24]
 80077ce:	069b      	lsls	r3, r3, #26
 80077d0:	d431      	bmi.n	8007836 <I2C_IsErrorOccurred+0x92>
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d12f      	bne.n	8007836 <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 80077d6:	1c6b      	adds	r3, r5, #1
 80077d8:	d0f7      	beq.n	80077ca <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80077da:	f7fe fdbf 	bl	800635c <HAL_GetTick>
 80077de:	1bc0      	subs	r0, r0, r7
 80077e0:	42a8      	cmp	r0, r5
 80077e2:	d801      	bhi.n	80077e8 <I2C_IsErrorOccurred+0x44>
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	d1f0      	bne.n	80077ca <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	684b      	ldr	r3, [r1, #4]
 80077ec:	2280      	movs	r2, #128	@ 0x80
 80077ee:	01d2      	lsls	r2, r2, #7
 80077f0:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 80077f2:	2242      	movs	r2, #66	@ 0x42
 80077f4:	5ca2      	ldrb	r2, [r4, r2]
 80077f6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077f8:	6988      	ldr	r0, [r1, #24]
 80077fa:	0400      	lsls	r0, r0, #16
 80077fc:	d503      	bpl.n	8007806 <I2C_IsErrorOccurred+0x62>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 8007802:	2a20      	cmp	r2, #32
 8007804:	d10e      	bne.n	8007824 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	069b      	lsls	r3, r3, #26
 800780c:	d4dd      	bmi.n	80077ca <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800780e:	f7fe fda5 	bl	800635c <HAL_GetTick>
 8007812:	1bc0      	subs	r0, r0, r7
 8007814:	2819      	cmp	r0, #25
 8007816:	d9f6      	bls.n	8007806 <I2C_IsErrorOccurred+0x62>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	2320      	movs	r3, #32
 800781a:	4642      	mov	r2, r8
 800781c:	431a      	orrs	r2, r3
 800781e:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8007820:	2601      	movs	r6, #1
              break;
 8007822:	e7d2      	b.n	80077ca <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007824:	684a      	ldr	r2, [r1, #4]
 8007826:	2380      	movs	r3, #128	@ 0x80
 8007828:	01db      	lsls	r3, r3, #7
 800782a:	4313      	orrs	r3, r2
 800782c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800782e:	f7fe fd95 	bl	800635c <HAL_GetTick>
 8007832:	0007      	movs	r7, r0
 8007834:	e7e7      	b.n	8007806 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8007836:	2e00      	cmp	r6, #0
 8007838:	d101      	bne.n	800783e <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800783a:	2320      	movs	r3, #32
 800783c:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800783e:	2604      	movs	r6, #4
 8007840:	4643      	mov	r3, r8
 8007842:	4333      	orrs	r3, r6
 8007844:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8007846:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8007848:	6822      	ldr	r2, [r4, #0]
 800784a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800784c:	05d9      	lsls	r1, r3, #23
 800784e:	d504      	bpl.n	800785a <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 8007850:	2101      	movs	r1, #1
 8007852:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007854:	31ff      	adds	r1, #255	@ 0xff
 8007856:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007858:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800785a:	055a      	lsls	r2, r3, #21
 800785c:	d506      	bpl.n	800786c <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 800785e:	2208      	movs	r2, #8
 8007860:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007862:	6822      	ldr	r2, [r4, #0]
 8007864:	2180      	movs	r1, #128	@ 0x80
 8007866:	00c9      	lsls	r1, r1, #3
 8007868:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800786a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800786c:	059b      	lsls	r3, r3, #22
 800786e:	d51f      	bpl.n	80078b0 <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 8007870:	2302      	movs	r3, #2
 8007872:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	2280      	movs	r2, #128	@ 0x80
 8007878:	0092      	lsls	r2, r2, #2
 800787a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800787c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800787e:	0020      	movs	r0, r4
 8007880:	f7ff ff66 	bl	8007750 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007884:	6822      	ldr	r2, [r4, #0]
 8007886:	6853      	ldr	r3, [r2, #4]
 8007888:	490b      	ldr	r1, [pc, #44]	@ (80078b8 <I2C_IsErrorOccurred+0x114>)
 800788a:	400b      	ands	r3, r1
 800788c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800788e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007890:	4333      	orrs	r3, r6
 8007892:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007894:	2341      	movs	r3, #65	@ 0x41
 8007896:	2220      	movs	r2, #32
 8007898:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800789a:	2300      	movs	r3, #0
 800789c:	3222      	adds	r2, #34	@ 0x22
 800789e:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80078a0:	3a02      	subs	r2, #2
 80078a2:	54a3      	strb	r3, [r4, r2]
}
 80078a4:	0028      	movs	r0, r5
 80078a6:	bc80      	pop	{r7}
 80078a8:	46b8      	mov	r8, r7
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80078ac:	2500      	movs	r5, #0
 80078ae:	e7cb      	b.n	8007848 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 80078b0:	2d00      	cmp	r5, #0
 80078b2:	d0f7      	beq.n	80078a4 <I2C_IsErrorOccurred+0x100>
 80078b4:	e7e3      	b.n	800787e <I2C_IsErrorOccurred+0xda>
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	fe00e800 	.word	0xfe00e800

080078bc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	0004      	movs	r4, r0
 80078c0:	000d      	movs	r5, r1
 80078c2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	079b      	lsls	r3, r3, #30
 80078ca:	d420      	bmi.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078cc:	0032      	movs	r2, r6
 80078ce:	0029      	movs	r1, r5
 80078d0:	0020      	movs	r0, r4
 80078d2:	f7ff ff67 	bl	80077a4 <I2C_IsErrorOccurred>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d11b      	bne.n	8007912 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80078da:	1c6b      	adds	r3, r5, #1
 80078dc:	d0f2      	beq.n	80078c4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fe fd3d 	bl	800635c <HAL_GetTick>
 80078e2:	1b80      	subs	r0, r0, r6
 80078e4:	42a8      	cmp	r0, r5
 80078e6:	d801      	bhi.n	80078ec <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d1eb      	bne.n	80078c4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	079b      	lsls	r3, r3, #30
 80078f2:	d4e7      	bmi.n	80078c4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80078f6:	2220      	movs	r2, #32
 80078f8:	4313      	orrs	r3, r2
 80078fa:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078fc:	2341      	movs	r3, #65	@ 0x41
 80078fe:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007900:	2300      	movs	r3, #0
 8007902:	3222      	adds	r2, #34	@ 0x22
 8007904:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8007906:	3a02      	subs	r2, #2
 8007908:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800790a:	2001      	movs	r0, #1
 800790c:	e000      	b.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
  return HAL_OK;
 800790e:	2000      	movs	r0, #0
}
 8007910:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007912:	2001      	movs	r0, #1
 8007914:	e7fc      	b.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x54>

08007916 <I2C_WaitOnFlagUntilTimeout>:
{
 8007916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007918:	46d6      	mov	lr, sl
 800791a:	464f      	mov	r7, r9
 800791c:	b580      	push	{r7, lr}
 800791e:	b083      	sub	sp, #12
 8007920:	0007      	movs	r7, r0
 8007922:	000d      	movs	r5, r1
 8007924:	0016      	movs	r6, r2
 8007926:	4699      	mov	r9, r3
 8007928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792a:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699c      	ldr	r4, [r3, #24]
 8007930:	402c      	ands	r4, r5
 8007932:	1b64      	subs	r4, r4, r5
 8007934:	4263      	negs	r3, r4
 8007936:	415c      	adcs	r4, r3
 8007938:	9601      	str	r6, [sp, #4]
 800793a:	42b4      	cmp	r4, r6
 800793c:	d128      	bne.n	8007990 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800793e:	4652      	mov	r2, sl
 8007940:	4649      	mov	r1, r9
 8007942:	0038      	movs	r0, r7
 8007944:	f7ff ff2e 	bl	80077a4 <I2C_IsErrorOccurred>
 8007948:	2800      	cmp	r0, #0
 800794a:	d127      	bne.n	800799c <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 800794c:	464b      	mov	r3, r9
 800794e:	3301      	adds	r3, #1
 8007950:	d0ec      	beq.n	800792c <I2C_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007952:	f7fe fd03 	bl	800635c <HAL_GetTick>
 8007956:	4653      	mov	r3, sl
 8007958:	1ac0      	subs	r0, r0, r3
 800795a:	4548      	cmp	r0, r9
 800795c:	d802      	bhi.n	8007964 <I2C_WaitOnFlagUntilTimeout+0x4e>
 800795e:	464b      	mov	r3, r9
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e3      	bne.n	800792c <I2C_WaitOnFlagUntilTimeout+0x16>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	402b      	ands	r3, r5
 800796a:	1b5b      	subs	r3, r3, r5
 800796c:	425a      	negs	r2, r3
 800796e:	4153      	adcs	r3, r2
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	4293      	cmp	r3, r2
 8007974:	d1da      	bne.n	800792c <I2C_WaitOnFlagUntilTimeout+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007978:	2220      	movs	r2, #32
 800797a:	4313      	orrs	r3, r2
 800797c:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800797e:	2341      	movs	r3, #65	@ 0x41
 8007980:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007982:	2300      	movs	r3, #0
 8007984:	3222      	adds	r2, #34	@ 0x22
 8007986:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8007988:	3a02      	subs	r2, #2
 800798a:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 800798c:	2001      	movs	r0, #1
 800798e:	e000      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8007990:	2000      	movs	r0, #0
}
 8007992:	b003      	add	sp, #12
 8007994:	bcc0      	pop	{r6, r7}
 8007996:	46ba      	mov	sl, r7
 8007998:	46b1      	mov	r9, r6
 800799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800799c:	2001      	movs	r0, #1
 800799e:	e7f8      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x7c>

080079a0 <I2C_RequestMemoryWrite>:
{
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	0004      	movs	r4, r0
 80079a6:	0015      	movs	r5, r2
 80079a8:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079aa:	2380      	movs	r3, #128	@ 0x80
 80079ac:	b2f2      	uxtb	r2, r6
 80079ae:	4819      	ldr	r0, [pc, #100]	@ (8007a14 <I2C_RequestMemoryWrite+0x74>)
 80079b0:	9000      	str	r0, [sp, #0]
 80079b2:	045b      	lsls	r3, r3, #17
 80079b4:	0020      	movs	r0, r4
 80079b6:	f7ff fedb 	bl	8007770 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ba:	9a07      	ldr	r2, [sp, #28]
 80079bc:	9906      	ldr	r1, [sp, #24]
 80079be:	0020      	movs	r0, r4
 80079c0:	f7ff ff7c 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d11e      	bne.n	8007a06 <I2C_RequestMemoryWrite+0x66>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079c8:	2e01      	cmp	r6, #1
 80079ca:	d10e      	bne.n	80079ea <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	b2ed      	uxtb	r5, r5
 80079d0:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	9b06      	ldr	r3, [sp, #24]
 80079d8:	2200      	movs	r2, #0
 80079da:	2180      	movs	r1, #128	@ 0x80
 80079dc:	0020      	movs	r0, r4
 80079de:	f7ff ff9a 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d113      	bne.n	8007a0e <I2C_RequestMemoryWrite+0x6e>
}
 80079e6:	b002      	add	sp, #8
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	0a2a      	lsrs	r2, r5, #8
 80079ee:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f0:	9a07      	ldr	r2, [sp, #28]
 80079f2:	9906      	ldr	r1, [sp, #24]
 80079f4:	0020      	movs	r0, r4
 80079f6:	f7ff ff61 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d105      	bne.n	8007a0a <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	b2ed      	uxtb	r5, r5
 8007a02:	629d      	str	r5, [r3, #40]	@ 0x28
 8007a04:	e7e5      	b.n	80079d2 <I2C_RequestMemoryWrite+0x32>
    return HAL_ERROR;
 8007a06:	2001      	movs	r0, #1
 8007a08:	e7ed      	b.n	80079e6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	e7eb      	b.n	80079e6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7e9      	b.n	80079e6 <I2C_RequestMemoryWrite+0x46>
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	80002000 	.word	0x80002000

08007a18 <I2C_RequestMemoryRead>:
{
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	0004      	movs	r4, r0
 8007a1e:	0015      	movs	r5, r2
 8007a20:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	4b18      	ldr	r3, [pc, #96]	@ (8007a88 <I2C_RequestMemoryRead+0x70>)
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f7ff fea1 	bl	8007770 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2e:	9a07      	ldr	r2, [sp, #28]
 8007a30:	9906      	ldr	r1, [sp, #24]
 8007a32:	0020      	movs	r0, r4
 8007a34:	f7ff ff42 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d11e      	bne.n	8007a7a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a3c:	2e01      	cmp	r6, #1
 8007a3e:	d10e      	bne.n	8007a5e <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	b2ed      	uxtb	r5, r5
 8007a44:	629d      	str	r5, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a46:	9b07      	ldr	r3, [sp, #28]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	9b06      	ldr	r3, [sp, #24]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2140      	movs	r1, #64	@ 0x40
 8007a50:	0020      	movs	r0, r4
 8007a52:	f7ff ff60 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d113      	bne.n	8007a82 <I2C_RequestMemoryRead+0x6a>
}
 8007a5a:	b002      	add	sp, #8
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	0a2a      	lsrs	r2, r5, #8
 8007a62:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a64:	9a07      	ldr	r2, [sp, #28]
 8007a66:	9906      	ldr	r1, [sp, #24]
 8007a68:	0020      	movs	r0, r4
 8007a6a:	f7ff ff27 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d105      	bne.n	8007a7e <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	b2ed      	uxtb	r5, r5
 8007a76:	629d      	str	r5, [r3, #40]	@ 0x28
 8007a78:	e7e5      	b.n	8007a46 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7ed      	b.n	8007a5a <I2C_RequestMemoryRead+0x42>
      return HAL_ERROR;
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e7eb      	b.n	8007a5a <I2C_RequestMemoryRead+0x42>
    return HAL_ERROR;
 8007a82:	2001      	movs	r0, #1
 8007a84:	e7e9      	b.n	8007a5a <I2C_RequestMemoryRead+0x42>
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	80002000 	.word	0x80002000

08007a8c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	0004      	movs	r4, r0
 8007a90:	000d      	movs	r5, r1
 8007a92:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a94:	e003      	b.n	8007a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	069b      	lsls	r3, r3, #26
 8007a9c:	d512      	bpl.n	8007ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	069b      	lsls	r3, r3, #26
 8007aa4:	d41b      	bmi.n	8007ade <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa6:	0032      	movs	r2, r6
 8007aa8:	0029      	movs	r1, r5
 8007aaa:	0020      	movs	r0, r4
 8007aac:	f7ff fe7a 	bl	80077a4 <I2C_IsErrorOccurred>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d116      	bne.n	8007ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab4:	f7fe fc52 	bl	800635c <HAL_GetTick>
 8007ab8:	1b80      	subs	r0, r0, r6
 8007aba:	42a8      	cmp	r0, r5
 8007abc:	d8eb      	bhi.n	8007a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d1ed      	bne.n	8007a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
 8007ac2:	e7e8      	b.n	8007a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ac4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007acc:	2341      	movs	r3, #65	@ 0x41
 8007ace:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	3222      	adds	r2, #34	@ 0x22
 8007ad4:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8007ad6:	3a02      	subs	r2, #2
 8007ad8:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8007ada:	2001      	movs	r0, #1
 8007adc:	e000      	b.n	8007ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
  return HAL_OK;
 8007ade:	2000      	movs	r0, #0
}
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	e7fc      	b.n	8007ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x54>
	...

08007ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	0004      	movs	r4, r0
 8007aec:	000e      	movs	r6, r1
 8007aee:	0017      	movs	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2500      	movs	r5, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007af2:	e018      	b.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007af8:	f7fe fc30 	bl	800635c <HAL_GetTick>
 8007afc:	1bc0      	subs	r0, r0, r7
 8007afe:	42b0      	cmp	r0, r6
 8007b00:	d801      	bhi.n	8007b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e>
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	d10f      	bne.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	d10d      	bne.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	075b      	lsls	r3, r3, #29
 8007b10:	d409      	bmi.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007b14:	2220      	movs	r2, #32
 8007b16:	4313      	orrs	r3, r2
 8007b18:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1a:	2341      	movs	r3, #65	@ 0x41
 8007b1c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	2200      	movs	r2, #0
 8007b22:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 8007b24:	3501      	adds	r5, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	075b      	lsls	r3, r3, #29
 8007b2c:	d428      	bmi.n	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	d126      	bne.n	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x98>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b32:	003a      	movs	r2, r7
 8007b34:	0031      	movs	r1, r6
 8007b36:	0020      	movs	r0, r4
 8007b38:	f7ff fe34 	bl	80077a4 <I2C_IsErrorOccurred>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d000      	beq.n	8007b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      status = HAL_ERROR;
 8007b40:	2501      	movs	r5, #1
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	6993      	ldr	r3, [r2, #24]
 8007b46:	069b      	lsls	r3, r3, #26
 8007b48:	d5d6      	bpl.n	8007af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	d1d4      	bne.n	8007af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b4e:	6993      	ldr	r3, [r2, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b50:	6993      	ldr	r3, [r2, #24]
 8007b52:	06db      	lsls	r3, r3, #27
 8007b54:	d5ce      	bpl.n	8007af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b56:	2310      	movs	r3, #16
 8007b58:	61d3      	str	r3, [r2, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007b5a:	3b0c      	subs	r3, #12
 8007b5c:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	2220      	movs	r2, #32
 8007b62:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8007b64:	6821      	ldr	r1, [r4, #0]
 8007b66:	684b      	ldr	r3, [r1, #4]
 8007b68:	4806      	ldr	r0, [pc, #24]	@ (8007b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>)
 8007b6a:	4003      	ands	r3, r0
 8007b6c:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	2341      	movs	r3, #65	@ 0x41
 8007b70:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	3222      	adds	r2, #34	@ 0x22
 8007b76:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8007b78:	3a02      	subs	r2, #2
 8007b7a:	54a3      	strb	r3, [r4, r2]
        status = HAL_ERROR;
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	e7bb      	b.n	8007af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
}
 8007b80:	0028      	movs	r0, r5
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	fe00e800 	.word	0xfe00e800

08007b88 <HAL_I2C_Init>:
{
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8007b8c:	d060      	beq.n	8007c50 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b8e:	2341      	movs	r3, #65	@ 0x41
 8007b90:	5cc3      	ldrb	r3, [r0, r3]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d048      	beq.n	8007c28 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b96:	2341      	movs	r3, #65	@ 0x41
 8007b98:	2224      	movs	r2, #36	@ 0x24
 8007b9a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	438b      	bics	r3, r1
 8007ba4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	492a      	ldr	r1, [pc, #168]	@ (8007c54 <HAL_I2C_Init+0xcc>)
 8007bac:	400b      	ands	r3, r1
 8007bae:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	6893      	ldr	r3, [r2, #8]
 8007bb4:	4928      	ldr	r1, [pc, #160]	@ (8007c58 <HAL_I2C_Init+0xd0>)
 8007bb6:	400b      	ands	r3, r1
 8007bb8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d039      	beq.n	8007c34 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bc0:	68a1      	ldr	r1, [r4, #8]
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	2384      	movs	r3, #132	@ 0x84
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bcc:	68e3      	ldr	r3, [r4, #12]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d037      	beq.n	8007c42 <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	6853      	ldr	r3, [r2, #4]
 8007bd6:	4921      	ldr	r1, [pc, #132]	@ (8007c5c <HAL_I2C_Init+0xd4>)
 8007bd8:	400b      	ands	r3, r1
 8007bda:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bdc:	6822      	ldr	r2, [r4, #0]
 8007bde:	6851      	ldr	r1, [r2, #4]
 8007be0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c60 <HAL_I2C_Init+0xd8>)
 8007be2:	430b      	orrs	r3, r1
 8007be4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	68d3      	ldr	r3, [r2, #12]
 8007bea:	491b      	ldr	r1, [pc, #108]	@ (8007c58 <HAL_I2C_Init+0xd0>)
 8007bec:	400b      	ands	r3, r1
 8007bee:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	6962      	ldr	r2, [r4, #20]
 8007bf4:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bf6:	69a2      	ldr	r2, [r4, #24]
 8007bf8:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bfa:	6821      	ldr	r1, [r4, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c00:	69e3      	ldr	r3, [r4, #28]
 8007c02:	6a21      	ldr	r1, [r4, #32]
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	430b      	orrs	r3, r1
 8007c08:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	6813      	ldr	r3, [r2, #0]
 8007c0e:	2101      	movs	r1, #1
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	2241      	movs	r2, #65	@ 0x41
 8007c1a:	311f      	adds	r1, #31
 8007c1c:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c1e:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c20:	3201      	adds	r2, #1
 8007c22:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8007c24:	2000      	movs	r0, #0
}
 8007c26:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007c28:	3340      	adds	r3, #64	@ 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8007c2e:	f7fd faff 	bl	8005230 <HAL_I2C_MspInit>
 8007c32:	e7b0      	b.n	8007b96 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c34:	68a1      	ldr	r1, [r4, #8]
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	2380      	movs	r3, #128	@ 0x80
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]
 8007c40:	e7c4      	b.n	8007bcc <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	6851      	ldr	r1, [r2, #4]
 8007c46:	2380      	movs	r3, #128	@ 0x80
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	e7c5      	b.n	8007bdc <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8007c50:	2001      	movs	r0, #1
 8007c52:	e7e8      	b.n	8007c26 <HAL_I2C_Init+0x9e>
 8007c54:	f0ffffff 	.word	0xf0ffffff
 8007c58:	ffff7fff 	.word	0xffff7fff
 8007c5c:	fffff7ff 	.word	0xfffff7ff
 8007c60:	02008000 	.word	0x02008000

08007c64 <HAL_I2C_Master_Transmit>:
{
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c66:	b085      	sub	sp, #20
 8007c68:	0004      	movs	r4, r0
 8007c6a:	000e      	movs	r6, r1
 8007c6c:	9202      	str	r2, [sp, #8]
 8007c6e:	9303      	str	r3, [sp, #12]
 8007c70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c72:	2341      	movs	r3, #65	@ 0x41
 8007c74:	5cc3      	ldrb	r3, [r0, r3]
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d000      	beq.n	8007c7c <HAL_I2C_Master_Transmit+0x18>
 8007c7a:	e0ae      	b.n	8007dda <HAL_I2C_Master_Transmit+0x176>
    __HAL_LOCK(hi2c);
 8007c7c:	3320      	adds	r3, #32
 8007c7e:	5cc3      	ldrb	r3, [r0, r3]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d100      	bne.n	8007c86 <HAL_I2C_Master_Transmit+0x22>
 8007c84:	e0ac      	b.n	8007de0 <HAL_I2C_Master_Transmit+0x17c>
 8007c86:	2340      	movs	r3, #64	@ 0x40
 8007c88:	2201      	movs	r2, #1
 8007c8a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8007c8c:	f7fe fb66 	bl	800635c <HAL_GetTick>
 8007c90:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c92:	2180      	movs	r1, #128	@ 0x80
 8007c94:	9000      	str	r0, [sp, #0]
 8007c96:	2319      	movs	r3, #25
 8007c98:	2201      	movs	r2, #1
 8007c9a:	0209      	lsls	r1, r1, #8
 8007c9c:	0020      	movs	r0, r4
 8007c9e:	f7ff fe3a 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d000      	beq.n	8007ca8 <HAL_I2C_Master_Transmit+0x44>
 8007ca6:	e09d      	b.n	8007de4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ca8:	2341      	movs	r3, #65	@ 0x41
 8007caa:	2221      	movs	r2, #33	@ 0x21
 8007cac:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cae:	3301      	adds	r3, #1
 8007cb0:	3a11      	subs	r2, #17
 8007cb2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8007cb8:	9a02      	ldr	r2, [sp, #8]
 8007cba:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007cbc:	9a03      	ldr	r2, [sp, #12]
 8007cbe:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007cc0:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2bff      	cmp	r3, #255	@ 0xff
 8007cc8:	d91e      	bls.n	8007d08 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cca:	23ff      	movs	r3, #255	@ 0xff
 8007ccc:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007cce:	2380      	movs	r3, #128	@ 0x80
 8007cd0:	045b      	lsls	r3, r3, #17
    if (hi2c->XferSize > 0U)
 8007cd2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	d01c      	beq.n	8007d12 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cd8:	6822      	ldr	r2, [r4, #0]
 8007cda:	9902      	ldr	r1, [sp, #8]
 8007cdc:	7809      	ldrb	r1, [r1, #0]
 8007cde:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007ce0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007ce6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007ce8:	3a01      	subs	r2, #1
 8007cea:	b292      	uxth	r2, r2
 8007cec:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007cee:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	b292      	uxth	r2, r2
 8007cf4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007cf6:	3201      	adds	r2, #1
 8007cf8:	b2d2      	uxtb	r2, r2
 8007cfa:	493e      	ldr	r1, [pc, #248]	@ (8007df4 <HAL_I2C_Master_Transmit+0x190>)
 8007cfc:	9100      	str	r1, [sp, #0]
 8007cfe:	0031      	movs	r1, r6
 8007d00:	0020      	movs	r0, r4
 8007d02:	f7ff fd35 	bl	8007770 <I2C_TransferConfig>
 8007d06:	e018      	b.n	8007d3a <HAL_I2C_Master_Transmit+0xd6>
      hi2c->XferSize = hi2c->XferCount;
 8007d08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007d0a:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d0c:	2380      	movs	r3, #128	@ 0x80
 8007d0e:	049b      	lsls	r3, r3, #18
 8007d10:	e7df      	b.n	8007cd2 <HAL_I2C_Master_Transmit+0x6e>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	4937      	ldr	r1, [pc, #220]	@ (8007df4 <HAL_I2C_Master_Transmit+0x190>)
 8007d16:	9100      	str	r1, [sp, #0]
 8007d18:	0031      	movs	r1, r6
 8007d1a:	0020      	movs	r0, r4
 8007d1c:	f7ff fd28 	bl	8007770 <I2C_TransferConfig>
 8007d20:	e00b      	b.n	8007d3a <HAL_I2C_Master_Transmit+0xd6>
          hi2c->XferSize = hi2c->XferCount;
 8007d22:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007d24:	b292      	uxth	r2, r2
 8007d26:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d28:	2380      	movs	r3, #128	@ 0x80
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	9100      	str	r1, [sp, #0]
 8007d30:	049b      	lsls	r3, r3, #18
 8007d32:	0031      	movs	r1, r6
 8007d34:	0020      	movs	r0, r4
 8007d36:	f7ff fd1b 	bl	8007770 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d034      	beq.n	8007dac <HAL_I2C_Master_Transmit+0x148>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d42:	003a      	movs	r2, r7
 8007d44:	0029      	movs	r1, r5
 8007d46:	0020      	movs	r0, r4
 8007d48:	f7ff fdb8 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d14b      	bne.n	8007de8 <HAL_I2C_Master_Transmit+0x184>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d50:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007d58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007d5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d66:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d6e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007d70:	b292      	uxth	r2, r2
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d0e1      	beq.n	8007d3a <HAL_I2C_Master_Transmit+0xd6>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1df      	bne.n	8007d3a <HAL_I2C_Master_Transmit+0xd6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d7a:	9700      	str	r7, [sp, #0]
 8007d7c:	002b      	movs	r3, r5
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2180      	movs	r1, #128	@ 0x80
 8007d82:	0020      	movs	r0, r4
 8007d84:	f7ff fdc7 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d12f      	bne.n	8007dec <HAL_I2C_Master_Transmit+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2bff      	cmp	r3, #255	@ 0xff
 8007d92:	d9c6      	bls.n	8007d22 <HAL_I2C_Master_Transmit+0xbe>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d94:	23ff      	movs	r3, #255	@ 0xff
 8007d96:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d98:	3b7f      	subs	r3, #127	@ 0x7f
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	9200      	str	r2, [sp, #0]
 8007d9e:	045b      	lsls	r3, r3, #17
 8007da0:	32ff      	adds	r2, #255	@ 0xff
 8007da2:	0031      	movs	r1, r6
 8007da4:	0020      	movs	r0, r4
 8007da6:	f7ff fce3 	bl	8007770 <I2C_TransferConfig>
 8007daa:	e7c6      	b.n	8007d3a <HAL_I2C_Master_Transmit+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dac:	003a      	movs	r2, r7
 8007dae:	0029      	movs	r1, r5
 8007db0:	0020      	movs	r0, r4
 8007db2:	f7ff fe6b 	bl	8007a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d11a      	bne.n	8007df0 <HAL_I2C_Master_Transmit+0x18c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007dc0:	6821      	ldr	r1, [r4, #0]
 8007dc2:	684b      	ldr	r3, [r1, #4]
 8007dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8007df8 <HAL_I2C_Master_Transmit+0x194>)
 8007dc6:	402b      	ands	r3, r5
 8007dc8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007dca:	2341      	movs	r3, #65	@ 0x41
 8007dcc:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	3222      	adds	r2, #34	@ 0x22
 8007dd2:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007dd4:	3a02      	subs	r2, #2
 8007dd6:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8007dd8:	e000      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
    return HAL_BUSY;
 8007dda:	2002      	movs	r0, #2
}
 8007ddc:	b005      	add	sp, #20
 8007dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8007de0:	2002      	movs	r0, #2
 8007de2:	e7fb      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
      return HAL_ERROR;
 8007de4:	2001      	movs	r0, #1
 8007de6:	e7f9      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
        return HAL_ERROR;
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7f7      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
          return HAL_ERROR;
 8007dec:	2001      	movs	r0, #1
 8007dee:	e7f5      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
      return HAL_ERROR;
 8007df0:	2001      	movs	r0, #1
 8007df2:	e7f3      	b.n	8007ddc <HAL_I2C_Master_Transmit+0x178>
 8007df4:	80002000 	.word	0x80002000
 8007df8:	fe00e800 	.word	0xfe00e800

08007dfc <HAL_I2C_Master_Receive>:
{
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	0004      	movs	r4, r0
 8007e02:	000f      	movs	r7, r1
 8007e04:	9202      	str	r2, [sp, #8]
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0a:	2341      	movs	r3, #65	@ 0x41
 8007e0c:	5cc3      	ldrb	r3, [r0, r3]
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d000      	beq.n	8007e14 <HAL_I2C_Master_Receive+0x18>
 8007e12:	e09b      	b.n	8007f4c <HAL_I2C_Master_Receive+0x150>
    __HAL_LOCK(hi2c);
 8007e14:	3320      	adds	r3, #32
 8007e16:	5cc3      	ldrb	r3, [r0, r3]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d100      	bne.n	8007e1e <HAL_I2C_Master_Receive+0x22>
 8007e1c:	e099      	b.n	8007f52 <HAL_I2C_Master_Receive+0x156>
 8007e1e:	2340      	movs	r3, #64	@ 0x40
 8007e20:	2201      	movs	r2, #1
 8007e22:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8007e24:	f7fe fa9a 	bl	800635c <HAL_GetTick>
 8007e28:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e2a:	2180      	movs	r1, #128	@ 0x80
 8007e2c:	9000      	str	r0, [sp, #0]
 8007e2e:	2319      	movs	r3, #25
 8007e30:	2201      	movs	r2, #1
 8007e32:	0209      	lsls	r1, r1, #8
 8007e34:	0020      	movs	r0, r4
 8007e36:	f7ff fd6e 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d000      	beq.n	8007e40 <HAL_I2C_Master_Receive+0x44>
 8007e3e:	e08a      	b.n	8007f56 <HAL_I2C_Master_Receive+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e40:	2341      	movs	r3, #65	@ 0x41
 8007e42:	2222      	movs	r2, #34	@ 0x22
 8007e44:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e46:	3301      	adds	r3, #1
 8007e48:	3a12      	subs	r2, #18
 8007e4a:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8007e50:	9a02      	ldr	r2, [sp, #8]
 8007e52:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e54:	9a03      	ldr	r2, [sp, #12]
 8007e56:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007e58:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2bff      	cmp	r3, #255	@ 0xff
 8007e60:	d90b      	bls.n	8007e7a <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e62:	23ff      	movs	r3, #255	@ 0xff
 8007e64:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e66:	3b7f      	subs	r3, #127	@ 0x7f
 8007e68:	4a3f      	ldr	r2, [pc, #252]	@ (8007f68 <HAL_I2C_Master_Receive+0x16c>)
 8007e6a:	9200      	str	r2, [sp, #0]
 8007e6c:	045b      	lsls	r3, r3, #17
 8007e6e:	22ff      	movs	r2, #255	@ 0xff
 8007e70:	0039      	movs	r1, r7
 8007e72:	0020      	movs	r0, r4
 8007e74:	f7ff fc7c 	bl	8007770 <I2C_TransferConfig>
 8007e78:	e018      	b.n	8007eac <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8007e7a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007e7c:	b292      	uxth	r2, r2
 8007e7e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	4938      	ldr	r1, [pc, #224]	@ (8007f68 <HAL_I2C_Master_Receive+0x16c>)
 8007e86:	9100      	str	r1, [sp, #0]
 8007e88:	049b      	lsls	r3, r3, #18
 8007e8a:	0039      	movs	r1, r7
 8007e8c:	0020      	movs	r0, r4
 8007e8e:	f7ff fc6f 	bl	8007770 <I2C_TransferConfig>
 8007e92:	e00b      	b.n	8007eac <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8007e94:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007e96:	b292      	uxth	r2, r2
 8007e98:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e9a:	2380      	movs	r3, #128	@ 0x80
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	9100      	str	r1, [sp, #0]
 8007ea2:	049b      	lsls	r3, r3, #18
 8007ea4:	0039      	movs	r1, r7
 8007ea6:	0020      	movs	r0, r4
 8007ea8:	f7ff fc62 	bl	8007770 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007eac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d034      	beq.n	8007f1e <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb4:	0032      	movs	r2, r6
 8007eb6:	0029      	movs	r1, r5
 8007eb8:	0020      	movs	r0, r4
 8007eba:	f7ff fe15 	bl	8007ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d14b      	bne.n	8007f5a <HAL_I2C_Master_Receive+0x15e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ec6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ec8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007eca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ecc:	3301      	adds	r3, #1
 8007ece:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007ed0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007ed8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007eda:	3a01      	subs	r2, #1
 8007edc:	b292      	uxth	r2, r2
 8007ede:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ee0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007ee2:	b292      	uxth	r2, r2
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	d0e1      	beq.n	8007eac <HAL_I2C_Master_Receive+0xb0>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1df      	bne.n	8007eac <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eec:	9600      	str	r6, [sp, #0]
 8007eee:	002b      	movs	r3, r5
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2180      	movs	r1, #128	@ 0x80
 8007ef4:	0020      	movs	r0, r4
 8007ef6:	f7ff fd0e 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d12f      	bne.n	8007f5e <HAL_I2C_Master_Receive+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007efe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2bff      	cmp	r3, #255	@ 0xff
 8007f04:	d9c6      	bls.n	8007e94 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f06:	23ff      	movs	r3, #255	@ 0xff
 8007f08:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f0a:	3b7f      	subs	r3, #127	@ 0x7f
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	9200      	str	r2, [sp, #0]
 8007f10:	045b      	lsls	r3, r3, #17
 8007f12:	32ff      	adds	r2, #255	@ 0xff
 8007f14:	0039      	movs	r1, r7
 8007f16:	0020      	movs	r0, r4
 8007f18:	f7ff fc2a 	bl	8007770 <I2C_TransferConfig>
 8007f1c:	e7c6      	b.n	8007eac <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f1e:	0032      	movs	r2, r6
 8007f20:	0029      	movs	r1, r5
 8007f22:	0020      	movs	r0, r4
 8007f24:	f7ff fdb2 	bl	8007a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d11a      	bne.n	8007f62 <HAL_I2C_Master_Receive+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007f32:	6821      	ldr	r1, [r4, #0]
 8007f34:	684b      	ldr	r3, [r1, #4]
 8007f36:	4d0d      	ldr	r5, [pc, #52]	@ (8007f6c <HAL_I2C_Master_Receive+0x170>)
 8007f38:	402b      	ands	r3, r5
 8007f3a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f3c:	2341      	movs	r3, #65	@ 0x41
 8007f3e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	3222      	adds	r2, #34	@ 0x22
 8007f44:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007f46:	3a02      	subs	r2, #2
 8007f48:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8007f4a:	e000      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
    return HAL_BUSY;
 8007f4c:	2002      	movs	r0, #2
}
 8007f4e:	b005      	add	sp, #20
 8007f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8007f52:	2002      	movs	r0, #2
 8007f54:	e7fb      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 8007f56:	2001      	movs	r0, #1
 8007f58:	e7f9      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
        return HAL_ERROR;
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	e7f7      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
          return HAL_ERROR;
 8007f5e:	2001      	movs	r0, #1
 8007f60:	e7f5      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7f3      	b.n	8007f4e <HAL_I2C_Master_Receive+0x152>
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	80002400 	.word	0x80002400
 8007f6c:	fe00e800 	.word	0xfe00e800

08007f70 <HAL_I2C_Mem_Write>:
{
 8007f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f72:	b087      	sub	sp, #28
 8007f74:	0004      	movs	r4, r0
 8007f76:	9103      	str	r1, [sp, #12]
 8007f78:	9204      	str	r2, [sp, #16]
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f7e:	cb20      	ldmia	r3!, {r5}
 8007f80:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f82:	2341      	movs	r3, #65	@ 0x41
 8007f84:	5cc3      	ldrb	r3, [r0, r3]
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d000      	beq.n	8007f8c <HAL_I2C_Mem_Write+0x1c>
 8007f8a:	e0b3      	b.n	80080f4 <HAL_I2C_Mem_Write+0x184>
    if ((pData == NULL) || (Size == 0U))
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	d018      	beq.n	8007fc2 <HAL_I2C_Mem_Write+0x52>
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	d016      	beq.n	8007fc2 <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8007f94:	2340      	movs	r3, #64	@ 0x40
 8007f96:	5cc3      	ldrb	r3, [r0, r3]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d100      	bne.n	8007f9e <HAL_I2C_Mem_Write+0x2e>
 8007f9c:	e0ad      	b.n	80080fa <HAL_I2C_Mem_Write+0x18a>
 8007f9e:	2340      	movs	r3, #64	@ 0x40
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8007fa4:	f7fe f9da 	bl	800635c <HAL_GetTick>
 8007fa8:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007faa:	2180      	movs	r1, #128	@ 0x80
 8007fac:	9000      	str	r0, [sp, #0]
 8007fae:	2319      	movs	r3, #25
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	0209      	lsls	r1, r1, #8
 8007fb4:	0020      	movs	r0, r4
 8007fb6:	f7ff fcae 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d006      	beq.n	8007fcc <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e099      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fc2:	2380      	movs	r3, #128	@ 0x80
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e094      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fcc:	2341      	movs	r3, #65	@ 0x41
 8007fce:	2221      	movs	r2, #33	@ 0x21
 8007fd0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	321f      	adds	r2, #31
 8007fd6:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8007fdc:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007fde:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007fe0:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fe2:	9601      	str	r6, [sp, #4]
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	9a04      	ldr	r2, [sp, #16]
 8007fec:	9903      	ldr	r1, [sp, #12]
 8007fee:	0020      	movs	r0, r4
 8007ff0:	f7ff fcd6 	bl	80079a0 <I2C_RequestMemoryWrite>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d10f      	bne.n	8008018 <HAL_I2C_Mem_Write+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ff8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2bff      	cmp	r3, #255	@ 0xff
 8007ffe:	d910      	bls.n	8008022 <HAL_I2C_Mem_Write+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008000:	23ff      	movs	r3, #255	@ 0xff
 8008002:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008004:	3b7f      	subs	r3, #127	@ 0x7f
 8008006:	2200      	movs	r2, #0
 8008008:	9200      	str	r2, [sp, #0]
 800800a:	045b      	lsls	r3, r3, #17
 800800c:	32ff      	adds	r2, #255	@ 0xff
 800800e:	9903      	ldr	r1, [sp, #12]
 8008010:	0020      	movs	r0, r4
 8008012:	f7ff fbad 	bl	8007770 <I2C_TransferConfig>
 8008016:	e021      	b.n	800805c <HAL_I2C_Mem_Write+0xec>
      __HAL_UNLOCK(hi2c);
 8008018:	2340      	movs	r3, #64	@ 0x40
 800801a:	2200      	movs	r2, #0
 800801c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800801e:	2001      	movs	r0, #1
 8008020:	e069      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
      hi2c->XferSize = hi2c->XferCount;
 8008022:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008024:	b292      	uxth	r2, r2
 8008026:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008028:	2380      	movs	r3, #128	@ 0x80
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	2100      	movs	r1, #0
 800802e:	9100      	str	r1, [sp, #0]
 8008030:	049b      	lsls	r3, r3, #18
 8008032:	9903      	ldr	r1, [sp, #12]
 8008034:	0020      	movs	r0, r4
 8008036:	f7ff fb9b 	bl	8007770 <I2C_TransferConfig>
 800803a:	e00f      	b.n	800805c <HAL_I2C_Mem_Write+0xec>
          hi2c->XferSize = hi2c->XferCount;
 800803c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800803e:	b292      	uxth	r2, r2
 8008040:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008042:	2380      	movs	r3, #128	@ 0x80
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	2100      	movs	r1, #0
 8008048:	9100      	str	r1, [sp, #0]
 800804a:	049b      	lsls	r3, r3, #18
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	0020      	movs	r0, r4
 8008050:	f7ff fb8e 	bl	8007770 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008054:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d034      	beq.n	80080c6 <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800805c:	0032      	movs	r2, r6
 800805e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008060:	0020      	movs	r0, r4
 8008062:	f7ff fc2b 	bl	80078bc <I2C_WaitOnTXISFlagUntilTimeout>
 8008066:	2800      	cmp	r0, #0
 8008068:	d149      	bne.n	80080fe <HAL_I2C_Mem_Write+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800806a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008072:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008074:	3301      	adds	r3, #1
 8008076:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008078:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800807a:	3b01      	subs	r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008080:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008082:	3b01      	subs	r3, #1
 8008084:	b29b      	uxth	r3, r3
 8008086:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008088:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800808a:	b292      	uxth	r2, r2
 800808c:	2a00      	cmp	r2, #0
 800808e:	d0e1      	beq.n	8008054 <HAL_I2C_Mem_Write+0xe4>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1df      	bne.n	8008054 <HAL_I2C_Mem_Write+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008094:	9600      	str	r6, [sp, #0]
 8008096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008098:	2200      	movs	r2, #0
 800809a:	2180      	movs	r1, #128	@ 0x80
 800809c:	0020      	movs	r0, r4
 800809e:	f7ff fc3a 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d12d      	bne.n	8008102 <HAL_I2C_Mem_Write+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2bff      	cmp	r3, #255	@ 0xff
 80080ac:	d9c6      	bls.n	800803c <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ae:	23ff      	movs	r3, #255	@ 0xff
 80080b0:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080b2:	3b7f      	subs	r3, #127	@ 0x7f
 80080b4:	2200      	movs	r2, #0
 80080b6:	9200      	str	r2, [sp, #0]
 80080b8:	045b      	lsls	r3, r3, #17
 80080ba:	32ff      	adds	r2, #255	@ 0xff
 80080bc:	9903      	ldr	r1, [sp, #12]
 80080be:	0020      	movs	r0, r4
 80080c0:	f7ff fb56 	bl	8007770 <I2C_TransferConfig>
 80080c4:	e7c6      	b.n	8008054 <HAL_I2C_Mem_Write+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c6:	0032      	movs	r2, r6
 80080c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80080ca:	0020      	movs	r0, r4
 80080cc:	f7ff fcde 	bl	8007a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d118      	bne.n	8008106 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	2220      	movs	r2, #32
 80080d8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80080da:	6821      	ldr	r1, [r4, #0]
 80080dc:	684b      	ldr	r3, [r1, #4]
 80080de:	4d0b      	ldr	r5, [pc, #44]	@ (800810c <HAL_I2C_Mem_Write+0x19c>)
 80080e0:	402b      	ands	r3, r5
 80080e2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80080e4:	2341      	movs	r3, #65	@ 0x41
 80080e6:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	3222      	adds	r2, #34	@ 0x22
 80080ec:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80080ee:	3a02      	subs	r2, #2
 80080f0:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80080f2:	e000      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
    return HAL_BUSY;
 80080f4:	2002      	movs	r0, #2
}
 80080f6:	b007      	add	sp, #28
 80080f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80080fa:	2002      	movs	r0, #2
 80080fc:	e7fb      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
        return HAL_ERROR;
 80080fe:	2001      	movs	r0, #1
 8008100:	e7f9      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
          return HAL_ERROR;
 8008102:	2001      	movs	r0, #1
 8008104:	e7f7      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
      return HAL_ERROR;
 8008106:	2001      	movs	r0, #1
 8008108:	e7f5      	b.n	80080f6 <HAL_I2C_Mem_Write+0x186>
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	fe00e800 	.word	0xfe00e800

08008110 <HAL_I2C_Mem_Read>:
{
 8008110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008112:	b087      	sub	sp, #28
 8008114:	0004      	movs	r4, r0
 8008116:	9103      	str	r1, [sp, #12]
 8008118:	9204      	str	r2, [sp, #16]
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	ab0c      	add	r3, sp, #48	@ 0x30
 800811e:	cb20      	ldmia	r3!, {r5}
 8008120:	881f      	ldrh	r7, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008122:	2341      	movs	r3, #65	@ 0x41
 8008124:	5cc3      	ldrb	r3, [r0, r3]
 8008126:	2b20      	cmp	r3, #32
 8008128:	d000      	beq.n	800812c <HAL_I2C_Mem_Read+0x1c>
 800812a:	e0b5      	b.n	8008298 <HAL_I2C_Mem_Read+0x188>
    if ((pData == NULL) || (Size == 0U))
 800812c:	2d00      	cmp	r5, #0
 800812e:	d018      	beq.n	8008162 <HAL_I2C_Mem_Read+0x52>
 8008130:	2f00      	cmp	r7, #0
 8008132:	d016      	beq.n	8008162 <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8008134:	2340      	movs	r3, #64	@ 0x40
 8008136:	5cc3      	ldrb	r3, [r0, r3]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d100      	bne.n	800813e <HAL_I2C_Mem_Read+0x2e>
 800813c:	e0af      	b.n	800829e <HAL_I2C_Mem_Read+0x18e>
 800813e:	2340      	movs	r3, #64	@ 0x40
 8008140:	2201      	movs	r2, #1
 8008142:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008144:	f7fe f90a 	bl	800635c <HAL_GetTick>
 8008148:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800814a:	2180      	movs	r1, #128	@ 0x80
 800814c:	9000      	str	r0, [sp, #0]
 800814e:	2319      	movs	r3, #25
 8008150:	2201      	movs	r2, #1
 8008152:	0209      	lsls	r1, r1, #8
 8008154:	0020      	movs	r0, r4
 8008156:	f7ff fbde 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 800815a:	2800      	cmp	r0, #0
 800815c:	d006      	beq.n	800816c <HAL_I2C_Mem_Read+0x5c>
      return HAL_ERROR;
 800815e:	2001      	movs	r0, #1
 8008160:	e09b      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008168:	2001      	movs	r0, #1
 800816a:	e096      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800816c:	2341      	movs	r3, #65	@ 0x41
 800816e:	2222      	movs	r2, #34	@ 0x22
 8008170:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008172:	3301      	adds	r3, #1
 8008174:	321e      	adds	r2, #30
 8008176:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008178:	2300      	movs	r3, #0
 800817a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800817c:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800817e:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008180:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008182:	9601      	str	r6, [sp, #4]
 8008184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	9a04      	ldr	r2, [sp, #16]
 800818c:	9903      	ldr	r1, [sp, #12]
 800818e:	0020      	movs	r0, r4
 8008190:	f7ff fc42 	bl	8007a18 <I2C_RequestMemoryRead>
 8008194:	2800      	cmp	r0, #0
 8008196:	d10f      	bne.n	80081b8 <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008198:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800819a:	b29b      	uxth	r3, r3
 800819c:	2bff      	cmp	r3, #255	@ 0xff
 800819e:	d910      	bls.n	80081c2 <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081a0:	23ff      	movs	r3, #255	@ 0xff
 80081a2:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081a4:	3b7f      	subs	r3, #127	@ 0x7f
 80081a6:	4a42      	ldr	r2, [pc, #264]	@ (80082b0 <HAL_I2C_Mem_Read+0x1a0>)
 80081a8:	9200      	str	r2, [sp, #0]
 80081aa:	045b      	lsls	r3, r3, #17
 80081ac:	22ff      	movs	r2, #255	@ 0xff
 80081ae:	9903      	ldr	r1, [sp, #12]
 80081b0:	0020      	movs	r0, r4
 80081b2:	f7ff fadd 	bl	8007770 <I2C_TransferConfig>
 80081b6:	e021      	b.n	80081fc <HAL_I2C_Mem_Read+0xec>
      __HAL_UNLOCK(hi2c);
 80081b8:	2340      	movs	r3, #64	@ 0x40
 80081ba:	2200      	movs	r2, #0
 80081bc:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80081be:	2001      	movs	r0, #1
 80081c0:	e06b      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
      hi2c->XferSize = hi2c->XferCount;
 80081c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80081c4:	b292      	uxth	r2, r2
 80081c6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081c8:	2380      	movs	r3, #128	@ 0x80
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	4938      	ldr	r1, [pc, #224]	@ (80082b0 <HAL_I2C_Mem_Read+0x1a0>)
 80081ce:	9100      	str	r1, [sp, #0]
 80081d0:	049b      	lsls	r3, r3, #18
 80081d2:	9903      	ldr	r1, [sp, #12]
 80081d4:	0020      	movs	r0, r4
 80081d6:	f7ff facb 	bl	8007770 <I2C_TransferConfig>
 80081da:	e00f      	b.n	80081fc <HAL_I2C_Mem_Read+0xec>
          hi2c->XferSize = hi2c->XferCount;
 80081dc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80081de:	b292      	uxth	r2, r2
 80081e0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081e2:	2380      	movs	r3, #128	@ 0x80
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	2100      	movs	r1, #0
 80081e8:	9100      	str	r1, [sp, #0]
 80081ea:	049b      	lsls	r3, r3, #18
 80081ec:	9903      	ldr	r1, [sp, #12]
 80081ee:	0020      	movs	r0, r4
 80081f0:	f7ff fabe 	bl	8007770 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80081f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d036      	beq.n	800826a <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081fc:	9600      	str	r6, [sp, #0]
 80081fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008200:	2200      	movs	r2, #0
 8008202:	2104      	movs	r1, #4
 8008204:	0020      	movs	r0, r4
 8008206:	f7ff fb86 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 800820a:	2800      	cmp	r0, #0
 800820c:	d149      	bne.n	80082a2 <HAL_I2C_Mem_Read+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008212:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008214:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008216:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008218:	3301      	adds	r3, #1
 800821a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800821c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800821e:	3b01      	subs	r3, #1
 8008220:	b29b      	uxth	r3, r3
 8008222:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008224:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008226:	3a01      	subs	r2, #1
 8008228:	b292      	uxth	r2, r2
 800822a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800822c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800822e:	b292      	uxth	r2, r2
 8008230:	2a00      	cmp	r2, #0
 8008232:	d0df      	beq.n	80081f4 <HAL_I2C_Mem_Read+0xe4>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1dd      	bne.n	80081f4 <HAL_I2C_Mem_Read+0xe4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008238:	9600      	str	r6, [sp, #0]
 800823a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823c:	2200      	movs	r2, #0
 800823e:	2180      	movs	r1, #128	@ 0x80
 8008240:	0020      	movs	r0, r4
 8008242:	f7ff fb68 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 8008246:	2800      	cmp	r0, #0
 8008248:	d12d      	bne.n	80082a6 <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800824a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	2bff      	cmp	r3, #255	@ 0xff
 8008250:	d9c4      	bls.n	80081dc <HAL_I2C_Mem_Read+0xcc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008252:	23ff      	movs	r3, #255	@ 0xff
 8008254:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008256:	3b7f      	subs	r3, #127	@ 0x7f
 8008258:	2200      	movs	r2, #0
 800825a:	9200      	str	r2, [sp, #0]
 800825c:	045b      	lsls	r3, r3, #17
 800825e:	32ff      	adds	r2, #255	@ 0xff
 8008260:	9903      	ldr	r1, [sp, #12]
 8008262:	0020      	movs	r0, r4
 8008264:	f7ff fa84 	bl	8007770 <I2C_TransferConfig>
 8008268:	e7c4      	b.n	80081f4 <HAL_I2C_Mem_Read+0xe4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800826a:	0032      	movs	r2, r6
 800826c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800826e:	0020      	movs	r0, r4
 8008270:	f7ff fc0c 	bl	8007a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008274:	2800      	cmp	r0, #0
 8008276:	d118      	bne.n	80082aa <HAL_I2C_Mem_Read+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	2220      	movs	r2, #32
 800827c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800827e:	6821      	ldr	r1, [r4, #0]
 8008280:	684b      	ldr	r3, [r1, #4]
 8008282:	4d0c      	ldr	r5, [pc, #48]	@ (80082b4 <HAL_I2C_Mem_Read+0x1a4>)
 8008284:	402b      	ands	r3, r5
 8008286:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008288:	2341      	movs	r3, #65	@ 0x41
 800828a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	3222      	adds	r2, #34	@ 0x22
 8008290:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8008292:	3a02      	subs	r2, #2
 8008294:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8008296:	e000      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
    return HAL_BUSY;
 8008298:	2002      	movs	r0, #2
}
 800829a:	b007      	add	sp, #28
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800829e:	2002      	movs	r0, #2
 80082a0:	e7fb      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
        return HAL_ERROR;
 80082a2:	2001      	movs	r0, #1
 80082a4:	e7f9      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
          return HAL_ERROR;
 80082a6:	2001      	movs	r0, #1
 80082a8:	e7f7      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
      return HAL_ERROR;
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7f5      	b.n	800829a <HAL_I2C_Mem_Read+0x18a>
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	80002400 	.word	0x80002400
 80082b4:	fe00e800 	.word	0xfe00e800

080082b8 <HAL_I2C_IsDeviceReady>:
{
 80082b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ba:	46ce      	mov	lr, r9
 80082bc:	b500      	push	{lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	0007      	movs	r7, r0
 80082c2:	4689      	mov	r9, r1
 80082c4:	9203      	str	r2, [sp, #12]
 80082c6:	001e      	movs	r6, r3
  __IO uint32_t I2C_Trials = 0UL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80082cc:	3341      	adds	r3, #65	@ 0x41
 80082ce:	5cc3      	ldrb	r3, [r0, r3]
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d000      	beq.n	80082d6 <HAL_I2C_IsDeviceReady+0x1e>
 80082d4:	e08f      	b.n	80083f6 <HAL_I2C_IsDeviceReady+0x13e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80082d6:	6803      	ldr	r3, [r0, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	d500      	bpl.n	80082e0 <HAL_I2C_IsDeviceReady+0x28>
 80082de:	e08c      	b.n	80083fa <HAL_I2C_IsDeviceReady+0x142>
    __HAL_LOCK(hi2c);
 80082e0:	2340      	movs	r3, #64	@ 0x40
 80082e2:	5cc3      	ldrb	r3, [r0, r3]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d100      	bne.n	80082ea <HAL_I2C_IsDeviceReady+0x32>
 80082e8:	e089      	b.n	80083fe <HAL_I2C_IsDeviceReady+0x146>
 80082ea:	2340      	movs	r3, #64	@ 0x40
 80082ec:	2201      	movs	r2, #1
 80082ee:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80082f0:	3301      	adds	r3, #1
 80082f2:	3223      	adds	r2, #35	@ 0x23
 80082f4:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d017      	beq.n	8008330 <HAL_I2C_IsDeviceReady+0x78>
 8008300:	464b      	mov	r3, r9
 8008302:	059a      	lsls	r2, r3, #22
 8008304:	0d92      	lsrs	r2, r2, #22
 8008306:	4b41      	ldr	r3, [pc, #260]	@ (800840c <HAL_I2C_IsDeviceReady+0x154>)
 8008308:	4313      	orrs	r3, r2
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800830e:	f7fe f825 	bl	800635c <HAL_GetTick>
 8008312:	0005      	movs	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	6991      	ldr	r1, [r2, #24]
 8008318:	2320      	movs	r3, #32
 800831a:	400b      	ands	r3, r1
 800831c:	1e59      	subs	r1, r3, #1
 800831e:	418b      	sbcs	r3, r1
 8008320:	b2db      	uxtb	r3, r3
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008322:	6992      	ldr	r2, [r2, #24]
 8008324:	2410      	movs	r4, #16
 8008326:	4014      	ands	r4, r2
 8008328:	1e62      	subs	r2, r4, #1
 800832a:	4194      	sbcs	r4, r2
 800832c:	b2e4      	uxtb	r4, r4
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800832e:	e012      	b.n	8008356 <HAL_I2C_IsDeviceReady+0x9e>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008330:	464b      	mov	r3, r9
 8008332:	059a      	lsls	r2, r3, #22
 8008334:	0d92      	lsrs	r2, r2, #22
 8008336:	4b36      	ldr	r3, [pc, #216]	@ (8008410 <HAL_I2C_IsDeviceReady+0x158>)
 8008338:	4313      	orrs	r3, r2
 800833a:	e7e6      	b.n	800830a <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	6991      	ldr	r1, [r2, #24]
 8008340:	2320      	movs	r3, #32
 8008342:	400b      	ands	r3, r1
 8008344:	1e59      	subs	r1, r3, #1
 8008346:	418b      	sbcs	r3, r1
 8008348:	b2db      	uxtb	r3, r3
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800834a:	6992      	ldr	r2, [r2, #24]
 800834c:	2410      	movs	r4, #16
 800834e:	4014      	ands	r4, r2
 8008350:	1e62      	subs	r2, r4, #1
 8008352:	4194      	sbcs	r4, r2
 8008354:	b2e4      	uxtb	r4, r4
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008356:	431c      	orrs	r4, r3
 8008358:	d116      	bne.n	8008388 <HAL_I2C_IsDeviceReady+0xd0>
        if (Timeout != HAL_MAX_DELAY)
 800835a:	1c73      	adds	r3, r6, #1
 800835c:	d0ee      	beq.n	800833c <HAL_I2C_IsDeviceReady+0x84>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800835e:	f7fd fffd 	bl	800635c <HAL_GetTick>
 8008362:	1b40      	subs	r0, r0, r5
 8008364:	42b0      	cmp	r0, r6
 8008366:	d801      	bhi.n	800836c <HAL_I2C_IsDeviceReady+0xb4>
 8008368:	2e00      	cmp	r6, #0
 800836a:	d1e7      	bne.n	800833c <HAL_I2C_IsDeviceReady+0x84>
            hi2c->State = HAL_I2C_STATE_READY;
 800836c:	2220      	movs	r2, #32
 800836e:	2341      	movs	r3, #65	@ 0x41
 8008370:	54fa      	strb	r2, [r7, r3]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008374:	4313      	orrs	r3, r2
 8008376:	647b      	str	r3, [r7, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8008378:	2340      	movs	r3, #64	@ 0x40
 800837a:	2200      	movs	r2, #0
 800837c:	54fa      	strb	r2, [r7, r3]
            return HAL_ERROR;
 800837e:	2001      	movs	r0, #1
}
 8008380:	b006      	add	sp, #24
 8008382:	bc80      	pop	{r7}
 8008384:	46b9      	mov	r9, r7
 8008386:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	06db      	lsls	r3, r3, #27
 800838e:	d520      	bpl.n	80083d2 <HAL_I2C_IsDeviceReady+0x11a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008390:	9500      	str	r5, [sp, #0]
 8008392:	0033      	movs	r3, r6
 8008394:	2200      	movs	r2, #0
 8008396:	2120      	movs	r1, #32
 8008398:	0038      	movs	r0, r7
 800839a:	f7ff fabc 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d131      	bne.n	8008406 <HAL_I2C_IsDeviceReady+0x14e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2210      	movs	r2, #16
 80083a6:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	3210      	adds	r2, #16
 80083ac:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 80083ae:	9b05      	ldr	r3, [sp, #20]
 80083b0:	3301      	adds	r3, #1
 80083b2:	9305      	str	r3, [sp, #20]
    } while (I2C_Trials < Trials);
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	9a03      	ldr	r2, [sp, #12]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d39e      	bcc.n	80082fa <HAL_I2C_IsDeviceReady+0x42>
    hi2c->State = HAL_I2C_STATE_READY;
 80083bc:	2220      	movs	r2, #32
 80083be:	2341      	movs	r3, #65	@ 0x41
 80083c0:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c4:	4313      	orrs	r3, r2
 80083c6:	647b      	str	r3, [r7, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80083c8:	2340      	movs	r3, #64	@ 0x40
 80083ca:	2200      	movs	r2, #0
 80083cc:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 80083ce:	3001      	adds	r0, #1
 80083d0:	e7d6      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083d2:	9500      	str	r5, [sp, #0]
 80083d4:	0033      	movs	r3, r6
 80083d6:	2200      	movs	r2, #0
 80083d8:	2120      	movs	r1, #32
 80083da:	0038      	movs	r0, r7
 80083dc:	f7ff fa9b 	bl	8007916 <I2C_WaitOnFlagUntilTimeout>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d10e      	bne.n	8008402 <HAL_I2C_IsDeviceReady+0x14a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	2320      	movs	r3, #32
 80083e8:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80083ea:	2241      	movs	r2, #65	@ 0x41
 80083ec:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(hi2c);
 80083ee:	3320      	adds	r3, #32
 80083f0:	2200      	movs	r2, #0
 80083f2:	54fa      	strb	r2, [r7, r3]
        return HAL_OK;
 80083f4:	e7c4      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
    return HAL_BUSY;
 80083f6:	2002      	movs	r0, #2
 80083f8:	e7c2      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
      return HAL_BUSY;
 80083fa:	2002      	movs	r0, #2
 80083fc:	e7c0      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
    __HAL_LOCK(hi2c);
 80083fe:	2002      	movs	r0, #2
 8008400:	e7be      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
          return HAL_ERROR;
 8008402:	2001      	movs	r0, #1
 8008404:	e7bc      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
          return HAL_ERROR;
 8008406:	2001      	movs	r0, #1
 8008408:	e7ba      	b.n	8008380 <HAL_I2C_IsDeviceReady+0xc8>
 800840a:	46c0      	nop			@ (mov r8, r8)
 800840c:	02002800 	.word	0x02002800
 8008410:	02002000 	.word	0x02002000

08008414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008414:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008416:	2341      	movs	r3, #65	@ 0x41
 8008418:	5cc3      	ldrb	r3, [r0, r3]
 800841a:	2b20      	cmp	r3, #32
 800841c:	d120      	bne.n	8008460 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841e:	3320      	adds	r3, #32
 8008420:	5cc3      	ldrb	r3, [r0, r3]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d01e      	beq.n	8008464 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8008426:	2440      	movs	r4, #64	@ 0x40
 8008428:	2201      	movs	r2, #1
 800842a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800842c:	2541      	movs	r5, #65	@ 0x41
 800842e:	2324      	movs	r3, #36	@ 0x24
 8008430:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008432:	6806      	ldr	r6, [r0, #0]
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	4393      	bics	r3, r2
 8008438:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800843a:	6806      	ldr	r6, [r0, #0]
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	4f0a      	ldr	r7, [pc, #40]	@ (8008468 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8008440:	403b      	ands	r3, r7
 8008442:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008444:	6806      	ldr	r6, [r0, #0]
 8008446:	6833      	ldr	r3, [r6, #0]
 8008448:	430b      	orrs	r3, r1
 800844a:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800844c:	6801      	ldr	r1, [r0, #0]
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	4313      	orrs	r3, r2
 8008452:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008454:	2320      	movs	r3, #32
 8008456:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008458:	2300      	movs	r3, #0
 800845a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800845c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008460:	2002      	movs	r0, #2
 8008462:	e7fc      	b.n	800845e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8008464:	2002      	movs	r0, #2
 8008466:	e7fa      	b.n	800845e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8008468:	ffffefff 	.word	0xffffefff

0800846c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800846c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800846e:	2341      	movs	r3, #65	@ 0x41
 8008470:	5cc3      	ldrb	r3, [r0, r3]
 8008472:	2b20      	cmp	r3, #32
 8008474:	d11e      	bne.n	80084b4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008476:	3320      	adds	r3, #32
 8008478:	5cc3      	ldrb	r3, [r0, r3]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d01c      	beq.n	80084b8 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800847e:	2440      	movs	r4, #64	@ 0x40
 8008480:	2201      	movs	r2, #1
 8008482:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008484:	2541      	movs	r5, #65	@ 0x41
 8008486:	2324      	movs	r3, #36	@ 0x24
 8008488:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800848a:	6806      	ldr	r6, [r0, #0]
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	4393      	bics	r3, r2
 8008490:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008492:	6806      	ldr	r6, [r0, #0]
 8008494:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008496:	4f09      	ldr	r7, [pc, #36]	@ (80084bc <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8008498:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800849a:	0209      	lsls	r1, r1, #8
 800849c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800849e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084a0:	6801      	ldr	r1, [r0, #0]
 80084a2:	680b      	ldr	r3, [r1, #0]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084a8:	2320      	movs	r3, #32
 80084aa:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ac:	2300      	movs	r3, #0
 80084ae:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80084b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80084b4:	2002      	movs	r0, #2
 80084b6:	e7fc      	b.n	80084b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80084b8:	2002      	movs	r0, #2
 80084ba:	e7fa      	b.n	80084b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80084bc:	fffff0ff 	.word	0xfffff0ff

080084c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084c0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80084c2:	4a10      	ldr	r2, [pc, #64]	@ (8008504 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80084c4:	6813      	ldr	r3, [r2, #0]
 80084c6:	4910      	ldr	r1, [pc, #64]	@ (8008508 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80084c8:	400b      	ands	r3, r1
 80084ca:	4303      	orrs	r3, r0
 80084cc:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084ce:	2380      	movs	r3, #128	@ 0x80
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4298      	cmp	r0, r3
 80084d4:	d001      	beq.n	80084da <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80084d6:	2000      	movs	r0, #0
}
 80084d8:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80084da:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	0058      	lsls	r0, r3, #1
 80084e0:	18c0      	adds	r0, r0, r3
 80084e2:	0040      	lsls	r0, r0, #1
 80084e4:	490a      	ldr	r1, [pc, #40]	@ (8008510 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80084e6:	f7f9 fe0f 	bl	8002108 <__udivsi3>
 80084ea:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	055b      	lsls	r3, r3, #21
 80084f2:	d503      	bpl.n	80084fc <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d003      	beq.n	8008500 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80084f8:	3801      	subs	r0, #1
 80084fa:	e7f7      	b.n	80084ec <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7eb      	b.n	80084d8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8008500:	2003      	movs	r0, #3
 8008502:	e7e9      	b.n	80084d8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8008504:	40007000 	.word	0x40007000
 8008508:	fffff9ff 	.word	0xfffff9ff
 800850c:	200000dc 	.word	0x200000dc
 8008510:	000f4240 	.word	0x000f4240

08008514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800851a:	d100      	bne.n	800851e <HAL_RCC_OscConfig+0xa>
 800851c:	e231      	b.n	8008982 <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800851e:	6803      	ldr	r3, [r0, #0]
 8008520:	07db      	lsls	r3, r3, #31
 8008522:	d539      	bpl.n	8008598 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008524:	4ac1      	ldr	r2, [pc, #772]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008526:	6891      	ldr	r1, [r2, #8]
 8008528:	2338      	movs	r3, #56	@ 0x38
 800852a:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800852c:	68d1      	ldr	r1, [r2, #12]
 800852e:	2203      	movs	r2, #3
 8008530:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008532:	2b10      	cmp	r3, #16
 8008534:	d026      	beq.n	8008584 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008536:	2b08      	cmp	r3, #8
 8008538:	d026      	beq.n	8008588 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800853a:	6863      	ldr	r3, [r4, #4]
 800853c:	2280      	movs	r2, #128	@ 0x80
 800853e:	0252      	lsls	r2, r2, #9
 8008540:	4293      	cmp	r3, r2
 8008542:	d07f      	beq.n	8008644 <HAL_RCC_OscConfig+0x130>
 8008544:	22a0      	movs	r2, #160	@ 0xa0
 8008546:	02d2      	lsls	r2, r2, #11
 8008548:	4293      	cmp	r3, r2
 800854a:	d100      	bne.n	800854e <HAL_RCC_OscConfig+0x3a>
 800854c:	e081      	b.n	8008652 <HAL_RCC_OscConfig+0x13e>
 800854e:	4bb7      	ldr	r3, [pc, #732]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	49b7      	ldr	r1, [pc, #732]	@ (8008830 <HAL_RCC_OscConfig+0x31c>)
 8008554:	400a      	ands	r2, r1
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	49b6      	ldr	r1, [pc, #728]	@ (8008834 <HAL_RCC_OscConfig+0x320>)
 800855c:	400a      	ands	r2, r1
 800855e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008560:	6863      	ldr	r3, [r4, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d100      	bne.n	8008568 <HAL_RCC_OscConfig+0x54>
 8008566:	e080      	b.n	800866a <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fd fef8 	bl	800635c <HAL_GetTick>
 800856c:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800856e:	4baf      	ldr	r3, [pc, #700]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	039b      	lsls	r3, r3, #14
 8008574:	d410      	bmi.n	8008598 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008576:	f7fd fef1 	bl	800635c <HAL_GetTick>
 800857a:	1b40      	subs	r0, r0, r5
 800857c:	2864      	cmp	r0, #100	@ 0x64
 800857e:	d9f6      	bls.n	800856e <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8008580:	2003      	movs	r0, #3
 8008582:	e1ff      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008584:	2a03      	cmp	r2, #3
 8008586:	d1d6      	bne.n	8008536 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008588:	4ba8      	ldr	r3, [pc, #672]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	039b      	lsls	r3, r3, #14
 800858e:	d503      	bpl.n	8008598 <HAL_RCC_OscConfig+0x84>
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d100      	bne.n	8008598 <HAL_RCC_OscConfig+0x84>
 8008596:	e1f7      	b.n	8008988 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	079b      	lsls	r3, r3, #30
 800859c:	d531      	bpl.n	8008602 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859e:	4aa3      	ldr	r2, [pc, #652]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80085a0:	6891      	ldr	r1, [r2, #8]
 80085a2:	2338      	movs	r3, #56	@ 0x38
 80085a4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085a6:	68d1      	ldr	r1, [r2, #12]
 80085a8:	2203      	movs	r2, #3
 80085aa:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	d06a      	beq.n	8008686 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d16b      	bne.n	800868c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085b4:	4a9d      	ldr	r2, [pc, #628]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	0552      	lsls	r2, r2, #21
 80085ba:	d503      	bpl.n	80085c4 <HAL_RCC_OscConfig+0xb0>
 80085bc:	68e2      	ldr	r2, [r4, #12]
 80085be:	2a00      	cmp	r2, #0
 80085c0:	d100      	bne.n	80085c4 <HAL_RCC_OscConfig+0xb0>
 80085c2:	e1e3      	b.n	800898c <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085c4:	4899      	ldr	r0, [pc, #612]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80085c6:	6842      	ldr	r2, [r0, #4]
 80085c8:	499b      	ldr	r1, [pc, #620]	@ (8008838 <HAL_RCC_OscConfig+0x324>)
 80085ca:	400a      	ands	r2, r1
 80085cc:	6961      	ldr	r1, [r4, #20]
 80085ce:	0209      	lsls	r1, r1, #8
 80085d0:	430a      	orrs	r2, r1
 80085d2:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10d      	bne.n	80085f4 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80085d8:	6803      	ldr	r3, [r0, #0]
 80085da:	4998      	ldr	r1, [pc, #608]	@ (800883c <HAL_RCC_OscConfig+0x328>)
 80085dc:	400b      	ands	r3, r1
 80085de:	6921      	ldr	r1, [r4, #16]
 80085e0:	430b      	orrs	r3, r1
 80085e2:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80085e4:	6803      	ldr	r3, [r0, #0]
 80085e6:	0adb      	lsrs	r3, r3, #11
 80085e8:	2207      	movs	r2, #7
 80085ea:	401a      	ands	r2, r3
 80085ec:	4b94      	ldr	r3, [pc, #592]	@ (8008840 <HAL_RCC_OscConfig+0x32c>)
 80085ee:	40d3      	lsrs	r3, r2
 80085f0:	4a94      	ldr	r2, [pc, #592]	@ (8008844 <HAL_RCC_OscConfig+0x330>)
 80085f2:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80085f4:	4b94      	ldr	r3, [pc, #592]	@ (8008848 <HAL_RCC_OscConfig+0x334>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	f7fd fe64 	bl	80062c4 <HAL_InitTick>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d000      	beq.n	8008602 <HAL_RCC_OscConfig+0xee>
 8008600:	e1c6      	b.n	8008990 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	071b      	lsls	r3, r3, #28
 8008606:	d400      	bmi.n	800860a <HAL_RCC_OscConfig+0xf6>
 8008608:	e081      	b.n	800870e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800860a:	4b88      	ldr	r3, [pc, #544]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	2338      	movs	r3, #56	@ 0x38
 8008610:	4013      	ands	r3, r2
 8008612:	2b18      	cmp	r3, #24
 8008614:	d073      	beq.n	80086fe <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008616:	69a3      	ldr	r3, [r4, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d100      	bne.n	800861e <HAL_RCC_OscConfig+0x10a>
 800861c:	e0b4      	b.n	8008788 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800861e:	4a83      	ldr	r2, [pc, #524]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008620:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8008622:	2101      	movs	r1, #1
 8008624:	430b      	orrs	r3, r1
 8008626:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7fd fe98 	bl	800635c <HAL_GetTick>
 800862c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800862e:	4b7f      	ldr	r3, [pc, #508]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008632:	079b      	lsls	r3, r3, #30
 8008634:	d46b      	bmi.n	800870e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008636:	f7fd fe91 	bl	800635c <HAL_GetTick>
 800863a:	1b40      	subs	r0, r0, r5
 800863c:	2802      	cmp	r0, #2
 800863e:	d9f6      	bls.n	800862e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8008640:	2003      	movs	r0, #3
 8008642:	e19f      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008644:	4a79      	ldr	r2, [pc, #484]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008646:	6811      	ldr	r1, [r2, #0]
 8008648:	2380      	movs	r3, #128	@ 0x80
 800864a:	025b      	lsls	r3, r3, #9
 800864c:	430b      	orrs	r3, r1
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e786      	b.n	8008560 <HAL_RCC_OscConfig+0x4c>
 8008652:	4b76      	ldr	r3, [pc, #472]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008654:	6819      	ldr	r1, [r3, #0]
 8008656:	2280      	movs	r2, #128	@ 0x80
 8008658:	02d2      	lsls	r2, r2, #11
 800865a:	430a      	orrs	r2, r1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	2280      	movs	r2, #128	@ 0x80
 8008662:	0252      	lsls	r2, r2, #9
 8008664:	430a      	orrs	r2, r1
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	e77a      	b.n	8008560 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800866a:	f7fd fe77 	bl	800635c <HAL_GetTick>
 800866e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008670:	4b6e      	ldr	r3, [pc, #440]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	039b      	lsls	r3, r3, #14
 8008676:	d58f      	bpl.n	8008598 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008678:	f7fd fe70 	bl	800635c <HAL_GetTick>
 800867c:	1b40      	subs	r0, r0, r5
 800867e:	2864      	cmp	r0, #100	@ 0x64
 8008680:	d9f6      	bls.n	8008670 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8008682:	2003      	movs	r0, #3
 8008684:	e17e      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008686:	2a02      	cmp	r2, #2
 8008688:	d192      	bne.n	80085b0 <HAL_RCC_OscConfig+0x9c>
 800868a:	e793      	b.n	80085b4 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800868c:	68e3      	ldr	r3, [r4, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d022      	beq.n	80086d8 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008692:	4a66      	ldr	r2, [pc, #408]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	4969      	ldr	r1, [pc, #420]	@ (800883c <HAL_RCC_OscConfig+0x328>)
 8008698:	400b      	ands	r3, r1
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	430b      	orrs	r3, r1
 800869e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80086a0:	6811      	ldr	r1, [r2, #0]
 80086a2:	2380      	movs	r3, #128	@ 0x80
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80086aa:	f7fd fe57 	bl	800635c <HAL_GetTick>
 80086ae:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086b0:	4b5e      	ldr	r3, [pc, #376]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	055b      	lsls	r3, r3, #21
 80086b6:	d406      	bmi.n	80086c6 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086b8:	f7fd fe50 	bl	800635c <HAL_GetTick>
 80086bc:	1b40      	subs	r0, r0, r5
 80086be:	2802      	cmp	r0, #2
 80086c0:	d9f6      	bls.n	80086b0 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 80086c2:	2003      	movs	r0, #3
 80086c4:	e15e      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086c6:	4959      	ldr	r1, [pc, #356]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80086c8:	684b      	ldr	r3, [r1, #4]
 80086ca:	4a5b      	ldr	r2, [pc, #364]	@ (8008838 <HAL_RCC_OscConfig+0x324>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	6962      	ldr	r2, [r4, #20]
 80086d0:	0212      	lsls	r2, r2, #8
 80086d2:	4313      	orrs	r3, r2
 80086d4:	604b      	str	r3, [r1, #4]
 80086d6:	e794      	b.n	8008602 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80086d8:	4a54      	ldr	r2, [pc, #336]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	495b      	ldr	r1, [pc, #364]	@ (800884c <HAL_RCC_OscConfig+0x338>)
 80086de:	400b      	ands	r3, r1
 80086e0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80086e2:	f7fd fe3b 	bl	800635c <HAL_GetTick>
 80086e6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086e8:	4b50      	ldr	r3, [pc, #320]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	055b      	lsls	r3, r3, #21
 80086ee:	d588      	bpl.n	8008602 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f0:	f7fd fe34 	bl	800635c <HAL_GetTick>
 80086f4:	1b40      	subs	r0, r0, r5
 80086f6:	2802      	cmp	r0, #2
 80086f8:	d9f6      	bls.n	80086e8 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 80086fa:	2003      	movs	r0, #3
 80086fc:	e142      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80086fe:	4b4b      	ldr	r3, [pc, #300]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008702:	079b      	lsls	r3, r3, #30
 8008704:	d503      	bpl.n	800870e <HAL_RCC_OscConfig+0x1fa>
 8008706:	69a3      	ldr	r3, [r4, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d100      	bne.n	800870e <HAL_RCC_OscConfig+0x1fa>
 800870c:	e142      	b.n	8008994 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	075b      	lsls	r3, r3, #29
 8008712:	d400      	bmi.n	8008716 <HAL_RCC_OscConfig+0x202>
 8008714:	e0a2      	b.n	800885c <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008716:	4b45      	ldr	r3, [pc, #276]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	2338      	movs	r3, #56	@ 0x38
 800871c:	4013      	ands	r3, r2
 800871e:	2b20      	cmp	r3, #32
 8008720:	d045      	beq.n	80087ae <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008722:	4b42      	ldr	r3, [pc, #264]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	d44a      	bmi.n	80087c0 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800872a:	4b40      	ldr	r3, [pc, #256]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 800872c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800872e:	2180      	movs	r1, #128	@ 0x80
 8008730:	0549      	lsls	r1, r1, #21
 8008732:	430a      	orrs	r2, r1
 8008734:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008738:	400b      	ands	r3, r1
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800873e:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008740:	4b43      	ldr	r3, [pc, #268]	@ (8008850 <HAL_RCC_OscConfig+0x33c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	05db      	lsls	r3, r3, #23
 8008746:	d53d      	bpl.n	80087c4 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d04e      	beq.n	80087ec <HAL_RCC_OscConfig+0x2d8>
 800874e:	2b05      	cmp	r3, #5
 8008750:	d052      	beq.n	80087f8 <HAL_RCC_OscConfig+0x2e4>
 8008752:	4b36      	ldr	r3, [pc, #216]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008756:	2101      	movs	r1, #1
 8008758:	438a      	bics	r2, r1
 800875a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800875c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800875e:	3103      	adds	r1, #3
 8008760:	438a      	bics	r2, r1
 8008762:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d050      	beq.n	800880c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876a:	f7fd fdf7 	bl	800635c <HAL_GetTick>
 800876e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008770:	4b2e      	ldr	r3, [pc, #184]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008774:	079b      	lsls	r3, r3, #30
 8008776:	d46f      	bmi.n	8008858 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008778:	f7fd fdf0 	bl	800635c <HAL_GetTick>
 800877c:	1b80      	subs	r0, r0, r6
 800877e:	4b35      	ldr	r3, [pc, #212]	@ (8008854 <HAL_RCC_OscConfig+0x340>)
 8008780:	4298      	cmp	r0, r3
 8008782:	d9f5      	bls.n	8008770 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8008784:	2003      	movs	r0, #3
 8008786:	e0fd      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8008788:	4a28      	ldr	r2, [pc, #160]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 800878a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800878c:	2101      	movs	r1, #1
 800878e:	438b      	bics	r3, r1
 8008790:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008792:	f7fd fde3 	bl	800635c <HAL_GetTick>
 8008796:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008798:	4b24      	ldr	r3, [pc, #144]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 800879a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879c:	079b      	lsls	r3, r3, #30
 800879e:	d5b6      	bpl.n	800870e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a0:	f7fd fddc 	bl	800635c <HAL_GetTick>
 80087a4:	1b40      	subs	r0, r0, r5
 80087a6:	2802      	cmp	r0, #2
 80087a8:	d9f6      	bls.n	8008798 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 80087aa:	2003      	movs	r0, #3
 80087ac:	e0ea      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80087ae:	4b1f      	ldr	r3, [pc, #124]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80087b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087b2:	079b      	lsls	r3, r3, #30
 80087b4:	d552      	bpl.n	800885c <HAL_RCC_OscConfig+0x348>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d14f      	bne.n	800885c <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 80087bc:	2001      	movs	r0, #1
 80087be:	e0e1      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 80087c0:	2500      	movs	r5, #0
 80087c2:	e7bd      	b.n	8008740 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087c4:	4a22      	ldr	r2, [pc, #136]	@ (8008850 <HAL_RCC_OscConfig+0x33c>)
 80087c6:	6811      	ldr	r1, [r2, #0]
 80087c8:	2380      	movs	r3, #128	@ 0x80
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	430b      	orrs	r3, r1
 80087ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80087d0:	f7fd fdc4 	bl	800635c <HAL_GetTick>
 80087d4:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008850 <HAL_RCC_OscConfig+0x33c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	05db      	lsls	r3, r3, #23
 80087dc:	d4b4      	bmi.n	8008748 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087de:	f7fd fdbd 	bl	800635c <HAL_GetTick>
 80087e2:	1b80      	subs	r0, r0, r6
 80087e4:	2802      	cmp	r0, #2
 80087e6:	d9f6      	bls.n	80087d6 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 80087e8:	2003      	movs	r0, #3
 80087ea:	e0cb      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ec:	4a0f      	ldr	r2, [pc, #60]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80087ee:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80087f0:	2101      	movs	r1, #1
 80087f2:	430b      	orrs	r3, r1
 80087f4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80087f6:	e7b5      	b.n	8008764 <HAL_RCC_OscConfig+0x250>
 80087f8:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 80087fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087fc:	2104      	movs	r1, #4
 80087fe:	430a      	orrs	r2, r1
 8008800:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008804:	3903      	subs	r1, #3
 8008806:	430a      	orrs	r2, r1
 8008808:	65da      	str	r2, [r3, #92]	@ 0x5c
 800880a:	e7ab      	b.n	8008764 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fd fda6 	bl	800635c <HAL_GetTick>
 8008810:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008812:	4b06      	ldr	r3, [pc, #24]	@ (800882c <HAL_RCC_OscConfig+0x318>)
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	079b      	lsls	r3, r3, #30
 8008818:	d51e      	bpl.n	8008858 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800881a:	f7fd fd9f 	bl	800635c <HAL_GetTick>
 800881e:	1b80      	subs	r0, r0, r6
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <HAL_RCC_OscConfig+0x340>)
 8008822:	4298      	cmp	r0, r3
 8008824:	d9f5      	bls.n	8008812 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8008826:	2003      	movs	r0, #3
 8008828:	e0ac      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 800882a:	46c0      	nop			@ (mov r8, r8)
 800882c:	40021000 	.word	0x40021000
 8008830:	fffeffff 	.word	0xfffeffff
 8008834:	fffbffff 	.word	0xfffbffff
 8008838:	ffff80ff 	.word	0xffff80ff
 800883c:	ffffc7ff 	.word	0xffffc7ff
 8008840:	00f42400 	.word	0x00f42400
 8008844:	200000dc 	.word	0x200000dc
 8008848:	200000e4 	.word	0x200000e4
 800884c:	fffffeff 	.word	0xfffffeff
 8008850:	40007000 	.word	0x40007000
 8008854:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008858:	2d01      	cmp	r5, #1
 800885a:	d01e      	beq.n	800889a <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800885c:	69e3      	ldr	r3, [r4, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d100      	bne.n	8008864 <HAL_RCC_OscConfig+0x350>
 8008862:	e099      	b.n	8008998 <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008864:	4a54      	ldr	r2, [pc, #336]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 8008866:	6891      	ldr	r1, [r2, #8]
 8008868:	2238      	movs	r2, #56	@ 0x38
 800886a:	400a      	ands	r2, r1
 800886c:	2a10      	cmp	r2, #16
 800886e:	d060      	beq.n	8008932 <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008870:	2b02      	cmp	r3, #2
 8008872:	d018      	beq.n	80088a6 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008874:	4a50      	ldr	r2, [pc, #320]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	4950      	ldr	r1, [pc, #320]	@ (80089bc <HAL_RCC_OscConfig+0x4a8>)
 800887a:	400b      	ands	r3, r1
 800887c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887e:	f7fd fd6d 	bl	800635c <HAL_GetTick>
 8008882:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008884:	4b4c      	ldr	r3, [pc, #304]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	019b      	lsls	r3, r3, #6
 800888a:	d54b      	bpl.n	8008924 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800888c:	f7fd fd66 	bl	800635c <HAL_GetTick>
 8008890:	1b00      	subs	r0, r0, r4
 8008892:	2802      	cmp	r0, #2
 8008894:	d9f6      	bls.n	8008884 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008896:	2003      	movs	r0, #3
 8008898:	e074      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 800889a:	4a47      	ldr	r2, [pc, #284]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 800889c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800889e:	4948      	ldr	r1, [pc, #288]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80088a0:	400b      	ands	r3, r1
 80088a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80088a4:	e7da      	b.n	800885c <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 80088a6:	4a44      	ldr	r2, [pc, #272]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 80088a8:	6813      	ldr	r3, [r2, #0]
 80088aa:	4944      	ldr	r1, [pc, #272]	@ (80089bc <HAL_RCC_OscConfig+0x4a8>)
 80088ac:	400b      	ands	r3, r1
 80088ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80088b0:	f7fd fd54 	bl	800635c <HAL_GetTick>
 80088b4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088b6:	4b40      	ldr	r3, [pc, #256]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	019b      	lsls	r3, r3, #6
 80088bc:	d506      	bpl.n	80088cc <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088be:	f7fd fd4d 	bl	800635c <HAL_GetTick>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	2802      	cmp	r0, #2
 80088c6:	d9f6      	bls.n	80088b6 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 80088c8:	2003      	movs	r0, #3
 80088ca:	e05b      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088cc:	4a3a      	ldr	r2, [pc, #232]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 80088ce:	68d3      	ldr	r3, [r2, #12]
 80088d0:	493c      	ldr	r1, [pc, #240]	@ (80089c4 <HAL_RCC_OscConfig+0x4b0>)
 80088d2:	4019      	ands	r1, r3
 80088d4:	6a23      	ldr	r3, [r4, #32]
 80088d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80088d8:	4303      	orrs	r3, r0
 80088da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80088dc:	0200      	lsls	r0, r0, #8
 80088de:	4303      	orrs	r3, r0
 80088e0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80088e2:	4303      	orrs	r3, r0
 80088e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80088e6:	4303      	orrs	r3, r0
 80088e8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80088ea:	4303      	orrs	r3, r0
 80088ec:	430b      	orrs	r3, r1
 80088ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80088f0:	6811      	ldr	r1, [r2, #0]
 80088f2:	2380      	movs	r3, #128	@ 0x80
 80088f4:	045b      	lsls	r3, r3, #17
 80088f6:	430b      	orrs	r3, r1
 80088f8:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80088fa:	68d1      	ldr	r1, [r2, #12]
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	055b      	lsls	r3, r3, #21
 8008900:	430b      	orrs	r3, r1
 8008902:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008904:	f7fd fd2a 	bl	800635c <HAL_GetTick>
 8008908:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800890a:	4b2b      	ldr	r3, [pc, #172]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	019b      	lsls	r3, r3, #6
 8008910:	d406      	bmi.n	8008920 <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008912:	f7fd fd23 	bl	800635c <HAL_GetTick>
 8008916:	1b00      	subs	r0, r0, r4
 8008918:	2802      	cmp	r0, #2
 800891a:	d9f6      	bls.n	800890a <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 800891c:	2003      	movs	r0, #3
 800891e:	e031      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008920:	2000      	movs	r0, #0
 8008922:	e02f      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008924:	4a24      	ldr	r2, [pc, #144]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 8008926:	68d3      	ldr	r3, [r2, #12]
 8008928:	4927      	ldr	r1, [pc, #156]	@ (80089c8 <HAL_RCC_OscConfig+0x4b4>)
 800892a:	400b      	ands	r3, r1
 800892c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800892e:	2000      	movs	r0, #0
 8008930:	e028      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008932:	2b01      	cmp	r3, #1
 8008934:	d032      	beq.n	800899c <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 8008936:	4b20      	ldr	r3, [pc, #128]	@ (80089b8 <HAL_RCC_OscConfig+0x4a4>)
 8008938:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893a:	2303      	movs	r3, #3
 800893c:	4013      	ands	r3, r2
 800893e:	6a21      	ldr	r1, [r4, #32]
 8008940:	428b      	cmp	r3, r1
 8008942:	d12d      	bne.n	80089a0 <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008944:	2370      	movs	r3, #112	@ 0x70
 8008946:	4013      	ands	r3, r2
 8008948:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	428b      	cmp	r3, r1
 800894c:	d12a      	bne.n	80089a4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800894e:	21fe      	movs	r1, #254	@ 0xfe
 8008950:	01c9      	lsls	r1, r1, #7
 8008952:	4011      	ands	r1, r2
 8008954:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008956:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008958:	4299      	cmp	r1, r3
 800895a:	d125      	bne.n	80089a8 <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800895c:	23f8      	movs	r3, #248	@ 0xf8
 800895e:	039b      	lsls	r3, r3, #14
 8008960:	4013      	ands	r3, r2
 8008962:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008964:	428b      	cmp	r3, r1
 8008966:	d121      	bne.n	80089ac <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008968:	23e0      	movs	r3, #224	@ 0xe0
 800896a:	051b      	lsls	r3, r3, #20
 800896c:	4013      	ands	r3, r2
 800896e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008970:	428b      	cmp	r3, r1
 8008972:	d11d      	bne.n	80089b0 <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008974:	0f52      	lsrs	r2, r2, #29
 8008976:	0752      	lsls	r2, r2, #29
 8008978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800897a:	429a      	cmp	r2, r3
 800897c:	d11a      	bne.n	80089b4 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 800897e:	2000      	movs	r0, #0
 8008980:	e000      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 8008982:	2001      	movs	r0, #1
}
 8008984:	b002      	add	sp, #8
 8008986:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008988:	2001      	movs	r0, #1
 800898a:	e7fb      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 800898c:	2001      	movs	r0, #1
 800898e:	e7f9      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8008990:	2001      	movs	r0, #1
 8008992:	e7f7      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8008994:	2001      	movs	r0, #1
 8008996:	e7f5      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8008998:	2000      	movs	r0, #0
 800899a:	e7f3      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 800899c:	2001      	movs	r0, #1
 800899e:	e7f1      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 80089a0:	2001      	movs	r0, #1
 80089a2:	e7ef      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089a4:	2001      	movs	r0, #1
 80089a6:	e7ed      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089a8:	2001      	movs	r0, #1
 80089aa:	e7eb      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089ac:	2001      	movs	r0, #1
 80089ae:	e7e9      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089b0:	2001      	movs	r0, #1
 80089b2:	e7e7      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089b4:	2001      	movs	r0, #1
 80089b6:	e7e5      	b.n	8008984 <HAL_RCC_OscConfig+0x470>
 80089b8:	40021000 	.word	0x40021000
 80089bc:	feffffff 	.word	0xfeffffff
 80089c0:	efffffff 	.word	0xefffffff
 80089c4:	11c1808c 	.word	0x11c1808c
 80089c8:	eefefffc 	.word	0xeefefffc

080089cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089cc:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2238      	movs	r2, #56	@ 0x38
 80089d4:	421a      	tst	r2, r3
 80089d6:	d107      	bne.n	80089e8 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80089d8:	4b27      	ldr	r3, [pc, #156]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	0ad2      	lsrs	r2, r2, #11
 80089de:	2307      	movs	r3, #7
 80089e0:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80089e2:	4826      	ldr	r0, [pc, #152]	@ (8008a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 80089e4:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80089e6:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80089e8:	4b23      	ldr	r3, [pc, #140]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	2338      	movs	r3, #56	@ 0x38
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d03b      	beq.n	8008a6c <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089f4:	4b20      	ldr	r3, [pc, #128]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	2338      	movs	r3, #56	@ 0x38
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b10      	cmp	r3, #16
 80089fe:	d00d      	beq.n	8008a1c <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008a00:	4b1d      	ldr	r3, [pc, #116]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	2338      	movs	r3, #56	@ 0x38
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d031      	beq.n	8008a70 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	2338      	movs	r3, #56	@ 0x38
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b18      	cmp	r3, #24
 8008a16:	d026      	beq.n	8008a66 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8008a18:	2000      	movs	r0, #0
  return sysclockfreq;
 8008a1a:	e7e4      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008a1c:	4a16      	ldr	r2, [pc, #88]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a1e:	68d1      	ldr	r1, [r2, #12]
 8008a20:	3b0d      	subs	r3, #13
 8008a22:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a24:	68d2      	ldr	r2, [r2, #12]
 8008a26:	0912      	lsrs	r2, r2, #4
 8008a28:	2107      	movs	r1, #7
 8008a2a:	4011      	ands	r1, r2
 8008a2c:	3101      	adds	r1, #1
    switch (pllsource)
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d00f      	beq.n	8008a52 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008a32:	4812      	ldr	r0, [pc, #72]	@ (8008a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008a34:	f7f9 fb68 	bl	8002108 <__udivsi3>
 8008a38:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	0a12      	lsrs	r2, r2, #8
 8008a3e:	237f      	movs	r3, #127	@ 0x7f
 8008a40:	4013      	ands	r3, r2
 8008a42:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a46:	68d9      	ldr	r1, [r3, #12]
 8008a48:	0f49      	lsrs	r1, r1, #29
 8008a4a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8008a4c:	f7f9 fb5c 	bl	8002108 <__udivsi3>
 8008a50:	e7c9      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a52:	480b      	ldr	r0, [pc, #44]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008a54:	f7f9 fb58 	bl	8002108 <__udivsi3>
 8008a58:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xac>)
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	0a12      	lsrs	r2, r2, #8
 8008a5e:	237f      	movs	r3, #127	@ 0x7f
 8008a60:	4013      	ands	r3, r2
 8008a62:	4358      	muls	r0, r3
        break;
 8008a64:	e7ee      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8008a66:	20fa      	movs	r0, #250	@ 0xfa
 8008a68:	01c0      	lsls	r0, r0, #7
 8008a6a:	e7bc      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8008a6c:	4804      	ldr	r0, [pc, #16]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008a6e:	e7ba      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8008a70:	2080      	movs	r0, #128	@ 0x80
 8008a72:	0200      	lsls	r0, r0, #8
 8008a74:	e7b7      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x1a>
 8008a76:	46c0      	nop			@ (mov r8, r8)
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	007a1200 	.word	0x007a1200

08008a84 <HAL_RCC_ClockConfig>:
{
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	0004      	movs	r4, r0
 8008a88:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d100      	bne.n	8008a90 <HAL_RCC_ClockConfig+0xc>
 8008a8e:	e0aa      	b.n	8008be6 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a90:	4b57      	ldr	r3, [pc, #348]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	2307      	movs	r3, #7
 8008a96:	4013      	ands	r3, r2
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	d321      	bcc.n	8008ae0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	079a      	lsls	r2, r3, #30
 8008aa0:	d50e      	bpl.n	8008ac0 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa2:	075b      	lsls	r3, r3, #29
 8008aa4:	d505      	bpl.n	8008ab2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008aa6:	4a53      	ldr	r2, [pc, #332]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008aa8:	6891      	ldr	r1, [r2, #8]
 8008aaa:	23e0      	movs	r3, #224	@ 0xe0
 8008aac:	01db      	lsls	r3, r3, #7
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab2:	4a50      	ldr	r2, [pc, #320]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008ab4:	6893      	ldr	r3, [r2, #8]
 8008ab6:	4950      	ldr	r1, [pc, #320]	@ (8008bf8 <HAL_RCC_ClockConfig+0x174>)
 8008ab8:	400b      	ands	r3, r1
 8008aba:	68a1      	ldr	r1, [r4, #8]
 8008abc:	430b      	orrs	r3, r1
 8008abe:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	07db      	lsls	r3, r3, #31
 8008ac4:	d554      	bpl.n	8008b70 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d020      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d03b      	beq.n	8008b48 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d13f      	bne.n	8008b54 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ad4:	4a47      	ldr	r2, [pc, #284]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008ad6:	6812      	ldr	r2, [r2, #0]
 8008ad8:	0552      	lsls	r2, r2, #21
 8008ada:	d41c      	bmi.n	8008b16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8008adc:	2001      	movs	r0, #1
 8008ade:	e06a      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae0:	4a43      	ldr	r2, [pc, #268]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	2107      	movs	r1, #7
 8008ae6:	438b      	bics	r3, r1
 8008ae8:	432b      	orrs	r3, r5
 8008aea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008aec:	f7fd fc36 	bl	800635c <HAL_GetTick>
 8008af0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008af2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	2307      	movs	r3, #7
 8008af8:	4013      	ands	r3, r2
 8008afa:	42ab      	cmp	r3, r5
 8008afc:	d0ce      	beq.n	8008a9c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008afe:	f7fd fc2d 	bl	800635c <HAL_GetTick>
 8008b02:	1b80      	subs	r0, r0, r6
 8008b04:	4a3d      	ldr	r2, [pc, #244]	@ (8008bfc <HAL_RCC_ClockConfig+0x178>)
 8008b06:	4290      	cmp	r0, r2
 8008b08:	d9f3      	bls.n	8008af2 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8008b0a:	2003      	movs	r0, #3
 8008b0c:	e053      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b0e:	4a39      	ldr	r2, [pc, #228]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b10:	6812      	ldr	r2, [r2, #0]
 8008b12:	0392      	lsls	r2, r2, #14
 8008b14:	d569      	bpl.n	8008bea <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b16:	4937      	ldr	r1, [pc, #220]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b18:	688a      	ldr	r2, [r1, #8]
 8008b1a:	2007      	movs	r0, #7
 8008b1c:	4382      	bics	r2, r0
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008b22:	f7fd fc1b 	bl	800635c <HAL_GetTick>
 8008b26:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b28:	4b32      	ldr	r3, [pc, #200]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	2238      	movs	r2, #56	@ 0x38
 8008b2e:	401a      	ands	r2, r3
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d01b      	beq.n	8008b70 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b38:	f7fd fc10 	bl	800635c <HAL_GetTick>
 8008b3c:	1b80      	subs	r0, r0, r6
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008bfc <HAL_RCC_ClockConfig+0x178>)
 8008b40:	4298      	cmp	r0, r3
 8008b42:	d9f1      	bls.n	8008b28 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8008b44:	2003      	movs	r0, #3
 8008b46:	e036      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b48:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	0192      	lsls	r2, r2, #6
 8008b4e:	d4e2      	bmi.n	8008b16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8008b50:	2001      	movs	r0, #1
 8008b52:	e030      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d005      	beq.n	8008b64 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b58:	4a26      	ldr	r2, [pc, #152]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b5c:	0792      	lsls	r2, r2, #30
 8008b5e:	d4da      	bmi.n	8008b16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8008b60:	2001      	movs	r0, #1
 8008b62:	e028      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b64:	4a23      	ldr	r2, [pc, #140]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b66:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8008b68:	0792      	lsls	r2, r2, #30
 8008b6a:	d4d4      	bmi.n	8008b16 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	e022      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b70:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	2307      	movs	r3, #7
 8008b76:	4013      	ands	r3, r2
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	d81d      	bhi.n	8008bb8 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	075b      	lsls	r3, r3, #29
 8008b80:	d506      	bpl.n	8008b90 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008b82:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b84:	6893      	ldr	r3, [r2, #8]
 8008b86:	491e      	ldr	r1, [pc, #120]	@ (8008c00 <HAL_RCC_ClockConfig+0x17c>)
 8008b88:	400b      	ands	r3, r1
 8008b8a:	68e1      	ldr	r1, [r4, #12]
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008b90:	f7ff ff1c 	bl	80089cc <HAL_RCC_GetSysClockFreq>
 8008b94:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <HAL_RCC_ClockConfig+0x170>)
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	0a12      	lsrs	r2, r2, #8
 8008b9a:	230f      	movs	r3, #15
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	4a19      	ldr	r2, [pc, #100]	@ (8008c04 <HAL_RCC_ClockConfig+0x180>)
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	589a      	ldr	r2, [r3, r2]
 8008ba4:	231f      	movs	r3, #31
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	40d8      	lsrs	r0, r3
 8008baa:	4b17      	ldr	r3, [pc, #92]	@ (8008c08 <HAL_RCC_ClockConfig+0x184>)
 8008bac:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8008bae:	4b17      	ldr	r3, [pc, #92]	@ (8008c0c <HAL_RCC_ClockConfig+0x188>)
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f7fd fb87 	bl	80062c4 <HAL_InitTick>
}
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008bba:	6813      	ldr	r3, [r2, #0]
 8008bbc:	2107      	movs	r1, #7
 8008bbe:	438b      	bics	r3, r1
 8008bc0:	432b      	orrs	r3, r5
 8008bc2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008bc4:	f7fd fbca 	bl	800635c <HAL_GetTick>
 8008bc8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bca:	4b09      	ldr	r3, [pc, #36]	@ (8008bf0 <HAL_RCC_ClockConfig+0x16c>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	2307      	movs	r3, #7
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	d0d2      	beq.n	8008b7c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd6:	f7fd fbc1 	bl	800635c <HAL_GetTick>
 8008bda:	1b80      	subs	r0, r0, r6
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <HAL_RCC_ClockConfig+0x178>)
 8008bde:	4298      	cmp	r0, r3
 8008be0:	d9f3      	bls.n	8008bca <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8008be2:	2003      	movs	r0, #3
 8008be4:	e7e7      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8008be6:	2001      	movs	r0, #1
 8008be8:	e7e5      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8008bea:	2001      	movs	r0, #1
 8008bec:	e7e3      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x132>
 8008bee:	46c0      	nop			@ (mov r8, r8)
 8008bf0:	40022000 	.word	0x40022000
 8008bf4:	40021000 	.word	0x40021000
 8008bf8:	fffff0ff 	.word	0xfffff0ff
 8008bfc:	00001388 	.word	0x00001388
 8008c00:	ffff8fff 	.word	0xffff8fff
 8008c04:	08009680 	.word	0x08009680
 8008c08:	200000dc 	.word	0x200000dc
 8008c0c:	200000e4 	.word	0x200000e4

08008c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b083      	sub	sp, #12
 8008c14:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c16:	6803      	ldr	r3, [r0, #0]
 8008c18:	039b      	lsls	r3, r3, #14
 8008c1a:	d562      	bpl.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	d41e      	bmi.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c24:	4b6b      	ldr	r3, [pc, #428]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c28:	2180      	movs	r1, #128	@ 0x80
 8008c2a:	0549      	lsls	r1, r1, #21
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c32:	400b      	ands	r3, r1
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008c38:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c3a:	4a67      	ldr	r2, [pc, #412]	@ (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	2380      	movs	r3, #128	@ 0x80
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	430b      	orrs	r3, r1
 8008c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c46:	f7fd fb89 	bl	800635c <HAL_GetTick>
 8008c4a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c4c:	4b62      	ldr	r3, [pc, #392]	@ (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	05db      	lsls	r3, r3, #23
 8008c52:	d408      	bmi.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c54:	f7fd fb82 	bl	800635c <HAL_GetTick>
 8008c58:	1b40      	subs	r0, r0, r5
 8008c5a:	2802      	cmp	r0, #2
 8008c5c:	d9f6      	bls.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 8008c5e:	2503      	movs	r5, #3
 8008c60:	e002      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 8008c62:	2600      	movs	r6, #0
 8008c64:	e7e9      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008c66:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	d123      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c6c:	4b59      	ldr	r3, [pc, #356]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c6e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8008c70:	22c0      	movs	r2, #192	@ 0xc0
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	000b      	movs	r3, r1
 8008c76:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c78:	4211      	tst	r1, r2
 8008c7a:	d010      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8008c7c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d00d      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c82:	4a54      	ldr	r2, [pc, #336]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c84:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8008c86:	4955      	ldr	r1, [pc, #340]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008c88:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c8a:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8008c8c:	2180      	movs	r1, #128	@ 0x80
 8008c8e:	0249      	lsls	r1, r1, #9
 8008c90:	4301      	orrs	r1, r0
 8008c92:	65d1      	str	r1, [r2, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c94:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8008c96:	4852      	ldr	r0, [pc, #328]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c98:	4001      	ands	r1, r0
 8008c9a:	65d1      	str	r1, [r2, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c9c:	65d3      	str	r3, [r2, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c9e:	07db      	lsls	r3, r3, #31
 8008ca0:	d410      	bmi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	d106      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ca8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8008caa:	494c      	ldr	r1, [pc, #304]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008cac:	400b      	ands	r3, r1
 8008cae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008cb4:	2e01      	cmp	r6, #1
 8008cb6:	d115      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cb8:	4a46      	ldr	r2, [pc, #280]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8008cbc:	4949      	ldr	r1, [pc, #292]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cbe:	400b      	ands	r3, r1
 8008cc0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008cc2:	e00f      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8008cc4:	f7fd fb4a 	bl	800635c <HAL_GetTick>
 8008cc8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cca:	4b42      	ldr	r3, [pc, #264]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cce:	079b      	lsls	r3, r3, #30
 8008cd0:	d4e7      	bmi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cd2:	f7fd fb43 	bl	800635c <HAL_GetTick>
 8008cd6:	1bc0      	subs	r0, r0, r7
 8008cd8:	4b43      	ldr	r3, [pc, #268]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008cda:	4298      	cmp	r0, r3
 8008cdc:	d9f5      	bls.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 8008cde:	2503      	movs	r5, #3
 8008ce0:	e7df      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ce2:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d506      	bpl.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cea:	4a3a      	ldr	r2, [pc, #232]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008cee:	2103      	movs	r1, #3
 8008cf0:	438b      	bics	r3, r1
 8008cf2:	6861      	ldr	r1, [r4, #4]
 8008cf4:	430b      	orrs	r3, r1
 8008cf6:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	06db      	lsls	r3, r3, #27
 8008cfc:	d506      	bpl.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cfe:	4a35      	ldr	r2, [pc, #212]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d00:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d02:	493a      	ldr	r1, [pc, #232]	@ (8008dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008d04:	400b      	ands	r3, r1
 8008d06:	68a1      	ldr	r1, [r4, #8]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	059b      	lsls	r3, r3, #22
 8008d10:	d506      	bpl.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d12:	4a30      	ldr	r2, [pc, #192]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d14:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d16:	4936      	ldr	r1, [pc, #216]	@ (8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008d18:	400b      	ands	r3, r1
 8008d1a:	6961      	ldr	r1, [r4, #20]
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	055b      	lsls	r3, r3, #21
 8008d24:	d506      	bpl.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d26:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d28:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d2a:	4932      	ldr	r1, [pc, #200]	@ (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008d2c:	400b      	ands	r3, r1
 8008d2e:	69a1      	ldr	r1, [r4, #24]
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	069b      	lsls	r3, r3, #26
 8008d38:	d506      	bpl.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d3a:	4a26      	ldr	r2, [pc, #152]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d3c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d3e:	492e      	ldr	r1, [pc, #184]	@ (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008d40:	400b      	ands	r3, r1
 8008d42:	68e1      	ldr	r1, [r4, #12]
 8008d44:	430b      	orrs	r3, r1
 8008d46:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	045b      	lsls	r3, r3, #17
 8008d4c:	d50b      	bpl.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d4e:	4a21      	ldr	r2, [pc, #132]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d50:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	089b      	lsrs	r3, r3, #2
 8008d56:	69e1      	ldr	r1, [r4, #28]
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008d5c:	69e2      	ldr	r2, [r4, #28]
 8008d5e:	2380      	movs	r3, #128	@ 0x80
 8008d60:	05db      	lsls	r3, r3, #23
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d020      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	029b      	lsls	r3, r3, #10
 8008d6a:	d50b      	bpl.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008d6c:	4a19      	ldr	r2, [pc, #100]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d6e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d70:	4922      	ldr	r1, [pc, #136]	@ (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8008d72:	400b      	ands	r3, r1
 8008d74:	6a21      	ldr	r1, [r4, #32]
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008d7a:	6a22      	ldr	r2, [r4, #32]
 8008d7c:	2380      	movs	r3, #128	@ 0x80
 8008d7e:	03db      	lsls	r3, r3, #15
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d018      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	051b      	lsls	r3, r3, #20
 8008d88:	d50b      	bpl.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008d8a:	4a12      	ldr	r2, [pc, #72]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008d8e:	491c      	ldr	r1, [pc, #112]	@ (8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8008d90:	400b      	ands	r3, r1
 8008d92:	6921      	ldr	r1, [r4, #16]
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008d98:	6922      	ldr	r2, [r4, #16]
 8008d9a:	2380      	movs	r3, #128	@ 0x80
 8008d9c:	01db      	lsls	r3, r3, #7
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d010      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8008da2:	0028      	movs	r0, r5
 8008da4:	b003      	add	sp, #12
 8008da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008da8:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008daa:	68d1      	ldr	r1, [r2, #12]
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	025b      	lsls	r3, r3, #9
 8008db0:	430b      	orrs	r3, r1
 8008db2:	60d3      	str	r3, [r2, #12]
 8008db4:	e7d7      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008db6:	4a07      	ldr	r2, [pc, #28]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008db8:	68d1      	ldr	r1, [r2, #12]
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	045b      	lsls	r3, r3, #17
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	60d3      	str	r3, [r2, #12]
 8008dc2:	e7df      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008dc4:	4a03      	ldr	r2, [pc, #12]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008dc6:	68d1      	ldr	r1, [r2, #12]
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	025b      	lsls	r3, r3, #9
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	60d3      	str	r3, [r2, #12]
 8008dd0:	e7e7      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	40021000 	.word	0x40021000
 8008dd8:	40007000 	.word	0x40007000
 8008ddc:	fffffcff 	.word	0xfffffcff
 8008de0:	fffeffff 	.word	0xfffeffff
 8008de4:	efffffff 	.word	0xefffffff
 8008de8:	00001388 	.word	0x00001388
 8008dec:	fffff3ff 	.word	0xfffff3ff
 8008df0:	fff3ffff 	.word	0xfff3ffff
 8008df4:	ffcfffff 	.word	0xffcfffff
 8008df8:	ffffcfff 	.word	0xffffcfff
 8008dfc:	ffbfffff 	.word	0xffbfffff
 8008e00:	ffff3fff 	.word	0xffff3fff

08008e04 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8008e06:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008e08:	e016      	b.n	8008e38 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8008e0e:	68c4      	ldr	r4, [r0, #12]
 8008e10:	002b      	movs	r3, r5
 8008e12:	436b      	muls	r3, r5
 8008e14:	005e      	lsls	r6, r3, #1
 8008e16:	18f6      	adds	r6, r6, r3
 8008e18:	43f7      	mvns	r7, r6
 8008e1a:	43b4      	bics	r4, r6
 8008e1c:	4666      	mov	r6, ip
 8008e1e:	435e      	muls	r6, r3
 8008e20:	4334      	orrs	r4, r6
 8008e22:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008e24:	684c      	ldr	r4, [r1, #4]
 8008e26:	2c02      	cmp	r4, #2
 8008e28:	d025      	beq.n	8008e76 <LL_GPIO_Init+0x72>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008e2a:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8008e2c:	6804      	ldr	r4, [r0, #0]
 8008e2e:	403c      	ands	r4, r7
 8008e30:	436b      	muls	r3, r5
 8008e32:	4323      	orrs	r3, r4
 8008e34:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8008e36:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008e38:	680c      	ldr	r4, [r1, #0]
 8008e3a:	0023      	movs	r3, r4
 8008e3c:	40d3      	lsrs	r3, r2
 8008e3e:	d03a      	beq.n	8008eb6 <LL_GPIO_Init+0xb2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008e40:	2301      	movs	r3, #1
 8008e42:	4093      	lsls	r3, r2
 8008e44:	0025      	movs	r5, r4
 8008e46:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 8008e48:	421c      	tst	r4, r3
 8008e4a:	d0f4      	beq.n	8008e36 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008e4c:	684b      	ldr	r3, [r1, #4]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d8da      	bhi.n	8008e0a <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008e54:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8008e56:	6883      	ldr	r3, [r0, #8]
 8008e58:	002c      	movs	r4, r5
 8008e5a:	436c      	muls	r4, r5
 8008e5c:	0066      	lsls	r6, r4, #1
 8008e5e:	1936      	adds	r6, r6, r4
 8008e60:	43b3      	bics	r3, r6
 8008e62:	437c      	muls	r4, r7
 8008e64:	4323      	orrs	r3, r4
 8008e66:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008e68:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008e6a:	6843      	ldr	r3, [r0, #4]
 8008e6c:	43ab      	bics	r3, r5
 8008e6e:	436c      	muls	r4, r5
 8008e70:	4323      	orrs	r3, r4
 8008e72:	6043      	str	r3, [r0, #4]
}
 8008e74:	e7c9      	b.n	8008e0a <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8008e76:	2dff      	cmp	r5, #255	@ 0xff
 8008e78:	d80d      	bhi.n	8008e96 <LL_GPIO_Init+0x92>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008e7a:	694c      	ldr	r4, [r1, #20]
 8008e7c:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8008e7e:	6a06      	ldr	r6, [r0, #32]
 8008e80:	001c      	movs	r4, r3
 8008e82:	436c      	muls	r4, r5
 8008e84:	436c      	muls	r4, r5
 8008e86:	0125      	lsls	r5, r4, #4
 8008e88:	1b2d      	subs	r5, r5, r4
 8008e8a:	43ae      	bics	r6, r5
 8008e8c:	4665      	mov	r5, ip
 8008e8e:	436c      	muls	r4, r5
 8008e90:	4334      	orrs	r4, r6
 8008e92:	6204      	str	r4, [r0, #32]
}
 8008e94:	e7c9      	b.n	8008e2a <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008e96:	694c      	ldr	r4, [r1, #20]
 8008e98:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8008e9a:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8008e9c:	0a2d      	lsrs	r5, r5, #8
 8008e9e:	002c      	movs	r4, r5
 8008ea0:	436c      	muls	r4, r5
 8008ea2:	436c      	muls	r4, r5
 8008ea4:	436c      	muls	r4, r5
 8008ea6:	0125      	lsls	r5, r4, #4
 8008ea8:	1b2d      	subs	r5, r5, r4
 8008eaa:	43ae      	bics	r6, r5
 8008eac:	4665      	mov	r5, ip
 8008eae:	436c      	muls	r4, r5
 8008eb0:	4334      	orrs	r4, r6
 8008eb2:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8008eb4:	e7b9      	b.n	8008e2a <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008ebc <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008ebc:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <RCC_GetHCLKClockFreq+0x18>)
 8008ebe:	689a      	ldr	r2, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008ec0:	0a12      	lsrs	r2, r2, #8
 8008ec2:	230f      	movs	r3, #15
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	4a04      	ldr	r2, [pc, #16]	@ (8008ed8 <RCC_GetHCLKClockFreq+0x1c>)
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	589a      	ldr	r2, [r3, r2]
 8008ecc:	231f      	movs	r3, #31
 8008ece:	4013      	ands	r3, r2
 8008ed0:	40d8      	lsrs	r0, r3
}
 8008ed2:	4770      	bx	lr
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	08009680 	.word	0x08009680

08008edc <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <RCC_GetPCLK1ClockFreq+0x18>)
 8008ede:	689a      	ldr	r2, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008ee0:	0b12      	lsrs	r2, r2, #12
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	4a04      	ldr	r2, [pc, #16]	@ (8008ef8 <RCC_GetPCLK1ClockFreq+0x1c>)
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	589a      	ldr	r2, [r3, r2]
 8008eec:	231f      	movs	r3, #31
 8008eee:	4013      	ands	r3, r2
 8008ef0:	40d8      	lsrs	r0, r3
}
 8008ef2:	4770      	bx	lr
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	08009660 	.word	0x08009660

08008efc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8008efc:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008efe:	4b0e      	ldr	r3, [pc, #56]	@ (8008f38 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	2303      	movs	r3, #3
 8008f04:	4013      	ands	r3, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d013      	beq.n	8008f32 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f3c <RCC_PLL_GetFreqDomain_SYS+0x40>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8008f38 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8008f0e:	68e3      	ldr	r3, [r4, #12]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	207f      	movs	r0, #127	@ 0x7f
 8008f14:	4018      	ands	r0, r3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008f16:	4350      	muls	r0, r2
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008f18:	68e3      	ldr	r3, [r4, #12]
 8008f1a:	091b      	lsrs	r3, r3, #4
 8008f1c:	2107      	movs	r1, #7
 8008f1e:	4019      	ands	r1, r3
 8008f20:	3101      	adds	r1, #1
 8008f22:	f7f9 f8f1 	bl	8002108 <__udivsi3>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008f26:	68e1      	ldr	r1, [r4, #12]
 8008f28:	0f49      	lsrs	r1, r1, #29
 8008f2a:	3101      	adds	r1, #1
 8008f2c:	f7f9 f8ec 	bl	8002108 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8008f30:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 8008f32:	4a03      	ldr	r2, [pc, #12]	@ (8008f40 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 8008f34:	e7ea      	b.n	8008f0c <RCC_PLL_GetFreqDomain_SYS+0x10>
 8008f36:	46c0      	nop			@ (mov r8, r8)
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	00f42400 	.word	0x00f42400
 8008f40:	007a1200 	.word	0x007a1200

08008f44 <RCC_GetSystemClockFreq>:
{
 8008f44:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008f46:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <RCC_GetSystemClockFreq+0x2c>)
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	2338      	movs	r3, #56	@ 0x38
 8008f4c:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d00c      	beq.n	8008f6c <RCC_GetSystemClockFreq+0x28>
 8008f52:	2b10      	cmp	r3, #16
 8008f54:	d102      	bne.n	8008f5c <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8008f56:	f7ff ffd1 	bl	8008efc <RCC_PLL_GetFreqDomain_SYS>
}
 8008f5a:	bd10      	pop	{r4, pc}
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008f5c:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <RCC_GetSystemClockFreq+0x2c>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	0ad2      	lsrs	r2, r2, #11
 8008f62:	2307      	movs	r3, #7
 8008f64:	4013      	ands	r3, r2
      frequency = (HSI_VALUE / hsidiv);
 8008f66:	4803      	ldr	r0, [pc, #12]	@ (8008f74 <RCC_GetSystemClockFreq+0x30>)
 8008f68:	40d8      	lsrs	r0, r3
      break;
 8008f6a:	e7f6      	b.n	8008f5a <RCC_GetSystemClockFreq+0x16>
  switch (LL_RCC_GetSysClkSource())
 8008f6c:	4802      	ldr	r0, [pc, #8]	@ (8008f78 <RCC_GetSystemClockFreq+0x34>)
  return frequency;
 8008f6e:	e7f4      	b.n	8008f5a <RCC_GetSystemClockFreq+0x16>
 8008f70:	40021000 	.word	0x40021000
 8008f74:	00f42400 	.word	0x00f42400
 8008f78:	007a1200 	.word	0x007a1200

08008f7c <LL_RCC_GetSystemClocksFreq>:
{
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8008f80:	f7ff ffe0 	bl	8008f44 <RCC_GetSystemClockFreq>
 8008f84:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8008f86:	f7ff ff99 	bl	8008ebc <RCC_GetHCLKClockFreq>
 8008f8a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8008f8c:	f7ff ffa6 	bl	8008edc <RCC_GetPCLK1ClockFreq>
 8008f90:	60a0      	str	r0, [r4, #8]
}
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <LL_RCC_GetUSARTClockFreq>:
{
 8008f94:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008f96:	2803      	cmp	r0, #3
 8008f98:	d001      	beq.n	8008f9e <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008f9a:	2000      	movs	r0, #0
}
 8008f9c:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8008f9e:	4b16      	ldr	r3, [pc, #88]	@ (8008ff8 <LL_RCC_GetUSARTClockFreq+0x64>)
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa2:	4003      	ands	r3, r0
 8008fa4:	0400      	lsls	r0, r0, #16
 8008fa6:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008fa8:	4a14      	ldr	r2, [pc, #80]	@ (8008ffc <LL_RCC_GetUSARTClockFreq+0x68>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00f      	beq.n	8008fce <LL_RCC_GetUSARTClockFreq+0x3a>
 8008fae:	4a14      	ldr	r2, [pc, #80]	@ (8009000 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d016      	beq.n	8008fe2 <LL_RCC_GetUSARTClockFreq+0x4e>
 8008fb4:	4a13      	ldr	r2, [pc, #76]	@ (8009004 <LL_RCC_GetUSARTClockFreq+0x70>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d006      	beq.n	8008fc8 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008fba:	f7ff ffc3 	bl	8008f44 <RCC_GetSystemClockFreq>
 8008fbe:	f7ff ff7d 	bl	8008ebc <RCC_GetHCLKClockFreq>
 8008fc2:	f7ff ff8b 	bl	8008edc <RCC_GetPCLK1ClockFreq>
        break;
 8008fc6:	e7e9      	b.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8008fc8:	f7ff ffbc 	bl	8008f44 <RCC_GetSystemClockFreq>
        break;
 8008fcc:	e7e6      	b.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008fce:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff8 <LL_RCC_GetUSARTClockFreq+0x64>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	2380      	movs	r3, #128	@ 0x80
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	0010      	movs	r0, r2
 8008fd8:	4018      	ands	r0, r3
 8008fda:	421a      	tst	r2, r3
 8008fdc:	d0de      	beq.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = HSI_VALUE;
 8008fde:	480a      	ldr	r0, [pc, #40]	@ (8009008 <LL_RCC_GetUSARTClockFreq+0x74>)
 8008fe0:	e7dc      	b.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008fe2:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <LL_RCC_GetUSARTClockFreq+0x64>)
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	0010      	movs	r0, r2
 8008fea:	4018      	ands	r0, r3
 8008fec:	421a      	tst	r2, r3
 8008fee:	d0d5      	beq.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8008ff0:	2080      	movs	r0, #128	@ 0x80
 8008ff2:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8008ff4:	e7d2      	b.n	8008f9c <LL_RCC_GetUSARTClockFreq+0x8>
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	00030002 	.word	0x00030002
 8009000:	00030003 	.word	0x00030003
 8009004:	00030001 	.word	0x00030001
 8009008:	00f42400 	.word	0x00f42400

0800900c <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800900c:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800900e:	4a1d      	ldr	r2, [pc, #116]	@ (8009084 <LL_TIM_Init+0x78>)
 8009010:	4290      	cmp	r0, r2
 8009012:	d006      	beq.n	8009022 <LL_TIM_Init+0x16>
 8009014:	2280      	movs	r2, #128	@ 0x80
 8009016:	05d2      	lsls	r2, r2, #23
 8009018:	4290      	cmp	r0, r2
 800901a:	d002      	beq.n	8009022 <LL_TIM_Init+0x16>
 800901c:	4a1a      	ldr	r2, [pc, #104]	@ (8009088 <LL_TIM_Init+0x7c>)
 800901e:	4290      	cmp	r0, r2
 8009020:	d103      	bne.n	800902a <LL_TIM_Init+0x1e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009022:	2270      	movs	r2, #112	@ 0x70
 8009024:	4393      	bics	r3, r2
 8009026:	684a      	ldr	r2, [r1, #4]
 8009028:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902a:	4a16      	ldr	r2, [pc, #88]	@ (8009084 <LL_TIM_Init+0x78>)
 800902c:	4290      	cmp	r0, r2
 800902e:	d00f      	beq.n	8009050 <LL_TIM_Init+0x44>
 8009030:	2280      	movs	r2, #128	@ 0x80
 8009032:	05d2      	lsls	r2, r2, #23
 8009034:	4290      	cmp	r0, r2
 8009036:	d00b      	beq.n	8009050 <LL_TIM_Init+0x44>
 8009038:	4a13      	ldr	r2, [pc, #76]	@ (8009088 <LL_TIM_Init+0x7c>)
 800903a:	4290      	cmp	r0, r2
 800903c:	d008      	beq.n	8009050 <LL_TIM_Init+0x44>
 800903e:	4a13      	ldr	r2, [pc, #76]	@ (800908c <LL_TIM_Init+0x80>)
 8009040:	4290      	cmp	r0, r2
 8009042:	d005      	beq.n	8009050 <LL_TIM_Init+0x44>
 8009044:	4a12      	ldr	r2, [pc, #72]	@ (8009090 <LL_TIM_Init+0x84>)
 8009046:	4290      	cmp	r0, r2
 8009048:	d002      	beq.n	8009050 <LL_TIM_Init+0x44>
 800904a:	4a12      	ldr	r2, [pc, #72]	@ (8009094 <LL_TIM_Init+0x88>)
 800904c:	4290      	cmp	r0, r2
 800904e:	d103      	bne.n	8009058 <LL_TIM_Init+0x4c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009050:	4a11      	ldr	r2, [pc, #68]	@ (8009098 <LL_TIM_Init+0x8c>)
 8009052:	401a      	ands	r2, r3
 8009054:	68cb      	ldr	r3, [r1, #12]
 8009056:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009058:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800905a:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800905c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800905e:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8009060:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009062:	4b08      	ldr	r3, [pc, #32]	@ (8009084 <LL_TIM_Init+0x78>)
 8009064:	4298      	cmp	r0, r3
 8009066:	d005      	beq.n	8009074 <LL_TIM_Init+0x68>
 8009068:	4b09      	ldr	r3, [pc, #36]	@ (8009090 <LL_TIM_Init+0x84>)
 800906a:	4298      	cmp	r0, r3
 800906c:	d002      	beq.n	8009074 <LL_TIM_Init+0x68>
 800906e:	4b09      	ldr	r3, [pc, #36]	@ (8009094 <LL_TIM_Init+0x88>)
 8009070:	4298      	cmp	r0, r3
 8009072:	d101      	bne.n	8009078 <LL_TIM_Init+0x6c>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009074:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009076:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009078:	6943      	ldr	r3, [r0, #20]
 800907a:	2201      	movs	r2, #1
 800907c:	4313      	orrs	r3, r2
 800907e:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8009080:	2000      	movs	r0, #0
 8009082:	4770      	bx	lr
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40000400 	.word	0x40000400
 800908c:	40002000 	.word	0x40002000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800
 8009098:	fffffcff 	.word	0xfffffcff

0800909c <LL_USART_SetBaudRate>:
{
 800909c:	b510      	push	{r4, lr}
 800909e:	0004      	movs	r4, r0
 80090a0:	0008      	movs	r0, r1
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80090a2:	2a0b      	cmp	r2, #11
 80090a4:	d816      	bhi.n	80090d4 <LL_USART_SetBaudRate+0x38>
  else if (BaudRate == 0U)
 80090a6:	9902      	ldr	r1, [sp, #8]
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d013      	beq.n	80090d4 <LL_USART_SetBaudRate+0x38>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80090ac:	2180      	movs	r1, #128	@ 0x80
 80090ae:	0209      	lsls	r1, r1, #8
 80090b0:	428b      	cmp	r3, r1
 80090b2:	d010      	beq.n	80090d6 <LL_USART_SetBaudRate+0x3a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80090b4:	23ff      	movs	r3, #255	@ 0xff
 80090b6:	4013      	ands	r3, r2
 80090b8:	4a12      	ldr	r2, [pc, #72]	@ (8009104 <LL_USART_SetBaudRate+0x68>)
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	5899      	ldr	r1, [r3, r2]
 80090be:	f7f9 f823 	bl	8002108 <__udivsi3>
 80090c2:	9b02      	ldr	r3, [sp, #8]
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	18c0      	adds	r0, r0, r3
 80090c8:	9902      	ldr	r1, [sp, #8]
 80090ca:	f7f9 f81d 	bl	8002108 <__udivsi3>
 80090ce:	0400      	lsls	r0, r0, #16
 80090d0:	0c00      	lsrs	r0, r0, #16
 80090d2:	60e0      	str	r0, [r4, #12]
}
 80090d4:	bd10      	pop	{r4, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80090d6:	23ff      	movs	r3, #255	@ 0xff
 80090d8:	4013      	ands	r3, r2
 80090da:	4a0a      	ldr	r2, [pc, #40]	@ (8009104 <LL_USART_SetBaudRate+0x68>)
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	5899      	ldr	r1, [r3, r2]
 80090e0:	f7f9 f812 	bl	8002108 <__udivsi3>
 80090e4:	0040      	lsls	r0, r0, #1
 80090e6:	9b02      	ldr	r3, [sp, #8]
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	18c0      	adds	r0, r0, r3
 80090ec:	9902      	ldr	r1, [sp, #8]
 80090ee:	f7f9 f80b 	bl	8002108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80090f2:	4a05      	ldr	r2, [pc, #20]	@ (8009108 <LL_USART_SetBaudRate+0x6c>)
 80090f4:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f6:	0400      	lsls	r0, r0, #16
 80090f8:	0c40      	lsrs	r0, r0, #17
 80090fa:	2307      	movs	r3, #7
 80090fc:	4003      	ands	r3, r0
 80090fe:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8009100:	60e3      	str	r3, [r4, #12]
 8009102:	e7e7      	b.n	80090d4 <LL_USART_SetBaudRate+0x38>
 8009104:	080096c0 	.word	0x080096c0
 8009108:	0000fff0 	.word	0x0000fff0

0800910c <LL_USART_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 800910c:	4b0f      	ldr	r3, [pc, #60]	@ (800914c <LL_USART_DeInit+0x40>)
 800910e:	4298      	cmp	r0, r3
 8009110:	d004      	beq.n	800911c <LL_USART_DeInit+0x10>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
  }
  else if (USARTx == USART2)
 8009112:	4b0f      	ldr	r3, [pc, #60]	@ (8009150 <LL_USART_DeInit+0x44>)
 8009114:	4298      	cmp	r0, r3
 8009116:	d00d      	beq.n	8009134 <LL_USART_DeInit+0x28>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART6);
  }
#endif /* USART6 */
  else
  {
    status = ERROR;
 8009118:	2001      	movs	r0, #1
  }

  return (status);
}
 800911a:	4770      	bx	lr
  SET_BIT(RCC->APBRSTR2, Periphs);
 800911c:	4b0d      	ldr	r3, [pc, #52]	@ (8009154 <LL_USART_DeInit+0x48>)
 800911e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009120:	2280      	movs	r2, #128	@ 0x80
 8009122:	01d2      	lsls	r2, r2, #7
 8009124:	430a      	orrs	r2, r1
 8009126:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 8009128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800912a:	490b      	ldr	r1, [pc, #44]	@ (8009158 <LL_USART_DeInit+0x4c>)
 800912c:	400a      	ands	r2, r1
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 8009130:	2000      	movs	r0, #0
}
 8009132:	e7f2      	b.n	800911a <LL_USART_DeInit+0xe>
  SET_BIT(RCC->APBRSTR1, Periphs);
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <LL_USART_DeInit+0x48>)
 8009136:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009138:	2280      	movs	r2, #128	@ 0x80
 800913a:	0292      	lsls	r2, r2, #10
 800913c:	430a      	orrs	r2, r1
 800913e:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 8009140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009142:	4906      	ldr	r1, [pc, #24]	@ (800915c <LL_USART_DeInit+0x50>)
 8009144:	400a      	ands	r2, r1
 8009146:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009148:	2000      	movs	r0, #0
}
 800914a:	e7e6      	b.n	800911a <LL_USART_DeInit+0xe>
 800914c:	40013800 	.word	0x40013800
 8009150:	40004400 	.word	0x40004400
 8009154:	40021000 	.word	0x40021000
 8009158:	ffffbfff 	.word	0xffffbfff
 800915c:	fffdffff 	.word	0xfffdffff

08009160 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8009160:	b530      	push	{r4, r5, lr}
 8009162:	b087      	sub	sp, #28
 8009164:	0004      	movs	r4, r0
 8009166:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009168:	6803      	ldr	r3, [r0, #0]
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d442      	bmi.n	80091f4 <LL_USART_Init+0x94>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	4a21      	ldr	r2, [pc, #132]	@ (80091f8 <LL_USART_Init+0x98>)
 8009172:	401a      	ands	r2, r3
 8009174:	688b      	ldr	r3, [r1, #8]
 8009176:	6909      	ldr	r1, [r1, #16]
 8009178:	430b      	orrs	r3, r1
 800917a:	6969      	ldr	r1, [r5, #20]
 800917c:	430b      	orrs	r3, r1
 800917e:	69e9      	ldr	r1, [r5, #28]
 8009180:	430b      	orrs	r3, r1
 8009182:	4313      	orrs	r3, r2
 8009184:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009186:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009188:	6842      	ldr	r2, [r0, #4]
 800918a:	491c      	ldr	r1, [pc, #112]	@ (80091fc <LL_USART_Init+0x9c>)
 800918c:	400a      	ands	r2, r1
 800918e:	4313      	orrs	r3, r2
 8009190:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009192:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009194:	6882      	ldr	r2, [r0, #8]
 8009196:	491a      	ldr	r1, [pc, #104]	@ (8009200 <LL_USART_Init+0xa0>)
 8009198:	400a      	ands	r2, r1
 800919a:	4313      	orrs	r3, r2
 800919c:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800919e:	4b19      	ldr	r3, [pc, #100]	@ (8009204 <LL_USART_Init+0xa4>)
 80091a0:	4298      	cmp	r0, r3
 80091a2:	d00d      	beq.n	80091c0 <LL_USART_Init+0x60>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80091a4:	4b18      	ldr	r3, [pc, #96]	@ (8009208 <LL_USART_Init+0xa8>)
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d015      	beq.n	80091d6 <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 80091aa:	2001      	movs	r0, #1

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80091ac:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80091ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80091b0:	210f      	movs	r1, #15
 80091b2:	438a      	bics	r2, r1
 80091b4:	041b      	lsls	r3, r3, #16
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	4313      	orrs	r3, r2
 80091ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80091bc:	b007      	add	sp, #28
 80091be:	bd30      	pop	{r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80091c0:	2003      	movs	r0, #3
 80091c2:	f7ff fee7 	bl	8008f94 <LL_RCC_GetUSARTClockFreq>
 80091c6:	0001      	movs	r1, r0
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d011      	beq.n	80091f0 <LL_USART_Init+0x90>
        && (USART_InitStruct->BaudRate != 0U))
 80091cc:	6868      	ldr	r0, [r5, #4]
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d106      	bne.n	80091e0 <LL_USART_Init+0x80>
  ErrorStatus status = ERROR;
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7ea      	b.n	80091ac <LL_USART_Init+0x4c>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80091d6:	a803      	add	r0, sp, #12
 80091d8:	f7ff fed0 	bl	8008f7c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80091dc:	9905      	ldr	r1, [sp, #20]
 80091de:	e7f3      	b.n	80091c8 <LL_USART_Init+0x68>
                           USART_InitStruct->PrescalerValue,
 80091e0:	682a      	ldr	r2, [r5, #0]
                           USART_InitStruct->OverSampling,
 80091e2:	69eb      	ldr	r3, [r5, #28]
      LL_USART_SetBaudRate(USARTx,
 80091e4:	9000      	str	r0, [sp, #0]
 80091e6:	0020      	movs	r0, r4
 80091e8:	f7ff ff58 	bl	800909c <LL_USART_SetBaudRate>
      status = SUCCESS;
 80091ec:	2000      	movs	r0, #0
 80091ee:	e7dd      	b.n	80091ac <LL_USART_Init+0x4c>
  ErrorStatus status = ERROR;
 80091f0:	2001      	movs	r0, #1
 80091f2:	e7db      	b.n	80091ac <LL_USART_Init+0x4c>
 80091f4:	2001      	movs	r0, #1
 80091f6:	e7e1      	b.n	80091bc <LL_USART_Init+0x5c>
 80091f8:	efff69f3 	.word	0xefff69f3
 80091fc:	ffffcfff 	.word	0xffffcfff
 8009200:	fffffcff 	.word	0xfffffcff
 8009204:	40013800 	.word	0x40013800
 8009208:	40004400 	.word	0x40004400

0800920c <calloc>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4b03      	ldr	r3, [pc, #12]	@ (800921c <calloc+0x10>)
 8009210:	000a      	movs	r2, r1
 8009212:	0001      	movs	r1, r0
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f000 f803 	bl	8009220 <_calloc_r>
 800921a:	bd10      	pop	{r4, pc}
 800921c:	200000e8 	.word	0x200000e8

08009220 <_calloc_r>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	0c0b      	lsrs	r3, r1, #16
 8009224:	0c15      	lsrs	r5, r2, #16
 8009226:	2b00      	cmp	r3, #0
 8009228:	d11e      	bne.n	8009268 <_calloc_r+0x48>
 800922a:	2d00      	cmp	r5, #0
 800922c:	d10c      	bne.n	8009248 <_calloc_r+0x28>
 800922e:	b289      	uxth	r1, r1
 8009230:	b294      	uxth	r4, r2
 8009232:	434c      	muls	r4, r1
 8009234:	0021      	movs	r1, r4
 8009236:	f000 f843 	bl	80092c0 <_malloc_r>
 800923a:	1e05      	subs	r5, r0, #0
 800923c:	d01a      	beq.n	8009274 <_calloc_r+0x54>
 800923e:	0022      	movs	r2, r4
 8009240:	2100      	movs	r1, #0
 8009242:	f000 f8cd 	bl	80093e0 <memset>
 8009246:	e016      	b.n	8009276 <_calloc_r+0x56>
 8009248:	1c2b      	adds	r3, r5, #0
 800924a:	1c0c      	adds	r4, r1, #0
 800924c:	b289      	uxth	r1, r1
 800924e:	b292      	uxth	r2, r2
 8009250:	434a      	muls	r2, r1
 8009252:	b29b      	uxth	r3, r3
 8009254:	b2a1      	uxth	r1, r4
 8009256:	4359      	muls	r1, r3
 8009258:	0c14      	lsrs	r4, r2, #16
 800925a:	190c      	adds	r4, r1, r4
 800925c:	0c23      	lsrs	r3, r4, #16
 800925e:	d107      	bne.n	8009270 <_calloc_r+0x50>
 8009260:	0424      	lsls	r4, r4, #16
 8009262:	b292      	uxth	r2, r2
 8009264:	4314      	orrs	r4, r2
 8009266:	e7e5      	b.n	8009234 <_calloc_r+0x14>
 8009268:	2d00      	cmp	r5, #0
 800926a:	d101      	bne.n	8009270 <_calloc_r+0x50>
 800926c:	1c14      	adds	r4, r2, #0
 800926e:	e7ed      	b.n	800924c <_calloc_r+0x2c>
 8009270:	230c      	movs	r3, #12
 8009272:	6003      	str	r3, [r0, #0]
 8009274:	2500      	movs	r5, #0
 8009276:	0028      	movs	r0, r5
 8009278:	bd70      	pop	{r4, r5, r6, pc}
	...

0800927c <sbrk_aligned>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0f      	ldr	r6, [pc, #60]	@ (80092bc <sbrk_aligned+0x40>)
 8009280:	000d      	movs	r5, r1
 8009282:	6831      	ldr	r1, [r6, #0]
 8009284:	0004      	movs	r4, r0
 8009286:	2900      	cmp	r1, #0
 8009288:	d102      	bne.n	8009290 <sbrk_aligned+0x14>
 800928a:	f000 f8b1 	bl	80093f0 <_sbrk_r>
 800928e:	6030      	str	r0, [r6, #0]
 8009290:	0029      	movs	r1, r5
 8009292:	0020      	movs	r0, r4
 8009294:	f000 f8ac 	bl	80093f0 <_sbrk_r>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d103      	bne.n	80092a4 <sbrk_aligned+0x28>
 800929c:	2501      	movs	r5, #1
 800929e:	426d      	negs	r5, r5
 80092a0:	0028      	movs	r0, r5
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	2303      	movs	r3, #3
 80092a6:	1cc5      	adds	r5, r0, #3
 80092a8:	439d      	bics	r5, r3
 80092aa:	42a8      	cmp	r0, r5
 80092ac:	d0f8      	beq.n	80092a0 <sbrk_aligned+0x24>
 80092ae:	1a29      	subs	r1, r5, r0
 80092b0:	0020      	movs	r0, r4
 80092b2:	f000 f89d 	bl	80093f0 <_sbrk_r>
 80092b6:	3001      	adds	r0, #1
 80092b8:	d1f2      	bne.n	80092a0 <sbrk_aligned+0x24>
 80092ba:	e7ef      	b.n	800929c <sbrk_aligned+0x20>
 80092bc:	2000111c 	.word	0x2000111c

080092c0 <_malloc_r>:
 80092c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c2:	2203      	movs	r2, #3
 80092c4:	1ccb      	adds	r3, r1, #3
 80092c6:	4393      	bics	r3, r2
 80092c8:	3308      	adds	r3, #8
 80092ca:	0005      	movs	r5, r0
 80092cc:	001f      	movs	r7, r3
 80092ce:	2b0c      	cmp	r3, #12
 80092d0:	d234      	bcs.n	800933c <_malloc_r+0x7c>
 80092d2:	270c      	movs	r7, #12
 80092d4:	42b9      	cmp	r1, r7
 80092d6:	d833      	bhi.n	8009340 <_malloc_r+0x80>
 80092d8:	0028      	movs	r0, r5
 80092da:	f000 f871 	bl	80093c0 <__malloc_lock>
 80092de:	4e37      	ldr	r6, [pc, #220]	@ (80093bc <_malloc_r+0xfc>)
 80092e0:	6833      	ldr	r3, [r6, #0]
 80092e2:	001c      	movs	r4, r3
 80092e4:	2c00      	cmp	r4, #0
 80092e6:	d12f      	bne.n	8009348 <_malloc_r+0x88>
 80092e8:	0039      	movs	r1, r7
 80092ea:	0028      	movs	r0, r5
 80092ec:	f7ff ffc6 	bl	800927c <sbrk_aligned>
 80092f0:	0004      	movs	r4, r0
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d15f      	bne.n	80093b6 <_malloc_r+0xf6>
 80092f6:	6834      	ldr	r4, [r6, #0]
 80092f8:	9400      	str	r4, [sp, #0]
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d14a      	bne.n	8009396 <_malloc_r+0xd6>
 8009300:	2c00      	cmp	r4, #0
 8009302:	d052      	beq.n	80093aa <_malloc_r+0xea>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	0028      	movs	r0, r5
 8009308:	18e3      	adds	r3, r4, r3
 800930a:	9900      	ldr	r1, [sp, #0]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f000 f86f 	bl	80093f0 <_sbrk_r>
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	4283      	cmp	r3, r0
 8009316:	d148      	bne.n	80093aa <_malloc_r+0xea>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	0028      	movs	r0, r5
 800931c:	1aff      	subs	r7, r7, r3
 800931e:	0039      	movs	r1, r7
 8009320:	f7ff ffac 	bl	800927c <sbrk_aligned>
 8009324:	3001      	adds	r0, #1
 8009326:	d040      	beq.n	80093aa <_malloc_r+0xea>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	19db      	adds	r3, r3, r7
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6833      	ldr	r3, [r6, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	2a00      	cmp	r2, #0
 8009334:	d133      	bne.n	800939e <_malloc_r+0xde>
 8009336:	9b00      	ldr	r3, [sp, #0]
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	e019      	b.n	8009370 <_malloc_r+0xb0>
 800933c:	2b00      	cmp	r3, #0
 800933e:	dac9      	bge.n	80092d4 <_malloc_r+0x14>
 8009340:	230c      	movs	r3, #12
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	2000      	movs	r0, #0
 8009346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009348:	6821      	ldr	r1, [r4, #0]
 800934a:	1bc9      	subs	r1, r1, r7
 800934c:	d420      	bmi.n	8009390 <_malloc_r+0xd0>
 800934e:	290b      	cmp	r1, #11
 8009350:	d90a      	bls.n	8009368 <_malloc_r+0xa8>
 8009352:	19e2      	adds	r2, r4, r7
 8009354:	6027      	str	r7, [r4, #0]
 8009356:	42a3      	cmp	r3, r4
 8009358:	d104      	bne.n	8009364 <_malloc_r+0xa4>
 800935a:	6032      	str	r2, [r6, #0]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	6011      	str	r1, [r2, #0]
 8009360:	6053      	str	r3, [r2, #4]
 8009362:	e005      	b.n	8009370 <_malloc_r+0xb0>
 8009364:	605a      	str	r2, [r3, #4]
 8009366:	e7f9      	b.n	800935c <_malloc_r+0x9c>
 8009368:	6862      	ldr	r2, [r4, #4]
 800936a:	42a3      	cmp	r3, r4
 800936c:	d10e      	bne.n	800938c <_malloc_r+0xcc>
 800936e:	6032      	str	r2, [r6, #0]
 8009370:	0028      	movs	r0, r5
 8009372:	f000 f82d 	bl	80093d0 <__malloc_unlock>
 8009376:	0020      	movs	r0, r4
 8009378:	2207      	movs	r2, #7
 800937a:	300b      	adds	r0, #11
 800937c:	1d23      	adds	r3, r4, #4
 800937e:	4390      	bics	r0, r2
 8009380:	1ac2      	subs	r2, r0, r3
 8009382:	4298      	cmp	r0, r3
 8009384:	d0df      	beq.n	8009346 <_malloc_r+0x86>
 8009386:	1a1b      	subs	r3, r3, r0
 8009388:	50a3      	str	r3, [r4, r2]
 800938a:	e7dc      	b.n	8009346 <_malloc_r+0x86>
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	e7ef      	b.n	8009370 <_malloc_r+0xb0>
 8009390:	0023      	movs	r3, r4
 8009392:	6864      	ldr	r4, [r4, #4]
 8009394:	e7a6      	b.n	80092e4 <_malloc_r+0x24>
 8009396:	9c00      	ldr	r4, [sp, #0]
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	e7ad      	b.n	80092fa <_malloc_r+0x3a>
 800939e:	001a      	movs	r2, r3
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	d1fb      	bne.n	800939e <_malloc_r+0xde>
 80093a6:	2300      	movs	r3, #0
 80093a8:	e7da      	b.n	8009360 <_malloc_r+0xa0>
 80093aa:	230c      	movs	r3, #12
 80093ac:	0028      	movs	r0, r5
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f000 f80e 	bl	80093d0 <__malloc_unlock>
 80093b4:	e7c6      	b.n	8009344 <_malloc_r+0x84>
 80093b6:	6007      	str	r7, [r0, #0]
 80093b8:	e7da      	b.n	8009370 <_malloc_r+0xb0>
 80093ba:	46c0      	nop			@ (mov r8, r8)
 80093bc:	20001120 	.word	0x20001120

080093c0 <__malloc_lock>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4802      	ldr	r0, [pc, #8]	@ (80093cc <__malloc_lock+0xc>)
 80093c4:	f000 f850 	bl	8009468 <__retarget_lock_acquire_recursive>
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	46c0      	nop			@ (mov r8, r8)
 80093cc:	20001260 	.word	0x20001260

080093d0 <__malloc_unlock>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4802      	ldr	r0, [pc, #8]	@ (80093dc <__malloc_unlock+0xc>)
 80093d4:	f000 f849 	bl	800946a <__retarget_lock_release_recursive>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	20001260 	.word	0x20001260

080093e0 <memset>:
 80093e0:	0003      	movs	r3, r0
 80093e2:	1882      	adds	r2, r0, r2
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d100      	bne.n	80093ea <memset+0xa>
 80093e8:	4770      	bx	lr
 80093ea:	7019      	strb	r1, [r3, #0]
 80093ec:	3301      	adds	r3, #1
 80093ee:	e7f9      	b.n	80093e4 <memset+0x4>

080093f0 <_sbrk_r>:
 80093f0:	2300      	movs	r3, #0
 80093f2:	b570      	push	{r4, r5, r6, lr}
 80093f4:	4d06      	ldr	r5, [pc, #24]	@ (8009410 <_sbrk_r+0x20>)
 80093f6:	0004      	movs	r4, r0
 80093f8:	0008      	movs	r0, r1
 80093fa:	602b      	str	r3, [r5, #0]
 80093fc:	f7fc fb46 	bl	8005a8c <_sbrk>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d103      	bne.n	800940c <_sbrk_r+0x1c>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d000      	beq.n	800940c <_sbrk_r+0x1c>
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	46c0      	nop			@ (mov r8, r8)
 8009410:	2000125c 	.word	0x2000125c

08009414 <__errno>:
 8009414:	4b01      	ldr	r3, [pc, #4]	@ (800941c <__errno+0x8>)
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	4770      	bx	lr
 800941a:	46c0      	nop			@ (mov r8, r8)
 800941c:	200000e8 	.word	0x200000e8

08009420 <__libc_init_array>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	2600      	movs	r6, #0
 8009424:	4c0c      	ldr	r4, [pc, #48]	@ (8009458 <__libc_init_array+0x38>)
 8009426:	4d0d      	ldr	r5, [pc, #52]	@ (800945c <__libc_init_array+0x3c>)
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	42a6      	cmp	r6, r4
 800942e:	d109      	bne.n	8009444 <__libc_init_array+0x24>
 8009430:	2600      	movs	r6, #0
 8009432:	f000 f81b 	bl	800946c <_init>
 8009436:	4c0a      	ldr	r4, [pc, #40]	@ (8009460 <__libc_init_array+0x40>)
 8009438:	4d0a      	ldr	r5, [pc, #40]	@ (8009464 <__libc_init_array+0x44>)
 800943a:	1b64      	subs	r4, r4, r5
 800943c:	10a4      	asrs	r4, r4, #2
 800943e:	42a6      	cmp	r6, r4
 8009440:	d105      	bne.n	800944e <__libc_init_array+0x2e>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	00b3      	lsls	r3, r6, #2
 8009446:	58eb      	ldr	r3, [r5, r3]
 8009448:	4798      	blx	r3
 800944a:	3601      	adds	r6, #1
 800944c:	e7ee      	b.n	800942c <__libc_init_array+0xc>
 800944e:	00b3      	lsls	r3, r6, #2
 8009450:	58eb      	ldr	r3, [r5, r3]
 8009452:	4798      	blx	r3
 8009454:	3601      	adds	r6, #1
 8009456:	e7f2      	b.n	800943e <__libc_init_array+0x1e>
 8009458:	080096f0 	.word	0x080096f0
 800945c:	080096f0 	.word	0x080096f0
 8009460:	080096f4 	.word	0x080096f4
 8009464:	080096f0 	.word	0x080096f0

08009468 <__retarget_lock_acquire_recursive>:
 8009468:	4770      	bx	lr

0800946a <__retarget_lock_release_recursive>:
 800946a:	4770      	bx	lr

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	46c0      	nop			@ (mov r8, r8)
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	46c0      	nop			@ (mov r8, r8)
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
 8009484:	0000      	movs	r0, r0
	...

08009488 <__FLASH_Program_Fast_veneer>:
 8009488:	b401      	push	{r0}
 800948a:	4802      	ldr	r0, [pc, #8]	@ (8009494 <__FLASH_Program_Fast_veneer+0xc>)
 800948c:	4684      	mov	ip, r0
 800948e:	bc01      	pop	{r0}
 8009490:	4760      	bx	ip
 8009492:	bf00      	nop
 8009494:	20000139 	.word	0x20000139

Disassembly of section .data:

200000c0 <g_firmware_version>:
200000c0:	                                         .

200000c1 <g_tail_status>:
200000c1:	                                         .

200000c2 <g_uart_out_transmit_commplete>:
200000c2:	                                         .

200000c3 <g_uart_in_transmit_commplete>:
200000c3:	                                         .

200000c4 <g_heartbeat_data_pack_buf>:
200000c4:	000355aa 55fcfdff 000000aa              .U.....U....

200000d0 <s_enum_please_data_packet_buf>:
200000d0:	000355aa 55fbfcff                        .U.....U.

200000d9 <s_enum_please_nums>:
200000d9:	                                         ...

200000dc <SystemCoreClock>:
200000dc:	00f42400                                .$..

200000e0 <uwTickFreq>:
200000e0:	00000001                                ....

200000e4 <uwTickPrio>:
200000e4:	00000004                                ....

200000e8 <_impure_ptr>:
200000e8:	200000ec                                ... 

200000ec <_impure_data>:
200000ec:	00000000 20001124 2000118c 200011f4     ....$.. ... ... 
	...

20000138 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000138:	b510      	push	{r4, lr}
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000013a:	4a0c      	ldr	r2, [pc, #48]	@ (2000016c <FLASH_Program_Fast+0x34>)
2000013c:	6954      	ldr	r4, [r2, #20]
2000013e:	2380      	movs	r3, #128	@ 0x80
20000140:	02db      	lsls	r3, r3, #11
20000142:	4323      	orrs	r3, r4
20000144:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000146:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000014a:	b672      	cpsid	i
  uint8_t index = 0;
2000014c:	2300      	movs	r3, #0
}
2000014e:	e003      	b.n	20000158 <FLASH_Program_Fast+0x20>
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000150:	c904      	ldmia	r1!, {r2}
20000152:	c004      	stmia	r0!, {r2}
    src += 4U;
    dest += 4U;
    index++;
20000154:	3301      	adds	r3, #1
20000156:	b2db      	uxtb	r3, r3
  while (index < 64U)
20000158:	2b3f      	cmp	r3, #63	@ 0x3f
2000015a:	d9f9      	bls.n	20000150 <FLASH_Program_Fast+0x18>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000015c:	4b03      	ldr	r3, [pc, #12]	@ (2000016c <FLASH_Program_Fast+0x34>)
2000015e:	691b      	ldr	r3, [r3, #16]
20000160:	03db      	lsls	r3, r3, #15
20000162:	d4fb      	bmi.n	2000015c <FLASH_Program_Fast+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000164:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000168:	bd10      	pop	{r4, pc}
2000016a:	46c0      	nop			@ (mov r8, r8)
2000016c:	40022000 	.word	0x40022000
