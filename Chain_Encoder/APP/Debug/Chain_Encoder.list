
Chain_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005150  080020c0  080020c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007210  08007210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  00007124  2**0
                  CONTENTS
  4 .ARM          00000000  0800734c  0800734c  00007124  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800734c  0800734c  00007124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800734c  0800734c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007350  08007350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  200000c0  08007354  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000f18  20000124  080073b8  00007124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  080073b8  0000803c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3b5  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046bc  00000000  00000000  00021501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a71e  00000000  00000000  00025bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e05  00000000  00000000  000313f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aeb1  00000000  00000000  000321f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb5b  00000000  00000000  0004d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b211  00000000  00000000  00069c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104e12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c4c  00000000  00000000  00104e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00107aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080020c0 <__do_global_dtors_aux>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4c06      	ldr	r4, [pc, #24]	@ (80020dc <__do_global_dtors_aux+0x1c>)
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <__do_global_dtors_aux+0x1a>
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <__do_global_dtors_aux+0x20>)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <__do_global_dtors_aux+0x24>)
 80020d2:	e000      	b.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d4:	bf00      	nop
 80020d6:	2301      	movs	r3, #1
 80020d8:	7023      	strb	r3, [r4, #0]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	20000124 	.word	0x20000124
 80020e0:	00000000 	.word	0x00000000
 80020e4:	080071e8 	.word	0x080071e8

080020e8 <frame_dummy>:
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <frame_dummy+0x14>)
 80020ea:	b510      	push	{r4, lr}
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <frame_dummy+0x10>
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <frame_dummy+0x18>)
 80020f2:	4804      	ldr	r0, [pc, #16]	@ (8002104 <frame_dummy+0x1c>)
 80020f4:	e000      	b.n	80020f8 <frame_dummy+0x10>
 80020f6:	bf00      	nop
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	00000000 	.word	0x00000000
 8002100:	20000128 	.word	0x20000128
 8002104:	080071e8 	.word	0x080071e8

08002108 <__udivsi3>:
 8002108:	2200      	movs	r2, #0
 800210a:	0843      	lsrs	r3, r0, #1
 800210c:	428b      	cmp	r3, r1
 800210e:	d374      	bcc.n	80021fa <__udivsi3+0xf2>
 8002110:	0903      	lsrs	r3, r0, #4
 8002112:	428b      	cmp	r3, r1
 8002114:	d35f      	bcc.n	80021d6 <__udivsi3+0xce>
 8002116:	0a03      	lsrs	r3, r0, #8
 8002118:	428b      	cmp	r3, r1
 800211a:	d344      	bcc.n	80021a6 <__udivsi3+0x9e>
 800211c:	0b03      	lsrs	r3, r0, #12
 800211e:	428b      	cmp	r3, r1
 8002120:	d328      	bcc.n	8002174 <__udivsi3+0x6c>
 8002122:	0c03      	lsrs	r3, r0, #16
 8002124:	428b      	cmp	r3, r1
 8002126:	d30d      	bcc.n	8002144 <__udivsi3+0x3c>
 8002128:	22ff      	movs	r2, #255	@ 0xff
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	ba12      	rev	r2, r2
 800212e:	0c03      	lsrs	r3, r0, #16
 8002130:	428b      	cmp	r3, r1
 8002132:	d302      	bcc.n	800213a <__udivsi3+0x32>
 8002134:	1212      	asrs	r2, r2, #8
 8002136:	0209      	lsls	r1, r1, #8
 8002138:	d065      	beq.n	8002206 <__udivsi3+0xfe>
 800213a:	0b03      	lsrs	r3, r0, #12
 800213c:	428b      	cmp	r3, r1
 800213e:	d319      	bcc.n	8002174 <__udivsi3+0x6c>
 8002140:	e000      	b.n	8002144 <__udivsi3+0x3c>
 8002142:	0a09      	lsrs	r1, r1, #8
 8002144:	0bc3      	lsrs	r3, r0, #15
 8002146:	428b      	cmp	r3, r1
 8002148:	d301      	bcc.n	800214e <__udivsi3+0x46>
 800214a:	03cb      	lsls	r3, r1, #15
 800214c:	1ac0      	subs	r0, r0, r3
 800214e:	4152      	adcs	r2, r2
 8002150:	0b83      	lsrs	r3, r0, #14
 8002152:	428b      	cmp	r3, r1
 8002154:	d301      	bcc.n	800215a <__udivsi3+0x52>
 8002156:	038b      	lsls	r3, r1, #14
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	4152      	adcs	r2, r2
 800215c:	0b43      	lsrs	r3, r0, #13
 800215e:	428b      	cmp	r3, r1
 8002160:	d301      	bcc.n	8002166 <__udivsi3+0x5e>
 8002162:	034b      	lsls	r3, r1, #13
 8002164:	1ac0      	subs	r0, r0, r3
 8002166:	4152      	adcs	r2, r2
 8002168:	0b03      	lsrs	r3, r0, #12
 800216a:	428b      	cmp	r3, r1
 800216c:	d301      	bcc.n	8002172 <__udivsi3+0x6a>
 800216e:	030b      	lsls	r3, r1, #12
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	4152      	adcs	r2, r2
 8002174:	0ac3      	lsrs	r3, r0, #11
 8002176:	428b      	cmp	r3, r1
 8002178:	d301      	bcc.n	800217e <__udivsi3+0x76>
 800217a:	02cb      	lsls	r3, r1, #11
 800217c:	1ac0      	subs	r0, r0, r3
 800217e:	4152      	adcs	r2, r2
 8002180:	0a83      	lsrs	r3, r0, #10
 8002182:	428b      	cmp	r3, r1
 8002184:	d301      	bcc.n	800218a <__udivsi3+0x82>
 8002186:	028b      	lsls	r3, r1, #10
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	4152      	adcs	r2, r2
 800218c:	0a43      	lsrs	r3, r0, #9
 800218e:	428b      	cmp	r3, r1
 8002190:	d301      	bcc.n	8002196 <__udivsi3+0x8e>
 8002192:	024b      	lsls	r3, r1, #9
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	4152      	adcs	r2, r2
 8002198:	0a03      	lsrs	r3, r0, #8
 800219a:	428b      	cmp	r3, r1
 800219c:	d301      	bcc.n	80021a2 <__udivsi3+0x9a>
 800219e:	020b      	lsls	r3, r1, #8
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	4152      	adcs	r2, r2
 80021a4:	d2cd      	bcs.n	8002142 <__udivsi3+0x3a>
 80021a6:	09c3      	lsrs	r3, r0, #7
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d301      	bcc.n	80021b0 <__udivsi3+0xa8>
 80021ac:	01cb      	lsls	r3, r1, #7
 80021ae:	1ac0      	subs	r0, r0, r3
 80021b0:	4152      	adcs	r2, r2
 80021b2:	0983      	lsrs	r3, r0, #6
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d301      	bcc.n	80021bc <__udivsi3+0xb4>
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	4152      	adcs	r2, r2
 80021be:	0943      	lsrs	r3, r0, #5
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d301      	bcc.n	80021c8 <__udivsi3+0xc0>
 80021c4:	014b      	lsls	r3, r1, #5
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	4152      	adcs	r2, r2
 80021ca:	0903      	lsrs	r3, r0, #4
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d301      	bcc.n	80021d4 <__udivsi3+0xcc>
 80021d0:	010b      	lsls	r3, r1, #4
 80021d2:	1ac0      	subs	r0, r0, r3
 80021d4:	4152      	adcs	r2, r2
 80021d6:	08c3      	lsrs	r3, r0, #3
 80021d8:	428b      	cmp	r3, r1
 80021da:	d301      	bcc.n	80021e0 <__udivsi3+0xd8>
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	1ac0      	subs	r0, r0, r3
 80021e0:	4152      	adcs	r2, r2
 80021e2:	0883      	lsrs	r3, r0, #2
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d301      	bcc.n	80021ec <__udivsi3+0xe4>
 80021e8:	008b      	lsls	r3, r1, #2
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	4152      	adcs	r2, r2
 80021ee:	0843      	lsrs	r3, r0, #1
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d301      	bcc.n	80021f8 <__udivsi3+0xf0>
 80021f4:	004b      	lsls	r3, r1, #1
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	4152      	adcs	r2, r2
 80021fa:	1a41      	subs	r1, r0, r1
 80021fc:	d200      	bcs.n	8002200 <__udivsi3+0xf8>
 80021fe:	4601      	mov	r1, r0
 8002200:	4152      	adcs	r2, r2
 8002202:	4610      	mov	r0, r2
 8002204:	4770      	bx	lr
 8002206:	e7ff      	b.n	8002208 <__udivsi3+0x100>
 8002208:	b501      	push	{r0, lr}
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f806 	bl	800221c <__aeabi_idiv0>
 8002210:	bd02      	pop	{r1, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)

08002214 <__aeabi_uidivmod>:
 8002214:	2900      	cmp	r1, #0
 8002216:	d0f7      	beq.n	8002208 <__udivsi3+0x100>
 8002218:	e776      	b.n	8002108 <__udivsi3>
 800221a:	4770      	bx	lr

0800221c <__aeabi_idiv0>:
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			@ (mov r8, r8)

08002220 <__aeabi_d2uiz>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	2200      	movs	r2, #0
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <__aeabi_d2uiz+0x38>)
 8002226:	0004      	movs	r4, r0
 8002228:	000d      	movs	r5, r1
 800222a:	f001 fa33 	bl	8003694 <__aeabi_dcmpge>
 800222e:	2800      	cmp	r0, #0
 8002230:	d104      	bne.n	800223c <__aeabi_d2uiz+0x1c>
 8002232:	0020      	movs	r0, r4
 8002234:	0029      	movs	r1, r5
 8002236:	f001 f98f 	bl	8003558 <__aeabi_d2iz>
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <__aeabi_d2uiz+0x38>)
 800223e:	2200      	movs	r2, #0
 8002240:	0020      	movs	r0, r4
 8002242:	0029      	movs	r1, r5
 8002244:	f000 fdec 	bl	8002e20 <__aeabi_dsub>
 8002248:	f001 f986 	bl	8003558 <__aeabi_d2iz>
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	469c      	mov	ip, r3
 8002252:	4460      	add	r0, ip
 8002254:	e7f1      	b.n	800223a <__aeabi_d2uiz+0x1a>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	41e00000 	.word	0x41e00000

0800225c <__aeabi_ddiv>:
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	46de      	mov	lr, fp
 8002260:	4645      	mov	r5, r8
 8002262:	4657      	mov	r7, sl
 8002264:	464e      	mov	r6, r9
 8002266:	b5e0      	push	{r5, r6, r7, lr}
 8002268:	b087      	sub	sp, #28
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	030b      	lsls	r3, r1, #12
 8002270:	0b1b      	lsrs	r3, r3, #12
 8002272:	469b      	mov	fp, r3
 8002274:	0fca      	lsrs	r2, r1, #31
 8002276:	004b      	lsls	r3, r1, #1
 8002278:	0004      	movs	r4, r0
 800227a:	4680      	mov	r8, r0
 800227c:	0d5b      	lsrs	r3, r3, #21
 800227e:	9202      	str	r2, [sp, #8]
 8002280:	d100      	bne.n	8002284 <__aeabi_ddiv+0x28>
 8002282:	e16a      	b.n	800255a <__aeabi_ddiv+0x2fe>
 8002284:	4ad4      	ldr	r2, [pc, #848]	@ (80025d8 <__aeabi_ddiv+0x37c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d100      	bne.n	800228c <__aeabi_ddiv+0x30>
 800228a:	e18c      	b.n	80025a6 <__aeabi_ddiv+0x34a>
 800228c:	4659      	mov	r1, fp
 800228e:	0f42      	lsrs	r2, r0, #29
 8002290:	00c9      	lsls	r1, r1, #3
 8002292:	430a      	orrs	r2, r1
 8002294:	2180      	movs	r1, #128	@ 0x80
 8002296:	0409      	lsls	r1, r1, #16
 8002298:	4311      	orrs	r1, r2
 800229a:	00c2      	lsls	r2, r0, #3
 800229c:	4690      	mov	r8, r2
 800229e:	4acf      	ldr	r2, [pc, #828]	@ (80025dc <__aeabi_ddiv+0x380>)
 80022a0:	4689      	mov	r9, r1
 80022a2:	4692      	mov	sl, r2
 80022a4:	449a      	add	sl, r3
 80022a6:	2300      	movs	r3, #0
 80022a8:	2400      	movs	r4, #0
 80022aa:	9303      	str	r3, [sp, #12]
 80022ac:	9e00      	ldr	r6, [sp, #0]
 80022ae:	9f01      	ldr	r7, [sp, #4]
 80022b0:	033b      	lsls	r3, r7, #12
 80022b2:	0b1b      	lsrs	r3, r3, #12
 80022b4:	469b      	mov	fp, r3
 80022b6:	007b      	lsls	r3, r7, #1
 80022b8:	0030      	movs	r0, r6
 80022ba:	0d5b      	lsrs	r3, r3, #21
 80022bc:	0ffd      	lsrs	r5, r7, #31
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_ddiv+0x68>
 80022c2:	e128      	b.n	8002516 <__aeabi_ddiv+0x2ba>
 80022c4:	4ac4      	ldr	r2, [pc, #784]	@ (80025d8 <__aeabi_ddiv+0x37c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d100      	bne.n	80022cc <__aeabi_ddiv+0x70>
 80022ca:	e177      	b.n	80025bc <__aeabi_ddiv+0x360>
 80022cc:	4659      	mov	r1, fp
 80022ce:	0f72      	lsrs	r2, r6, #29
 80022d0:	00c9      	lsls	r1, r1, #3
 80022d2:	430a      	orrs	r2, r1
 80022d4:	2180      	movs	r1, #128	@ 0x80
 80022d6:	0409      	lsls	r1, r1, #16
 80022d8:	4311      	orrs	r1, r2
 80022da:	468b      	mov	fp, r1
 80022dc:	49bf      	ldr	r1, [pc, #764]	@ (80025dc <__aeabi_ddiv+0x380>)
 80022de:	00f2      	lsls	r2, r6, #3
 80022e0:	468c      	mov	ip, r1
 80022e2:	4651      	mov	r1, sl
 80022e4:	4463      	add	r3, ip
 80022e6:	1acb      	subs	r3, r1, r3
 80022e8:	469a      	mov	sl, r3
 80022ea:	2300      	movs	r3, #0
 80022ec:	9e02      	ldr	r6, [sp, #8]
 80022ee:	406e      	eors	r6, r5
 80022f0:	2c0f      	cmp	r4, #15
 80022f2:	d827      	bhi.n	8002344 <__aeabi_ddiv+0xe8>
 80022f4:	49ba      	ldr	r1, [pc, #744]	@ (80025e0 <__aeabi_ddiv+0x384>)
 80022f6:	00a4      	lsls	r4, r4, #2
 80022f8:	5909      	ldr	r1, [r1, r4]
 80022fa:	468f      	mov	pc, r1
 80022fc:	46cb      	mov	fp, r9
 80022fe:	4642      	mov	r2, r8
 8002300:	9e02      	ldr	r6, [sp, #8]
 8002302:	9b03      	ldr	r3, [sp, #12]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d016      	beq.n	8002336 <__aeabi_ddiv+0xda>
 8002308:	2b03      	cmp	r3, #3
 800230a:	d100      	bne.n	800230e <__aeabi_ddiv+0xb2>
 800230c:	e2a6      	b.n	800285c <__aeabi_ddiv+0x600>
 800230e:	2b01      	cmp	r3, #1
 8002310:	d000      	beq.n	8002314 <__aeabi_ddiv+0xb8>
 8002312:	e0df      	b.n	80024d4 <__aeabi_ddiv+0x278>
 8002314:	2200      	movs	r2, #0
 8002316:	2300      	movs	r3, #0
 8002318:	2400      	movs	r4, #0
 800231a:	4690      	mov	r8, r2
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	4323      	orrs	r3, r4
 8002320:	07f6      	lsls	r6, r6, #31
 8002322:	4333      	orrs	r3, r6
 8002324:	4640      	mov	r0, r8
 8002326:	0019      	movs	r1, r3
 8002328:	b007      	add	sp, #28
 800232a:	bcf0      	pop	{r4, r5, r6, r7}
 800232c:	46bb      	mov	fp, r7
 800232e:	46b2      	mov	sl, r6
 8002330:	46a9      	mov	r9, r5
 8002332:	46a0      	mov	r8, r4
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	2200      	movs	r2, #0
 8002338:	2400      	movs	r4, #0
 800233a:	4690      	mov	r8, r2
 800233c:	4ba6      	ldr	r3, [pc, #664]	@ (80025d8 <__aeabi_ddiv+0x37c>)
 800233e:	e7ed      	b.n	800231c <__aeabi_ddiv+0xc0>
 8002340:	002e      	movs	r6, r5
 8002342:	e7df      	b.n	8002304 <__aeabi_ddiv+0xa8>
 8002344:	45cb      	cmp	fp, r9
 8002346:	d200      	bcs.n	800234a <__aeabi_ddiv+0xee>
 8002348:	e1d4      	b.n	80026f4 <__aeabi_ddiv+0x498>
 800234a:	d100      	bne.n	800234e <__aeabi_ddiv+0xf2>
 800234c:	e1cf      	b.n	80026ee <__aeabi_ddiv+0x492>
 800234e:	2301      	movs	r3, #1
 8002350:	425b      	negs	r3, r3
 8002352:	469c      	mov	ip, r3
 8002354:	4644      	mov	r4, r8
 8002356:	4648      	mov	r0, r9
 8002358:	2700      	movs	r7, #0
 800235a:	44e2      	add	sl, ip
 800235c:	465b      	mov	r3, fp
 800235e:	0e15      	lsrs	r5, r2, #24
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	431d      	orrs	r5, r3
 8002364:	0c19      	lsrs	r1, r3, #16
 8002366:	042b      	lsls	r3, r5, #16
 8002368:	0212      	lsls	r2, r2, #8
 800236a:	9500      	str	r5, [sp, #0]
 800236c:	0c1d      	lsrs	r5, r3, #16
 800236e:	4691      	mov	r9, r2
 8002370:	9102      	str	r1, [sp, #8]
 8002372:	9503      	str	r5, [sp, #12]
 8002374:	f7ff ff4e 	bl	8002214 <__aeabi_uidivmod>
 8002378:	0002      	movs	r2, r0
 800237a:	436a      	muls	r2, r5
 800237c:	040b      	lsls	r3, r1, #16
 800237e:	0c21      	lsrs	r1, r4, #16
 8002380:	4680      	mov	r8, r0
 8002382:	4319      	orrs	r1, r3
 8002384:	428a      	cmp	r2, r1
 8002386:	d909      	bls.n	800239c <__aeabi_ddiv+0x140>
 8002388:	9d00      	ldr	r5, [sp, #0]
 800238a:	2301      	movs	r3, #1
 800238c:	46ac      	mov	ip, r5
 800238e:	425b      	negs	r3, r3
 8002390:	4461      	add	r1, ip
 8002392:	469c      	mov	ip, r3
 8002394:	44e0      	add	r8, ip
 8002396:	428d      	cmp	r5, r1
 8002398:	d800      	bhi.n	800239c <__aeabi_ddiv+0x140>
 800239a:	e1fb      	b.n	8002794 <__aeabi_ddiv+0x538>
 800239c:	1a88      	subs	r0, r1, r2
 800239e:	9902      	ldr	r1, [sp, #8]
 80023a0:	f7ff ff38 	bl	8002214 <__aeabi_uidivmod>
 80023a4:	9a03      	ldr	r2, [sp, #12]
 80023a6:	0424      	lsls	r4, r4, #16
 80023a8:	4342      	muls	r2, r0
 80023aa:	0409      	lsls	r1, r1, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
 80023ae:	0003      	movs	r3, r0
 80023b0:	430c      	orrs	r4, r1
 80023b2:	42a2      	cmp	r2, r4
 80023b4:	d906      	bls.n	80023c4 <__aeabi_ddiv+0x168>
 80023b6:	9900      	ldr	r1, [sp, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	468c      	mov	ip, r1
 80023bc:	4464      	add	r4, ip
 80023be:	42a1      	cmp	r1, r4
 80023c0:	d800      	bhi.n	80023c4 <__aeabi_ddiv+0x168>
 80023c2:	e1e1      	b.n	8002788 <__aeabi_ddiv+0x52c>
 80023c4:	1aa0      	subs	r0, r4, r2
 80023c6:	4642      	mov	r2, r8
 80023c8:	0412      	lsls	r2, r2, #16
 80023ca:	431a      	orrs	r2, r3
 80023cc:	4693      	mov	fp, r2
 80023ce:	464b      	mov	r3, r9
 80023d0:	4659      	mov	r1, fp
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	001d      	movs	r5, r3
 80023d6:	9304      	str	r3, [sp, #16]
 80023d8:	040b      	lsls	r3, r1, #16
 80023da:	4649      	mov	r1, r9
 80023dc:	0409      	lsls	r1, r1, #16
 80023de:	0c09      	lsrs	r1, r1, #16
 80023e0:	000c      	movs	r4, r1
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	435c      	muls	r4, r3
 80023e6:	0c12      	lsrs	r2, r2, #16
 80023e8:	436b      	muls	r3, r5
 80023ea:	4688      	mov	r8, r1
 80023ec:	4351      	muls	r1, r2
 80023ee:	436a      	muls	r2, r5
 80023f0:	0c25      	lsrs	r5, r4, #16
 80023f2:	46ac      	mov	ip, r5
 80023f4:	185b      	adds	r3, r3, r1
 80023f6:	4463      	add	r3, ip
 80023f8:	4299      	cmp	r1, r3
 80023fa:	d903      	bls.n	8002404 <__aeabi_ddiv+0x1a8>
 80023fc:	2180      	movs	r1, #128	@ 0x80
 80023fe:	0249      	lsls	r1, r1, #9
 8002400:	468c      	mov	ip, r1
 8002402:	4462      	add	r2, ip
 8002404:	0c19      	lsrs	r1, r3, #16
 8002406:	0424      	lsls	r4, r4, #16
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	0c24      	lsrs	r4, r4, #16
 800240c:	188a      	adds	r2, r1, r2
 800240e:	191c      	adds	r4, r3, r4
 8002410:	4290      	cmp	r0, r2
 8002412:	d302      	bcc.n	800241a <__aeabi_ddiv+0x1be>
 8002414:	d116      	bne.n	8002444 <__aeabi_ddiv+0x1e8>
 8002416:	42a7      	cmp	r7, r4
 8002418:	d214      	bcs.n	8002444 <__aeabi_ddiv+0x1e8>
 800241a:	465b      	mov	r3, fp
 800241c:	9d00      	ldr	r5, [sp, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	444f      	add	r7, r9
 8002422:	9305      	str	r3, [sp, #20]
 8002424:	454f      	cmp	r7, r9
 8002426:	419b      	sbcs	r3, r3
 8002428:	46ac      	mov	ip, r5
 800242a:	425b      	negs	r3, r3
 800242c:	4463      	add	r3, ip
 800242e:	18c0      	adds	r0, r0, r3
 8002430:	4285      	cmp	r5, r0
 8002432:	d300      	bcc.n	8002436 <__aeabi_ddiv+0x1da>
 8002434:	e1a1      	b.n	800277a <__aeabi_ddiv+0x51e>
 8002436:	4282      	cmp	r2, r0
 8002438:	d900      	bls.n	800243c <__aeabi_ddiv+0x1e0>
 800243a:	e1f6      	b.n	800282a <__aeabi_ddiv+0x5ce>
 800243c:	d100      	bne.n	8002440 <__aeabi_ddiv+0x1e4>
 800243e:	e1f1      	b.n	8002824 <__aeabi_ddiv+0x5c8>
 8002440:	9b05      	ldr	r3, [sp, #20]
 8002442:	469b      	mov	fp, r3
 8002444:	1b3c      	subs	r4, r7, r4
 8002446:	42a7      	cmp	r7, r4
 8002448:	41bf      	sbcs	r7, r7
 800244a:	9d00      	ldr	r5, [sp, #0]
 800244c:	1a80      	subs	r0, r0, r2
 800244e:	427f      	negs	r7, r7
 8002450:	1bc0      	subs	r0, r0, r7
 8002452:	4285      	cmp	r5, r0
 8002454:	d100      	bne.n	8002458 <__aeabi_ddiv+0x1fc>
 8002456:	e1d0      	b.n	80027fa <__aeabi_ddiv+0x59e>
 8002458:	9902      	ldr	r1, [sp, #8]
 800245a:	f7ff fedb 	bl	8002214 <__aeabi_uidivmod>
 800245e:	9a03      	ldr	r2, [sp, #12]
 8002460:	040b      	lsls	r3, r1, #16
 8002462:	4342      	muls	r2, r0
 8002464:	0c21      	lsrs	r1, r4, #16
 8002466:	0007      	movs	r7, r0
 8002468:	4319      	orrs	r1, r3
 800246a:	428a      	cmp	r2, r1
 800246c:	d900      	bls.n	8002470 <__aeabi_ddiv+0x214>
 800246e:	e178      	b.n	8002762 <__aeabi_ddiv+0x506>
 8002470:	1a88      	subs	r0, r1, r2
 8002472:	9902      	ldr	r1, [sp, #8]
 8002474:	f7ff fece 	bl	8002214 <__aeabi_uidivmod>
 8002478:	9a03      	ldr	r2, [sp, #12]
 800247a:	0424      	lsls	r4, r4, #16
 800247c:	4342      	muls	r2, r0
 800247e:	0409      	lsls	r1, r1, #16
 8002480:	0c24      	lsrs	r4, r4, #16
 8002482:	0003      	movs	r3, r0
 8002484:	430c      	orrs	r4, r1
 8002486:	42a2      	cmp	r2, r4
 8002488:	d900      	bls.n	800248c <__aeabi_ddiv+0x230>
 800248a:	e15d      	b.n	8002748 <__aeabi_ddiv+0x4ec>
 800248c:	4641      	mov	r1, r8
 800248e:	1aa4      	subs	r4, r4, r2
 8002490:	043a      	lsls	r2, r7, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	9d04      	ldr	r5, [sp, #16]
 8002496:	0413      	lsls	r3, r2, #16
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	4359      	muls	r1, r3
 800249c:	4647      	mov	r7, r8
 800249e:	436b      	muls	r3, r5
 80024a0:	469c      	mov	ip, r3
 80024a2:	0c10      	lsrs	r0, r2, #16
 80024a4:	4347      	muls	r7, r0
 80024a6:	0c0b      	lsrs	r3, r1, #16
 80024a8:	44bc      	add	ip, r7
 80024aa:	4463      	add	r3, ip
 80024ac:	4368      	muls	r0, r5
 80024ae:	429f      	cmp	r7, r3
 80024b0:	d903      	bls.n	80024ba <__aeabi_ddiv+0x25e>
 80024b2:	2580      	movs	r5, #128	@ 0x80
 80024b4:	026d      	lsls	r5, r5, #9
 80024b6:	46ac      	mov	ip, r5
 80024b8:	4460      	add	r0, ip
 80024ba:	0c1f      	lsrs	r7, r3, #16
 80024bc:	0409      	lsls	r1, r1, #16
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	0c09      	lsrs	r1, r1, #16
 80024c2:	183f      	adds	r7, r7, r0
 80024c4:	185b      	adds	r3, r3, r1
 80024c6:	42bc      	cmp	r4, r7
 80024c8:	d200      	bcs.n	80024cc <__aeabi_ddiv+0x270>
 80024ca:	e102      	b.n	80026d2 <__aeabi_ddiv+0x476>
 80024cc:	d100      	bne.n	80024d0 <__aeabi_ddiv+0x274>
 80024ce:	e0fd      	b.n	80026cc <__aeabi_ddiv+0x470>
 80024d0:	2301      	movs	r3, #1
 80024d2:	431a      	orrs	r2, r3
 80024d4:	4b43      	ldr	r3, [pc, #268]	@ (80025e4 <__aeabi_ddiv+0x388>)
 80024d6:	4453      	add	r3, sl
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dc00      	bgt.n	80024de <__aeabi_ddiv+0x282>
 80024dc:	e0ae      	b.n	800263c <__aeabi_ddiv+0x3e0>
 80024de:	0751      	lsls	r1, r2, #29
 80024e0:	d000      	beq.n	80024e4 <__aeabi_ddiv+0x288>
 80024e2:	e198      	b.n	8002816 <__aeabi_ddiv+0x5ba>
 80024e4:	4659      	mov	r1, fp
 80024e6:	01c9      	lsls	r1, r1, #7
 80024e8:	d506      	bpl.n	80024f8 <__aeabi_ddiv+0x29c>
 80024ea:	4659      	mov	r1, fp
 80024ec:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <__aeabi_ddiv+0x38c>)
 80024ee:	4019      	ands	r1, r3
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	468b      	mov	fp, r1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4453      	add	r3, sl
 80024f8:	493c      	ldr	r1, [pc, #240]	@ (80025ec <__aeabi_ddiv+0x390>)
 80024fa:	428b      	cmp	r3, r1
 80024fc:	dd00      	ble.n	8002500 <__aeabi_ddiv+0x2a4>
 80024fe:	e71a      	b.n	8002336 <__aeabi_ddiv+0xda>
 8002500:	4659      	mov	r1, fp
 8002502:	08d2      	lsrs	r2, r2, #3
 8002504:	0749      	lsls	r1, r1, #29
 8002506:	4311      	orrs	r1, r2
 8002508:	465a      	mov	r2, fp
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	0254      	lsls	r4, r2, #9
 800250e:	4688      	mov	r8, r1
 8002510:	0b24      	lsrs	r4, r4, #12
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	e702      	b.n	800231c <__aeabi_ddiv+0xc0>
 8002516:	465a      	mov	r2, fp
 8002518:	9b00      	ldr	r3, [sp, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	d100      	bne.n	8002520 <__aeabi_ddiv+0x2c4>
 800251e:	e07e      	b.n	800261e <__aeabi_ddiv+0x3c2>
 8002520:	465b      	mov	r3, fp
 8002522:	2b00      	cmp	r3, #0
 8002524:	d100      	bne.n	8002528 <__aeabi_ddiv+0x2cc>
 8002526:	e100      	b.n	800272a <__aeabi_ddiv+0x4ce>
 8002528:	4658      	mov	r0, fp
 800252a:	f001 f8bd 	bl	80036a8 <__clzsi2>
 800252e:	0002      	movs	r2, r0
 8002530:	0003      	movs	r3, r0
 8002532:	3a0b      	subs	r2, #11
 8002534:	271d      	movs	r7, #29
 8002536:	9e00      	ldr	r6, [sp, #0]
 8002538:	1aba      	subs	r2, r7, r2
 800253a:	0019      	movs	r1, r3
 800253c:	4658      	mov	r0, fp
 800253e:	40d6      	lsrs	r6, r2
 8002540:	3908      	subs	r1, #8
 8002542:	4088      	lsls	r0, r1
 8002544:	0032      	movs	r2, r6
 8002546:	4302      	orrs	r2, r0
 8002548:	4693      	mov	fp, r2
 800254a:	9a00      	ldr	r2, [sp, #0]
 800254c:	408a      	lsls	r2, r1
 800254e:	4928      	ldr	r1, [pc, #160]	@ (80025f0 <__aeabi_ddiv+0x394>)
 8002550:	4453      	add	r3, sl
 8002552:	468a      	mov	sl, r1
 8002554:	449a      	add	sl, r3
 8002556:	2300      	movs	r3, #0
 8002558:	e6c8      	b.n	80022ec <__aeabi_ddiv+0x90>
 800255a:	465b      	mov	r3, fp
 800255c:	4303      	orrs	r3, r0
 800255e:	4699      	mov	r9, r3
 8002560:	d056      	beq.n	8002610 <__aeabi_ddiv+0x3b4>
 8002562:	465b      	mov	r3, fp
 8002564:	2b00      	cmp	r3, #0
 8002566:	d100      	bne.n	800256a <__aeabi_ddiv+0x30e>
 8002568:	e0cd      	b.n	8002706 <__aeabi_ddiv+0x4aa>
 800256a:	4658      	mov	r0, fp
 800256c:	f001 f89c 	bl	80036a8 <__clzsi2>
 8002570:	230b      	movs	r3, #11
 8002572:	425b      	negs	r3, r3
 8002574:	469c      	mov	ip, r3
 8002576:	0002      	movs	r2, r0
 8002578:	4484      	add	ip, r0
 800257a:	4666      	mov	r6, ip
 800257c:	231d      	movs	r3, #29
 800257e:	1b9b      	subs	r3, r3, r6
 8002580:	0026      	movs	r6, r4
 8002582:	0011      	movs	r1, r2
 8002584:	4658      	mov	r0, fp
 8002586:	40de      	lsrs	r6, r3
 8002588:	3908      	subs	r1, #8
 800258a:	4088      	lsls	r0, r1
 800258c:	0033      	movs	r3, r6
 800258e:	4303      	orrs	r3, r0
 8002590:	4699      	mov	r9, r3
 8002592:	0023      	movs	r3, r4
 8002594:	408b      	lsls	r3, r1
 8002596:	4698      	mov	r8, r3
 8002598:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <__aeabi_ddiv+0x398>)
 800259a:	2400      	movs	r4, #0
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	469a      	mov	sl, r3
 80025a0:	2300      	movs	r3, #0
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	e682      	b.n	80022ac <__aeabi_ddiv+0x50>
 80025a6:	465a      	mov	r2, fp
 80025a8:	4302      	orrs	r2, r0
 80025aa:	4691      	mov	r9, r2
 80025ac:	d12a      	bne.n	8002604 <__aeabi_ddiv+0x3a8>
 80025ae:	2200      	movs	r2, #0
 80025b0:	469a      	mov	sl, r3
 80025b2:	2302      	movs	r3, #2
 80025b4:	4690      	mov	r8, r2
 80025b6:	2408      	movs	r4, #8
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	e677      	b.n	80022ac <__aeabi_ddiv+0x50>
 80025bc:	465a      	mov	r2, fp
 80025be:	9b00      	ldr	r3, [sp, #0]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <__aeabi_ddiv+0x39c>)
 80025c4:	469c      	mov	ip, r3
 80025c6:	44e2      	add	sl, ip
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d117      	bne.n	80025fc <__aeabi_ddiv+0x3a0>
 80025cc:	2302      	movs	r3, #2
 80025ce:	431c      	orrs	r4, r3
 80025d0:	2300      	movs	r3, #0
 80025d2:	469b      	mov	fp, r3
 80025d4:	3302      	adds	r3, #2
 80025d6:	e689      	b.n	80022ec <__aeabi_ddiv+0x90>
 80025d8:	000007ff 	.word	0x000007ff
 80025dc:	fffffc01 	.word	0xfffffc01
 80025e0:	08007210 	.word	0x08007210
 80025e4:	000003ff 	.word	0x000003ff
 80025e8:	feffffff 	.word	0xfeffffff
 80025ec:	000007fe 	.word	0x000007fe
 80025f0:	000003f3 	.word	0x000003f3
 80025f4:	fffffc0d 	.word	0xfffffc0d
 80025f8:	fffff801 	.word	0xfffff801
 80025fc:	2303      	movs	r3, #3
 80025fe:	0032      	movs	r2, r6
 8002600:	431c      	orrs	r4, r3
 8002602:	e673      	b.n	80022ec <__aeabi_ddiv+0x90>
 8002604:	469a      	mov	sl, r3
 8002606:	2303      	movs	r3, #3
 8002608:	46d9      	mov	r9, fp
 800260a:	240c      	movs	r4, #12
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	e64d      	b.n	80022ac <__aeabi_ddiv+0x50>
 8002610:	2300      	movs	r3, #0
 8002612:	4698      	mov	r8, r3
 8002614:	469a      	mov	sl, r3
 8002616:	3301      	adds	r3, #1
 8002618:	2404      	movs	r4, #4
 800261a:	9303      	str	r3, [sp, #12]
 800261c:	e646      	b.n	80022ac <__aeabi_ddiv+0x50>
 800261e:	2301      	movs	r3, #1
 8002620:	431c      	orrs	r4, r3
 8002622:	2300      	movs	r3, #0
 8002624:	469b      	mov	fp, r3
 8002626:	3301      	adds	r3, #1
 8002628:	e660      	b.n	80022ec <__aeabi_ddiv+0x90>
 800262a:	2300      	movs	r3, #0
 800262c:	2480      	movs	r4, #128	@ 0x80
 800262e:	4698      	mov	r8, r3
 8002630:	2600      	movs	r6, #0
 8002632:	4b92      	ldr	r3, [pc, #584]	@ (800287c <__aeabi_ddiv+0x620>)
 8002634:	0324      	lsls	r4, r4, #12
 8002636:	e671      	b.n	800231c <__aeabi_ddiv+0xc0>
 8002638:	2201      	movs	r2, #1
 800263a:	4252      	negs	r2, r2
 800263c:	2101      	movs	r1, #1
 800263e:	1ac9      	subs	r1, r1, r3
 8002640:	2938      	cmp	r1, #56	@ 0x38
 8002642:	dd00      	ble.n	8002646 <__aeabi_ddiv+0x3ea>
 8002644:	e666      	b.n	8002314 <__aeabi_ddiv+0xb8>
 8002646:	291f      	cmp	r1, #31
 8002648:	dc00      	bgt.n	800264c <__aeabi_ddiv+0x3f0>
 800264a:	e0ab      	b.n	80027a4 <__aeabi_ddiv+0x548>
 800264c:	201f      	movs	r0, #31
 800264e:	4240      	negs	r0, r0
 8002650:	1ac3      	subs	r3, r0, r3
 8002652:	4658      	mov	r0, fp
 8002654:	40d8      	lsrs	r0, r3
 8002656:	0003      	movs	r3, r0
 8002658:	2920      	cmp	r1, #32
 800265a:	d004      	beq.n	8002666 <__aeabi_ddiv+0x40a>
 800265c:	4658      	mov	r0, fp
 800265e:	4988      	ldr	r1, [pc, #544]	@ (8002880 <__aeabi_ddiv+0x624>)
 8002660:	4451      	add	r1, sl
 8002662:	4088      	lsls	r0, r1
 8002664:	4302      	orrs	r2, r0
 8002666:	1e51      	subs	r1, r2, #1
 8002668:	418a      	sbcs	r2, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	2307      	movs	r3, #7
 800266e:	0019      	movs	r1, r3
 8002670:	2400      	movs	r4, #0
 8002672:	4011      	ands	r1, r2
 8002674:	4213      	tst	r3, r2
 8002676:	d00c      	beq.n	8002692 <__aeabi_ddiv+0x436>
 8002678:	230f      	movs	r3, #15
 800267a:	4013      	ands	r3, r2
 800267c:	2b04      	cmp	r3, #4
 800267e:	d100      	bne.n	8002682 <__aeabi_ddiv+0x426>
 8002680:	e0f9      	b.n	8002876 <__aeabi_ddiv+0x61a>
 8002682:	1d11      	adds	r1, r2, #4
 8002684:	4291      	cmp	r1, r2
 8002686:	419b      	sbcs	r3, r3
 8002688:	000a      	movs	r2, r1
 800268a:	425b      	negs	r3, r3
 800268c:	0759      	lsls	r1, r3, #29
 800268e:	025b      	lsls	r3, r3, #9
 8002690:	0b1c      	lsrs	r4, r3, #12
 8002692:	08d2      	lsrs	r2, r2, #3
 8002694:	430a      	orrs	r2, r1
 8002696:	4690      	mov	r8, r2
 8002698:	2300      	movs	r3, #0
 800269a:	e63f      	b.n	800231c <__aeabi_ddiv+0xc0>
 800269c:	2480      	movs	r4, #128	@ 0x80
 800269e:	464b      	mov	r3, r9
 80026a0:	0324      	lsls	r4, r4, #12
 80026a2:	4223      	tst	r3, r4
 80026a4:	d009      	beq.n	80026ba <__aeabi_ddiv+0x45e>
 80026a6:	465b      	mov	r3, fp
 80026a8:	4223      	tst	r3, r4
 80026aa:	d106      	bne.n	80026ba <__aeabi_ddiv+0x45e>
 80026ac:	431c      	orrs	r4, r3
 80026ae:	0324      	lsls	r4, r4, #12
 80026b0:	002e      	movs	r6, r5
 80026b2:	4690      	mov	r8, r2
 80026b4:	4b71      	ldr	r3, [pc, #452]	@ (800287c <__aeabi_ddiv+0x620>)
 80026b6:	0b24      	lsrs	r4, r4, #12
 80026b8:	e630      	b.n	800231c <__aeabi_ddiv+0xc0>
 80026ba:	2480      	movs	r4, #128	@ 0x80
 80026bc:	464b      	mov	r3, r9
 80026be:	0324      	lsls	r4, r4, #12
 80026c0:	431c      	orrs	r4, r3
 80026c2:	0324      	lsls	r4, r4, #12
 80026c4:	9e02      	ldr	r6, [sp, #8]
 80026c6:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <__aeabi_ddiv+0x620>)
 80026c8:	0b24      	lsrs	r4, r4, #12
 80026ca:	e627      	b.n	800231c <__aeabi_ddiv+0xc0>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_ddiv+0x476>
 80026d0:	e700      	b.n	80024d4 <__aeabi_ddiv+0x278>
 80026d2:	9800      	ldr	r0, [sp, #0]
 80026d4:	1e51      	subs	r1, r2, #1
 80026d6:	4684      	mov	ip, r0
 80026d8:	4464      	add	r4, ip
 80026da:	4284      	cmp	r4, r0
 80026dc:	d200      	bcs.n	80026e0 <__aeabi_ddiv+0x484>
 80026de:	e084      	b.n	80027ea <__aeabi_ddiv+0x58e>
 80026e0:	42bc      	cmp	r4, r7
 80026e2:	d200      	bcs.n	80026e6 <__aeabi_ddiv+0x48a>
 80026e4:	e0ae      	b.n	8002844 <__aeabi_ddiv+0x5e8>
 80026e6:	d100      	bne.n	80026ea <__aeabi_ddiv+0x48e>
 80026e8:	e0c1      	b.n	800286e <__aeabi_ddiv+0x612>
 80026ea:	000a      	movs	r2, r1
 80026ec:	e6f0      	b.n	80024d0 <__aeabi_ddiv+0x274>
 80026ee:	4542      	cmp	r2, r8
 80026f0:	d900      	bls.n	80026f4 <__aeabi_ddiv+0x498>
 80026f2:	e62c      	b.n	800234e <__aeabi_ddiv+0xf2>
 80026f4:	464b      	mov	r3, r9
 80026f6:	07dc      	lsls	r4, r3, #31
 80026f8:	0858      	lsrs	r0, r3, #1
 80026fa:	4643      	mov	r3, r8
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	431c      	orrs	r4, r3
 8002700:	4643      	mov	r3, r8
 8002702:	07df      	lsls	r7, r3, #31
 8002704:	e62a      	b.n	800235c <__aeabi_ddiv+0x100>
 8002706:	f000 ffcf 	bl	80036a8 <__clzsi2>
 800270a:	2315      	movs	r3, #21
 800270c:	469c      	mov	ip, r3
 800270e:	4484      	add	ip, r0
 8002710:	0002      	movs	r2, r0
 8002712:	4663      	mov	r3, ip
 8002714:	3220      	adds	r2, #32
 8002716:	2b1c      	cmp	r3, #28
 8002718:	dc00      	bgt.n	800271c <__aeabi_ddiv+0x4c0>
 800271a:	e72e      	b.n	800257a <__aeabi_ddiv+0x31e>
 800271c:	0023      	movs	r3, r4
 800271e:	3808      	subs	r0, #8
 8002720:	4083      	lsls	r3, r0
 8002722:	4699      	mov	r9, r3
 8002724:	2300      	movs	r3, #0
 8002726:	4698      	mov	r8, r3
 8002728:	e736      	b.n	8002598 <__aeabi_ddiv+0x33c>
 800272a:	f000 ffbd 	bl	80036a8 <__clzsi2>
 800272e:	0002      	movs	r2, r0
 8002730:	0003      	movs	r3, r0
 8002732:	3215      	adds	r2, #21
 8002734:	3320      	adds	r3, #32
 8002736:	2a1c      	cmp	r2, #28
 8002738:	dc00      	bgt.n	800273c <__aeabi_ddiv+0x4e0>
 800273a:	e6fb      	b.n	8002534 <__aeabi_ddiv+0x2d8>
 800273c:	9900      	ldr	r1, [sp, #0]
 800273e:	3808      	subs	r0, #8
 8002740:	4081      	lsls	r1, r0
 8002742:	2200      	movs	r2, #0
 8002744:	468b      	mov	fp, r1
 8002746:	e702      	b.n	800254e <__aeabi_ddiv+0x2f2>
 8002748:	9900      	ldr	r1, [sp, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	468c      	mov	ip, r1
 800274e:	4464      	add	r4, ip
 8002750:	42a1      	cmp	r1, r4
 8002752:	d900      	bls.n	8002756 <__aeabi_ddiv+0x4fa>
 8002754:	e69a      	b.n	800248c <__aeabi_ddiv+0x230>
 8002756:	42a2      	cmp	r2, r4
 8002758:	d800      	bhi.n	800275c <__aeabi_ddiv+0x500>
 800275a:	e697      	b.n	800248c <__aeabi_ddiv+0x230>
 800275c:	1e83      	subs	r3, r0, #2
 800275e:	4464      	add	r4, ip
 8002760:	e694      	b.n	800248c <__aeabi_ddiv+0x230>
 8002762:	46ac      	mov	ip, r5
 8002764:	4461      	add	r1, ip
 8002766:	3f01      	subs	r7, #1
 8002768:	428d      	cmp	r5, r1
 800276a:	d900      	bls.n	800276e <__aeabi_ddiv+0x512>
 800276c:	e680      	b.n	8002470 <__aeabi_ddiv+0x214>
 800276e:	428a      	cmp	r2, r1
 8002770:	d800      	bhi.n	8002774 <__aeabi_ddiv+0x518>
 8002772:	e67d      	b.n	8002470 <__aeabi_ddiv+0x214>
 8002774:	1e87      	subs	r7, r0, #2
 8002776:	4461      	add	r1, ip
 8002778:	e67a      	b.n	8002470 <__aeabi_ddiv+0x214>
 800277a:	4285      	cmp	r5, r0
 800277c:	d000      	beq.n	8002780 <__aeabi_ddiv+0x524>
 800277e:	e65f      	b.n	8002440 <__aeabi_ddiv+0x1e4>
 8002780:	45b9      	cmp	r9, r7
 8002782:	d900      	bls.n	8002786 <__aeabi_ddiv+0x52a>
 8002784:	e65c      	b.n	8002440 <__aeabi_ddiv+0x1e4>
 8002786:	e656      	b.n	8002436 <__aeabi_ddiv+0x1da>
 8002788:	42a2      	cmp	r2, r4
 800278a:	d800      	bhi.n	800278e <__aeabi_ddiv+0x532>
 800278c:	e61a      	b.n	80023c4 <__aeabi_ddiv+0x168>
 800278e:	1e83      	subs	r3, r0, #2
 8002790:	4464      	add	r4, ip
 8002792:	e617      	b.n	80023c4 <__aeabi_ddiv+0x168>
 8002794:	428a      	cmp	r2, r1
 8002796:	d800      	bhi.n	800279a <__aeabi_ddiv+0x53e>
 8002798:	e600      	b.n	800239c <__aeabi_ddiv+0x140>
 800279a:	46ac      	mov	ip, r5
 800279c:	1e83      	subs	r3, r0, #2
 800279e:	4698      	mov	r8, r3
 80027a0:	4461      	add	r1, ip
 80027a2:	e5fb      	b.n	800239c <__aeabi_ddiv+0x140>
 80027a4:	4837      	ldr	r0, [pc, #220]	@ (8002884 <__aeabi_ddiv+0x628>)
 80027a6:	0014      	movs	r4, r2
 80027a8:	4450      	add	r0, sl
 80027aa:	4082      	lsls	r2, r0
 80027ac:	465b      	mov	r3, fp
 80027ae:	0017      	movs	r7, r2
 80027b0:	4083      	lsls	r3, r0
 80027b2:	40cc      	lsrs	r4, r1
 80027b4:	1e7a      	subs	r2, r7, #1
 80027b6:	4197      	sbcs	r7, r2
 80027b8:	4323      	orrs	r3, r4
 80027ba:	433b      	orrs	r3, r7
 80027bc:	001a      	movs	r2, r3
 80027be:	465b      	mov	r3, fp
 80027c0:	40cb      	lsrs	r3, r1
 80027c2:	0751      	lsls	r1, r2, #29
 80027c4:	d009      	beq.n	80027da <__aeabi_ddiv+0x57e>
 80027c6:	210f      	movs	r1, #15
 80027c8:	4011      	ands	r1, r2
 80027ca:	2904      	cmp	r1, #4
 80027cc:	d005      	beq.n	80027da <__aeabi_ddiv+0x57e>
 80027ce:	1d11      	adds	r1, r2, #4
 80027d0:	4291      	cmp	r1, r2
 80027d2:	4192      	sbcs	r2, r2
 80027d4:	4252      	negs	r2, r2
 80027d6:	189b      	adds	r3, r3, r2
 80027d8:	000a      	movs	r2, r1
 80027da:	0219      	lsls	r1, r3, #8
 80027dc:	d400      	bmi.n	80027e0 <__aeabi_ddiv+0x584>
 80027de:	e755      	b.n	800268c <__aeabi_ddiv+0x430>
 80027e0:	2200      	movs	r2, #0
 80027e2:	2301      	movs	r3, #1
 80027e4:	2400      	movs	r4, #0
 80027e6:	4690      	mov	r8, r2
 80027e8:	e598      	b.n	800231c <__aeabi_ddiv+0xc0>
 80027ea:	000a      	movs	r2, r1
 80027ec:	42bc      	cmp	r4, r7
 80027ee:	d000      	beq.n	80027f2 <__aeabi_ddiv+0x596>
 80027f0:	e66e      	b.n	80024d0 <__aeabi_ddiv+0x274>
 80027f2:	454b      	cmp	r3, r9
 80027f4:	d000      	beq.n	80027f8 <__aeabi_ddiv+0x59c>
 80027f6:	e66b      	b.n	80024d0 <__aeabi_ddiv+0x274>
 80027f8:	e66c      	b.n	80024d4 <__aeabi_ddiv+0x278>
 80027fa:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <__aeabi_ddiv+0x62c>)
 80027fc:	4a23      	ldr	r2, [pc, #140]	@ (800288c <__aeabi_ddiv+0x630>)
 80027fe:	4453      	add	r3, sl
 8002800:	4592      	cmp	sl, r2
 8002802:	da00      	bge.n	8002806 <__aeabi_ddiv+0x5aa>
 8002804:	e718      	b.n	8002638 <__aeabi_ddiv+0x3dc>
 8002806:	2101      	movs	r1, #1
 8002808:	4249      	negs	r1, r1
 800280a:	1d0a      	adds	r2, r1, #4
 800280c:	428a      	cmp	r2, r1
 800280e:	4189      	sbcs	r1, r1
 8002810:	4249      	negs	r1, r1
 8002812:	448b      	add	fp, r1
 8002814:	e666      	b.n	80024e4 <__aeabi_ddiv+0x288>
 8002816:	210f      	movs	r1, #15
 8002818:	4011      	ands	r1, r2
 800281a:	2904      	cmp	r1, #4
 800281c:	d100      	bne.n	8002820 <__aeabi_ddiv+0x5c4>
 800281e:	e661      	b.n	80024e4 <__aeabi_ddiv+0x288>
 8002820:	0011      	movs	r1, r2
 8002822:	e7f2      	b.n	800280a <__aeabi_ddiv+0x5ae>
 8002824:	42bc      	cmp	r4, r7
 8002826:	d800      	bhi.n	800282a <__aeabi_ddiv+0x5ce>
 8002828:	e60a      	b.n	8002440 <__aeabi_ddiv+0x1e4>
 800282a:	2302      	movs	r3, #2
 800282c:	425b      	negs	r3, r3
 800282e:	469c      	mov	ip, r3
 8002830:	9900      	ldr	r1, [sp, #0]
 8002832:	444f      	add	r7, r9
 8002834:	454f      	cmp	r7, r9
 8002836:	419b      	sbcs	r3, r3
 8002838:	44e3      	add	fp, ip
 800283a:	468c      	mov	ip, r1
 800283c:	425b      	negs	r3, r3
 800283e:	4463      	add	r3, ip
 8002840:	18c0      	adds	r0, r0, r3
 8002842:	e5ff      	b.n	8002444 <__aeabi_ddiv+0x1e8>
 8002844:	4649      	mov	r1, r9
 8002846:	9d00      	ldr	r5, [sp, #0]
 8002848:	0048      	lsls	r0, r1, #1
 800284a:	4548      	cmp	r0, r9
 800284c:	4189      	sbcs	r1, r1
 800284e:	46ac      	mov	ip, r5
 8002850:	4249      	negs	r1, r1
 8002852:	4461      	add	r1, ip
 8002854:	4681      	mov	r9, r0
 8002856:	3a02      	subs	r2, #2
 8002858:	1864      	adds	r4, r4, r1
 800285a:	e7c7      	b.n	80027ec <__aeabi_ddiv+0x590>
 800285c:	2480      	movs	r4, #128	@ 0x80
 800285e:	465b      	mov	r3, fp
 8002860:	0324      	lsls	r4, r4, #12
 8002862:	431c      	orrs	r4, r3
 8002864:	0324      	lsls	r4, r4, #12
 8002866:	4690      	mov	r8, r2
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <__aeabi_ddiv+0x620>)
 800286a:	0b24      	lsrs	r4, r4, #12
 800286c:	e556      	b.n	800231c <__aeabi_ddiv+0xc0>
 800286e:	4599      	cmp	r9, r3
 8002870:	d3e8      	bcc.n	8002844 <__aeabi_ddiv+0x5e8>
 8002872:	000a      	movs	r2, r1
 8002874:	e7bd      	b.n	80027f2 <__aeabi_ddiv+0x596>
 8002876:	2300      	movs	r3, #0
 8002878:	e708      	b.n	800268c <__aeabi_ddiv+0x430>
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	000007ff 	.word	0x000007ff
 8002880:	0000043e 	.word	0x0000043e
 8002884:	0000041e 	.word	0x0000041e
 8002888:	000003ff 	.word	0x000003ff
 800288c:	fffffc02 	.word	0xfffffc02

08002890 <__aeabi_dmul>:
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	4657      	mov	r7, sl
 8002894:	46de      	mov	lr, fp
 8002896:	464e      	mov	r6, r9
 8002898:	4645      	mov	r5, r8
 800289a:	b5e0      	push	{r5, r6, r7, lr}
 800289c:	001f      	movs	r7, r3
 800289e:	030b      	lsls	r3, r1, #12
 80028a0:	0b1b      	lsrs	r3, r3, #12
 80028a2:	0016      	movs	r6, r2
 80028a4:	469a      	mov	sl, r3
 80028a6:	0fca      	lsrs	r2, r1, #31
 80028a8:	004b      	lsls	r3, r1, #1
 80028aa:	0004      	movs	r4, r0
 80028ac:	4693      	mov	fp, r2
 80028ae:	b087      	sub	sp, #28
 80028b0:	0d5b      	lsrs	r3, r3, #21
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x26>
 80028b4:	e0d5      	b.n	8002a62 <__aeabi_dmul+0x1d2>
 80028b6:	4abb      	ldr	r2, [pc, #748]	@ (8002ba4 <__aeabi_dmul+0x314>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x2e>
 80028bc:	e0f8      	b.n	8002ab0 <__aeabi_dmul+0x220>
 80028be:	4651      	mov	r1, sl
 80028c0:	0f42      	lsrs	r2, r0, #29
 80028c2:	00c9      	lsls	r1, r1, #3
 80028c4:	430a      	orrs	r2, r1
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	0409      	lsls	r1, r1, #16
 80028ca:	4311      	orrs	r1, r2
 80028cc:	00c2      	lsls	r2, r0, #3
 80028ce:	4691      	mov	r9, r2
 80028d0:	4ab5      	ldr	r2, [pc, #724]	@ (8002ba8 <__aeabi_dmul+0x318>)
 80028d2:	468a      	mov	sl, r1
 80028d4:	189d      	adds	r5, r3, r2
 80028d6:	2300      	movs	r3, #0
 80028d8:	4698      	mov	r8, r3
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	033c      	lsls	r4, r7, #12
 80028de:	007b      	lsls	r3, r7, #1
 80028e0:	0ffa      	lsrs	r2, r7, #31
 80028e2:	0030      	movs	r0, r6
 80028e4:	0b24      	lsrs	r4, r4, #12
 80028e6:	0d5b      	lsrs	r3, r3, #21
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	d100      	bne.n	80028ee <__aeabi_dmul+0x5e>
 80028ec:	e096      	b.n	8002a1c <__aeabi_dmul+0x18c>
 80028ee:	4aad      	ldr	r2, [pc, #692]	@ (8002ba4 <__aeabi_dmul+0x314>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d031      	beq.n	8002958 <__aeabi_dmul+0xc8>
 80028f4:	0f72      	lsrs	r2, r6, #29
 80028f6:	00e4      	lsls	r4, r4, #3
 80028f8:	4322      	orrs	r2, r4
 80028fa:	2480      	movs	r4, #128	@ 0x80
 80028fc:	0424      	lsls	r4, r4, #16
 80028fe:	4314      	orrs	r4, r2
 8002900:	4aa9      	ldr	r2, [pc, #676]	@ (8002ba8 <__aeabi_dmul+0x318>)
 8002902:	00f0      	lsls	r0, r6, #3
 8002904:	4694      	mov	ip, r2
 8002906:	4463      	add	r3, ip
 8002908:	195b      	adds	r3, r3, r5
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	9201      	str	r2, [sp, #4]
 800290e:	4642      	mov	r2, r8
 8002910:	2600      	movs	r6, #0
 8002912:	2a0a      	cmp	r2, #10
 8002914:	dc42      	bgt.n	800299c <__aeabi_dmul+0x10c>
 8002916:	465a      	mov	r2, fp
 8002918:	9900      	ldr	r1, [sp, #0]
 800291a:	404a      	eors	r2, r1
 800291c:	4693      	mov	fp, r2
 800291e:	4642      	mov	r2, r8
 8002920:	2a02      	cmp	r2, #2
 8002922:	dc32      	bgt.n	800298a <__aeabi_dmul+0xfa>
 8002924:	3a01      	subs	r2, #1
 8002926:	2a01      	cmp	r2, #1
 8002928:	d900      	bls.n	800292c <__aeabi_dmul+0x9c>
 800292a:	e149      	b.n	8002bc0 <__aeabi_dmul+0x330>
 800292c:	2e02      	cmp	r6, #2
 800292e:	d100      	bne.n	8002932 <__aeabi_dmul+0xa2>
 8002930:	e0ca      	b.n	8002ac8 <__aeabi_dmul+0x238>
 8002932:	2e01      	cmp	r6, #1
 8002934:	d13d      	bne.n	80029b2 <__aeabi_dmul+0x122>
 8002936:	2300      	movs	r3, #0
 8002938:	2400      	movs	r4, #0
 800293a:	2200      	movs	r2, #0
 800293c:	0010      	movs	r0, r2
 800293e:	465a      	mov	r2, fp
 8002940:	051b      	lsls	r3, r3, #20
 8002942:	4323      	orrs	r3, r4
 8002944:	07d2      	lsls	r2, r2, #31
 8002946:	4313      	orrs	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	b007      	add	sp, #28
 800294c:	bcf0      	pop	{r4, r5, r6, r7}
 800294e:	46bb      	mov	fp, r7
 8002950:	46b2      	mov	sl, r6
 8002952:	46a9      	mov	r9, r5
 8002954:	46a0      	mov	r8, r4
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002958:	4b92      	ldr	r3, [pc, #584]	@ (8002ba4 <__aeabi_dmul+0x314>)
 800295a:	4326      	orrs	r6, r4
 800295c:	18eb      	adds	r3, r5, r3
 800295e:	2e00      	cmp	r6, #0
 8002960:	d100      	bne.n	8002964 <__aeabi_dmul+0xd4>
 8002962:	e0bb      	b.n	8002adc <__aeabi_dmul+0x24c>
 8002964:	2203      	movs	r2, #3
 8002966:	4641      	mov	r1, r8
 8002968:	4311      	orrs	r1, r2
 800296a:	465a      	mov	r2, fp
 800296c:	4688      	mov	r8, r1
 800296e:	9900      	ldr	r1, [sp, #0]
 8002970:	404a      	eors	r2, r1
 8002972:	2180      	movs	r1, #128	@ 0x80
 8002974:	0109      	lsls	r1, r1, #4
 8002976:	468c      	mov	ip, r1
 8002978:	0029      	movs	r1, r5
 800297a:	4461      	add	r1, ip
 800297c:	9101      	str	r1, [sp, #4]
 800297e:	4641      	mov	r1, r8
 8002980:	290a      	cmp	r1, #10
 8002982:	dd00      	ble.n	8002986 <__aeabi_dmul+0xf6>
 8002984:	e233      	b.n	8002dee <__aeabi_dmul+0x55e>
 8002986:	4693      	mov	fp, r2
 8002988:	2603      	movs	r6, #3
 800298a:	4642      	mov	r2, r8
 800298c:	2701      	movs	r7, #1
 800298e:	4097      	lsls	r7, r2
 8002990:	21a6      	movs	r1, #166	@ 0xa6
 8002992:	003a      	movs	r2, r7
 8002994:	00c9      	lsls	r1, r1, #3
 8002996:	400a      	ands	r2, r1
 8002998:	420f      	tst	r7, r1
 800299a:	d031      	beq.n	8002a00 <__aeabi_dmul+0x170>
 800299c:	9e02      	ldr	r6, [sp, #8]
 800299e:	2e02      	cmp	r6, #2
 80029a0:	d100      	bne.n	80029a4 <__aeabi_dmul+0x114>
 80029a2:	e235      	b.n	8002e10 <__aeabi_dmul+0x580>
 80029a4:	2e03      	cmp	r6, #3
 80029a6:	d100      	bne.n	80029aa <__aeabi_dmul+0x11a>
 80029a8:	e1d2      	b.n	8002d50 <__aeabi_dmul+0x4c0>
 80029aa:	4654      	mov	r4, sl
 80029ac:	4648      	mov	r0, r9
 80029ae:	2e01      	cmp	r6, #1
 80029b0:	d0c1      	beq.n	8002936 <__aeabi_dmul+0xa6>
 80029b2:	9a01      	ldr	r2, [sp, #4]
 80029b4:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <__aeabi_dmul+0x31c>)
 80029b6:	4694      	mov	ip, r2
 80029b8:	4463      	add	r3, ip
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	dc00      	bgt.n	80029c0 <__aeabi_dmul+0x130>
 80029be:	e0c0      	b.n	8002b42 <__aeabi_dmul+0x2b2>
 80029c0:	0742      	lsls	r2, r0, #29
 80029c2:	d009      	beq.n	80029d8 <__aeabi_dmul+0x148>
 80029c4:	220f      	movs	r2, #15
 80029c6:	4002      	ands	r2, r0
 80029c8:	2a04      	cmp	r2, #4
 80029ca:	d005      	beq.n	80029d8 <__aeabi_dmul+0x148>
 80029cc:	1d02      	adds	r2, r0, #4
 80029ce:	4282      	cmp	r2, r0
 80029d0:	4180      	sbcs	r0, r0
 80029d2:	4240      	negs	r0, r0
 80029d4:	1824      	adds	r4, r4, r0
 80029d6:	0010      	movs	r0, r2
 80029d8:	01e2      	lsls	r2, r4, #7
 80029da:	d506      	bpl.n	80029ea <__aeabi_dmul+0x15a>
 80029dc:	4b74      	ldr	r3, [pc, #464]	@ (8002bb0 <__aeabi_dmul+0x320>)
 80029de:	9a01      	ldr	r2, [sp, #4]
 80029e0:	401c      	ands	r4, r3
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	4694      	mov	ip, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4463      	add	r3, ip
 80029ea:	4a72      	ldr	r2, [pc, #456]	@ (8002bb4 <__aeabi_dmul+0x324>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	dc6b      	bgt.n	8002ac8 <__aeabi_dmul+0x238>
 80029f0:	0762      	lsls	r2, r4, #29
 80029f2:	08c0      	lsrs	r0, r0, #3
 80029f4:	0264      	lsls	r4, r4, #9
 80029f6:	055b      	lsls	r3, r3, #21
 80029f8:	4302      	orrs	r2, r0
 80029fa:	0b24      	lsrs	r4, r4, #12
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	e79d      	b.n	800293c <__aeabi_dmul+0xac>
 8002a00:	2190      	movs	r1, #144	@ 0x90
 8002a02:	0089      	lsls	r1, r1, #2
 8002a04:	420f      	tst	r7, r1
 8002a06:	d163      	bne.n	8002ad0 <__aeabi_dmul+0x240>
 8002a08:	2288      	movs	r2, #136	@ 0x88
 8002a0a:	423a      	tst	r2, r7
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dmul+0x180>
 8002a0e:	e0d7      	b.n	8002bc0 <__aeabi_dmul+0x330>
 8002a10:	9b00      	ldr	r3, [sp, #0]
 8002a12:	46a2      	mov	sl, r4
 8002a14:	469b      	mov	fp, r3
 8002a16:	4681      	mov	r9, r0
 8002a18:	9602      	str	r6, [sp, #8]
 8002a1a:	e7bf      	b.n	800299c <__aeabi_dmul+0x10c>
 8002a1c:	0023      	movs	r3, r4
 8002a1e:	4333      	orrs	r3, r6
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dmul+0x194>
 8002a22:	e07f      	b.n	8002b24 <__aeabi_dmul+0x294>
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dmul+0x19a>
 8002a28:	e1ad      	b.n	8002d86 <__aeabi_dmul+0x4f6>
 8002a2a:	0020      	movs	r0, r4
 8002a2c:	f000 fe3c 	bl	80036a8 <__clzsi2>
 8002a30:	0002      	movs	r2, r0
 8002a32:	0003      	movs	r3, r0
 8002a34:	3a0b      	subs	r2, #11
 8002a36:	201d      	movs	r0, #29
 8002a38:	0019      	movs	r1, r3
 8002a3a:	1a82      	subs	r2, r0, r2
 8002a3c:	0030      	movs	r0, r6
 8002a3e:	3908      	subs	r1, #8
 8002a40:	40d0      	lsrs	r0, r2
 8002a42:	408c      	lsls	r4, r1
 8002a44:	4304      	orrs	r4, r0
 8002a46:	0030      	movs	r0, r6
 8002a48:	4088      	lsls	r0, r1
 8002a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb8 <__aeabi_dmul+0x328>)
 8002a4c:	1aeb      	subs	r3, r5, r3
 8002a4e:	4694      	mov	ip, r2
 8002a50:	4463      	add	r3, ip
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	9201      	str	r2, [sp, #4]
 8002a56:	4642      	mov	r2, r8
 8002a58:	2600      	movs	r6, #0
 8002a5a:	2a0a      	cmp	r2, #10
 8002a5c:	dc00      	bgt.n	8002a60 <__aeabi_dmul+0x1d0>
 8002a5e:	e75a      	b.n	8002916 <__aeabi_dmul+0x86>
 8002a60:	e79c      	b.n	800299c <__aeabi_dmul+0x10c>
 8002a62:	4653      	mov	r3, sl
 8002a64:	4303      	orrs	r3, r0
 8002a66:	4699      	mov	r9, r3
 8002a68:	d054      	beq.n	8002b14 <__aeabi_dmul+0x284>
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dmul+0x1e2>
 8002a70:	e177      	b.n	8002d62 <__aeabi_dmul+0x4d2>
 8002a72:	4650      	mov	r0, sl
 8002a74:	f000 fe18 	bl	80036a8 <__clzsi2>
 8002a78:	230b      	movs	r3, #11
 8002a7a:	425b      	negs	r3, r3
 8002a7c:	469c      	mov	ip, r3
 8002a7e:	0002      	movs	r2, r0
 8002a80:	4484      	add	ip, r0
 8002a82:	0011      	movs	r1, r2
 8002a84:	4650      	mov	r0, sl
 8002a86:	3908      	subs	r1, #8
 8002a88:	4088      	lsls	r0, r1
 8002a8a:	231d      	movs	r3, #29
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	4660      	mov	r0, ip
 8002a90:	1a1b      	subs	r3, r3, r0
 8002a92:	0020      	movs	r0, r4
 8002a94:	40d8      	lsrs	r0, r3
 8002a96:	0003      	movs	r3, r0
 8002a98:	4640      	mov	r0, r8
 8002a9a:	4303      	orrs	r3, r0
 8002a9c:	469a      	mov	sl, r3
 8002a9e:	0023      	movs	r3, r4
 8002aa0:	408b      	lsls	r3, r1
 8002aa2:	4699      	mov	r9, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4d44      	ldr	r5, [pc, #272]	@ (8002bb8 <__aeabi_dmul+0x328>)
 8002aa8:	4698      	mov	r8, r3
 8002aaa:	1aad      	subs	r5, r5, r2
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	e715      	b.n	80028dc <__aeabi_dmul+0x4c>
 8002ab0:	4652      	mov	r2, sl
 8002ab2:	4302      	orrs	r2, r0
 8002ab4:	4691      	mov	r9, r2
 8002ab6:	d126      	bne.n	8002b06 <__aeabi_dmul+0x276>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	001d      	movs	r5, r3
 8002abc:	2302      	movs	r3, #2
 8002abe:	4692      	mov	sl, r2
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	e709      	b.n	80028dc <__aeabi_dmul+0x4c>
 8002ac8:	2400      	movs	r4, #0
 8002aca:	2200      	movs	r2, #0
 8002acc:	4b35      	ldr	r3, [pc, #212]	@ (8002ba4 <__aeabi_dmul+0x314>)
 8002ace:	e735      	b.n	800293c <__aeabi_dmul+0xac>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2480      	movs	r4, #128	@ 0x80
 8002ad4:	469b      	mov	fp, r3
 8002ad6:	0324      	lsls	r4, r4, #12
 8002ad8:	4b32      	ldr	r3, [pc, #200]	@ (8002ba4 <__aeabi_dmul+0x314>)
 8002ada:	e72f      	b.n	800293c <__aeabi_dmul+0xac>
 8002adc:	2202      	movs	r2, #2
 8002ade:	4641      	mov	r1, r8
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	4694      	mov	ip, r2
 8002ae8:	002a      	movs	r2, r5
 8002aea:	4462      	add	r2, ip
 8002aec:	4688      	mov	r8, r1
 8002aee:	9201      	str	r2, [sp, #4]
 8002af0:	290a      	cmp	r1, #10
 8002af2:	dd00      	ble.n	8002af6 <__aeabi_dmul+0x266>
 8002af4:	e752      	b.n	800299c <__aeabi_dmul+0x10c>
 8002af6:	465a      	mov	r2, fp
 8002af8:	2000      	movs	r0, #0
 8002afa:	9900      	ldr	r1, [sp, #0]
 8002afc:	0004      	movs	r4, r0
 8002afe:	404a      	eors	r2, r1
 8002b00:	4693      	mov	fp, r2
 8002b02:	2602      	movs	r6, #2
 8002b04:	e70b      	b.n	800291e <__aeabi_dmul+0x8e>
 8002b06:	220c      	movs	r2, #12
 8002b08:	001d      	movs	r5, r3
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	4681      	mov	r9, r0
 8002b0e:	4690      	mov	r8, r2
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	e6e3      	b.n	80028dc <__aeabi_dmul+0x4c>
 8002b14:	2300      	movs	r3, #0
 8002b16:	469a      	mov	sl, r3
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	3b03      	subs	r3, #3
 8002b1e:	2500      	movs	r5, #0
 8002b20:	9302      	str	r3, [sp, #8]
 8002b22:	e6db      	b.n	80028dc <__aeabi_dmul+0x4c>
 8002b24:	4642      	mov	r2, r8
 8002b26:	3301      	adds	r3, #1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	002b      	movs	r3, r5
 8002b2c:	4690      	mov	r8, r2
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	9201      	str	r2, [sp, #4]
 8002b32:	4642      	mov	r2, r8
 8002b34:	2400      	movs	r4, #0
 8002b36:	2000      	movs	r0, #0
 8002b38:	2601      	movs	r6, #1
 8002b3a:	2a0a      	cmp	r2, #10
 8002b3c:	dc00      	bgt.n	8002b40 <__aeabi_dmul+0x2b0>
 8002b3e:	e6ea      	b.n	8002916 <__aeabi_dmul+0x86>
 8002b40:	e72c      	b.n	800299c <__aeabi_dmul+0x10c>
 8002b42:	2201      	movs	r2, #1
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	2a38      	cmp	r2, #56	@ 0x38
 8002b48:	dd00      	ble.n	8002b4c <__aeabi_dmul+0x2bc>
 8002b4a:	e6f4      	b.n	8002936 <__aeabi_dmul+0xa6>
 8002b4c:	2a1f      	cmp	r2, #31
 8002b4e:	dc00      	bgt.n	8002b52 <__aeabi_dmul+0x2c2>
 8002b50:	e12a      	b.n	8002da8 <__aeabi_dmul+0x518>
 8002b52:	211f      	movs	r1, #31
 8002b54:	4249      	negs	r1, r1
 8002b56:	1acb      	subs	r3, r1, r3
 8002b58:	0021      	movs	r1, r4
 8002b5a:	40d9      	lsrs	r1, r3
 8002b5c:	000b      	movs	r3, r1
 8002b5e:	2a20      	cmp	r2, #32
 8002b60:	d005      	beq.n	8002b6e <__aeabi_dmul+0x2de>
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <__aeabi_dmul+0x32c>)
 8002b64:	9d01      	ldr	r5, [sp, #4]
 8002b66:	4694      	mov	ip, r2
 8002b68:	4465      	add	r5, ip
 8002b6a:	40ac      	lsls	r4, r5
 8002b6c:	4320      	orrs	r0, r4
 8002b6e:	1e42      	subs	r2, r0, #1
 8002b70:	4190      	sbcs	r0, r2
 8002b72:	4318      	orrs	r0, r3
 8002b74:	2307      	movs	r3, #7
 8002b76:	0019      	movs	r1, r3
 8002b78:	2400      	movs	r4, #0
 8002b7a:	4001      	ands	r1, r0
 8002b7c:	4203      	tst	r3, r0
 8002b7e:	d00c      	beq.n	8002b9a <__aeabi_dmul+0x30a>
 8002b80:	230f      	movs	r3, #15
 8002b82:	4003      	ands	r3, r0
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dmul+0x2fa>
 8002b88:	e140      	b.n	8002e0c <__aeabi_dmul+0x57c>
 8002b8a:	1d03      	adds	r3, r0, #4
 8002b8c:	4283      	cmp	r3, r0
 8002b8e:	41a4      	sbcs	r4, r4
 8002b90:	0018      	movs	r0, r3
 8002b92:	4264      	negs	r4, r4
 8002b94:	0761      	lsls	r1, r4, #29
 8002b96:	0264      	lsls	r4, r4, #9
 8002b98:	0b24      	lsrs	r4, r4, #12
 8002b9a:	08c2      	lsrs	r2, r0, #3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	e6cc      	b.n	800293c <__aeabi_dmul+0xac>
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	000007ff 	.word	0x000007ff
 8002ba8:	fffffc01 	.word	0xfffffc01
 8002bac:	000003ff 	.word	0x000003ff
 8002bb0:	feffffff 	.word	0xfeffffff
 8002bb4:	000007fe 	.word	0x000007fe
 8002bb8:	fffffc0d 	.word	0xfffffc0d
 8002bbc:	0000043e 	.word	0x0000043e
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	464a      	mov	r2, r9
 8002bc4:	0409      	lsls	r1, r1, #16
 8002bc6:	0c09      	lsrs	r1, r1, #16
 8002bc8:	000d      	movs	r5, r1
 8002bca:	0c16      	lsrs	r6, r2, #16
 8002bcc:	0c02      	lsrs	r2, r0, #16
 8002bce:	0400      	lsls	r0, r0, #16
 8002bd0:	0c00      	lsrs	r0, r0, #16
 8002bd2:	4345      	muls	r5, r0
 8002bd4:	46ac      	mov	ip, r5
 8002bd6:	0005      	movs	r5, r0
 8002bd8:	4375      	muls	r5, r6
 8002bda:	46a8      	mov	r8, r5
 8002bdc:	0015      	movs	r5, r2
 8002bde:	000f      	movs	r7, r1
 8002be0:	4375      	muls	r5, r6
 8002be2:	9200      	str	r2, [sp, #0]
 8002be4:	9502      	str	r5, [sp, #8]
 8002be6:	002a      	movs	r2, r5
 8002be8:	9d00      	ldr	r5, [sp, #0]
 8002bea:	436f      	muls	r7, r5
 8002bec:	4665      	mov	r5, ip
 8002bee:	0c2d      	lsrs	r5, r5, #16
 8002bf0:	46a9      	mov	r9, r5
 8002bf2:	4447      	add	r7, r8
 8002bf4:	444f      	add	r7, r9
 8002bf6:	45b8      	cmp	r8, r7
 8002bf8:	d905      	bls.n	8002c06 <__aeabi_dmul+0x376>
 8002bfa:	0015      	movs	r5, r2
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	0252      	lsls	r2, r2, #9
 8002c00:	4690      	mov	r8, r2
 8002c02:	4445      	add	r5, r8
 8002c04:	9502      	str	r5, [sp, #8]
 8002c06:	0c3d      	lsrs	r5, r7, #16
 8002c08:	9503      	str	r5, [sp, #12]
 8002c0a:	4665      	mov	r5, ip
 8002c0c:	042d      	lsls	r5, r5, #16
 8002c0e:	043f      	lsls	r7, r7, #16
 8002c10:	0c2d      	lsrs	r5, r5, #16
 8002c12:	46ac      	mov	ip, r5
 8002c14:	003d      	movs	r5, r7
 8002c16:	4465      	add	r5, ip
 8002c18:	9504      	str	r5, [sp, #16]
 8002c1a:	0c25      	lsrs	r5, r4, #16
 8002c1c:	0424      	lsls	r4, r4, #16
 8002c1e:	0c24      	lsrs	r4, r4, #16
 8002c20:	46ac      	mov	ip, r5
 8002c22:	0025      	movs	r5, r4
 8002c24:	4375      	muls	r5, r6
 8002c26:	46a8      	mov	r8, r5
 8002c28:	4665      	mov	r5, ip
 8002c2a:	000f      	movs	r7, r1
 8002c2c:	4369      	muls	r1, r5
 8002c2e:	4441      	add	r1, r8
 8002c30:	4689      	mov	r9, r1
 8002c32:	4367      	muls	r7, r4
 8002c34:	0c39      	lsrs	r1, r7, #16
 8002c36:	4449      	add	r1, r9
 8002c38:	436e      	muls	r6, r5
 8002c3a:	4588      	cmp	r8, r1
 8002c3c:	d903      	bls.n	8002c46 <__aeabi_dmul+0x3b6>
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	0252      	lsls	r2, r2, #9
 8002c42:	4690      	mov	r8, r2
 8002c44:	4446      	add	r6, r8
 8002c46:	0c0d      	lsrs	r5, r1, #16
 8002c48:	46a8      	mov	r8, r5
 8002c4a:	0035      	movs	r5, r6
 8002c4c:	4445      	add	r5, r8
 8002c4e:	9505      	str	r5, [sp, #20]
 8002c50:	9d03      	ldr	r5, [sp, #12]
 8002c52:	043f      	lsls	r7, r7, #16
 8002c54:	46a8      	mov	r8, r5
 8002c56:	0c3f      	lsrs	r7, r7, #16
 8002c58:	0409      	lsls	r1, r1, #16
 8002c5a:	19c9      	adds	r1, r1, r7
 8002c5c:	4488      	add	r8, r1
 8002c5e:	4645      	mov	r5, r8
 8002c60:	9503      	str	r5, [sp, #12]
 8002c62:	4655      	mov	r5, sl
 8002c64:	042e      	lsls	r6, r5, #16
 8002c66:	0c36      	lsrs	r6, r6, #16
 8002c68:	0c2f      	lsrs	r7, r5, #16
 8002c6a:	0035      	movs	r5, r6
 8002c6c:	4345      	muls	r5, r0
 8002c6e:	4378      	muls	r0, r7
 8002c70:	4681      	mov	r9, r0
 8002c72:	0038      	movs	r0, r7
 8002c74:	46a8      	mov	r8, r5
 8002c76:	0c2d      	lsrs	r5, r5, #16
 8002c78:	46aa      	mov	sl, r5
 8002c7a:	9a00      	ldr	r2, [sp, #0]
 8002c7c:	4350      	muls	r0, r2
 8002c7e:	4372      	muls	r2, r6
 8002c80:	444a      	add	r2, r9
 8002c82:	4452      	add	r2, sl
 8002c84:	4591      	cmp	r9, r2
 8002c86:	d903      	bls.n	8002c90 <__aeabi_dmul+0x400>
 8002c88:	2580      	movs	r5, #128	@ 0x80
 8002c8a:	026d      	lsls	r5, r5, #9
 8002c8c:	46a9      	mov	r9, r5
 8002c8e:	4448      	add	r0, r9
 8002c90:	0c15      	lsrs	r5, r2, #16
 8002c92:	46a9      	mov	r9, r5
 8002c94:	4645      	mov	r5, r8
 8002c96:	042d      	lsls	r5, r5, #16
 8002c98:	0c2d      	lsrs	r5, r5, #16
 8002c9a:	46a8      	mov	r8, r5
 8002c9c:	4665      	mov	r5, ip
 8002c9e:	437d      	muls	r5, r7
 8002ca0:	0412      	lsls	r2, r2, #16
 8002ca2:	4448      	add	r0, r9
 8002ca4:	4490      	add	r8, r2
 8002ca6:	46a9      	mov	r9, r5
 8002ca8:	0032      	movs	r2, r6
 8002caa:	4665      	mov	r5, ip
 8002cac:	4362      	muls	r2, r4
 8002cae:	436e      	muls	r6, r5
 8002cb0:	437c      	muls	r4, r7
 8002cb2:	0c17      	lsrs	r7, r2, #16
 8002cb4:	1936      	adds	r6, r6, r4
 8002cb6:	19bf      	adds	r7, r7, r6
 8002cb8:	42bc      	cmp	r4, r7
 8002cba:	d903      	bls.n	8002cc4 <__aeabi_dmul+0x434>
 8002cbc:	2480      	movs	r4, #128	@ 0x80
 8002cbe:	0264      	lsls	r4, r4, #9
 8002cc0:	46a4      	mov	ip, r4
 8002cc2:	44e1      	add	r9, ip
 8002cc4:	9c02      	ldr	r4, [sp, #8]
 8002cc6:	9e03      	ldr	r6, [sp, #12]
 8002cc8:	46a4      	mov	ip, r4
 8002cca:	9d05      	ldr	r5, [sp, #20]
 8002ccc:	4466      	add	r6, ip
 8002cce:	428e      	cmp	r6, r1
 8002cd0:	4189      	sbcs	r1, r1
 8002cd2:	46ac      	mov	ip, r5
 8002cd4:	0412      	lsls	r2, r2, #16
 8002cd6:	043c      	lsls	r4, r7, #16
 8002cd8:	0c12      	lsrs	r2, r2, #16
 8002cda:	18a2      	adds	r2, r4, r2
 8002cdc:	4462      	add	r2, ip
 8002cde:	4249      	negs	r1, r1
 8002ce0:	1854      	adds	r4, r2, r1
 8002ce2:	4446      	add	r6, r8
 8002ce4:	46a4      	mov	ip, r4
 8002ce6:	4546      	cmp	r6, r8
 8002ce8:	41a4      	sbcs	r4, r4
 8002cea:	4682      	mov	sl, r0
 8002cec:	4264      	negs	r4, r4
 8002cee:	46a0      	mov	r8, r4
 8002cf0:	42aa      	cmp	r2, r5
 8002cf2:	4192      	sbcs	r2, r2
 8002cf4:	458c      	cmp	ip, r1
 8002cf6:	4189      	sbcs	r1, r1
 8002cf8:	44e2      	add	sl, ip
 8002cfa:	44d0      	add	r8, sl
 8002cfc:	4249      	negs	r1, r1
 8002cfe:	4252      	negs	r2, r2
 8002d00:	430a      	orrs	r2, r1
 8002d02:	45a0      	cmp	r8, r4
 8002d04:	41a4      	sbcs	r4, r4
 8002d06:	4582      	cmp	sl, r0
 8002d08:	4189      	sbcs	r1, r1
 8002d0a:	4264      	negs	r4, r4
 8002d0c:	4249      	negs	r1, r1
 8002d0e:	430c      	orrs	r4, r1
 8002d10:	4641      	mov	r1, r8
 8002d12:	0c3f      	lsrs	r7, r7, #16
 8002d14:	19d2      	adds	r2, r2, r7
 8002d16:	1912      	adds	r2, r2, r4
 8002d18:	0dcc      	lsrs	r4, r1, #23
 8002d1a:	9904      	ldr	r1, [sp, #16]
 8002d1c:	0270      	lsls	r0, r6, #9
 8002d1e:	4308      	orrs	r0, r1
 8002d20:	1e41      	subs	r1, r0, #1
 8002d22:	4188      	sbcs	r0, r1
 8002d24:	4641      	mov	r1, r8
 8002d26:	444a      	add	r2, r9
 8002d28:	0df6      	lsrs	r6, r6, #23
 8002d2a:	0252      	lsls	r2, r2, #9
 8002d2c:	4330      	orrs	r0, r6
 8002d2e:	0249      	lsls	r1, r1, #9
 8002d30:	4314      	orrs	r4, r2
 8002d32:	4308      	orrs	r0, r1
 8002d34:	01d2      	lsls	r2, r2, #7
 8002d36:	d535      	bpl.n	8002da4 <__aeabi_dmul+0x514>
 8002d38:	2201      	movs	r2, #1
 8002d3a:	0843      	lsrs	r3, r0, #1
 8002d3c:	4002      	ands	r2, r0
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	07e0      	lsls	r0, r4, #31
 8002d42:	4318      	orrs	r0, r3
 8002d44:	0864      	lsrs	r4, r4, #1
 8002d46:	e634      	b.n	80029b2 <__aeabi_dmul+0x122>
 8002d48:	9b00      	ldr	r3, [sp, #0]
 8002d4a:	46a2      	mov	sl, r4
 8002d4c:	469b      	mov	fp, r3
 8002d4e:	4681      	mov	r9, r0
 8002d50:	2480      	movs	r4, #128	@ 0x80
 8002d52:	4653      	mov	r3, sl
 8002d54:	0324      	lsls	r4, r4, #12
 8002d56:	431c      	orrs	r4, r3
 8002d58:	0324      	lsls	r4, r4, #12
 8002d5a:	464a      	mov	r2, r9
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <__aeabi_dmul+0x588>)
 8002d5e:	0b24      	lsrs	r4, r4, #12
 8002d60:	e5ec      	b.n	800293c <__aeabi_dmul+0xac>
 8002d62:	f000 fca1 	bl	80036a8 <__clzsi2>
 8002d66:	2315      	movs	r3, #21
 8002d68:	469c      	mov	ip, r3
 8002d6a:	4484      	add	ip, r0
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	4663      	mov	r3, ip
 8002d70:	3220      	adds	r2, #32
 8002d72:	2b1c      	cmp	r3, #28
 8002d74:	dc00      	bgt.n	8002d78 <__aeabi_dmul+0x4e8>
 8002d76:	e684      	b.n	8002a82 <__aeabi_dmul+0x1f2>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	4699      	mov	r9, r3
 8002d7c:	0023      	movs	r3, r4
 8002d7e:	3808      	subs	r0, #8
 8002d80:	4083      	lsls	r3, r0
 8002d82:	469a      	mov	sl, r3
 8002d84:	e68e      	b.n	8002aa4 <__aeabi_dmul+0x214>
 8002d86:	f000 fc8f 	bl	80036a8 <__clzsi2>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	3215      	adds	r2, #21
 8002d90:	3320      	adds	r3, #32
 8002d92:	2a1c      	cmp	r2, #28
 8002d94:	dc00      	bgt.n	8002d98 <__aeabi_dmul+0x508>
 8002d96:	e64e      	b.n	8002a36 <__aeabi_dmul+0x1a6>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	0034      	movs	r4, r6
 8002d9c:	3a08      	subs	r2, #8
 8002d9e:	2000      	movs	r0, #0
 8002da0:	4094      	lsls	r4, r2
 8002da2:	e652      	b.n	8002a4a <__aeabi_dmul+0x1ba>
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	e604      	b.n	80029b2 <__aeabi_dmul+0x122>
 8002da8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <__aeabi_dmul+0x58c>)
 8002daa:	0021      	movs	r1, r4
 8002dac:	469c      	mov	ip, r3
 8002dae:	0003      	movs	r3, r0
 8002db0:	9d01      	ldr	r5, [sp, #4]
 8002db2:	40d3      	lsrs	r3, r2
 8002db4:	4465      	add	r5, ip
 8002db6:	40a9      	lsls	r1, r5
 8002db8:	4319      	orrs	r1, r3
 8002dba:	0003      	movs	r3, r0
 8002dbc:	40ab      	lsls	r3, r5
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	4183      	sbcs	r3, r0
 8002dc2:	4319      	orrs	r1, r3
 8002dc4:	0008      	movs	r0, r1
 8002dc6:	40d4      	lsrs	r4, r2
 8002dc8:	074b      	lsls	r3, r1, #29
 8002dca:	d009      	beq.n	8002de0 <__aeabi_dmul+0x550>
 8002dcc:	230f      	movs	r3, #15
 8002dce:	400b      	ands	r3, r1
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d005      	beq.n	8002de0 <__aeabi_dmul+0x550>
 8002dd4:	1d0b      	adds	r3, r1, #4
 8002dd6:	428b      	cmp	r3, r1
 8002dd8:	4180      	sbcs	r0, r0
 8002dda:	4240      	negs	r0, r0
 8002ddc:	1824      	adds	r4, r4, r0
 8002dde:	0018      	movs	r0, r3
 8002de0:	0223      	lsls	r3, r4, #8
 8002de2:	d400      	bmi.n	8002de6 <__aeabi_dmul+0x556>
 8002de4:	e6d6      	b.n	8002b94 <__aeabi_dmul+0x304>
 8002de6:	2301      	movs	r3, #1
 8002de8:	2400      	movs	r4, #0
 8002dea:	2200      	movs	r2, #0
 8002dec:	e5a6      	b.n	800293c <__aeabi_dmul+0xac>
 8002dee:	290f      	cmp	r1, #15
 8002df0:	d1aa      	bne.n	8002d48 <__aeabi_dmul+0x4b8>
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	4652      	mov	r2, sl
 8002df6:	031b      	lsls	r3, r3, #12
 8002df8:	421a      	tst	r2, r3
 8002dfa:	d0a9      	beq.n	8002d50 <__aeabi_dmul+0x4c0>
 8002dfc:	421c      	tst	r4, r3
 8002dfe:	d1a7      	bne.n	8002d50 <__aeabi_dmul+0x4c0>
 8002e00:	431c      	orrs	r4, r3
 8002e02:	9b00      	ldr	r3, [sp, #0]
 8002e04:	0002      	movs	r2, r0
 8002e06:	469b      	mov	fp, r3
 8002e08:	4b03      	ldr	r3, [pc, #12]	@ (8002e18 <__aeabi_dmul+0x588>)
 8002e0a:	e597      	b.n	800293c <__aeabi_dmul+0xac>
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	e6c1      	b.n	8002b94 <__aeabi_dmul+0x304>
 8002e10:	2400      	movs	r4, #0
 8002e12:	4b01      	ldr	r3, [pc, #4]	@ (8002e18 <__aeabi_dmul+0x588>)
 8002e14:	0022      	movs	r2, r4
 8002e16:	e591      	b.n	800293c <__aeabi_dmul+0xac>
 8002e18:	000007ff 	.word	0x000007ff
 8002e1c:	0000041e 	.word	0x0000041e

08002e20 <__aeabi_dsub>:
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	464e      	mov	r6, r9
 8002e24:	4645      	mov	r5, r8
 8002e26:	46de      	mov	lr, fp
 8002e28:	4657      	mov	r7, sl
 8002e2a:	b5e0      	push	{r5, r6, r7, lr}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	9000      	str	r0, [sp, #0]
 8002e30:	9101      	str	r1, [sp, #4]
 8002e32:	030c      	lsls	r4, r1, #12
 8002e34:	004f      	lsls	r7, r1, #1
 8002e36:	0fce      	lsrs	r6, r1, #31
 8002e38:	0a61      	lsrs	r1, r4, #9
 8002e3a:	9c00      	ldr	r4, [sp, #0]
 8002e3c:	46b0      	mov	r8, r6
 8002e3e:	0f64      	lsrs	r4, r4, #29
 8002e40:	430c      	orrs	r4, r1
 8002e42:	9900      	ldr	r1, [sp, #0]
 8002e44:	0d7f      	lsrs	r7, r7, #21
 8002e46:	00c8      	lsls	r0, r1, #3
 8002e48:	0011      	movs	r1, r2
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	469c      	mov	ip, r3
 8002e50:	9100      	str	r1, [sp, #0]
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	0051      	lsls	r1, r2, #1
 8002e56:	0d4b      	lsrs	r3, r1, #21
 8002e58:	4699      	mov	r9, r3
 8002e5a:	9b01      	ldr	r3, [sp, #4]
 8002e5c:	9d00      	ldr	r5, [sp, #0]
 8002e5e:	0fd9      	lsrs	r1, r3, #31
 8002e60:	4663      	mov	r3, ip
 8002e62:	0f6a      	lsrs	r2, r5, #29
 8002e64:	0a5b      	lsrs	r3, r3, #9
 8002e66:	4313      	orrs	r3, r2
 8002e68:	00ea      	lsls	r2, r5, #3
 8002e6a:	4694      	mov	ip, r2
 8002e6c:	4693      	mov	fp, r2
 8002e6e:	4ac1      	ldr	r2, [pc, #772]	@ (8003174 <__aeabi_dsub+0x354>)
 8002e70:	9003      	str	r0, [sp, #12]
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	4591      	cmp	r9, r2
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x5a>
 8002e78:	e0cd      	b.n	8003016 <__aeabi_dsub+0x1f6>
 8002e7a:	2501      	movs	r5, #1
 8002e7c:	4069      	eors	r1, r5
 8002e7e:	464d      	mov	r5, r9
 8002e80:	1b7d      	subs	r5, r7, r5
 8002e82:	46aa      	mov	sl, r5
 8002e84:	428e      	cmp	r6, r1
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x6a>
 8002e88:	e080      	b.n	8002f8c <__aeabi_dsub+0x16c>
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	dc00      	bgt.n	8002e90 <__aeabi_dsub+0x70>
 8002e8e:	e335      	b.n	80034fc <__aeabi_dsub+0x6dc>
 8002e90:	4649      	mov	r1, r9
 8002e92:	2900      	cmp	r1, #0
 8002e94:	d100      	bne.n	8002e98 <__aeabi_dsub+0x78>
 8002e96:	e0df      	b.n	8003058 <__aeabi_dsub+0x238>
 8002e98:	4297      	cmp	r7, r2
 8002e9a:	d100      	bne.n	8002e9e <__aeabi_dsub+0x7e>
 8002e9c:	e194      	b.n	80031c8 <__aeabi_dsub+0x3a8>
 8002e9e:	4652      	mov	r2, sl
 8002ea0:	2501      	movs	r5, #1
 8002ea2:	2a38      	cmp	r2, #56	@ 0x38
 8002ea4:	dc19      	bgt.n	8002eda <__aeabi_dsub+0xba>
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	9b02      	ldr	r3, [sp, #8]
 8002eaa:	0412      	lsls	r2, r2, #16
 8002eac:	4313      	orrs	r3, r2
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	2a1f      	cmp	r2, #31
 8002eb4:	dd00      	ble.n	8002eb8 <__aeabi_dsub+0x98>
 8002eb6:	e1e3      	b.n	8003280 <__aeabi_dsub+0x460>
 8002eb8:	4653      	mov	r3, sl
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4661      	mov	r1, ip
 8002ebe:	9d02      	ldr	r5, [sp, #8]
 8002ec0:	1ad2      	subs	r2, r2, r3
 8002ec2:	4095      	lsls	r5, r2
 8002ec4:	40d9      	lsrs	r1, r3
 8002ec6:	430d      	orrs	r5, r1
 8002ec8:	4661      	mov	r1, ip
 8002eca:	4091      	lsls	r1, r2
 8002ecc:	000a      	movs	r2, r1
 8002ece:	1e51      	subs	r1, r2, #1
 8002ed0:	418a      	sbcs	r2, r1
 8002ed2:	4315      	orrs	r5, r2
 8002ed4:	9a02      	ldr	r2, [sp, #8]
 8002ed6:	40da      	lsrs	r2, r3
 8002ed8:	1aa4      	subs	r4, r4, r2
 8002eda:	1b45      	subs	r5, r0, r5
 8002edc:	42a8      	cmp	r0, r5
 8002ede:	4180      	sbcs	r0, r0
 8002ee0:	4240      	negs	r0, r0
 8002ee2:	1a24      	subs	r4, r4, r0
 8002ee4:	0223      	lsls	r3, r4, #8
 8002ee6:	d400      	bmi.n	8002eea <__aeabi_dsub+0xca>
 8002ee8:	e13d      	b.n	8003166 <__aeabi_dsub+0x346>
 8002eea:	0264      	lsls	r4, r4, #9
 8002eec:	0a64      	lsrs	r4, r4, #9
 8002eee:	2c00      	cmp	r4, #0
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0xd4>
 8002ef2:	e147      	b.n	8003184 <__aeabi_dsub+0x364>
 8002ef4:	0020      	movs	r0, r4
 8002ef6:	f000 fbd7 	bl	80036a8 <__clzsi2>
 8002efa:	0003      	movs	r3, r0
 8002efc:	3b08      	subs	r3, #8
 8002efe:	2120      	movs	r1, #32
 8002f00:	0028      	movs	r0, r5
 8002f02:	1aca      	subs	r2, r1, r3
 8002f04:	40d0      	lsrs	r0, r2
 8002f06:	409c      	lsls	r4, r3
 8002f08:	0002      	movs	r2, r0
 8002f0a:	409d      	lsls	r5, r3
 8002f0c:	4322      	orrs	r2, r4
 8002f0e:	429f      	cmp	r7, r3
 8002f10:	dd00      	ble.n	8002f14 <__aeabi_dsub+0xf4>
 8002f12:	e177      	b.n	8003204 <__aeabi_dsub+0x3e4>
 8002f14:	1bd8      	subs	r0, r3, r7
 8002f16:	3001      	adds	r0, #1
 8002f18:	1a09      	subs	r1, r1, r0
 8002f1a:	002c      	movs	r4, r5
 8002f1c:	408d      	lsls	r5, r1
 8002f1e:	40c4      	lsrs	r4, r0
 8002f20:	1e6b      	subs	r3, r5, #1
 8002f22:	419d      	sbcs	r5, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	40c2      	lsrs	r2, r0
 8002f28:	408b      	lsls	r3, r1
 8002f2a:	4325      	orrs	r5, r4
 8002f2c:	2700      	movs	r7, #0
 8002f2e:	0014      	movs	r4, r2
 8002f30:	431d      	orrs	r5, r3
 8002f32:	076b      	lsls	r3, r5, #29
 8002f34:	d009      	beq.n	8002f4a <__aeabi_dsub+0x12a>
 8002f36:	230f      	movs	r3, #15
 8002f38:	402b      	ands	r3, r5
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d005      	beq.n	8002f4a <__aeabi_dsub+0x12a>
 8002f3e:	1d2b      	adds	r3, r5, #4
 8002f40:	42ab      	cmp	r3, r5
 8002f42:	41ad      	sbcs	r5, r5
 8002f44:	426d      	negs	r5, r5
 8002f46:	1964      	adds	r4, r4, r5
 8002f48:	001d      	movs	r5, r3
 8002f4a:	0223      	lsls	r3, r4, #8
 8002f4c:	d400      	bmi.n	8002f50 <__aeabi_dsub+0x130>
 8002f4e:	e140      	b.n	80031d2 <__aeabi_dsub+0x3b2>
 8002f50:	4a88      	ldr	r2, [pc, #544]	@ (8003174 <__aeabi_dsub+0x354>)
 8002f52:	3701      	adds	r7, #1
 8002f54:	4297      	cmp	r7, r2
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x13a>
 8002f58:	e101      	b.n	800315e <__aeabi_dsub+0x33e>
 8002f5a:	2601      	movs	r6, #1
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	4986      	ldr	r1, [pc, #536]	@ (8003178 <__aeabi_dsub+0x358>)
 8002f60:	08ed      	lsrs	r5, r5, #3
 8002f62:	4021      	ands	r1, r4
 8002f64:	074a      	lsls	r2, r1, #29
 8002f66:	432a      	orrs	r2, r5
 8002f68:	057c      	lsls	r4, r7, #21
 8002f6a:	024d      	lsls	r5, r1, #9
 8002f6c:	0b2d      	lsrs	r5, r5, #12
 8002f6e:	0d64      	lsrs	r4, r4, #21
 8002f70:	401e      	ands	r6, r3
 8002f72:	0524      	lsls	r4, r4, #20
 8002f74:	432c      	orrs	r4, r5
 8002f76:	07f6      	lsls	r6, r6, #31
 8002f78:	4334      	orrs	r4, r6
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	0021      	movs	r1, r4
 8002f7e:	b005      	add	sp, #20
 8002f80:	bcf0      	pop	{r4, r5, r6, r7}
 8002f82:	46bb      	mov	fp, r7
 8002f84:	46b2      	mov	sl, r6
 8002f86:	46a9      	mov	r9, r5
 8002f88:	46a0      	mov	r8, r4
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	2d00      	cmp	r5, #0
 8002f8e:	dc00      	bgt.n	8002f92 <__aeabi_dsub+0x172>
 8002f90:	e2d0      	b.n	8003534 <__aeabi_dsub+0x714>
 8002f92:	4649      	mov	r1, r9
 8002f94:	2900      	cmp	r1, #0
 8002f96:	d000      	beq.n	8002f9a <__aeabi_dsub+0x17a>
 8002f98:	e0d4      	b.n	8003144 <__aeabi_dsub+0x324>
 8002f9a:	4661      	mov	r1, ip
 8002f9c:	9b02      	ldr	r3, [sp, #8]
 8002f9e:	4319      	orrs	r1, r3
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x184>
 8002fa2:	e12b      	b.n	80031fc <__aeabi_dsub+0x3dc>
 8002fa4:	1e69      	subs	r1, r5, #1
 8002fa6:	2d01      	cmp	r5, #1
 8002fa8:	d100      	bne.n	8002fac <__aeabi_dsub+0x18c>
 8002faa:	e1d9      	b.n	8003360 <__aeabi_dsub+0x540>
 8002fac:	4295      	cmp	r5, r2
 8002fae:	d100      	bne.n	8002fb2 <__aeabi_dsub+0x192>
 8002fb0:	e10a      	b.n	80031c8 <__aeabi_dsub+0x3a8>
 8002fb2:	2501      	movs	r5, #1
 8002fb4:	2938      	cmp	r1, #56	@ 0x38
 8002fb6:	dc17      	bgt.n	8002fe8 <__aeabi_dsub+0x1c8>
 8002fb8:	468a      	mov	sl, r1
 8002fba:	4653      	mov	r3, sl
 8002fbc:	2b1f      	cmp	r3, #31
 8002fbe:	dd00      	ble.n	8002fc2 <__aeabi_dsub+0x1a2>
 8002fc0:	e1e7      	b.n	8003392 <__aeabi_dsub+0x572>
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	4661      	mov	r1, ip
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	001d      	movs	r5, r3
 8002fce:	4653      	mov	r3, sl
 8002fd0:	40d9      	lsrs	r1, r3
 8002fd2:	4663      	mov	r3, ip
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	430d      	orrs	r5, r1
 8002fda:	1e51      	subs	r1, r2, #1
 8002fdc:	418a      	sbcs	r2, r1
 8002fde:	4653      	mov	r3, sl
 8002fe0:	4315      	orrs	r5, r2
 8002fe2:	9a02      	ldr	r2, [sp, #8]
 8002fe4:	40da      	lsrs	r2, r3
 8002fe6:	18a4      	adds	r4, r4, r2
 8002fe8:	182d      	adds	r5, r5, r0
 8002fea:	4285      	cmp	r5, r0
 8002fec:	4180      	sbcs	r0, r0
 8002fee:	4240      	negs	r0, r0
 8002ff0:	1824      	adds	r4, r4, r0
 8002ff2:	0223      	lsls	r3, r4, #8
 8002ff4:	d400      	bmi.n	8002ff8 <__aeabi_dsub+0x1d8>
 8002ff6:	e0b6      	b.n	8003166 <__aeabi_dsub+0x346>
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8003174 <__aeabi_dsub+0x354>)
 8002ffa:	3701      	adds	r7, #1
 8002ffc:	429f      	cmp	r7, r3
 8002ffe:	d100      	bne.n	8003002 <__aeabi_dsub+0x1e2>
 8003000:	e0ad      	b.n	800315e <__aeabi_dsub+0x33e>
 8003002:	2101      	movs	r1, #1
 8003004:	4b5c      	ldr	r3, [pc, #368]	@ (8003178 <__aeabi_dsub+0x358>)
 8003006:	086a      	lsrs	r2, r5, #1
 8003008:	401c      	ands	r4, r3
 800300a:	4029      	ands	r1, r5
 800300c:	430a      	orrs	r2, r1
 800300e:	07e5      	lsls	r5, r4, #31
 8003010:	4315      	orrs	r5, r2
 8003012:	0864      	lsrs	r4, r4, #1
 8003014:	e78d      	b.n	8002f32 <__aeabi_dsub+0x112>
 8003016:	4a59      	ldr	r2, [pc, #356]	@ (800317c <__aeabi_dsub+0x35c>)
 8003018:	9b02      	ldr	r3, [sp, #8]
 800301a:	4692      	mov	sl, r2
 800301c:	4662      	mov	r2, ip
 800301e:	44ba      	add	sl, r7
 8003020:	431a      	orrs	r2, r3
 8003022:	d02c      	beq.n	800307e <__aeabi_dsub+0x25e>
 8003024:	428e      	cmp	r6, r1
 8003026:	d02e      	beq.n	8003086 <__aeabi_dsub+0x266>
 8003028:	4652      	mov	r2, sl
 800302a:	2a00      	cmp	r2, #0
 800302c:	d060      	beq.n	80030f0 <__aeabi_dsub+0x2d0>
 800302e:	2f00      	cmp	r7, #0
 8003030:	d100      	bne.n	8003034 <__aeabi_dsub+0x214>
 8003032:	e0db      	b.n	80031ec <__aeabi_dsub+0x3cc>
 8003034:	4663      	mov	r3, ip
 8003036:	000e      	movs	r6, r1
 8003038:	9c02      	ldr	r4, [sp, #8]
 800303a:	08d8      	lsrs	r0, r3, #3
 800303c:	0762      	lsls	r2, r4, #29
 800303e:	4302      	orrs	r2, r0
 8003040:	08e4      	lsrs	r4, r4, #3
 8003042:	0013      	movs	r3, r2
 8003044:	4323      	orrs	r3, r4
 8003046:	d100      	bne.n	800304a <__aeabi_dsub+0x22a>
 8003048:	e254      	b.n	80034f4 <__aeabi_dsub+0x6d4>
 800304a:	2580      	movs	r5, #128	@ 0x80
 800304c:	032d      	lsls	r5, r5, #12
 800304e:	4325      	orrs	r5, r4
 8003050:	032d      	lsls	r5, r5, #12
 8003052:	4c48      	ldr	r4, [pc, #288]	@ (8003174 <__aeabi_dsub+0x354>)
 8003054:	0b2d      	lsrs	r5, r5, #12
 8003056:	e78c      	b.n	8002f72 <__aeabi_dsub+0x152>
 8003058:	4661      	mov	r1, ip
 800305a:	9b02      	ldr	r3, [sp, #8]
 800305c:	4319      	orrs	r1, r3
 800305e:	d100      	bne.n	8003062 <__aeabi_dsub+0x242>
 8003060:	e0cc      	b.n	80031fc <__aeabi_dsub+0x3dc>
 8003062:	0029      	movs	r1, r5
 8003064:	3901      	subs	r1, #1
 8003066:	2d01      	cmp	r5, #1
 8003068:	d100      	bne.n	800306c <__aeabi_dsub+0x24c>
 800306a:	e188      	b.n	800337e <__aeabi_dsub+0x55e>
 800306c:	4295      	cmp	r5, r2
 800306e:	d100      	bne.n	8003072 <__aeabi_dsub+0x252>
 8003070:	e0aa      	b.n	80031c8 <__aeabi_dsub+0x3a8>
 8003072:	2501      	movs	r5, #1
 8003074:	2938      	cmp	r1, #56	@ 0x38
 8003076:	dd00      	ble.n	800307a <__aeabi_dsub+0x25a>
 8003078:	e72f      	b.n	8002eda <__aeabi_dsub+0xba>
 800307a:	468a      	mov	sl, r1
 800307c:	e718      	b.n	8002eb0 <__aeabi_dsub+0x90>
 800307e:	2201      	movs	r2, #1
 8003080:	4051      	eors	r1, r2
 8003082:	428e      	cmp	r6, r1
 8003084:	d1d0      	bne.n	8003028 <__aeabi_dsub+0x208>
 8003086:	4653      	mov	r3, sl
 8003088:	2b00      	cmp	r3, #0
 800308a:	d100      	bne.n	800308e <__aeabi_dsub+0x26e>
 800308c:	e0be      	b.n	800320c <__aeabi_dsub+0x3ec>
 800308e:	2f00      	cmp	r7, #0
 8003090:	d000      	beq.n	8003094 <__aeabi_dsub+0x274>
 8003092:	e138      	b.n	8003306 <__aeabi_dsub+0x4e6>
 8003094:	46ca      	mov	sl, r9
 8003096:	0022      	movs	r2, r4
 8003098:	4302      	orrs	r2, r0
 800309a:	d100      	bne.n	800309e <__aeabi_dsub+0x27e>
 800309c:	e1e2      	b.n	8003464 <__aeabi_dsub+0x644>
 800309e:	4653      	mov	r3, sl
 80030a0:	1e59      	subs	r1, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d100      	bne.n	80030a8 <__aeabi_dsub+0x288>
 80030a6:	e20d      	b.n	80034c4 <__aeabi_dsub+0x6a4>
 80030a8:	4a32      	ldr	r2, [pc, #200]	@ (8003174 <__aeabi_dsub+0x354>)
 80030aa:	4592      	cmp	sl, r2
 80030ac:	d100      	bne.n	80030b0 <__aeabi_dsub+0x290>
 80030ae:	e1d2      	b.n	8003456 <__aeabi_dsub+0x636>
 80030b0:	2701      	movs	r7, #1
 80030b2:	2938      	cmp	r1, #56	@ 0x38
 80030b4:	dc13      	bgt.n	80030de <__aeabi_dsub+0x2be>
 80030b6:	291f      	cmp	r1, #31
 80030b8:	dd00      	ble.n	80030bc <__aeabi_dsub+0x29c>
 80030ba:	e1ee      	b.n	800349a <__aeabi_dsub+0x67a>
 80030bc:	2220      	movs	r2, #32
 80030be:	9b02      	ldr	r3, [sp, #8]
 80030c0:	1a52      	subs	r2, r2, r1
 80030c2:	0025      	movs	r5, r4
 80030c4:	0007      	movs	r7, r0
 80030c6:	469a      	mov	sl, r3
 80030c8:	40cc      	lsrs	r4, r1
 80030ca:	4090      	lsls	r0, r2
 80030cc:	4095      	lsls	r5, r2
 80030ce:	40cf      	lsrs	r7, r1
 80030d0:	44a2      	add	sl, r4
 80030d2:	1e42      	subs	r2, r0, #1
 80030d4:	4190      	sbcs	r0, r2
 80030d6:	4653      	mov	r3, sl
 80030d8:	432f      	orrs	r7, r5
 80030da:	4307      	orrs	r7, r0
 80030dc:	9302      	str	r3, [sp, #8]
 80030de:	003d      	movs	r5, r7
 80030e0:	4465      	add	r5, ip
 80030e2:	4565      	cmp	r5, ip
 80030e4:	4192      	sbcs	r2, r2
 80030e6:	9b02      	ldr	r3, [sp, #8]
 80030e8:	4252      	negs	r2, r2
 80030ea:	464f      	mov	r7, r9
 80030ec:	18d4      	adds	r4, r2, r3
 80030ee:	e780      	b.n	8002ff2 <__aeabi_dsub+0x1d2>
 80030f0:	4a23      	ldr	r2, [pc, #140]	@ (8003180 <__aeabi_dsub+0x360>)
 80030f2:	1c7d      	adds	r5, r7, #1
 80030f4:	4215      	tst	r5, r2
 80030f6:	d000      	beq.n	80030fa <__aeabi_dsub+0x2da>
 80030f8:	e0aa      	b.n	8003250 <__aeabi_dsub+0x430>
 80030fa:	4662      	mov	r2, ip
 80030fc:	0025      	movs	r5, r4
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4305      	orrs	r5, r0
 8003102:	431a      	orrs	r2, r3
 8003104:	2f00      	cmp	r7, #0
 8003106:	d000      	beq.n	800310a <__aeabi_dsub+0x2ea>
 8003108:	e0f5      	b.n	80032f6 <__aeabi_dsub+0x4d6>
 800310a:	2d00      	cmp	r5, #0
 800310c:	d100      	bne.n	8003110 <__aeabi_dsub+0x2f0>
 800310e:	e16b      	b.n	80033e8 <__aeabi_dsub+0x5c8>
 8003110:	2a00      	cmp	r2, #0
 8003112:	d100      	bne.n	8003116 <__aeabi_dsub+0x2f6>
 8003114:	e152      	b.n	80033bc <__aeabi_dsub+0x59c>
 8003116:	4663      	mov	r3, ip
 8003118:	1ac5      	subs	r5, r0, r3
 800311a:	9b02      	ldr	r3, [sp, #8]
 800311c:	1ae2      	subs	r2, r4, r3
 800311e:	42a8      	cmp	r0, r5
 8003120:	419b      	sbcs	r3, r3
 8003122:	425b      	negs	r3, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	d400      	bmi.n	800312c <__aeabi_dsub+0x30c>
 800312a:	e1d5      	b.n	80034d8 <__aeabi_dsub+0x6b8>
 800312c:	4663      	mov	r3, ip
 800312e:	1a1d      	subs	r5, r3, r0
 8003130:	45ac      	cmp	ip, r5
 8003132:	4192      	sbcs	r2, r2
 8003134:	2601      	movs	r6, #1
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	4252      	negs	r2, r2
 800313a:	1b1c      	subs	r4, r3, r4
 800313c:	4688      	mov	r8, r1
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	400e      	ands	r6, r1
 8003142:	e6f6      	b.n	8002f32 <__aeabi_dsub+0x112>
 8003144:	4297      	cmp	r7, r2
 8003146:	d03f      	beq.n	80031c8 <__aeabi_dsub+0x3a8>
 8003148:	4652      	mov	r2, sl
 800314a:	2501      	movs	r5, #1
 800314c:	2a38      	cmp	r2, #56	@ 0x38
 800314e:	dd00      	ble.n	8003152 <__aeabi_dsub+0x332>
 8003150:	e74a      	b.n	8002fe8 <__aeabi_dsub+0x1c8>
 8003152:	2280      	movs	r2, #128	@ 0x80
 8003154:	9b02      	ldr	r3, [sp, #8]
 8003156:	0412      	lsls	r2, r2, #16
 8003158:	4313      	orrs	r3, r2
 800315a:	9302      	str	r3, [sp, #8]
 800315c:	e72d      	b.n	8002fba <__aeabi_dsub+0x19a>
 800315e:	003c      	movs	r4, r7
 8003160:	2500      	movs	r5, #0
 8003162:	2200      	movs	r2, #0
 8003164:	e705      	b.n	8002f72 <__aeabi_dsub+0x152>
 8003166:	2307      	movs	r3, #7
 8003168:	402b      	ands	r3, r5
 800316a:	2b00      	cmp	r3, #0
 800316c:	d000      	beq.n	8003170 <__aeabi_dsub+0x350>
 800316e:	e6e2      	b.n	8002f36 <__aeabi_dsub+0x116>
 8003170:	e06b      	b.n	800324a <__aeabi_dsub+0x42a>
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	000007ff 	.word	0x000007ff
 8003178:	ff7fffff 	.word	0xff7fffff
 800317c:	fffff801 	.word	0xfffff801
 8003180:	000007fe 	.word	0x000007fe
 8003184:	0028      	movs	r0, r5
 8003186:	f000 fa8f 	bl	80036a8 <__clzsi2>
 800318a:	0003      	movs	r3, r0
 800318c:	3318      	adds	r3, #24
 800318e:	2b1f      	cmp	r3, #31
 8003190:	dc00      	bgt.n	8003194 <__aeabi_dsub+0x374>
 8003192:	e6b4      	b.n	8002efe <__aeabi_dsub+0xde>
 8003194:	002a      	movs	r2, r5
 8003196:	3808      	subs	r0, #8
 8003198:	4082      	lsls	r2, r0
 800319a:	429f      	cmp	r7, r3
 800319c:	dd00      	ble.n	80031a0 <__aeabi_dsub+0x380>
 800319e:	e0b9      	b.n	8003314 <__aeabi_dsub+0x4f4>
 80031a0:	1bdb      	subs	r3, r3, r7
 80031a2:	1c58      	adds	r0, r3, #1
 80031a4:	281f      	cmp	r0, #31
 80031a6:	dc00      	bgt.n	80031aa <__aeabi_dsub+0x38a>
 80031a8:	e1a0      	b.n	80034ec <__aeabi_dsub+0x6cc>
 80031aa:	0015      	movs	r5, r2
 80031ac:	3b1f      	subs	r3, #31
 80031ae:	40dd      	lsrs	r5, r3
 80031b0:	2820      	cmp	r0, #32
 80031b2:	d005      	beq.n	80031c0 <__aeabi_dsub+0x3a0>
 80031b4:	2340      	movs	r3, #64	@ 0x40
 80031b6:	1a1b      	subs	r3, r3, r0
 80031b8:	409a      	lsls	r2, r3
 80031ba:	1e53      	subs	r3, r2, #1
 80031bc:	419a      	sbcs	r2, r3
 80031be:	4315      	orrs	r5, r2
 80031c0:	2307      	movs	r3, #7
 80031c2:	2700      	movs	r7, #0
 80031c4:	402b      	ands	r3, r5
 80031c6:	e7d0      	b.n	800316a <__aeabi_dsub+0x34a>
 80031c8:	08c0      	lsrs	r0, r0, #3
 80031ca:	0762      	lsls	r2, r4, #29
 80031cc:	4302      	orrs	r2, r0
 80031ce:	08e4      	lsrs	r4, r4, #3
 80031d0:	e737      	b.n	8003042 <__aeabi_dsub+0x222>
 80031d2:	08ea      	lsrs	r2, r5, #3
 80031d4:	0763      	lsls	r3, r4, #29
 80031d6:	431a      	orrs	r2, r3
 80031d8:	4bd3      	ldr	r3, [pc, #844]	@ (8003528 <__aeabi_dsub+0x708>)
 80031da:	08e4      	lsrs	r4, r4, #3
 80031dc:	429f      	cmp	r7, r3
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x3c2>
 80031e0:	e72f      	b.n	8003042 <__aeabi_dsub+0x222>
 80031e2:	0324      	lsls	r4, r4, #12
 80031e4:	0b25      	lsrs	r5, r4, #12
 80031e6:	057c      	lsls	r4, r7, #21
 80031e8:	0d64      	lsrs	r4, r4, #21
 80031ea:	e6c2      	b.n	8002f72 <__aeabi_dsub+0x152>
 80031ec:	46ca      	mov	sl, r9
 80031ee:	0022      	movs	r2, r4
 80031f0:	4302      	orrs	r2, r0
 80031f2:	d158      	bne.n	80032a6 <__aeabi_dsub+0x486>
 80031f4:	4663      	mov	r3, ip
 80031f6:	000e      	movs	r6, r1
 80031f8:	9c02      	ldr	r4, [sp, #8]
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	4657      	mov	r7, sl
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	e7e7      	b.n	80031d4 <__aeabi_dsub+0x3b4>
 8003204:	4cc9      	ldr	r4, [pc, #804]	@ (800352c <__aeabi_dsub+0x70c>)
 8003206:	1aff      	subs	r7, r7, r3
 8003208:	4014      	ands	r4, r2
 800320a:	e692      	b.n	8002f32 <__aeabi_dsub+0x112>
 800320c:	4dc8      	ldr	r5, [pc, #800]	@ (8003530 <__aeabi_dsub+0x710>)
 800320e:	1c7a      	adds	r2, r7, #1
 8003210:	422a      	tst	r2, r5
 8003212:	d000      	beq.n	8003216 <__aeabi_dsub+0x3f6>
 8003214:	e084      	b.n	8003320 <__aeabi_dsub+0x500>
 8003216:	0022      	movs	r2, r4
 8003218:	4302      	orrs	r2, r0
 800321a:	2f00      	cmp	r7, #0
 800321c:	d000      	beq.n	8003220 <__aeabi_dsub+0x400>
 800321e:	e0ef      	b.n	8003400 <__aeabi_dsub+0x5e0>
 8003220:	2a00      	cmp	r2, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x406>
 8003224:	e0e5      	b.n	80033f2 <__aeabi_dsub+0x5d2>
 8003226:	4662      	mov	r2, ip
 8003228:	9902      	ldr	r1, [sp, #8]
 800322a:	430a      	orrs	r2, r1
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x410>
 800322e:	e0c5      	b.n	80033bc <__aeabi_dsub+0x59c>
 8003230:	4663      	mov	r3, ip
 8003232:	18c5      	adds	r5, r0, r3
 8003234:	468c      	mov	ip, r1
 8003236:	4285      	cmp	r5, r0
 8003238:	4180      	sbcs	r0, r0
 800323a:	4464      	add	r4, ip
 800323c:	4240      	negs	r0, r0
 800323e:	1824      	adds	r4, r4, r0
 8003240:	0223      	lsls	r3, r4, #8
 8003242:	d502      	bpl.n	800324a <__aeabi_dsub+0x42a>
 8003244:	4bb9      	ldr	r3, [pc, #740]	@ (800352c <__aeabi_dsub+0x70c>)
 8003246:	3701      	adds	r7, #1
 8003248:	401c      	ands	r4, r3
 800324a:	46ba      	mov	sl, r7
 800324c:	9503      	str	r5, [sp, #12]
 800324e:	e7d5      	b.n	80031fc <__aeabi_dsub+0x3dc>
 8003250:	4662      	mov	r2, ip
 8003252:	1a85      	subs	r5, r0, r2
 8003254:	42a8      	cmp	r0, r5
 8003256:	4192      	sbcs	r2, r2
 8003258:	4252      	negs	r2, r2
 800325a:	4691      	mov	r9, r2
 800325c:	9b02      	ldr	r3, [sp, #8]
 800325e:	1ae3      	subs	r3, r4, r3
 8003260:	001a      	movs	r2, r3
 8003262:	464b      	mov	r3, r9
 8003264:	1ad2      	subs	r2, r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	4691      	mov	r9, r2
 800326a:	021a      	lsls	r2, r3, #8
 800326c:	d46c      	bmi.n	8003348 <__aeabi_dsub+0x528>
 800326e:	464a      	mov	r2, r9
 8003270:	464c      	mov	r4, r9
 8003272:	432a      	orrs	r2, r5
 8003274:	d000      	beq.n	8003278 <__aeabi_dsub+0x458>
 8003276:	e63a      	b.n	8002eee <__aeabi_dsub+0xce>
 8003278:	2600      	movs	r6, #0
 800327a:	2400      	movs	r4, #0
 800327c:	2500      	movs	r5, #0
 800327e:	e678      	b.n	8002f72 <__aeabi_dsub+0x152>
 8003280:	9902      	ldr	r1, [sp, #8]
 8003282:	4653      	mov	r3, sl
 8003284:	000d      	movs	r5, r1
 8003286:	3a20      	subs	r2, #32
 8003288:	40d5      	lsrs	r5, r2
 800328a:	2b20      	cmp	r3, #32
 800328c:	d006      	beq.n	800329c <__aeabi_dsub+0x47c>
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	000b      	movs	r3, r1
 8003294:	4093      	lsls	r3, r2
 8003296:	4662      	mov	r2, ip
 8003298:	431a      	orrs	r2, r3
 800329a:	4693      	mov	fp, r2
 800329c:	465b      	mov	r3, fp
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	4193      	sbcs	r3, r2
 80032a2:	431d      	orrs	r5, r3
 80032a4:	e619      	b.n	8002eda <__aeabi_dsub+0xba>
 80032a6:	4653      	mov	r3, sl
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d100      	bne.n	80032b0 <__aeabi_dsub+0x490>
 80032ae:	e0c6      	b.n	800343e <__aeabi_dsub+0x61e>
 80032b0:	4e9d      	ldr	r6, [pc, #628]	@ (8003528 <__aeabi_dsub+0x708>)
 80032b2:	45b2      	cmp	sl, r6
 80032b4:	d100      	bne.n	80032b8 <__aeabi_dsub+0x498>
 80032b6:	e6bd      	b.n	8003034 <__aeabi_dsub+0x214>
 80032b8:	4688      	mov	r8, r1
 80032ba:	000e      	movs	r6, r1
 80032bc:	2501      	movs	r5, #1
 80032be:	2a38      	cmp	r2, #56	@ 0x38
 80032c0:	dc10      	bgt.n	80032e4 <__aeabi_dsub+0x4c4>
 80032c2:	2a1f      	cmp	r2, #31
 80032c4:	dc7f      	bgt.n	80033c6 <__aeabi_dsub+0x5a6>
 80032c6:	2120      	movs	r1, #32
 80032c8:	0025      	movs	r5, r4
 80032ca:	1a89      	subs	r1, r1, r2
 80032cc:	0007      	movs	r7, r0
 80032ce:	4088      	lsls	r0, r1
 80032d0:	408d      	lsls	r5, r1
 80032d2:	40d7      	lsrs	r7, r2
 80032d4:	40d4      	lsrs	r4, r2
 80032d6:	1e41      	subs	r1, r0, #1
 80032d8:	4188      	sbcs	r0, r1
 80032da:	9b02      	ldr	r3, [sp, #8]
 80032dc:	433d      	orrs	r5, r7
 80032de:	1b1b      	subs	r3, r3, r4
 80032e0:	4305      	orrs	r5, r0
 80032e2:	9302      	str	r3, [sp, #8]
 80032e4:	4662      	mov	r2, ip
 80032e6:	1b55      	subs	r5, r2, r5
 80032e8:	45ac      	cmp	ip, r5
 80032ea:	4192      	sbcs	r2, r2
 80032ec:	9b02      	ldr	r3, [sp, #8]
 80032ee:	4252      	negs	r2, r2
 80032f0:	464f      	mov	r7, r9
 80032f2:	1a9c      	subs	r4, r3, r2
 80032f4:	e5f6      	b.n	8002ee4 <__aeabi_dsub+0xc4>
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	d000      	beq.n	80032fc <__aeabi_dsub+0x4dc>
 80032fa:	e0b7      	b.n	800346c <__aeabi_dsub+0x64c>
 80032fc:	2a00      	cmp	r2, #0
 80032fe:	d100      	bne.n	8003302 <__aeabi_dsub+0x4e2>
 8003300:	e0f0      	b.n	80034e4 <__aeabi_dsub+0x6c4>
 8003302:	2601      	movs	r6, #1
 8003304:	400e      	ands	r6, r1
 8003306:	4663      	mov	r3, ip
 8003308:	9802      	ldr	r0, [sp, #8]
 800330a:	08d9      	lsrs	r1, r3, #3
 800330c:	0742      	lsls	r2, r0, #29
 800330e:	430a      	orrs	r2, r1
 8003310:	08c4      	lsrs	r4, r0, #3
 8003312:	e696      	b.n	8003042 <__aeabi_dsub+0x222>
 8003314:	4c85      	ldr	r4, [pc, #532]	@ (800352c <__aeabi_dsub+0x70c>)
 8003316:	1aff      	subs	r7, r7, r3
 8003318:	4014      	ands	r4, r2
 800331a:	0762      	lsls	r2, r4, #29
 800331c:	08e4      	lsrs	r4, r4, #3
 800331e:	e760      	b.n	80031e2 <__aeabi_dsub+0x3c2>
 8003320:	4981      	ldr	r1, [pc, #516]	@ (8003528 <__aeabi_dsub+0x708>)
 8003322:	428a      	cmp	r2, r1
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x508>
 8003326:	e0c9      	b.n	80034bc <__aeabi_dsub+0x69c>
 8003328:	4663      	mov	r3, ip
 800332a:	18c1      	adds	r1, r0, r3
 800332c:	4281      	cmp	r1, r0
 800332e:	4180      	sbcs	r0, r0
 8003330:	9b02      	ldr	r3, [sp, #8]
 8003332:	4240      	negs	r0, r0
 8003334:	18e3      	adds	r3, r4, r3
 8003336:	181b      	adds	r3, r3, r0
 8003338:	07dd      	lsls	r5, r3, #31
 800333a:	085c      	lsrs	r4, r3, #1
 800333c:	2307      	movs	r3, #7
 800333e:	0849      	lsrs	r1, r1, #1
 8003340:	430d      	orrs	r5, r1
 8003342:	0017      	movs	r7, r2
 8003344:	402b      	ands	r3, r5
 8003346:	e710      	b.n	800316a <__aeabi_dsub+0x34a>
 8003348:	4663      	mov	r3, ip
 800334a:	1a1d      	subs	r5, r3, r0
 800334c:	45ac      	cmp	ip, r5
 800334e:	4192      	sbcs	r2, r2
 8003350:	2601      	movs	r6, #1
 8003352:	9b02      	ldr	r3, [sp, #8]
 8003354:	4252      	negs	r2, r2
 8003356:	1b1c      	subs	r4, r3, r4
 8003358:	4688      	mov	r8, r1
 800335a:	1aa4      	subs	r4, r4, r2
 800335c:	400e      	ands	r6, r1
 800335e:	e5c6      	b.n	8002eee <__aeabi_dsub+0xce>
 8003360:	4663      	mov	r3, ip
 8003362:	18c5      	adds	r5, r0, r3
 8003364:	9b02      	ldr	r3, [sp, #8]
 8003366:	4285      	cmp	r5, r0
 8003368:	4180      	sbcs	r0, r0
 800336a:	469c      	mov	ip, r3
 800336c:	4240      	negs	r0, r0
 800336e:	4464      	add	r4, ip
 8003370:	1824      	adds	r4, r4, r0
 8003372:	2701      	movs	r7, #1
 8003374:	0223      	lsls	r3, r4, #8
 8003376:	d400      	bmi.n	800337a <__aeabi_dsub+0x55a>
 8003378:	e6f5      	b.n	8003166 <__aeabi_dsub+0x346>
 800337a:	2702      	movs	r7, #2
 800337c:	e641      	b.n	8003002 <__aeabi_dsub+0x1e2>
 800337e:	4663      	mov	r3, ip
 8003380:	1ac5      	subs	r5, r0, r3
 8003382:	42a8      	cmp	r0, r5
 8003384:	4180      	sbcs	r0, r0
 8003386:	9b02      	ldr	r3, [sp, #8]
 8003388:	4240      	negs	r0, r0
 800338a:	1ae4      	subs	r4, r4, r3
 800338c:	2701      	movs	r7, #1
 800338e:	1a24      	subs	r4, r4, r0
 8003390:	e5a8      	b.n	8002ee4 <__aeabi_dsub+0xc4>
 8003392:	9d02      	ldr	r5, [sp, #8]
 8003394:	4652      	mov	r2, sl
 8003396:	002b      	movs	r3, r5
 8003398:	3a20      	subs	r2, #32
 800339a:	40d3      	lsrs	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	4653      	mov	r3, sl
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d006      	beq.n	80033b2 <__aeabi_dsub+0x592>
 80033a4:	2240      	movs	r2, #64	@ 0x40
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	002b      	movs	r3, r5
 80033aa:	4093      	lsls	r3, r2
 80033ac:	4662      	mov	r2, ip
 80033ae:	431a      	orrs	r2, r3
 80033b0:	4693      	mov	fp, r2
 80033b2:	465d      	mov	r5, fp
 80033b4:	1e6b      	subs	r3, r5, #1
 80033b6:	419d      	sbcs	r5, r3
 80033b8:	430d      	orrs	r5, r1
 80033ba:	e615      	b.n	8002fe8 <__aeabi_dsub+0x1c8>
 80033bc:	0762      	lsls	r2, r4, #29
 80033be:	08c0      	lsrs	r0, r0, #3
 80033c0:	4302      	orrs	r2, r0
 80033c2:	08e4      	lsrs	r4, r4, #3
 80033c4:	e70d      	b.n	80031e2 <__aeabi_dsub+0x3c2>
 80033c6:	0011      	movs	r1, r2
 80033c8:	0027      	movs	r7, r4
 80033ca:	3920      	subs	r1, #32
 80033cc:	40cf      	lsrs	r7, r1
 80033ce:	2a20      	cmp	r2, #32
 80033d0:	d005      	beq.n	80033de <__aeabi_dsub+0x5be>
 80033d2:	2140      	movs	r1, #64	@ 0x40
 80033d4:	1a8a      	subs	r2, r1, r2
 80033d6:	4094      	lsls	r4, r2
 80033d8:	0025      	movs	r5, r4
 80033da:	4305      	orrs	r5, r0
 80033dc:	9503      	str	r5, [sp, #12]
 80033de:	9d03      	ldr	r5, [sp, #12]
 80033e0:	1e6a      	subs	r2, r5, #1
 80033e2:	4195      	sbcs	r5, r2
 80033e4:	433d      	orrs	r5, r7
 80033e6:	e77d      	b.n	80032e4 <__aeabi_dsub+0x4c4>
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	d100      	bne.n	80033ee <__aeabi_dsub+0x5ce>
 80033ec:	e744      	b.n	8003278 <__aeabi_dsub+0x458>
 80033ee:	2601      	movs	r6, #1
 80033f0:	400e      	ands	r6, r1
 80033f2:	4663      	mov	r3, ip
 80033f4:	08d9      	lsrs	r1, r3, #3
 80033f6:	9b02      	ldr	r3, [sp, #8]
 80033f8:	075a      	lsls	r2, r3, #29
 80033fa:	430a      	orrs	r2, r1
 80033fc:	08dc      	lsrs	r4, r3, #3
 80033fe:	e6f0      	b.n	80031e2 <__aeabi_dsub+0x3c2>
 8003400:	2a00      	cmp	r2, #0
 8003402:	d028      	beq.n	8003456 <__aeabi_dsub+0x636>
 8003404:	4662      	mov	r2, ip
 8003406:	9f02      	ldr	r7, [sp, #8]
 8003408:	08c0      	lsrs	r0, r0, #3
 800340a:	433a      	orrs	r2, r7
 800340c:	d100      	bne.n	8003410 <__aeabi_dsub+0x5f0>
 800340e:	e6dc      	b.n	80031ca <__aeabi_dsub+0x3aa>
 8003410:	0762      	lsls	r2, r4, #29
 8003412:	4310      	orrs	r0, r2
 8003414:	2280      	movs	r2, #128	@ 0x80
 8003416:	08e4      	lsrs	r4, r4, #3
 8003418:	0312      	lsls	r2, r2, #12
 800341a:	4214      	tst	r4, r2
 800341c:	d009      	beq.n	8003432 <__aeabi_dsub+0x612>
 800341e:	08fd      	lsrs	r5, r7, #3
 8003420:	4215      	tst	r5, r2
 8003422:	d106      	bne.n	8003432 <__aeabi_dsub+0x612>
 8003424:	4663      	mov	r3, ip
 8003426:	2601      	movs	r6, #1
 8003428:	002c      	movs	r4, r5
 800342a:	08d8      	lsrs	r0, r3, #3
 800342c:	077b      	lsls	r3, r7, #29
 800342e:	4318      	orrs	r0, r3
 8003430:	400e      	ands	r6, r1
 8003432:	0f42      	lsrs	r2, r0, #29
 8003434:	00c0      	lsls	r0, r0, #3
 8003436:	08c0      	lsrs	r0, r0, #3
 8003438:	0752      	lsls	r2, r2, #29
 800343a:	4302      	orrs	r2, r0
 800343c:	e601      	b.n	8003042 <__aeabi_dsub+0x222>
 800343e:	4663      	mov	r3, ip
 8003440:	1a1d      	subs	r5, r3, r0
 8003442:	45ac      	cmp	ip, r5
 8003444:	4192      	sbcs	r2, r2
 8003446:	9b02      	ldr	r3, [sp, #8]
 8003448:	4252      	negs	r2, r2
 800344a:	1b1c      	subs	r4, r3, r4
 800344c:	000e      	movs	r6, r1
 800344e:	4688      	mov	r8, r1
 8003450:	2701      	movs	r7, #1
 8003452:	1aa4      	subs	r4, r4, r2
 8003454:	e546      	b.n	8002ee4 <__aeabi_dsub+0xc4>
 8003456:	4663      	mov	r3, ip
 8003458:	08d9      	lsrs	r1, r3, #3
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	075a      	lsls	r2, r3, #29
 800345e:	430a      	orrs	r2, r1
 8003460:	08dc      	lsrs	r4, r3, #3
 8003462:	e5ee      	b.n	8003042 <__aeabi_dsub+0x222>
 8003464:	4663      	mov	r3, ip
 8003466:	9c02      	ldr	r4, [sp, #8]
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	e6c7      	b.n	80031fc <__aeabi_dsub+0x3dc>
 800346c:	08c0      	lsrs	r0, r0, #3
 800346e:	2a00      	cmp	r2, #0
 8003470:	d100      	bne.n	8003474 <__aeabi_dsub+0x654>
 8003472:	e6aa      	b.n	80031ca <__aeabi_dsub+0x3aa>
 8003474:	0762      	lsls	r2, r4, #29
 8003476:	4310      	orrs	r0, r2
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	08e4      	lsrs	r4, r4, #3
 800347c:	0312      	lsls	r2, r2, #12
 800347e:	4214      	tst	r4, r2
 8003480:	d0d7      	beq.n	8003432 <__aeabi_dsub+0x612>
 8003482:	9f02      	ldr	r7, [sp, #8]
 8003484:	08fd      	lsrs	r5, r7, #3
 8003486:	4215      	tst	r5, r2
 8003488:	d1d3      	bne.n	8003432 <__aeabi_dsub+0x612>
 800348a:	4663      	mov	r3, ip
 800348c:	2601      	movs	r6, #1
 800348e:	08d8      	lsrs	r0, r3, #3
 8003490:	077b      	lsls	r3, r7, #29
 8003492:	002c      	movs	r4, r5
 8003494:	4318      	orrs	r0, r3
 8003496:	400e      	ands	r6, r1
 8003498:	e7cb      	b.n	8003432 <__aeabi_dsub+0x612>
 800349a:	000a      	movs	r2, r1
 800349c:	0027      	movs	r7, r4
 800349e:	3a20      	subs	r2, #32
 80034a0:	40d7      	lsrs	r7, r2
 80034a2:	2920      	cmp	r1, #32
 80034a4:	d005      	beq.n	80034b2 <__aeabi_dsub+0x692>
 80034a6:	2240      	movs	r2, #64	@ 0x40
 80034a8:	1a52      	subs	r2, r2, r1
 80034aa:	4094      	lsls	r4, r2
 80034ac:	0025      	movs	r5, r4
 80034ae:	4305      	orrs	r5, r0
 80034b0:	9503      	str	r5, [sp, #12]
 80034b2:	9d03      	ldr	r5, [sp, #12]
 80034b4:	1e6a      	subs	r2, r5, #1
 80034b6:	4195      	sbcs	r5, r2
 80034b8:	432f      	orrs	r7, r5
 80034ba:	e610      	b.n	80030de <__aeabi_dsub+0x2be>
 80034bc:	0014      	movs	r4, r2
 80034be:	2500      	movs	r5, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	e556      	b.n	8002f72 <__aeabi_dsub+0x152>
 80034c4:	9b02      	ldr	r3, [sp, #8]
 80034c6:	4460      	add	r0, ip
 80034c8:	4699      	mov	r9, r3
 80034ca:	4560      	cmp	r0, ip
 80034cc:	4192      	sbcs	r2, r2
 80034ce:	444c      	add	r4, r9
 80034d0:	4252      	negs	r2, r2
 80034d2:	0005      	movs	r5, r0
 80034d4:	18a4      	adds	r4, r4, r2
 80034d6:	e74c      	b.n	8003372 <__aeabi_dsub+0x552>
 80034d8:	001a      	movs	r2, r3
 80034da:	001c      	movs	r4, r3
 80034dc:	432a      	orrs	r2, r5
 80034de:	d000      	beq.n	80034e2 <__aeabi_dsub+0x6c2>
 80034e0:	e6b3      	b.n	800324a <__aeabi_dsub+0x42a>
 80034e2:	e6c9      	b.n	8003278 <__aeabi_dsub+0x458>
 80034e4:	2480      	movs	r4, #128	@ 0x80
 80034e6:	2600      	movs	r6, #0
 80034e8:	0324      	lsls	r4, r4, #12
 80034ea:	e5ae      	b.n	800304a <__aeabi_dsub+0x22a>
 80034ec:	2120      	movs	r1, #32
 80034ee:	2500      	movs	r5, #0
 80034f0:	1a09      	subs	r1, r1, r0
 80034f2:	e517      	b.n	8002f24 <__aeabi_dsub+0x104>
 80034f4:	2200      	movs	r2, #0
 80034f6:	2500      	movs	r5, #0
 80034f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003528 <__aeabi_dsub+0x708>)
 80034fa:	e53a      	b.n	8002f72 <__aeabi_dsub+0x152>
 80034fc:	2d00      	cmp	r5, #0
 80034fe:	d100      	bne.n	8003502 <__aeabi_dsub+0x6e2>
 8003500:	e5f6      	b.n	80030f0 <__aeabi_dsub+0x2d0>
 8003502:	464b      	mov	r3, r9
 8003504:	1bda      	subs	r2, r3, r7
 8003506:	4692      	mov	sl, r2
 8003508:	2f00      	cmp	r7, #0
 800350a:	d100      	bne.n	800350e <__aeabi_dsub+0x6ee>
 800350c:	e66f      	b.n	80031ee <__aeabi_dsub+0x3ce>
 800350e:	2a38      	cmp	r2, #56	@ 0x38
 8003510:	dc05      	bgt.n	800351e <__aeabi_dsub+0x6fe>
 8003512:	2680      	movs	r6, #128	@ 0x80
 8003514:	0436      	lsls	r6, r6, #16
 8003516:	4334      	orrs	r4, r6
 8003518:	4688      	mov	r8, r1
 800351a:	000e      	movs	r6, r1
 800351c:	e6d1      	b.n	80032c2 <__aeabi_dsub+0x4a2>
 800351e:	4688      	mov	r8, r1
 8003520:	000e      	movs	r6, r1
 8003522:	2501      	movs	r5, #1
 8003524:	e6de      	b.n	80032e4 <__aeabi_dsub+0x4c4>
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	000007ff 	.word	0x000007ff
 800352c:	ff7fffff 	.word	0xff7fffff
 8003530:	000007fe 	.word	0x000007fe
 8003534:	2d00      	cmp	r5, #0
 8003536:	d100      	bne.n	800353a <__aeabi_dsub+0x71a>
 8003538:	e668      	b.n	800320c <__aeabi_dsub+0x3ec>
 800353a:	464b      	mov	r3, r9
 800353c:	1bd9      	subs	r1, r3, r7
 800353e:	2f00      	cmp	r7, #0
 8003540:	d101      	bne.n	8003546 <__aeabi_dsub+0x726>
 8003542:	468a      	mov	sl, r1
 8003544:	e5a7      	b.n	8003096 <__aeabi_dsub+0x276>
 8003546:	2701      	movs	r7, #1
 8003548:	2938      	cmp	r1, #56	@ 0x38
 800354a:	dd00      	ble.n	800354e <__aeabi_dsub+0x72e>
 800354c:	e5c7      	b.n	80030de <__aeabi_dsub+0x2be>
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	0412      	lsls	r2, r2, #16
 8003552:	4314      	orrs	r4, r2
 8003554:	e5af      	b.n	80030b6 <__aeabi_dsub+0x296>
 8003556:	46c0      	nop			@ (mov r8, r8)

08003558 <__aeabi_d2iz>:
 8003558:	000b      	movs	r3, r1
 800355a:	0002      	movs	r2, r0
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	4d16      	ldr	r5, [pc, #88]	@ (80035b8 <__aeabi_d2iz+0x60>)
 8003560:	030c      	lsls	r4, r1, #12
 8003562:	b082      	sub	sp, #8
 8003564:	0049      	lsls	r1, r1, #1
 8003566:	2000      	movs	r0, #0
 8003568:	9200      	str	r2, [sp, #0]
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	0b24      	lsrs	r4, r4, #12
 800356e:	0d49      	lsrs	r1, r1, #21
 8003570:	0fde      	lsrs	r6, r3, #31
 8003572:	42a9      	cmp	r1, r5
 8003574:	dd04      	ble.n	8003580 <__aeabi_d2iz+0x28>
 8003576:	4811      	ldr	r0, [pc, #68]	@ (80035bc <__aeabi_d2iz+0x64>)
 8003578:	4281      	cmp	r1, r0
 800357a:	dd03      	ble.n	8003584 <__aeabi_d2iz+0x2c>
 800357c:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <__aeabi_d2iz+0x68>)
 800357e:	18f0      	adds	r0, r6, r3
 8003580:	b002      	add	sp, #8
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	2080      	movs	r0, #128	@ 0x80
 8003586:	0340      	lsls	r0, r0, #13
 8003588:	4320      	orrs	r0, r4
 800358a:	4c0e      	ldr	r4, [pc, #56]	@ (80035c4 <__aeabi_d2iz+0x6c>)
 800358c:	1a64      	subs	r4, r4, r1
 800358e:	2c1f      	cmp	r4, #31
 8003590:	dd08      	ble.n	80035a4 <__aeabi_d2iz+0x4c>
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <__aeabi_d2iz+0x70>)
 8003594:	1a5b      	subs	r3, r3, r1
 8003596:	40d8      	lsrs	r0, r3
 8003598:	0003      	movs	r3, r0
 800359a:	4258      	negs	r0, r3
 800359c:	2e00      	cmp	r6, #0
 800359e:	d1ef      	bne.n	8003580 <__aeabi_d2iz+0x28>
 80035a0:	0018      	movs	r0, r3
 80035a2:	e7ed      	b.n	8003580 <__aeabi_d2iz+0x28>
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <__aeabi_d2iz+0x74>)
 80035a6:	9a00      	ldr	r2, [sp, #0]
 80035a8:	469c      	mov	ip, r3
 80035aa:	0003      	movs	r3, r0
 80035ac:	4461      	add	r1, ip
 80035ae:	408b      	lsls	r3, r1
 80035b0:	40e2      	lsrs	r2, r4
 80035b2:	4313      	orrs	r3, r2
 80035b4:	e7f1      	b.n	800359a <__aeabi_d2iz+0x42>
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	000003fe 	.word	0x000003fe
 80035bc:	0000041d 	.word	0x0000041d
 80035c0:	7fffffff 	.word	0x7fffffff
 80035c4:	00000433 	.word	0x00000433
 80035c8:	00000413 	.word	0x00000413
 80035cc:	fffffbed 	.word	0xfffffbed

080035d0 <__aeabi_i2d>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d016      	beq.n	8003604 <__aeabi_i2d+0x34>
 80035d6:	17c3      	asrs	r3, r0, #31
 80035d8:	18c5      	adds	r5, r0, r3
 80035da:	405d      	eors	r5, r3
 80035dc:	0fc4      	lsrs	r4, r0, #31
 80035de:	0028      	movs	r0, r5
 80035e0:	f000 f862 	bl	80036a8 <__clzsi2>
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <__aeabi_i2d+0x58>)
 80035e6:	1a1b      	subs	r3, r3, r0
 80035e8:	055b      	lsls	r3, r3, #21
 80035ea:	0d5b      	lsrs	r3, r3, #21
 80035ec:	280a      	cmp	r0, #10
 80035ee:	dc14      	bgt.n	800361a <__aeabi_i2d+0x4a>
 80035f0:	0002      	movs	r2, r0
 80035f2:	002e      	movs	r6, r5
 80035f4:	3215      	adds	r2, #21
 80035f6:	4096      	lsls	r6, r2
 80035f8:	220b      	movs	r2, #11
 80035fa:	1a12      	subs	r2, r2, r0
 80035fc:	40d5      	lsrs	r5, r2
 80035fe:	032d      	lsls	r5, r5, #12
 8003600:	0b2d      	lsrs	r5, r5, #12
 8003602:	e003      	b.n	800360c <__aeabi_i2d+0x3c>
 8003604:	2400      	movs	r4, #0
 8003606:	2300      	movs	r3, #0
 8003608:	2500      	movs	r5, #0
 800360a:	2600      	movs	r6, #0
 800360c:	051b      	lsls	r3, r3, #20
 800360e:	432b      	orrs	r3, r5
 8003610:	07e4      	lsls	r4, r4, #31
 8003612:	4323      	orrs	r3, r4
 8003614:	0030      	movs	r0, r6
 8003616:	0019      	movs	r1, r3
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	380b      	subs	r0, #11
 800361c:	4085      	lsls	r5, r0
 800361e:	032d      	lsls	r5, r5, #12
 8003620:	2600      	movs	r6, #0
 8003622:	0b2d      	lsrs	r5, r5, #12
 8003624:	e7f2      	b.n	800360c <__aeabi_i2d+0x3c>
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	0000041e 	.word	0x0000041e

0800362c <__aeabi_cdrcmple>:
 800362c:	4684      	mov	ip, r0
 800362e:	0010      	movs	r0, r2
 8003630:	4662      	mov	r2, ip
 8003632:	468c      	mov	ip, r1
 8003634:	0019      	movs	r1, r3
 8003636:	4663      	mov	r3, ip
 8003638:	e000      	b.n	800363c <__aeabi_cdcmpeq>
 800363a:	46c0      	nop			@ (mov r8, r8)

0800363c <__aeabi_cdcmpeq>:
 800363c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800363e:	f000 f909 	bl	8003854 <__ledf2>
 8003642:	2800      	cmp	r0, #0
 8003644:	d401      	bmi.n	800364a <__aeabi_cdcmpeq+0xe>
 8003646:	2100      	movs	r1, #0
 8003648:	42c8      	cmn	r0, r1
 800364a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800364c <__aeabi_dcmpeq>:
 800364c:	b510      	push	{r4, lr}
 800364e:	f000 f849 	bl	80036e4 <__eqdf2>
 8003652:	4240      	negs	r0, r0
 8003654:	3001      	adds	r0, #1
 8003656:	bd10      	pop	{r4, pc}

08003658 <__aeabi_dcmplt>:
 8003658:	b510      	push	{r4, lr}
 800365a:	f000 f8fb 	bl	8003854 <__ledf2>
 800365e:	2800      	cmp	r0, #0
 8003660:	db01      	blt.n	8003666 <__aeabi_dcmplt+0xe>
 8003662:	2000      	movs	r0, #0
 8003664:	bd10      	pop	{r4, pc}
 8003666:	2001      	movs	r0, #1
 8003668:	bd10      	pop	{r4, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)

0800366c <__aeabi_dcmple>:
 800366c:	b510      	push	{r4, lr}
 800366e:	f000 f8f1 	bl	8003854 <__ledf2>
 8003672:	2800      	cmp	r0, #0
 8003674:	dd01      	ble.n	800367a <__aeabi_dcmple+0xe>
 8003676:	2000      	movs	r0, #0
 8003678:	bd10      	pop	{r4, pc}
 800367a:	2001      	movs	r0, #1
 800367c:	bd10      	pop	{r4, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)

08003680 <__aeabi_dcmpgt>:
 8003680:	b510      	push	{r4, lr}
 8003682:	f000 f873 	bl	800376c <__gedf2>
 8003686:	2800      	cmp	r0, #0
 8003688:	dc01      	bgt.n	800368e <__aeabi_dcmpgt+0xe>
 800368a:	2000      	movs	r0, #0
 800368c:	bd10      	pop	{r4, pc}
 800368e:	2001      	movs	r0, #1
 8003690:	bd10      	pop	{r4, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)

08003694 <__aeabi_dcmpge>:
 8003694:	b510      	push	{r4, lr}
 8003696:	f000 f869 	bl	800376c <__gedf2>
 800369a:	2800      	cmp	r0, #0
 800369c:	da01      	bge.n	80036a2 <__aeabi_dcmpge+0xe>
 800369e:	2000      	movs	r0, #0
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	2001      	movs	r0, #1
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)

080036a8 <__clzsi2>:
 80036a8:	211c      	movs	r1, #28
 80036aa:	2301      	movs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	4298      	cmp	r0, r3
 80036b0:	d301      	bcc.n	80036b6 <__clzsi2+0xe>
 80036b2:	0c00      	lsrs	r0, r0, #16
 80036b4:	3910      	subs	r1, #16
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	4298      	cmp	r0, r3
 80036ba:	d301      	bcc.n	80036c0 <__clzsi2+0x18>
 80036bc:	0a00      	lsrs	r0, r0, #8
 80036be:	3908      	subs	r1, #8
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	4298      	cmp	r0, r3
 80036c4:	d301      	bcc.n	80036ca <__clzsi2+0x22>
 80036c6:	0900      	lsrs	r0, r0, #4
 80036c8:	3904      	subs	r1, #4
 80036ca:	a202      	add	r2, pc, #8	@ (adr r2, 80036d4 <__clzsi2+0x2c>)
 80036cc:	5c10      	ldrb	r0, [r2, r0]
 80036ce:	1840      	adds	r0, r0, r1
 80036d0:	4770      	bx	lr
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	02020304 	.word	0x02020304
 80036d8:	01010101 	.word	0x01010101
	...

080036e4 <__eqdf2>:
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	4657      	mov	r7, sl
 80036e8:	46de      	mov	lr, fp
 80036ea:	464e      	mov	r6, r9
 80036ec:	4645      	mov	r5, r8
 80036ee:	b5e0      	push	{r5, r6, r7, lr}
 80036f0:	000d      	movs	r5, r1
 80036f2:	0004      	movs	r4, r0
 80036f4:	0fe8      	lsrs	r0, r5, #31
 80036f6:	4683      	mov	fp, r0
 80036f8:	0309      	lsls	r1, r1, #12
 80036fa:	0fd8      	lsrs	r0, r3, #31
 80036fc:	0b09      	lsrs	r1, r1, #12
 80036fe:	4682      	mov	sl, r0
 8003700:	4819      	ldr	r0, [pc, #100]	@ (8003768 <__eqdf2+0x84>)
 8003702:	468c      	mov	ip, r1
 8003704:	031f      	lsls	r7, r3, #12
 8003706:	0069      	lsls	r1, r5, #1
 8003708:	005e      	lsls	r6, r3, #1
 800370a:	0d49      	lsrs	r1, r1, #21
 800370c:	0b3f      	lsrs	r7, r7, #12
 800370e:	0d76      	lsrs	r6, r6, #21
 8003710:	4281      	cmp	r1, r0
 8003712:	d018      	beq.n	8003746 <__eqdf2+0x62>
 8003714:	4286      	cmp	r6, r0
 8003716:	d00f      	beq.n	8003738 <__eqdf2+0x54>
 8003718:	2001      	movs	r0, #1
 800371a:	42b1      	cmp	r1, r6
 800371c:	d10d      	bne.n	800373a <__eqdf2+0x56>
 800371e:	45bc      	cmp	ip, r7
 8003720:	d10b      	bne.n	800373a <__eqdf2+0x56>
 8003722:	4294      	cmp	r4, r2
 8003724:	d109      	bne.n	800373a <__eqdf2+0x56>
 8003726:	45d3      	cmp	fp, sl
 8003728:	d01c      	beq.n	8003764 <__eqdf2+0x80>
 800372a:	2900      	cmp	r1, #0
 800372c:	d105      	bne.n	800373a <__eqdf2+0x56>
 800372e:	4660      	mov	r0, ip
 8003730:	4320      	orrs	r0, r4
 8003732:	1e43      	subs	r3, r0, #1
 8003734:	4198      	sbcs	r0, r3
 8003736:	e000      	b.n	800373a <__eqdf2+0x56>
 8003738:	2001      	movs	r0, #1
 800373a:	bcf0      	pop	{r4, r5, r6, r7}
 800373c:	46bb      	mov	fp, r7
 800373e:	46b2      	mov	sl, r6
 8003740:	46a9      	mov	r9, r5
 8003742:	46a0      	mov	r8, r4
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003746:	2001      	movs	r0, #1
 8003748:	428e      	cmp	r6, r1
 800374a:	d1f6      	bne.n	800373a <__eqdf2+0x56>
 800374c:	4661      	mov	r1, ip
 800374e:	4339      	orrs	r1, r7
 8003750:	000f      	movs	r7, r1
 8003752:	4317      	orrs	r7, r2
 8003754:	4327      	orrs	r7, r4
 8003756:	d1f0      	bne.n	800373a <__eqdf2+0x56>
 8003758:	465b      	mov	r3, fp
 800375a:	4652      	mov	r2, sl
 800375c:	1a98      	subs	r0, r3, r2
 800375e:	1e43      	subs	r3, r0, #1
 8003760:	4198      	sbcs	r0, r3
 8003762:	e7ea      	b.n	800373a <__eqdf2+0x56>
 8003764:	2000      	movs	r0, #0
 8003766:	e7e8      	b.n	800373a <__eqdf2+0x56>
 8003768:	000007ff 	.word	0x000007ff

0800376c <__gedf2>:
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	4657      	mov	r7, sl
 8003770:	464e      	mov	r6, r9
 8003772:	4645      	mov	r5, r8
 8003774:	46de      	mov	lr, fp
 8003776:	b5e0      	push	{r5, r6, r7, lr}
 8003778:	000d      	movs	r5, r1
 800377a:	030f      	lsls	r7, r1, #12
 800377c:	0b39      	lsrs	r1, r7, #12
 800377e:	b083      	sub	sp, #12
 8003780:	0004      	movs	r4, r0
 8003782:	4680      	mov	r8, r0
 8003784:	9101      	str	r1, [sp, #4]
 8003786:	0058      	lsls	r0, r3, #1
 8003788:	0fe9      	lsrs	r1, r5, #31
 800378a:	4f31      	ldr	r7, [pc, #196]	@ (8003850 <__gedf2+0xe4>)
 800378c:	0d40      	lsrs	r0, r0, #21
 800378e:	468c      	mov	ip, r1
 8003790:	006e      	lsls	r6, r5, #1
 8003792:	0319      	lsls	r1, r3, #12
 8003794:	4682      	mov	sl, r0
 8003796:	4691      	mov	r9, r2
 8003798:	0d76      	lsrs	r6, r6, #21
 800379a:	0b09      	lsrs	r1, r1, #12
 800379c:	0fd8      	lsrs	r0, r3, #31
 800379e:	42be      	cmp	r6, r7
 80037a0:	d01f      	beq.n	80037e2 <__gedf2+0x76>
 80037a2:	45ba      	cmp	sl, r7
 80037a4:	d00f      	beq.n	80037c6 <__gedf2+0x5a>
 80037a6:	2e00      	cmp	r6, #0
 80037a8:	d12f      	bne.n	800380a <__gedf2+0x9e>
 80037aa:	4655      	mov	r5, sl
 80037ac:	9e01      	ldr	r6, [sp, #4]
 80037ae:	4334      	orrs	r4, r6
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	d127      	bne.n	8003804 <__gedf2+0x98>
 80037b4:	430a      	orrs	r2, r1
 80037b6:	d03a      	beq.n	800382e <__gedf2+0xc2>
 80037b8:	2c00      	cmp	r4, #0
 80037ba:	d145      	bne.n	8003848 <__gedf2+0xdc>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d11a      	bne.n	80037f6 <__gedf2+0x8a>
 80037c0:	2001      	movs	r0, #1
 80037c2:	4240      	negs	r0, r0
 80037c4:	e017      	b.n	80037f6 <__gedf2+0x8a>
 80037c6:	4311      	orrs	r1, r2
 80037c8:	d13b      	bne.n	8003842 <__gedf2+0xd6>
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	d102      	bne.n	80037d4 <__gedf2+0x68>
 80037ce:	9f01      	ldr	r7, [sp, #4]
 80037d0:	4327      	orrs	r7, r4
 80037d2:	d0f3      	beq.n	80037bc <__gedf2+0x50>
 80037d4:	4584      	cmp	ip, r0
 80037d6:	d109      	bne.n	80037ec <__gedf2+0x80>
 80037d8:	4663      	mov	r3, ip
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <__gedf2+0x54>
 80037de:	4660      	mov	r0, ip
 80037e0:	e009      	b.n	80037f6 <__gedf2+0x8a>
 80037e2:	9f01      	ldr	r7, [sp, #4]
 80037e4:	4327      	orrs	r7, r4
 80037e6:	d12c      	bne.n	8003842 <__gedf2+0xd6>
 80037e8:	45b2      	cmp	sl, r6
 80037ea:	d024      	beq.n	8003836 <__gedf2+0xca>
 80037ec:	4663      	mov	r3, ip
 80037ee:	2002      	movs	r0, #2
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4018      	ands	r0, r3
 80037f4:	3801      	subs	r0, #1
 80037f6:	b003      	add	sp, #12
 80037f8:	bcf0      	pop	{r4, r5, r6, r7}
 80037fa:	46bb      	mov	fp, r7
 80037fc:	46b2      	mov	sl, r6
 80037fe:	46a9      	mov	r9, r5
 8003800:	46a0      	mov	r8, r4
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003804:	2c00      	cmp	r4, #0
 8003806:	d0d9      	beq.n	80037bc <__gedf2+0x50>
 8003808:	e7e4      	b.n	80037d4 <__gedf2+0x68>
 800380a:	4654      	mov	r4, sl
 800380c:	2c00      	cmp	r4, #0
 800380e:	d0ed      	beq.n	80037ec <__gedf2+0x80>
 8003810:	4584      	cmp	ip, r0
 8003812:	d1eb      	bne.n	80037ec <__gedf2+0x80>
 8003814:	4556      	cmp	r6, sl
 8003816:	dce9      	bgt.n	80037ec <__gedf2+0x80>
 8003818:	dbde      	blt.n	80037d8 <__gedf2+0x6c>
 800381a:	9b01      	ldr	r3, [sp, #4]
 800381c:	428b      	cmp	r3, r1
 800381e:	d8e5      	bhi.n	80037ec <__gedf2+0x80>
 8003820:	d1da      	bne.n	80037d8 <__gedf2+0x6c>
 8003822:	45c8      	cmp	r8, r9
 8003824:	d8e2      	bhi.n	80037ec <__gedf2+0x80>
 8003826:	2000      	movs	r0, #0
 8003828:	45c8      	cmp	r8, r9
 800382a:	d2e4      	bcs.n	80037f6 <__gedf2+0x8a>
 800382c:	e7d4      	b.n	80037d8 <__gedf2+0x6c>
 800382e:	2000      	movs	r0, #0
 8003830:	2c00      	cmp	r4, #0
 8003832:	d0e0      	beq.n	80037f6 <__gedf2+0x8a>
 8003834:	e7da      	b.n	80037ec <__gedf2+0x80>
 8003836:	4311      	orrs	r1, r2
 8003838:	d103      	bne.n	8003842 <__gedf2+0xd6>
 800383a:	4584      	cmp	ip, r0
 800383c:	d1d6      	bne.n	80037ec <__gedf2+0x80>
 800383e:	2000      	movs	r0, #0
 8003840:	e7d9      	b.n	80037f6 <__gedf2+0x8a>
 8003842:	2002      	movs	r0, #2
 8003844:	4240      	negs	r0, r0
 8003846:	e7d6      	b.n	80037f6 <__gedf2+0x8a>
 8003848:	4584      	cmp	ip, r0
 800384a:	d0e6      	beq.n	800381a <__gedf2+0xae>
 800384c:	e7ce      	b.n	80037ec <__gedf2+0x80>
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	000007ff 	.word	0x000007ff

08003854 <__ledf2>:
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003856:	4657      	mov	r7, sl
 8003858:	464e      	mov	r6, r9
 800385a:	4645      	mov	r5, r8
 800385c:	46de      	mov	lr, fp
 800385e:	b5e0      	push	{r5, r6, r7, lr}
 8003860:	000d      	movs	r5, r1
 8003862:	030f      	lsls	r7, r1, #12
 8003864:	0004      	movs	r4, r0
 8003866:	4680      	mov	r8, r0
 8003868:	0fe8      	lsrs	r0, r5, #31
 800386a:	0b39      	lsrs	r1, r7, #12
 800386c:	4684      	mov	ip, r0
 800386e:	b083      	sub	sp, #12
 8003870:	0058      	lsls	r0, r3, #1
 8003872:	4f30      	ldr	r7, [pc, #192]	@ (8003934 <__ledf2+0xe0>)
 8003874:	0d40      	lsrs	r0, r0, #21
 8003876:	9101      	str	r1, [sp, #4]
 8003878:	031e      	lsls	r6, r3, #12
 800387a:	0069      	lsls	r1, r5, #1
 800387c:	4682      	mov	sl, r0
 800387e:	4691      	mov	r9, r2
 8003880:	0d49      	lsrs	r1, r1, #21
 8003882:	0b36      	lsrs	r6, r6, #12
 8003884:	0fd8      	lsrs	r0, r3, #31
 8003886:	42b9      	cmp	r1, r7
 8003888:	d020      	beq.n	80038cc <__ledf2+0x78>
 800388a:	45ba      	cmp	sl, r7
 800388c:	d00f      	beq.n	80038ae <__ledf2+0x5a>
 800388e:	2900      	cmp	r1, #0
 8003890:	d12b      	bne.n	80038ea <__ledf2+0x96>
 8003892:	9901      	ldr	r1, [sp, #4]
 8003894:	430c      	orrs	r4, r1
 8003896:	4651      	mov	r1, sl
 8003898:	2900      	cmp	r1, #0
 800389a:	d137      	bne.n	800390c <__ledf2+0xb8>
 800389c:	4332      	orrs	r2, r6
 800389e:	d038      	beq.n	8003912 <__ledf2+0xbe>
 80038a0:	2c00      	cmp	r4, #0
 80038a2:	d144      	bne.n	800392e <__ledf2+0xda>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d119      	bne.n	80038dc <__ledf2+0x88>
 80038a8:	2001      	movs	r0, #1
 80038aa:	4240      	negs	r0, r0
 80038ac:	e016      	b.n	80038dc <__ledf2+0x88>
 80038ae:	4316      	orrs	r6, r2
 80038b0:	d113      	bne.n	80038da <__ledf2+0x86>
 80038b2:	2900      	cmp	r1, #0
 80038b4:	d102      	bne.n	80038bc <__ledf2+0x68>
 80038b6:	9f01      	ldr	r7, [sp, #4]
 80038b8:	4327      	orrs	r7, r4
 80038ba:	d0f3      	beq.n	80038a4 <__ledf2+0x50>
 80038bc:	4584      	cmp	ip, r0
 80038be:	d020      	beq.n	8003902 <__ledf2+0xae>
 80038c0:	4663      	mov	r3, ip
 80038c2:	2002      	movs	r0, #2
 80038c4:	3b01      	subs	r3, #1
 80038c6:	4018      	ands	r0, r3
 80038c8:	3801      	subs	r0, #1
 80038ca:	e007      	b.n	80038dc <__ledf2+0x88>
 80038cc:	9f01      	ldr	r7, [sp, #4]
 80038ce:	4327      	orrs	r7, r4
 80038d0:	d103      	bne.n	80038da <__ledf2+0x86>
 80038d2:	458a      	cmp	sl, r1
 80038d4:	d1f4      	bne.n	80038c0 <__ledf2+0x6c>
 80038d6:	4316      	orrs	r6, r2
 80038d8:	d01f      	beq.n	800391a <__ledf2+0xc6>
 80038da:	2002      	movs	r0, #2
 80038dc:	b003      	add	sp, #12
 80038de:	bcf0      	pop	{r4, r5, r6, r7}
 80038e0:	46bb      	mov	fp, r7
 80038e2:	46b2      	mov	sl, r6
 80038e4:	46a9      	mov	r9, r5
 80038e6:	46a0      	mov	r8, r4
 80038e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ea:	4654      	mov	r4, sl
 80038ec:	2c00      	cmp	r4, #0
 80038ee:	d0e7      	beq.n	80038c0 <__ledf2+0x6c>
 80038f0:	4584      	cmp	ip, r0
 80038f2:	d1e5      	bne.n	80038c0 <__ledf2+0x6c>
 80038f4:	4551      	cmp	r1, sl
 80038f6:	dce3      	bgt.n	80038c0 <__ledf2+0x6c>
 80038f8:	db03      	blt.n	8003902 <__ledf2+0xae>
 80038fa:	9b01      	ldr	r3, [sp, #4]
 80038fc:	42b3      	cmp	r3, r6
 80038fe:	d8df      	bhi.n	80038c0 <__ledf2+0x6c>
 8003900:	d00f      	beq.n	8003922 <__ledf2+0xce>
 8003902:	4663      	mov	r3, ip
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0cf      	beq.n	80038a8 <__ledf2+0x54>
 8003908:	4660      	mov	r0, ip
 800390a:	e7e7      	b.n	80038dc <__ledf2+0x88>
 800390c:	2c00      	cmp	r4, #0
 800390e:	d0c9      	beq.n	80038a4 <__ledf2+0x50>
 8003910:	e7d4      	b.n	80038bc <__ledf2+0x68>
 8003912:	2000      	movs	r0, #0
 8003914:	2c00      	cmp	r4, #0
 8003916:	d0e1      	beq.n	80038dc <__ledf2+0x88>
 8003918:	e7d2      	b.n	80038c0 <__ledf2+0x6c>
 800391a:	4584      	cmp	ip, r0
 800391c:	d1d0      	bne.n	80038c0 <__ledf2+0x6c>
 800391e:	2000      	movs	r0, #0
 8003920:	e7dc      	b.n	80038dc <__ledf2+0x88>
 8003922:	45c8      	cmp	r8, r9
 8003924:	d8cc      	bhi.n	80038c0 <__ledf2+0x6c>
 8003926:	2000      	movs	r0, #0
 8003928:	45c8      	cmp	r8, r9
 800392a:	d2d7      	bcs.n	80038dc <__ledf2+0x88>
 800392c:	e7e9      	b.n	8003902 <__ledf2+0xae>
 800392e:	4584      	cmp	ip, r0
 8003930:	d0e3      	beq.n	80038fa <__ledf2+0xa6>
 8003932:	e7c5      	b.n	80038c0 <__ledf2+0x6c>
 8003934:	000007ff 	.word	0x000007ff

08003938 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003938:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <__NVIC_SystemReset+0x14>)
 800393e:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <__NVIC_SystemReset+0x18>)
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003946:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003948:	e7fd      	b.n	8003946 <__NVIC_SystemReset+0xe>
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	e000ed00 	.word	0xe000ed00
 8003950:	05fa0004 	.word	0x05fa0004

08003954 <iap_gpio_init>:
 *         It enables the clock for GPIOA and configures specified pins as input with pull-up resistors.
 * 
 * @param  None
 * @retval None
 */
static void iap_gpio_init(void) {
 8003954:	b500      	push	{lr}
 8003956:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003958:	2214      	movs	r2, #20
 800395a:	2100      	movs	r1, #0
 800395c:	a801      	add	r0, sp, #4
 800395e:	f003 fc0d 	bl	800717c <memset>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <iap_gpio_init+0x34>)
 8003964:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003966:	2301      	movs	r3, #1
 8003968:	4319      	orrs	r1, r3
 800396a:	6351      	str	r1, [r2, #52]	@ 0x34
 800396c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800396e:	401a      	ands	r2, r3
 8003970:	9200      	str	r2, [sp, #0]
 8003972:	9a00      	ldr	r2, [sp, #0]

	/* Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003974:	22c0      	movs	r2, #192	@ 0xc0
 8003976:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Configure pull-up resistors
 8003978:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // Initialize GPIOB with the configuration
 800397a:	a901      	add	r1, sp, #4
 800397c:	4803      	ldr	r0, [pc, #12]	@ (800398c <iap_gpio_init+0x38>)
 800397e:	f002 f923 	bl	8005bc8 <HAL_GPIO_Init>
}
 8003982:	b007      	add	sp, #28
 8003984:	bd00      	pop	{pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	50000400 	.word	0x50000400

08003990 <add_pack_head>:
void add_pack_head(void) {
 8003990:	b510      	push	{r4, lr}
	s_send_buf[s_send_len++] = PACK_HEAD_HIGH; // Add high byte of header
 8003992:	4806      	ldr	r0, [pc, #24]	@ (80039ac <add_pack_head+0x1c>)
 8003994:	7803      	ldrb	r3, [r0, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	7002      	strb	r2, [r0, #0]
 800399c:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <add_pack_head+0x20>)
 800399e:	24aa      	movs	r4, #170	@ 0xaa
 80039a0:	54cc      	strb	r4, [r1, r3]
	s_send_buf[s_send_len++] = PACK_HEAD_LOW;  // Add low byte of header
 80039a2:	3302      	adds	r3, #2
 80039a4:	7003      	strb	r3, [r0, #0]
 80039a6:	2355      	movs	r3, #85	@ 0x55
 80039a8:	548b      	strb	r3, [r1, r2]
}
 80039aa:	bd10      	pop	{r4, pc}
 80039ac:	20000140 	.word	0x20000140
 80039b0:	20000144 	.word	0x20000144

080039b4 <add_pack_end>:
void add_pack_end(void) {
 80039b4:	b510      	push	{r4, lr}
	s_send_buf[s_send_len++] = PACK_END_HIGH; // Add high byte of footer
 80039b6:	4806      	ldr	r0, [pc, #24]	@ (80039d0 <add_pack_end+0x1c>)
 80039b8:	7803      	ldrb	r3, [r0, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	7002      	strb	r2, [r0, #0]
 80039c0:	4904      	ldr	r1, [pc, #16]	@ (80039d4 <add_pack_end+0x20>)
 80039c2:	2455      	movs	r4, #85	@ 0x55
 80039c4:	54cc      	strb	r4, [r1, r3]
	s_send_buf[s_send_len++] = PACK_END_LOW;  // Add low byte of footer
 80039c6:	3302      	adds	r3, #2
 80039c8:	7003      	strb	r3, [r0, #0]
 80039ca:	23aa      	movs	r3, #170	@ 0xaa
 80039cc:	548b      	strb	r3, [r1, r2]
}
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	20000140 	.word	0x20000140
 80039d4:	20000144 	.word	0x20000144

080039d8 <head_end_check>:
	if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW
 80039d8:	7803      	ldrb	r3, [r0, #0]
 80039da:	2baa      	cmp	r3, #170	@ 0xaa
 80039dc:	d001      	beq.n	80039e2 <head_end_check+0xa>
	return CHECK_ERROR; // Return error if checks fail
 80039de:	2000      	movs	r0, #0
}
 80039e0:	4770      	bx	lr
	if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW
 80039e2:	7843      	ldrb	r3, [r0, #1]
 80039e4:	2b55      	cmp	r3, #85	@ 0x55
 80039e6:	d001      	beq.n	80039ec <head_end_check+0x14>
	return CHECK_ERROR; // Return error if checks fail
 80039e8:	2000      	movs	r0, #0
 80039ea:	e7f9      	b.n	80039e0 <head_end_check+0x8>
			&& buffer[size - 1] == PACK_END_LOW
 80039ec:	1843      	adds	r3, r0, r1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2baa      	cmp	r3, #170	@ 0xaa
 80039f4:	d001      	beq.n	80039fa <head_end_check+0x22>
	return CHECK_ERROR; // Return error if checks fail
 80039f6:	2000      	movs	r0, #0
 80039f8:	e7f2      	b.n	80039e0 <head_end_check+0x8>
			&& buffer[size - 2] == PACK_END_HIGH) {
 80039fa:	1840      	adds	r0, r0, r1
 80039fc:	3802      	subs	r0, #2
 80039fe:	7803      	ldrb	r3, [r0, #0]
 8003a00:	2b55      	cmp	r3, #85	@ 0x55
 8003a02:	d001      	beq.n	8003a08 <head_end_check+0x30>
	return CHECK_ERROR; // Return error if checks fail
 8003a04:	2000      	movs	r0, #0
 8003a06:	e7eb      	b.n	80039e0 <head_end_check+0x8>
		return CHECK_PASS; // Return success if checks pass
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e7e9      	b.n	80039e0 <head_end_check+0x8>

08003a0c <crc_check>:
uint8_t crc_check(uint8_t *buffer, uint16_t size) {
 8003a0c:	b530      	push	{r4, r5, lr}
	uint8_t crc = buffer[size - 3]; // Extract the CRC from the packet
 8003a0e:	3903      	subs	r1, #3
 8003a10:	5c45      	ldrb	r5, [r0, r1]
	for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++) {
 8003a12:	2200      	movs	r2, #0
	uint8_t temp = 0;
 8003a14:	2100      	movs	r1, #0
	for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++) {
 8003a16:	e005      	b.n	8003a24 <crc_check+0x18>
		temp += buffer[i + 4]; // Start after header, offset by 4
 8003a18:	1883      	adds	r3, r0, r2
 8003a1a:	791b      	ldrb	r3, [r3, #4]
 8003a1c:	1859      	adds	r1, r3, r1
 8003a1e:	b2c9      	uxtb	r1, r1
	for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++) {
 8003a20:	3201      	adds	r2, #1
 8003a22:	b292      	uxth	r2, r2
 8003a24:	78c3      	ldrb	r3, [r0, #3]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	7884      	ldrb	r4, [r0, #2]
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dbf2      	blt.n	8003a18 <crc_check+0xc>
	if (crc == temp) {
 8003a32:	42a9      	cmp	r1, r5
 8003a34:	d001      	beq.n	8003a3a <crc_check+0x2e>
	return CHECK_ERROR; // CRC does not match
 8003a36:	2000      	movs	r0, #0
}
 8003a38:	bd30      	pop	{r4, r5, pc}
		return CHECK_PASS; // CRC matches
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	e7fc      	b.n	8003a38 <crc_check+0x2c>

08003a3e <pack_check>:
uint8_t pack_check(uint8_t *buffer, uint16_t size) {
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	0005      	movs	r5, r0
 8003a42:	000c      	movs	r4, r1
	if (size <= 4) {
 8003a44:	2904      	cmp	r1, #4
 8003a46:	d90d      	bls.n	8003a64 <pack_check+0x26>
	if (head_end_check(buffer, size) == CHECK_PASS
 8003a48:	f7ff ffc6 	bl	80039d8 <head_end_check>
 8003a4c:	2801      	cmp	r0, #1
 8003a4e:	d001      	beq.n	8003a54 <pack_check+0x16>
	return CHECK_ERROR; // Packet is invalid
 8003a50:	2000      	movs	r0, #0
}
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
			&& crc_check(buffer, size) == CHECK_PASS) {
 8003a54:	0021      	movs	r1, r4
 8003a56:	0028      	movs	r0, r5
 8003a58:	f7ff ffd8 	bl	8003a0c <crc_check>
 8003a5c:	2801      	cmp	r0, #1
 8003a5e:	d0f8      	beq.n	8003a52 <pack_check+0x14>
	return CHECK_ERROR; // Packet is invalid
 8003a60:	2000      	movs	r0, #0
 8003a62:	e7f6      	b.n	8003a52 <pack_check+0x14>
		return CHECK_ERROR; // Packet is too small
 8003a64:	2000      	movs	r0, #0
 8003a66:	e7f4      	b.n	8003a52 <pack_check+0x14>

08003a68 <crc_construct>:
uint8_t crc_construct(uint8_t *buffer, uint16_t size) {
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	0004      	movs	r4, r0
	for (uint16_t i = 0; i < size; i++) {
 8003a6c:	2300      	movs	r3, #0
	uint8_t temp = 0;
 8003a6e:	2000      	movs	r0, #0
	for (uint16_t i = 0; i < size; i++) {
 8003a70:	e004      	b.n	8003a7c <crc_construct+0x14>
		temp += buffer[i];
 8003a72:	5ce2      	ldrb	r2, [r4, r3]
 8003a74:	1810      	adds	r0, r2, r0
 8003a76:	b2c0      	uxtb	r0, r0
	for (uint16_t i = 0; i < size; i++) {
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	d3f8      	bcc.n	8003a72 <crc_construct+0xa>
}
 8003a80:	bd10      	pop	{r4, pc}

08003a82 <uart_in_send>:
void uart_in_send(uint8_t *buffer, uint16_t size) {
 8003a82:	b510      	push	{r4, lr}
	usart1_transmit_dma(buffer, size); // Send data using USART1 in DMA mode
 8003a84:	f001 fd0c 	bl	80054a0 <usart1_transmit_dma>
}
 8003a88:	bd10      	pop	{r4, pc}

08003a8a <uart_out_send>:
void uart_out_send(uint8_t *buffer, uint16_t size) {
 8003a8a:	b510      	push	{r4, lr}
	usart2_transmit_dma(buffer, size); // Send data using USART2 in DMA mode
 8003a8c:	f001 fd52 	bl	8005534 <usart2_transmit_dma>
}
 8003a90:	bd10      	pop	{r4, pc}
	...

08003a94 <chain_enum_handle>:
void chain_enum_handle(uint8_t *buffer, uint16_t size) {
 8003a94:	b510      	push	{r4, lr}
	buffer[6]++;
 8003a96:	7983      	ldrb	r3, [r0, #6]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	7183      	strb	r3, [r0, #6]
	buffer[7]++;
 8003a9c:	79c3      	ldrb	r3, [r0, #7]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	71c3      	strb	r3, [r0, #7]
	if (g_tail_status == CHAIN_TAIL_DEVICE) {		// If it is a tail device
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <chain_enum_handle+0x24>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d002      	beq.n	8003ab0 <chain_enum_handle+0x1c>
		uart_out_send(buffer, size); // Forward to the master
 8003aaa:	f7ff ffee 	bl	8003a8a <uart_out_send>
}
 8003aae:	bd10      	pop	{r4, pc}
		uart_in_send(buffer, size); // Forward to the slave
 8003ab0:	f7ff ffe7 	bl	8003a82 <uart_in_send>
 8003ab4:	e7fb      	b.n	8003aae <chain_enum_handle+0x1a>
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	200000c3 	.word	0x200000c3

08003abc <chain_enum_return_handle>:
void chain_enum_return_handle(uint8_t *buffer, uint16_t size) {
 8003abc:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003abe:	f7ff ffe0 	bl	8003a82 <uart_in_send>
}
 8003ac2:	bd10      	pop	{r4, pc}

08003ac4 <chain_enum_please_handle>:
void chain_enum_please_handle(uint8_t *buffer, uint16_t size) {
 8003ac4:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003ac6:	f7ff ffdc 	bl	8003a82 <uart_in_send>
}
 8003aca:	bd10      	pop	{r4, pc}

08003acc <chain_heartbeat_in_receive_handle>:
void chain_heartbeat_in_receive_handle(void) {
 8003acc:	b510      	push	{r4, lr}
	 uart_in_send(g_heartbeat_data_pack_buf, sizeof(g_heartbeat_data_pack_buf)); // Send heartbeat data
 8003ace:	4802      	ldr	r0, [pc, #8]	@ (8003ad8 <chain_heartbeat_in_receive_handle+0xc>)
 8003ad0:	2109      	movs	r1, #9
 8003ad2:	f7ff ffd6 	bl	8003a82 <uart_in_send>
}
 8003ad6:	bd10      	pop	{r4, pc}
 8003ad8:	200000c8 	.word	0x200000c8

08003adc <chain_deal_data_packet_handle>:
void chain_deal_data_packet_handle(uint8_t *buffer, uint16_t size) {
 8003adc:	b510      	push	{r4, lr}
	if (g_cmd_status == CMD_SPACE_IDLE_STATUS) {
 8003ade:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <chain_deal_data_packet_handle+0x44>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d119      	bne.n	8003b1c <chain_deal_data_packet_handle+0x40>
		g_cmd_size = 0;						  // Reset command size
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <chain_deal_data_packet_handle+0x48>)
 8003aea:	2100      	movs	r1, #0
 8003aec:	7019      	strb	r1, [r3, #0]
		g_cmd_status = CMD_SPACE_BUSY_STATUS; // Set command status to busy
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <chain_deal_data_packet_handle+0x44>)
 8003af0:	3101      	adds	r1, #1
 8003af2:	7019      	strb	r1, [r3, #0]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++) {
 8003af4:	e00b      	b.n	8003b0e <chain_deal_data_packet_handle+0x32>
			g_cmd_buf[g_cmd_size++] = buffer[i + 5]; // Copy data from the buffer
 8003af6:	490b      	ldr	r1, [pc, #44]	@ (8003b24 <chain_deal_data_packet_handle+0x48>)
 8003af8:	780b      	ldrb	r3, [r1, #0]
 8003afa:	b2dc      	uxtb	r4, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	700b      	strb	r3, [r1, #0]
 8003b02:	1883      	adds	r3, r0, r2
 8003b04:	7959      	ldrb	r1, [r3, #5]
 8003b06:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <chain_deal_data_packet_handle+0x4c>)
 8003b08:	5519      	strb	r1, [r3, r4]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++) {
 8003b0a:	3201      	adds	r2, #1
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	78c3      	ldrb	r3, [r0, #3]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	7881      	ldrb	r1, [r0, #2]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	3b02      	subs	r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	dbec      	blt.n	8003af6 <chain_deal_data_packet_handle+0x1a>
}
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	200002b2 	.word	0x200002b2
 8003b24:	200002b3 	.word	0x200002b3
 8003b28:	200002b4 	.word	0x200002b4

08003b2c <chain_out_relay_handle>:
void chain_out_relay_handle(uint8_t *buffer, uint16_t size) {
 8003b2c:	b510      	push	{r4, lr}
	buffer[4]--;				 // Index decrement
 8003b2e:	7903      	ldrb	r3, [r0, #4]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]--;			 // CRC update
 8003b34:	1eca      	subs	r2, r1, #3
 8003b36:	5c83      	ldrb	r3, [r0, r2]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	5483      	strb	r3, [r0, r2]
	uart_out_send(buffer, size); // Forward to the lower level
 8003b3c:	f7ff ffa5 	bl	8003a8a <uart_out_send>
}
 8003b40:	bd10      	pop	{r4, pc}

08003b42 <chain_in_relay_handle>:
void chain_in_relay_handle(uint8_t *buffer, uint16_t size) {
 8003b42:	b510      	push	{r4, lr}
	buffer[4]++;				// Index increment
 8003b44:	7903      	ldrb	r3, [r0, #4]
 8003b46:	3301      	adds	r3, #1
 8003b48:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]++;			// CRC update
 8003b4a:	1eca      	subs	r2, r1, #3
 8003b4c:	5c83      	ldrb	r3, [r0, r2]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	5483      	strb	r3, [r0, r2]
	uart_in_send(buffer, size); // Forward to the upper level
 8003b52:	f7ff ff96 	bl	8003a82 <uart_in_send>
}
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <chain_command_complete_return>:
void chain_command_complete_return(uint8_t cmd, uint8_t *buffer, uint16_t size) {
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	46c6      	mov	lr, r8
 8003b5c:	b500      	push	{lr}
 8003b5e:	4680      	mov	r8, r0
 8003b60:	000f      	movs	r7, r1
 8003b62:	0016      	movs	r6, r2
	s_send_len = 0;
 8003b64:	4c1e      	ldr	r4, [pc, #120]	@ (8003be0 <chain_command_complete_return+0x88>)
 8003b66:	2300      	movs	r3, #0
 8003b68:	7023      	strb	r3, [r4, #0]
	uint16_t len = size + 3;
 8003b6a:	1cd5      	adds	r5, r2, #3
 8003b6c:	b2ad      	uxth	r5, r5
	add_pack_head();
 8003b6e:	f7ff ff0f 	bl	8003990 <add_pack_head>
	s_send_buf[s_send_len++] = (uint8_t) (len & 0xFF);
 8003b72:	7823      	ldrb	r3, [r4, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	7022      	strb	r2, [r4, #0]
 8003b7a:	491a      	ldr	r1, [pc, #104]	@ (8003be4 <chain_command_complete_return+0x8c>)
 8003b7c:	54cd      	strb	r5, [r1, r3]
	s_send_buf[s_send_len++] = (uint8_t) ((len >> 8) & 0xFF);
 8003b7e:	1c98      	adds	r0, r3, #2
 8003b80:	b2c0      	uxtb	r0, r0
 8003b82:	7020      	strb	r0, [r4, #0]
 8003b84:	0a2d      	lsrs	r5, r5, #8
 8003b86:	548d      	strb	r5, [r1, r2]
	s_send_buf[s_send_len++] = DEFAULT_INDEX;
 8003b88:	1cda      	adds	r2, r3, #3
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	7022      	strb	r2, [r4, #0]
 8003b8e:	2501      	movs	r5, #1
 8003b90:	540d      	strb	r5, [r1, r0]
	s_send_buf[s_send_len++] = cmd;
 8003b92:	3304      	adds	r3, #4
 8003b94:	7023      	strb	r3, [r4, #0]
 8003b96:	4643      	mov	r3, r8
 8003b98:	548b      	strb	r3, [r1, r2]
	for (uint8_t i = 0; i < size; i++) {
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e008      	b.n	8003bb0 <chain_command_complete_return+0x58>
		s_send_buf[s_send_len++] = buffer[i]; // Add data from buffer
 8003b9e:	4c10      	ldr	r4, [pc, #64]	@ (8003be0 <chain_command_complete_return+0x88>)
 8003ba0:	7820      	ldrb	r0, [r4, #0]
 8003ba2:	1c42      	adds	r2, r0, #1
 8003ba4:	7022      	strb	r2, [r4, #0]
 8003ba6:	5cfd      	ldrb	r5, [r7, r3]
 8003ba8:	4c0e      	ldr	r4, [pc, #56]	@ (8003be4 <chain_command_complete_return+0x8c>)
 8003baa:	5425      	strb	r5, [r4, r0]
	for (uint8_t i = 0; i < size; i++) {
 8003bac:	3301      	adds	r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	42b3      	cmp	r3, r6
 8003bb2:	d3f4      	bcc.n	8003b9e <chain_command_complete_return+0x46>
	s_send_buf[s_send_len] = crc_construct((uint8_t*) (s_send_buf + 4),
 8003bb4:	4e0a      	ldr	r6, [pc, #40]	@ (8003be0 <chain_command_complete_return+0x88>)
 8003bb6:	7835      	ldrb	r5, [r6, #0]
 8003bb8:	1f29      	subs	r1, r5, #4
 8003bba:	b289      	uxth	r1, r1
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8003be8 <chain_command_complete_return+0x90>)
 8003bbe:	0020      	movs	r0, r4
 8003bc0:	f7ff ff52 	bl	8003a68 <crc_construct>
 8003bc4:	3c04      	subs	r4, #4
 8003bc6:	5560      	strb	r0, [r4, r5]
	s_send_len++;
 8003bc8:	3501      	adds	r5, #1
 8003bca:	7035      	strb	r5, [r6, #0]
	add_pack_end();
 8003bcc:	f7ff fef2 	bl	80039b4 <add_pack_end>
	uart_in_send(s_send_buf, s_send_len); // Send the complete packet
 8003bd0:	7831      	ldrb	r1, [r6, #0]
 8003bd2:	0020      	movs	r0, r4
 8003bd4:	f7ff ff55 	bl	8003a82 <uart_in_send>
}
 8003bd8:	bc80      	pop	{r7}
 8003bda:	46b8      	mov	r8, r7
 8003bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	20000140 	.word	0x20000140
 8003be4:	20000144 	.word	0x20000144
 8003be8:	20000148 	.word	0x20000148

08003bec <chain_get_bootloader_version_handle>:
void chain_get_bootloader_version_handle(void) {
 8003bec:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_BOOTLOADER_VERSION,
 8003bee:	4903      	ldr	r1, [pc, #12]	@ (8003bfc <chain_get_bootloader_version_handle+0x10>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	20f9      	movs	r0, #249	@ 0xf9
 8003bf4:	f7ff ffb0 	bl	8003b58 <chain_command_complete_return>
}
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	200002b1 	.word	0x200002b1

08003c00 <chain_get_firmware_version_handle>:
void chain_get_firmware_version_handle(void) {
 8003c00:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_VERSION_DEVICE,
 8003c02:	4903      	ldr	r1, [pc, #12]	@ (8003c10 <chain_get_firmware_version_handle+0x10>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	20fa      	movs	r0, #250	@ 0xfa
 8003c08:	f7ff ffa6 	bl	8003b58 <chain_command_complete_return>
}
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	200000c2 	.word	0x200000c2

08003c14 <chain_get_device_type_handle>:
void chain_get_device_type_handle(void) {
 8003c14:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_DEVICE_TYPE,
 8003c16:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <chain_get_device_type_handle+0x10>)
 8003c18:	2202      	movs	r2, #2
 8003c1a:	20fb      	movs	r0, #251	@ 0xfb
 8003c1c:	f7ff ff9c 	bl	8003b58 <chain_command_complete_return>
}
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	200000c0 	.word	0x200000c0

08003c28 <chain_iap_update_handle>:
 *         resets the microcontroller or reinitializes the USART.
 * 
 * @param  data Verification bit
 * @retval None
 */
void chain_iap_update_handle(uint8_t data) {
 8003c28:	b530      	push	{r4, r5, lr}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	466b      	mov	r3, sp
 8003c2e:	1ddd      	adds	r5, r3, #7
 8003c30:	71d8      	strb	r0, [r3, #7]
	uint32_t reset_wait_start = HAL_GetTick(); // Get the current tick count
 8003c32:	f001 fdef 	bl	8005814 <HAL_GetTick>
 8003c36:	0004      	movs	r4, r0
	if (data == 0x86) // Check for expected data
 8003c38:	782b      	ldrb	r3, [r5, #0]
 8003c3a:	2b86      	cmp	r3, #134	@ 0x86
 8003c3c:	d001      	beq.n	8003c42 <chain_iap_update_handle+0x1a>
		} else {
			NVIC_SystemReset(); // Reset the microcontroller
		}
		NVIC_SystemReset(); // Reset the microcontroller again
	}
}
 8003c3e:	b003      	add	sp, #12
 8003c40:	bd30      	pop	{r4, r5, pc}
		chain_command_complete_return(CHAIN_IAP_UPDATE, (uint8_t*) &data, 1); // Send completion packet
 8003c42:	2201      	movs	r2, #1
 8003c44:	0029      	movs	r1, r5
 8003c46:	20ff      	movs	r0, #255	@ 0xff
 8003c48:	f7ff ff86 	bl	8003b58 <chain_command_complete_return>
		HAL_Delay(10); // Delay to ensure packet is sent
 8003c4c:	200a      	movs	r0, #10
 8003c4e:	f001 fde7 	bl	8005820 <HAL_Delay>
		LL_USART_DeInit(USART1); // Deinitialize USART1
 8003c52:	4d1a      	ldr	r5, [pc, #104]	@ (8003cbc <chain_iap_update_handle+0x94>)
 8003c54:	0028      	movs	r0, r5
 8003c56:	f003 fa11 	bl	800707c <LL_USART_DeInit>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003c5a:	682b      	ldr	r3, [r5, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4393      	bics	r3, r2
 8003c60:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c62:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	321f      	adds	r2, #31
 8003c6e:	4393      	bics	r3, r2
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	f381 8810 	msr	PRIMASK, r1
		iap_gpio_init(); // Initialize GPIO for IAP
 8003c76:	f7ff fe6d 	bl	8003954 <iap_gpio_init>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)
 8003c7a:	e006      	b.n	8003c8a <chain_iap_update_handle+0x62>
			if (HAL_GetTick() - reset_wait_start > 1000) // Check timeout
 8003c7c:	f001 fdca 	bl	8005814 <HAL_GetTick>
 8003c80:	1b00      	subs	r0, r0, r4
 8003c82:	22fa      	movs	r2, #250	@ 0xfa
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4290      	cmp	r0, r2
 8003c88:	d80b      	bhi.n	8003ca2 <chain_iap_update_handle+0x7a>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)
 8003c8a:	2140      	movs	r1, #64	@ 0x40
 8003c8c:	480c      	ldr	r0, [pc, #48]	@ (8003cc0 <chain_iap_update_handle+0x98>)
 8003c8e:	f002 f855 	bl	8005d3c <HAL_GPIO_ReadPin>
				|| HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d1f2      	bne.n	8003c7c <chain_iap_update_handle+0x54>
 8003c96:	2180      	movs	r1, #128	@ 0x80
 8003c98:	4809      	ldr	r0, [pc, #36]	@ (8003cc0 <chain_iap_update_handle+0x98>)
 8003c9a:	f002 f84f 	bl	8005d3c <HAL_GPIO_ReadPin>
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d1ec      	bne.n	8003c7c <chain_iap_update_handle+0x54>
		if (HAL_GetTick() - reset_wait_start > 1000) // Check if timed out
 8003ca2:	f001 fdb7 	bl	8005814 <HAL_GetTick>
 8003ca6:	1b00      	subs	r0, r0, r4
 8003ca8:	23fa      	movs	r3, #250	@ 0xfa
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d903      	bls.n	8003cb8 <chain_iap_update_handle+0x90>
			MX_USART1_UART_Init(); // Reinitialize USART1 if no reset occurred
 8003cb0:	f001 f9ba 	bl	8005028 <MX_USART1_UART_Init>
		NVIC_SystemReset(); // Reset the microcontroller again
 8003cb4:	f7ff fe40 	bl	8003938 <__NVIC_SystemReset>
			NVIC_SystemReset(); // Reset the microcontroller
 8003cb8:	f7ff fe3e 	bl	8003938 <__NVIC_SystemReset>
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	50000400 	.word	0x50000400

08003cc4 <check_add_overflow>:
 * NO_OVERFLOW)
 */
static overflow_t check_add_overflow(int16_t a, int16_t b) {
  // Perform addition and store the result in a 32-bit variable to prevent
  // overflow
  int32_t sum = (int32_t)a + (int32_t)b;
 8003cc4:	1840      	adds	r0, r0, r1

  // Check for positive overflow
  if (sum > INT16_MAX) {
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	da04      	bge.n	8003cd8 <check_add_overflow+0x14>
    return POSITIVE_OVERFLOW;
  }
  // Check for negative overflow
  if (sum < INT16_MIN) {
 8003cce:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <check_add_overflow+0x1c>)
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	db03      	blt.n	8003cdc <check_add_overflow+0x18>
    return NEGATIVE_OVERFLOW;
  }
  // No overflow detected
  return NO_OVERFLOW;
 8003cd4:	2000      	movs	r0, #0
}
 8003cd6:	4770      	bx	lr
    return POSITIVE_OVERFLOW;
 8003cd8:	2001      	movs	r0, #1
 8003cda:	e7fc      	b.n	8003cd6 <check_add_overflow+0x12>
    return NEGATIVE_OVERFLOW;
 8003cdc:	2002      	movs	r0, #2
 8003cde:	e7fa      	b.n	8003cd6 <check_add_overflow+0x12>
 8003ce0:	ffff8000 	.word	0xffff8000

08003ce4 <encoder_init>:
void encoder_init(void) {
 8003ce4:	b510      	push	{r4, lr}
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003ce6:	4c04      	ldr	r4, [pc, #16]	@ (8003cf8 <encoder_init+0x14>)
 8003ce8:	213c      	movs	r1, #60	@ 0x3c
 8003cea:	0020      	movs	r0, r4
 8003cec:	f002 fda3 	bl	8006836 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3, TIM_ENCODE_DEFAULT);
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	20000bc0 	.word	0x20000bc0

08003cfc <encoder_update>:
 * direction is reversed, the count will be negated.
 *
 * @param  None
 * @retval None
 */
void encoder_update(void) {
 8003cfc:	b510      	push	{r4, lr}
  // Get the current value of the encoder counter
  s_us_now_cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <encoder_update+0x70>)
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8003d04:	b213      	sxth	r3, r2
 8003d06:	481a      	ldr	r0, [pc, #104]	@ (8003d70 <encoder_update+0x74>)
 8003d08:	8003      	strh	r3, [r0, #0]

  // Check if the counter value is not zero
  if (s_us_now_cnt != 0) {
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <encoder_update+0x48>
    // Reset the counter to the default value for the next reading
    __HAL_TIM_SET_COUNTER(&htim3, TIM_ENCODE_DEFAULT);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	624b      	str	r3, [r1, #36]	@ 0x24

    // If the encoder direction is reversed, negate the current count
    if (g_encoder_direct == ENCODER_BA) {
 8003d12:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <encoder_update+0x78>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d015      	beq.n	8003d46 <encoder_update+0x4a>
      s_us_now_cnt = (-s_us_now_cnt);
    }

    // Check for overflow when updating the encoder count
    overflow_t type = check_add_overflow(g_encoder_count, s_us_now_cnt);
 8003d1a:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <encoder_update+0x7c>)
 8003d1c:	8818      	ldrh	r0, [r3, #0]
 8003d1e:	b200      	sxth	r0, r0
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <encoder_update+0x74>)
 8003d22:	2400      	movs	r4, #0
 8003d24:	5f1c      	ldrsh	r4, [r3, r4]
 8003d26:	0021      	movs	r1, r4
 8003d28:	f7ff ffcc 	bl	8003cc4 <check_add_overflow>
    switch (type) {
 8003d2c:	2801      	cmp	r0, #1
 8003d2e:	d00d      	beq.n	8003d4c <encoder_update+0x50>
 8003d30:	2802      	cmp	r0, #2
 8003d32:	d00f      	beq.n	8003d54 <encoder_update+0x58>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d011      	beq.n	8003d5c <encoder_update+0x60>
    default:
      break; // No action needed for unexpected cases
    }

    // Update the increment count with the new value
    g_increment_count += s_us_now_cnt;
 8003d38:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <encoder_update+0x80>)
 8003d3a:	8819      	ldrh	r1, [r3, #0]
 8003d3c:	b209      	sxth	r1, r1
 8003d3e:	1909      	adds	r1, r1, r4
 8003d40:	b209      	sxth	r1, r1
 8003d42:	8019      	strh	r1, [r3, #0]
  }
}
 8003d44:	bd10      	pop	{r4, pc}
      s_us_now_cnt = (-s_us_now_cnt);
 8003d46:	4252      	negs	r2, r2
 8003d48:	8002      	strh	r2, [r0, #0]
 8003d4a:	e7e6      	b.n	8003d1a <encoder_update+0x1e>
      g_encoder_count = INT16_MAX;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <encoder_update+0x7c>)
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d80 <encoder_update+0x84>)
 8003d50:	801a      	strh	r2, [r3, #0]
      break;
 8003d52:	e7f1      	b.n	8003d38 <encoder_update+0x3c>
      g_encoder_count = INT16_MIN;
 8003d54:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <encoder_update+0x7c>)
 8003d56:	4a0b      	ldr	r2, [pc, #44]	@ (8003d84 <encoder_update+0x88>)
 8003d58:	801a      	strh	r2, [r3, #0]
      break;
 8003d5a:	e7ed      	b.n	8003d38 <encoder_update+0x3c>
      g_encoder_count += s_us_now_cnt;
 8003d5c:	4a06      	ldr	r2, [pc, #24]	@ (8003d78 <encoder_update+0x7c>)
 8003d5e:	8813      	ldrh	r3, [r2, #0]
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	191b      	adds	r3, r3, r4
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]
      break;
 8003d68:	e7e6      	b.n	8003d38 <encoder_update+0x3c>
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	20000bc0 	.word	0x20000bc0
 8003d70:	2000025e 	.word	0x2000025e
 8003d74:	20000bb8 	.word	0x20000bb8
 8003d78:	20000bbc 	.word	0x20000bbc
 8003d7c:	20000bba 	.word	0x20000bba
 8003d80:	00007fff 	.word	0x00007fff
 8003d84:	ffff8000 	.word	0xffff8000

08003d88 <chain_encoder_get_value_handle>:
 * @note   Retrieve the current value of the encoder.
 *
 * @param  None
 * @retval None
 */
void chain_encoder_get_value_handle(void) {
 8003d88:	b510      	push	{r4, lr}
  // Return the current value of the encoder via chain command
  chain_command_complete_return(CHAIN_ENCODER_GET_VALUE,
 8003d8a:	4903      	ldr	r1, [pc, #12]	@ (8003d98 <chain_encoder_get_value_handle+0x10>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	2010      	movs	r0, #16
 8003d90:	f7ff fee2 	bl	8003b58 <chain_command_complete_return>
                                (uint8_t *)&g_encoder_count, 2);
}
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	20000bbc 	.word	0x20000bbc

08003d9c <chain_encoder_get_inc_value_handle>:
 * @note   Retrieve the current incremental value of the encoder.
 *
 * @param  None
 * @retval None
 */
void chain_encoder_get_inc_value_handle(void) {
 8003d9c:	b510      	push	{r4, lr}
  // Return the current incremental value of the encoder via chain command
  chain_command_complete_return(CHAIN_ENCODER_GET_INC_VALUE,
 8003d9e:	4903      	ldr	r1, [pc, #12]	@ (8003dac <chain_encoder_get_inc_value_handle+0x10>)
 8003da0:	2202      	movs	r2, #2
 8003da2:	2011      	movs	r0, #17
 8003da4:	f7ff fed8 	bl	8003b58 <chain_command_complete_return>
                                (uint8_t *)&g_increment_count, 2);
}
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	20000bba 	.word	0x20000bba

08003db0 <key_press_down_send>:
 *       chain_command_complete_return function.
 *
 * @param None
 * @retval None
 */
void key_press_down_send(void) { // key_press_down_send is a function that
 8003db0:	b510      	push	{r4, lr}
                                 // handles the key press down event
  s_key_status =
 8003db2:	4904      	ldr	r1, [pc, #16]	@ (8003dc4 <key_press_down_send+0x14>)
 8003db4:	2311      	movs	r3, #17
 8003db6:	700b      	strb	r3, [r1, #0]
      0x11; // Sets s_key_status to 0x11, indicating the key press down state
  chain_command_complete_return(
 8003db8:	2201      	movs	r2, #1
 8003dba:	2040      	movs	r0, #64	@ 0x40
 8003dbc:	f7ff fecc 	bl	8003b58 <chain_command_complete_return>
      CHAIN_ENCODER_BUTTON_PRESS, &s_key_status,
      1); // Sends the command with the current key status
}
 8003dc0:	bd10      	pop	{r4, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	2000025c 	.word	0x2000025c

08003dc8 <chain_encoder_reset_value_handle>:
 * @note   Reset the encoder value to zero.
 *
 * @param  None
 * @retval None
 */
void chain_encoder_reset_value_handle(void) {
 8003dc8:	b510      	push	{r4, lr}
  // Reset the encoder value to 0
  g_encoder_count = 0;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	@ (8003e04 <chain_encoder_reset_value_handle+0x3c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	801a      	strh	r2, [r3, #0]
  s_ret_buf_size = 0;
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e08 <chain_encoder_reset_value_handle+0x40>)
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	7011      	strb	r1, [r2, #0]

  // Check if the encoder value was successfully reset
  if (g_encoder_count == 0) {
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <chain_encoder_reset_value_handle+0x2e>
    s_ret_buf[s_ret_buf_size++] = OPERATION_SUCCESS; // Reset successful
 8003dde:	0013      	movs	r3, r2
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <chain_encoder_reset_value_handle+0x44>)
 8003de6:	701a      	strb	r2, [r3, #0]
  } else {
    s_ret_buf[s_ret_buf_size++] = OPERATION_FAIL; // Reset failed
  }

  // Return the result of the reset operation
  chain_command_complete_return(CHAIN_ENCODER_RESET_VALUE, s_ret_buf,
 8003de8:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <chain_encoder_reset_value_handle+0x40>)
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	4907      	ldr	r1, [pc, #28]	@ (8003e0c <chain_encoder_reset_value_handle+0x44>)
 8003dee:	2013      	movs	r0, #19
 8003df0:	f7ff feb2 	bl	8003b58 <chain_command_complete_return>
                                s_ret_buf_size);
}
 8003df4:	bd10      	pop	{r4, pc}
    s_ret_buf[s_ret_buf_size++] = OPERATION_FAIL; // Reset failed
 8003df6:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <chain_encoder_reset_value_handle+0x40>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <chain_encoder_reset_value_handle+0x44>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e7f1      	b.n	8003de8 <chain_encoder_reset_value_handle+0x20>
 8003e04:	20000bbc 	.word	0x20000bbc
 8003e08:	20000244 	.word	0x20000244
 8003e0c:	20000248 	.word	0x20000248

08003e10 <chain_encoder_reset_inc_value_handle>:
 * @note   Reset the incremental encoder value to zero.
 *
 * @param  None
 * @retval None
 */
void chain_encoder_reset_inc_value_handle(void) {
 8003e10:	b510      	push	{r4, lr}
  // Reset the incremental encoder value to 0
  g_increment_count = 0;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <chain_encoder_reset_inc_value_handle+0x3c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	801a      	strh	r2, [r3, #0]
  s_ret_buf_size = 0;
 8003e18:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <chain_encoder_reset_inc_value_handle+0x40>)
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	7011      	strb	r1, [r2, #0]

  // Check if the incremental value was successfully reset
  if (g_increment_count == 0) {
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <chain_encoder_reset_inc_value_handle+0x2e>
    s_ret_buf[s_ret_buf_size++] = OPERATION_SUCCESS; // Reset successful
 8003e26:	0013      	movs	r3, r2
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <chain_encoder_reset_inc_value_handle+0x44>)
 8003e2e:	701a      	strb	r2, [r3, #0]
  } else {
    s_ret_buf[s_ret_buf_size++] = OPERATION_FAIL; // Reset failed
  }

  // Return the result of the reset operation
  chain_command_complete_return(CHAIN_ENCODER_RESET_INC_VALUE, s_ret_buf,
 8003e30:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <chain_encoder_reset_inc_value_handle+0x40>)
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <chain_encoder_reset_inc_value_handle+0x44>)
 8003e36:	2014      	movs	r0, #20
 8003e38:	f7ff fe8e 	bl	8003b58 <chain_command_complete_return>
                                s_ret_buf_size);
}
 8003e3c:	bd10      	pop	{r4, pc}
    s_ret_buf[s_ret_buf_size++] = OPERATION_FAIL; // Reset failed
 8003e3e:	4b04      	ldr	r3, [pc, #16]	@ (8003e50 <chain_encoder_reset_inc_value_handle+0x40>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <chain_encoder_reset_inc_value_handle+0x44>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e7f1      	b.n	8003e30 <chain_encoder_reset_inc_value_handle+0x20>
 8003e4c:	20000bba 	.word	0x20000bba
 8003e50:	20000244 	.word	0x20000244
 8003e54:	20000248 	.word	0x20000248

08003e58 <chain_encoder_set_ab_status_handle>:
 *         Valid statuses are ENCODER_AB and ENCODER_BA.
 *
 * @param  status Status value indicating encoder direction
 * @retval None
 */
void chain_encoder_set_ab_status_handle(uint8_t status) {
 8003e58:	b510      	push	{r4, lr}
  s_ret_buf_size = 0;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <chain_encoder_set_ab_status_handle+0x3c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]

  // Check if the provided status value is valid
  if (status == ENCODER_AB || status == ENCODER_BA) {
 8003e60:	2801      	cmp	r0, #1
 8003e62:	d90c      	bls.n	8003e7e <chain_encoder_set_ab_status_handle+0x26>
    s_ret_buf[s_ret_buf_size++] = OPERATION_SUCCESS; // Set successful
    g_encoder_direct = status;                       // Update encoder direction
    set_ab_status(g_encoder_direct); // Call function to set status
  } else {
    s_ret_buf[s_ret_buf_size++] = OPERATION_FAIL; // Set failed
 8003e64:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <chain_encoder_set_ab_status_handle+0x3c>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <chain_encoder_set_ab_status_handle+0x40>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
  }

  // Return the result of the set operation
  chain_command_complete_return(CHAIN_ENCODER_SET_AB_STATUS, s_ret_buf, s_ret_buf_size);
 8003e70:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <chain_encoder_set_ab_status_handle+0x3c>)
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	4908      	ldr	r1, [pc, #32]	@ (8003e98 <chain_encoder_set_ab_status_handle+0x40>)
 8003e76:	2015      	movs	r0, #21
 8003e78:	f7ff fe6e 	bl	8003b58 <chain_command_complete_return>
}
 8003e7c:	bd10      	pop	{r4, pc}
    s_ret_buf[s_ret_buf_size++] = OPERATION_SUCCESS; // Set successful
 8003e7e:	3201      	adds	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <chain_encoder_set_ab_status_handle+0x40>)
 8003e84:	701a      	strb	r2, [r3, #0]
    g_encoder_direct = status;                       // Update encoder direction
 8003e86:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <chain_encoder_set_ab_status_handle+0x44>)
 8003e88:	7018      	strb	r0, [r3, #0]
    set_ab_status(g_encoder_direct); // Call function to set status
 8003e8a:	7818      	ldrb	r0, [r3, #0]
 8003e8c:	b2c0      	uxtb	r0, r0
 8003e8e:	f001 fc53 	bl	8005738 <set_ab_status>
 8003e92:	e7ed      	b.n	8003e70 <chain_encoder_set_ab_status_handle+0x18>
 8003e94:	20000244 	.word	0x20000244
 8003e98:	20000248 	.word	0x20000248
 8003e9c:	20000bb8 	.word	0x20000bb8

08003ea0 <chain_encoder_get_ab_status_handle>:
 * @note   Retrieve the current encoder direction.
 *
 * @param  None
 * @retval None
 */
void chain_encoder_get_ab_status_handle(void) {
 8003ea0:	b510      	push	{r4, lr}
  s_ret_buf_size = 0;
 8003ea2:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <chain_encoder_get_ab_status_handle+0x1c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]

  // Store the current encoder direction in the return buffer
  s_ret_buf[s_ret_buf_size++] = g_encoder_direct;
 8003ea8:	3201      	adds	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	4b04      	ldr	r3, [pc, #16]	@ (8003ec0 <chain_encoder_get_ab_status_handle+0x20>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4904      	ldr	r1, [pc, #16]	@ (8003ec4 <chain_encoder_get_ab_status_handle+0x24>)
 8003eb2:	700b      	strb	r3, [r1, #0]

  // Return the current encoder direction
  chain_command_complete_return(CHAIN_ENCODER_GET_AB_STATUS, s_ret_buf, s_ret_buf_size);
 8003eb4:	2016      	movs	r0, #22
 8003eb6:	f7ff fe4f 	bl	8003b58 <chain_command_complete_return>
}
 8003eba:	bd10      	pop	{r4, pc}
 8003ebc:	20000244 	.word	0x20000244
 8003ec0:	20000bb8 	.word	0x20000bb8
 8003ec4:	20000248 	.word	0x20000248

08003ec8 <activate_tim1_dma>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003ec8:	4a14      	ldr	r2, [pc, #80]	@ (8003f1c <activate_tim1_dma+0x54>)
 8003eca:	6853      	ldr	r3, [r2, #4]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	2130      	movs	r1, #48	@ 0x30
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6053      	str	r3, [r2, #4]
 */
static void activate_tim1_dma(void) {
    // Set the DMA data length for RGB_NUM LEDs, each requiring 24 bits.
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (RGB_NUM + 1) * 24);
    // Set the memory address for the DMA buffer.
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t) s_rgb_buf);
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <activate_tim1_dma+0x58>)
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8003ed8:	60d3      	str	r3, [r2, #12]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <activate_tim1_dma+0x5c>)
 8003edc:	6093      	str	r3, [r2, #8]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <activate_tim1_dma+0x60>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	0249      	lsls	r1, r1, #9
 8003ee4:	6059      	str	r1, [r3, #4]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	0289      	lsls	r1, r1, #10
 8003eea:	6059      	str	r1, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	2102      	movs	r1, #2
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6013      	str	r3, [r2, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <activate_tim1_dma+0x64>)
 8003ef6:	68d9      	ldr	r1, [r3, #12]
 8003ef8:	2280      	movs	r2, #128	@ 0x80
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003f00:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	0212      	lsls	r2, r2, #8
 8003f06:	430a      	orrs	r2, r1
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	438a      	bics	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	3907      	subs	r1, #7
 8003f16:	430a      	orrs	r2, r1
 8003f18:	621a      	str	r2, [r3, #32]
    LL_TIM_EnableAllOutputs(TIM1);
    // Set the TIM1 DMA request trigger to CC.
    LL_TIM_CC_SetDMAReqTrigger(TIM1, LL_TIM_CCDMAREQUEST_CC);
    // Enable TIM1 channel 1.
    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}
 8003f1a:	4770      	bx	lr
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	20000278 	.word	0x20000278
 8003f24:	40012c34 	.word	0x40012c34
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40012c00 	.word	0x40012c00

08003f30 <rgb_setcolor>:
 *
 * @param led_id The index of the LED to be set.
 * @param color The color structure containing RGB values.
 * @retval None
 */
static void rgb_setcolor(uint8_t led_id, RGB_Color_TypeDef color) {
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	46d6      	mov	lr, sl
 8003f34:	464f      	mov	r7, r9
 8003f36:	4646      	mov	r6, r8
 8003f38:	b5c0      	push	{r6, r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	0005      	movs	r5, r0
 8003f3e:	ac03      	add	r4, sp, #12
 8003f40:	9103      	str	r1, [sp, #12]
    // Adjust RGB values based on global light intensity.
    color.R = color.R * (g_light / 100.0);
 8003f42:	7823      	ldrb	r3, [r4, #0]
 8003f44:	4698      	mov	r8, r3
 8003f46:	4b48      	ldr	r3, [pc, #288]	@ (8004068 <rgb_setcolor+0x138>)
 8003f48:	469a      	mov	sl, r3
 8003f4a:	7818      	ldrb	r0, [r3, #0]
 8003f4c:	b2c0      	uxtb	r0, r0
 8003f4e:	f7ff fb3f 	bl	80035d0 <__aeabi_i2d>
 8003f52:	2200      	movs	r2, #0
 8003f54:	4b45      	ldr	r3, [pc, #276]	@ (800406c <rgb_setcolor+0x13c>)
 8003f56:	f7fe f981 	bl	800225c <__aeabi_ddiv>
 8003f5a:	0006      	movs	r6, r0
 8003f5c:	000f      	movs	r7, r1
 8003f5e:	4640      	mov	r0, r8
 8003f60:	f7ff fb36 	bl	80035d0 <__aeabi_i2d>
 8003f64:	0032      	movs	r2, r6
 8003f66:	003b      	movs	r3, r7
 8003f68:	f7fe fc92 	bl	8002890 <__aeabi_dmul>
 8003f6c:	f7fe f958 	bl	8002220 <__aeabi_d2uiz>
 8003f70:	b2c7      	uxtb	r7, r0
 8003f72:	7027      	strb	r7, [r4, #0]
    color.G = color.G * (g_light / 100.0);
 8003f74:	7866      	ldrb	r6, [r4, #1]
 8003f76:	4653      	mov	r3, sl
 8003f78:	7818      	ldrb	r0, [r3, #0]
 8003f7a:	b2c0      	uxtb	r0, r0
 8003f7c:	f7ff fb28 	bl	80035d0 <__aeabi_i2d>
 8003f80:	2200      	movs	r2, #0
 8003f82:	4b3a      	ldr	r3, [pc, #232]	@ (800406c <rgb_setcolor+0x13c>)
 8003f84:	f7fe f96a 	bl	800225c <__aeabi_ddiv>
 8003f88:	9000      	str	r0, [sp, #0]
 8003f8a:	9101      	str	r1, [sp, #4]
 8003f8c:	0030      	movs	r0, r6
 8003f8e:	f7ff fb1f 	bl	80035d0 <__aeabi_i2d>
 8003f92:	9a00      	ldr	r2, [sp, #0]
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	f7fe fc7b 	bl	8002890 <__aeabi_dmul>
 8003f9a:	f7fe f941 	bl	8002220 <__aeabi_d2uiz>
 8003f9e:	b2c3      	uxtb	r3, r0
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	7063      	strb	r3, [r4, #1]
    color.B = color.B * (g_light / 100.0);
 8003fa4:	78a6      	ldrb	r6, [r4, #2]
 8003fa6:	4653      	mov	r3, sl
 8003fa8:	7818      	ldrb	r0, [r3, #0]
 8003faa:	b2c0      	uxtb	r0, r0
 8003fac:	f7ff fb10 	bl	80035d0 <__aeabi_i2d>
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800406c <rgb_setcolor+0x13c>)
 8003fb4:	f7fe f952 	bl	800225c <__aeabi_ddiv>
 8003fb8:	9000      	str	r0, [sp, #0]
 8003fba:	9101      	str	r1, [sp, #4]
 8003fbc:	0030      	movs	r0, r6
 8003fbe:	f7ff fb07 	bl	80035d0 <__aeabi_i2d>
 8003fc2:	9a00      	ldr	r2, [sp, #0]
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	f7fe fc63 	bl	8002890 <__aeabi_dmul>
 8003fca:	f7fe f929 	bl	8002220 <__aeabi_d2uiz>
 8003fce:	b2c0      	uxtb	r0, r0
 8003fd0:	70a0      	strb	r0, [r4, #2]

    // Convert the green component to binary and store in the buffer.
    for (uint8_t i = 0; i < 8; i++) {
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e008      	b.n	8003fe8 <rgb_setcolor+0xb8>
        s_rgb_buf[led_id][i] = ((color.G & (1 << (7 - i))) ? (CODE_1) : CODE_0);
 8003fd6:	2619      	movs	r6, #25
 8003fd8:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <rgb_setcolor+0x140>)
 8003fda:	0069      	lsls	r1, r5, #1
 8003fdc:	1949      	adds	r1, r1, r5
 8003fde:	00c9      	lsls	r1, r1, #3
 8003fe0:	1852      	adds	r2, r2, r1
 8003fe2:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 0; i < 8; i++) {
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b07      	cmp	r3, #7
 8003fea:	d809      	bhi.n	8004000 <rgb_setcolor+0xd0>
        s_rgb_buf[led_id][i] = ((color.G & (1 << (7 - i))) ? (CODE_1) : CODE_0);
 8003fec:	001c      	movs	r4, r3
 8003fee:	2207      	movs	r2, #7
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4111      	asrs	r1, r2
 8003ff6:	000a      	movs	r2, r1
 8003ff8:	07d2      	lsls	r2, r2, #31
 8003ffa:	d5ec      	bpl.n	8003fd6 <rgb_setcolor+0xa6>
 8003ffc:	2634      	movs	r6, #52	@ 0x34
 8003ffe:	e7eb      	b.n	8003fd8 <rgb_setcolor+0xa8>
    }
    // Convert the red component to binary and store in the buffer.
    for (uint8_t i = 8; i < 16; i++) {
 8004000:	2308      	movs	r3, #8
 8004002:	e008      	b.n	8004016 <rgb_setcolor+0xe6>
        s_rgb_buf[led_id][i] = ((color.R & (1 << (15 - i))) ? (CODE_1) : CODE_0);
 8004004:	2619      	movs	r6, #25
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <rgb_setcolor+0x140>)
 8004008:	0069      	lsls	r1, r5, #1
 800400a:	1949      	adds	r1, r1, r5
 800400c:	00c9      	lsls	r1, r1, #3
 800400e:	1852      	adds	r2, r2, r1
 8004010:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 8; i < 16; i++) {
 8004012:	3301      	adds	r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b0f      	cmp	r3, #15
 8004018:	d809      	bhi.n	800402e <rgb_setcolor+0xfe>
        s_rgb_buf[led_id][i] = ((color.R & (1 << (15 - i))) ? (CODE_1) : CODE_0);
 800401a:	001c      	movs	r4, r3
 800401c:	220f      	movs	r2, #15
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	0039      	movs	r1, r7
 8004022:	4111      	asrs	r1, r2
 8004024:	000a      	movs	r2, r1
 8004026:	07d2      	lsls	r2, r2, #31
 8004028:	d5ec      	bpl.n	8004004 <rgb_setcolor+0xd4>
 800402a:	2634      	movs	r6, #52	@ 0x34
 800402c:	e7eb      	b.n	8004006 <rgb_setcolor+0xd6>
    }
    // Convert the blue component to binary and store in the buffer.
    for (uint8_t i = 16; i < 24; i++) {
 800402e:	2310      	movs	r3, #16
 8004030:	e008      	b.n	8004044 <rgb_setcolor+0x114>
        s_rgb_buf[led_id][i] = ((color.B & (1 << (23 - i))) ? (CODE_1) : CODE_0);
 8004032:	2619      	movs	r6, #25
 8004034:	4a0e      	ldr	r2, [pc, #56]	@ (8004070 <rgb_setcolor+0x140>)
 8004036:	0069      	lsls	r1, r5, #1
 8004038:	1949      	adds	r1, r1, r5
 800403a:	00c9      	lsls	r1, r1, #3
 800403c:	1852      	adds	r2, r2, r1
 800403e:	5516      	strb	r6, [r2, r4]
    for (uint8_t i = 16; i < 24; i++) {
 8004040:	3301      	adds	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b17      	cmp	r3, #23
 8004046:	d809      	bhi.n	800405c <rgb_setcolor+0x12c>
        s_rgb_buf[led_id][i] = ((color.B & (1 << (23 - i))) ? (CODE_1) : CODE_0);
 8004048:	001c      	movs	r4, r3
 800404a:	2217      	movs	r2, #23
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	0001      	movs	r1, r0
 8004050:	4111      	asrs	r1, r2
 8004052:	000a      	movs	r2, r1
 8004054:	07d2      	lsls	r2, r2, #31
 8004056:	d5ec      	bpl.n	8004032 <rgb_setcolor+0x102>
 8004058:	2634      	movs	r6, #52	@ 0x34
 800405a:	e7eb      	b.n	8004034 <rgb_setcolor+0x104>
    }
}
 800405c:	b004      	add	sp, #16
 800405e:	bce0      	pop	{r5, r6, r7}
 8004060:	46ba      	mov	sl, r7
 8004062:	46b1      	mov	r9, r6
 8004064:	46a8      	mov	r8, r5
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004068:	200002b0 	.word	0x200002b0
 800406c:	40590000 	.word	0x40590000
 8004070:	20000278 	.word	0x20000278

08004074 <reset_load>:
 * @param None
 * @retval None
 */
static void reset_load(void) {
    // Clear the RGB buffer for the last LED (RGB_NUM) by setting all bits to 0.
    for (uint8_t i = 0; i < 24; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	e005      	b.n	8004084 <reset_load+0x10>
        s_rgb_buf[RGB_NUM][i] = 0;
 8004078:	4a04      	ldr	r2, [pc, #16]	@ (800408c <reset_load+0x18>)
 800407a:	18d2      	adds	r2, r2, r3
 800407c:	2100      	movs	r1, #0
 800407e:	7611      	strb	r1, [r2, #24]
    for (uint8_t i = 0; i < 24; i++) {
 8004080:	3301      	adds	r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b17      	cmp	r3, #23
 8004086:	d9f7      	bls.n	8004078 <reset_load+0x4>
    }
}
 8004088:	4770      	bx	lr
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	20000278 	.word	0x20000278

08004090 <rgb_send_array>:
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004090:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <rgb_send_array+0x20>)
 8004092:	6853      	ldr	r3, [r2, #4]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	2130      	movs	r1, #48	@ 0x30
 800409a:	430b      	orrs	r3, r1
 800409c:	6053      	str	r3, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	392f      	subs	r1, #47	@ 0x2f
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80040a6:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <rgb_send_array+0x24>)
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6013      	str	r3, [r2, #0]
    // Enable the DMA channel for transferring the RGB data
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);

    // Start the timer to enable sending data to the RGB LEDs
    LL_TIM_EnableCounter(TIM1);
}
 80040ae:	4770      	bx	lr
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <turn_off_all_handle>:
 *       the load, and sends the updated array to turn off the LEDs.
 *
 * @param None
 * @retval None
 */
void turn_off_all_handle(void) {
 80040b8:	b510      	push	{r4, lr}
    // Set the first RGB LED color to black (off)
    rgb_setcolor(0, BLACK);
 80040ba:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <turn_off_all_handle+0x18>)
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	2000      	movs	r0, #0
 80040c0:	f7ff ff36 	bl	8003f30 <rgb_setcolor>

    // Reset the load for the RGB LED control
    reset_load();
 80040c4:	f7ff ffd6 	bl	8004074 <reset_load>

    // Send the updated RGB array to turn off the LEDs
    rgb_send_array();
 80040c8:	f7ff ffe2 	bl	8004090 <rgb_send_array>
}
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	08007250 	.word	0x08007250

080040d4 <rgb_init>:
 *       all RGB LEDs to initialize the system properly.
 *
 * @param None
 * @retval None
 */
void rgb_init(void) {
 80040d4:	b510      	push	{r4, lr}
    // Activate DMA settings for TIM1 to prepare for RGB control
    activate_tim1_dma();
 80040d6:	f7ff fef7 	bl	8003ec8 <activate_tim1_dma>

    // Turn off all RGB LEDs during initialization
    turn_off_all_handle();
 80040da:	f7ff ffed 	bl	80040b8 <turn_off_all_handle>

    // Delay for a short period to allow for stabilization
    HAL_Delay(1);
 80040de:	2001      	movs	r0, #1
 80040e0:	f001 fb9e 	bl	8005820 <HAL_Delay>
}
 80040e4:	bd10      	pop	{r4, pc}
	...

080040e8 <chain_set_rgb_value>:
 * @brief Set RGB values based on the provided buffer.
 * @param buffer Pointer to an array containing RGB values.
 * @param size The size of the RGB data (should be 3 for R, G, B).
 * @retval None
 */
void chain_set_rgb_value(uint8_t *buffer, uint16_t size) {
 80040e8:	b510      	push	{r4, lr}
    // Check if the provided size is exactly 3 (R, G, B)
    if (size == 3) {
 80040ea:	2903      	cmp	r1, #3
 80040ec:	d00b      	beq.n	8004106 <chain_set_rgb_value+0x1e>
       // Send a command complete response
       chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
                                     s_ret_buf_size);
    } else {
        // Prepare the response buffer indicating failure due to incorrect size
       s_ret_buf_size = 0;
 80040ee:	4b13      	ldr	r3, [pc, #76]	@ (800413c <chain_set_rgb_value+0x54>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
       s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;
 80040f4:	2101      	movs	r1, #1
 80040f6:	7019      	strb	r1, [r3, #0]
 80040f8:	4911      	ldr	r1, [pc, #68]	@ (8004140 <chain_set_rgb_value+0x58>)
 80040fa:	700a      	strb	r2, [r1, #0]

       // Send a command complete response for failure
       chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 80040fc:	3201      	adds	r2, #1
 80040fe:	2020      	movs	r0, #32
 8004100:	f7ff fd2a 	bl	8003b58 <chain_command_complete_return>
                                     s_ret_buf_size);
    }
}
 8004104:	bd10      	pop	{r4, pc}
        color.R = buffer[0];
 8004106:	7802      	ldrb	r2, [r0, #0]
 8004108:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <chain_set_rgb_value+0x5c>)
 800410a:	701a      	strb	r2, [r3, #0]
        color.G = buffer[1];
 800410c:	7842      	ldrb	r2, [r0, #1]
 800410e:	705a      	strb	r2, [r3, #1]
        color.B = buffer[2];
 8004110:	7882      	ldrb	r2, [r0, #2]
 8004112:	709a      	strb	r2, [r3, #2]
        rgb_setcolor(0, color);
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	2000      	movs	r0, #0
 8004118:	f7ff ff0a 	bl	8003f30 <rgb_setcolor>
        reset_load();
 800411c:	f7ff ffaa 	bl	8004074 <reset_load>
        rgb_send_array();
 8004120:	f7ff ffb6 	bl	8004090 <rgb_send_array>
       s_ret_buf_size = 0;
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <chain_set_rgb_value+0x54>)
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
       s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS;
 800412a:	3201      	adds	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	4904      	ldr	r1, [pc, #16]	@ (8004140 <chain_set_rgb_value+0x58>)
 8004130:	700a      	strb	r2, [r1, #0]
       chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 8004132:	2020      	movs	r0, #32
 8004134:	f7ff fd10 	bl	8003b58 <chain_command_complete_return>
 8004138:	e7e4      	b.n	8004104 <chain_set_rgb_value+0x1c>
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	20000260 	.word	0x20000260
 8004140:	20000264 	.word	0x20000264
 8004144:	200002a8 	.word	0x200002a8

08004148 <chain_get_rgb_value>:
/**
 * @brief  Get the current RGB values
 * @param  None
 * @retval None
 */
void chain_get_rgb_value(void) {
 8004148:	b510      	push	{r4, lr}
    // Clear the size of the return buffer
    s_ret_buf_size = 0;
 800414a:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <chain_get_rgb_value+0x30>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]

    // Store the current RGB values into the return buffer
    s_ret_buf[s_ret_buf_size++] = color.R;  // Get the red component
 8004150:	3201      	adds	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <chain_get_rgb_value+0x34>)
 8004156:	7810      	ldrb	r0, [r2, #0]
 8004158:	4909      	ldr	r1, [pc, #36]	@ (8004180 <chain_get_rgb_value+0x38>)
 800415a:	7008      	strb	r0, [r1, #0]
    s_ret_buf[s_ret_buf_size++] = color.G;  // Get the green component
 800415c:	2002      	movs	r0, #2
 800415e:	7018      	strb	r0, [r3, #0]
 8004160:	7850      	ldrb	r0, [r2, #1]
 8004162:	7048      	strb	r0, [r1, #1]
    s_ret_buf[s_ret_buf_size++] = color.B;  // Get the blue component
 8004164:	2003      	movs	r0, #3
 8004166:	7018      	strb	r0, [r3, #0]
 8004168:	7893      	ldrb	r3, [r2, #2]
 800416a:	708b      	strb	r3, [r1, #2]

    // Send command complete response with current RGB values
    chain_command_complete_return(CHAIN_GET_RGB_VALUE, s_ret_buf, s_ret_buf_size);
 800416c:	2203      	movs	r2, #3
 800416e:	301e      	adds	r0, #30
 8004170:	f7ff fcf2 	bl	8003b58 <chain_command_complete_return>
}
 8004174:	bd10      	pop	{r4, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	20000260 	.word	0x20000260
 800417c:	200002a8 	.word	0x200002a8
 8004180:	20000264 	.word	0x20000264

08004184 <chain_set_light_value>:
/**
 * @brief  Set the brightness of the RGB light
 * @param  g_light_value New brightness value, range from 0 to 100
 * @retval None
 */
void chain_set_light_value(uint8_t g_light_value) {
 8004184:	b510      	push	{r4, lr}
    // Check if the new brightness value is within the valid range (0-100)
    if (g_light_value <= 100) {
 8004186:	2864      	cmp	r0, #100	@ 0x64
 8004188:	d819      	bhi.n	80041be <chain_set_light_value+0x3a>
        // Update the global brightness value
        g_light = g_light_value;
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <chain_set_light_value+0x54>)
 800418c:	7018      	strb	r0, [r3, #0]

        // Set the brightness of the RGB light
        set_rgb_light(g_light);
 800418e:	7818      	ldrb	r0, [r3, #0]
 8004190:	b2c0      	uxtb	r0, r0
 8004192:	f001 faa3 	bl	80056dc <set_rgb_light>

        // Set the current color to the first LED
        rgb_setcolor(0, color);
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <chain_set_light_value+0x58>)
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	2000      	movs	r0, #0
 800419c:	f7ff fec8 	bl	8003f30 <rgb_setcolor>

        // Reset loading status to prepare for sending data
        reset_load();
 80041a0:	f7ff ff68 	bl	8004074 <reset_load>

        // Send RGB data
        rgb_send_array();
 80041a4:	f7ff ff74 	bl	8004090 <rgb_send_array>

        // Clear the return buffer and mark the operation as successful
        s_ret_buf_size = 0;
 80041a8:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <chain_set_light_value+0x5c>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS;
 80041ae:	3201      	adds	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	490c      	ldr	r1, [pc, #48]	@ (80041e4 <chain_set_light_value+0x60>)
 80041b4:	700a      	strb	r2, [r1, #0]

        // Send command complete response indicating success
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80041b6:	2022      	movs	r0, #34	@ 0x22
 80041b8:	f7ff fcce 	bl	8003b58 <chain_command_complete_return>
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;

        // Send command complete response indicating failure
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
    }
}
 80041bc:	bd10      	pop	{r4, pc}
        s_ret_buf_size = 0;
 80041be:	4b08      	ldr	r3, [pc, #32]	@ (80041e0 <chain_set_light_value+0x5c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL;
 80041c4:	2101      	movs	r1, #1
 80041c6:	7019      	strb	r1, [r3, #0]
 80041c8:	4906      	ldr	r1, [pc, #24]	@ (80041e4 <chain_set_light_value+0x60>)
 80041ca:	700a      	strb	r2, [r1, #0]
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80041cc:	3201      	adds	r2, #1
 80041ce:	2022      	movs	r0, #34	@ 0x22
 80041d0:	f7ff fcc2 	bl	8003b58 <chain_command_complete_return>
}
 80041d4:	e7f2      	b.n	80041bc <chain_set_light_value+0x38>
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	200002b0 	.word	0x200002b0
 80041dc:	200002a8 	.word	0x200002a8
 80041e0:	20000260 	.word	0x20000260
 80041e4:	20000264 	.word	0x20000264

080041e8 <chain_get_light_value>:
/**
 * @brief  Get the current brightness of the RGB light
 * @param  None
 * @retval None
 */
void chain_get_light_value(void) {
 80041e8:	b510      	push	{r4, lr}
    // Clear the size of the return buffer
    s_ret_buf_size = 0;
 80041ea:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <chain_get_light_value+0x1c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]

    // Store the current brightness value into the return buffer
    s_ret_buf[s_ret_buf_size++] = g_light;
 80041f0:	3201      	adds	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <chain_get_light_value+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4904      	ldr	r1, [pc, #16]	@ (800420c <chain_get_light_value+0x24>)
 80041fa:	700b      	strb	r3, [r1, #0]

    // Send command complete response with the current brightness value
    chain_command_complete_return(CHAIN_GET_RGB_LIGHT, s_ret_buf, s_ret_buf_size);
 80041fc:	2023      	movs	r0, #35	@ 0x23
 80041fe:	f7ff fcab 	bl	8003b58 <chain_command_complete_return>
}
 8004202:	bd10      	pop	{r4, pc}
 8004204:	20000260 	.word	0x20000260
 8004208:	200002b0 	.word	0x200002b0
 800420c:	20000264 	.word	0x20000264

08004210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004210:	b500      	push	{lr}
 8004212:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004214:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <MX_DMA_Init+0x58>)
 8004216:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8004218:	2301      	movs	r3, #1
 800421a:	4319      	orrs	r1, r3
 800421c:	6391      	str	r1, [r2, #56]	@ 0x38
 800421e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004220:	4013      	ands	r3, r2
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <MX_DMA_Init+0x5c>)
 8004228:	22c2      	movs	r2, #194	@ 0xc2
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	5898      	ldr	r0, [r3, r2]
 800422e:	4910      	ldr	r1, [pc, #64]	@ (8004270 <MX_DMA_Init+0x60>)
 8004230:	4008      	ands	r0, r1
 8004232:	2180      	movs	r1, #128	@ 0x80
 8004234:	01c9      	lsls	r1, r1, #7
 8004236:	4301      	orrs	r1, r0
 8004238:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	0089      	lsls	r1, r1, #2
 800423e:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004240:	5898      	ldr	r0, [r3, r2]
 8004242:	490c      	ldr	r1, [pc, #48]	@ (8004274 <MX_DMA_Init+0x64>)
 8004244:	4008      	ands	r0, r1
 8004246:	2180      	movs	r1, #128	@ 0x80
 8004248:	03c9      	lsls	r1, r1, #15
 800424a:	4301      	orrs	r1, r0
 800424c:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424e:	32f8      	adds	r2, #248	@ 0xf8
 8004250:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 1, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2101      	movs	r1, #1
 8004256:	200b      	movs	r0, #11
 8004258:	f001 fb40 	bl	80058dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 800425c:	200b      	movs	r0, #11
 800425e:	f001 fb41 	bl	80058e4 <HAL_NVIC_EnableIRQ>

}
 8004262:	b003      	add	sp, #12
 8004264:	bd00      	pop	{pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	40021000 	.word	0x40021000
 800426c:	e000e100 	.word	0xe000e100
 8004270:	ffff00ff 	.word	0xffff00ff
 8004274:	ff00ffff 	.word	0xff00ffff

08004278 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004278:	b500      	push	{lr}
 800427a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	2214      	movs	r2, #20
 800427e:	2100      	movs	r1, #0
 8004280:	a803      	add	r0, sp, #12
 8004282:	f002 ff7b 	bl	800717c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <MX_GPIO_Init+0x58>)
 8004288:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800428a:	2201      	movs	r2, #1
 800428c:	4311      	orrs	r1, r2
 800428e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004290:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004292:	4011      	ands	r1, r2
 8004294:	9101      	str	r1, [sp, #4]
 8004296:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800429a:	2102      	movs	r1, #2
 800429c:	4308      	orrs	r0, r1
 800429e:	6358      	str	r0, [r3, #52]	@ 0x34
 80042a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a2:	4019      	ands	r1, r3
 80042a4:	9102      	str	r1, [sp, #8]
 80042a6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80042a8:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042aa:	2384      	movs	r3, #132	@ 0x84
 80042ac:	039b      	lsls	r3, r3, #14
 80042ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042b0:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80042b2:	a903      	add	r1, sp, #12
 80042b4:	4807      	ldr	r0, [pc, #28]	@ (80042d4 <MX_GPIO_Init+0x5c>)
 80042b6:	f001 fc87 	bl	8005bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80042ba:	2200      	movs	r2, #0
 80042bc:	2101      	movs	r1, #1
 80042be:	2005      	movs	r0, #5
 80042c0:	f001 fb0c 	bl	80058dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80042c4:	2005      	movs	r0, #5
 80042c6:	f001 fb0d 	bl	80058e4 <HAL_NVIC_EnableIRQ>

}
 80042ca:	b009      	add	sp, #36	@ 0x24
 80042cc:	bd00      	pop	{pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	40021000 	.word	0x40021000
 80042d4:	50000400 	.word	0x50000400

080042d8 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <MX_IWDG_Init+0x30>)
 80042da:	4a0c      	ldr	r2, [pc, #48]	@ (800430c <MX_IWDG_Init+0x34>)
 80042dc:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80042de:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <MX_IWDG_Init+0x38>)
 80042e0:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80042e2:	2202      	movs	r2, #2
 80042e4:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80042e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <MX_IWDG_Init+0x3c>)
 80042e8:	609a      	str	r2, [r3, #8]
}
 80042ea:	e002      	b.n	80042f2 <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80042ec:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_16);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d005      	beq.n	80042fe <MX_IWDG_Init+0x26>
 80042f2:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <MX_IWDG_Init+0x30>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	075b      	lsls	r3, r3, #29
 80042f8:	d1f8      	bne.n	80042ec <MX_IWDG_Init+0x14>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e7f7      	b.n	80042ee <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80042fe:	4b02      	ldr	r3, [pc, #8]	@ (8004308 <MX_IWDG_Init+0x30>)
 8004300:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <MX_IWDG_Init+0x40>)
 8004302:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004304:	4770      	bx	lr
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	40003000 	.word	0x40003000
 800430c:	0000cccc 	.word	0x0000cccc
 8004310:	00005555 	.word	0x00005555
 8004314:	00000fff 	.word	0x00000fff
 8004318:	0000aaaa 	.word	0x0000aaaa

0800431c <iap_set>:
/**
 * @brief Set the Interrupt Vector Table for the application in SRAM.
 * @param None
 * @retval None
 */
void iap_set(void) {
 800431c:	b082      	sub	sp, #8
  uint8_t i; // Loop index
  uint32_t *pVecTab =
 800431e:	2280      	movs	r2, #128	@ 0x80
 8004320:	0592      	lsls	r2, r2, #22
      (uint32_t *)(0x20000000); // Pointer to the vector table in SRAM

  // Copy the interrupt vector table from the application address to SRAM
  for (i = 0; i < 48; i++) {
 8004322:	2300      	movs	r3, #0
 8004324:	e007      	b.n	8004336 <iap_set+0x1a>
    // Copy each vector entry to the SRAM vector table
    *(pVecTab++) = *(__IO uint32_t *)(APPLICATION_ADDRESS + (i << 2));
 8004326:	0099      	lsls	r1, r3, #2
 8004328:	480c      	ldr	r0, [pc, #48]	@ (800435c <iap_set+0x40>)
 800432a:	4684      	mov	ip, r0
 800432c:	4461      	add	r1, ip
 800432e:	6809      	ldr	r1, [r1, #0]
 8004330:	c202      	stmia	r2!, {r1}
  for (i = 0; i < 48; i++) {
 8004332:	3301      	adds	r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b2f      	cmp	r3, #47	@ 0x2f
 8004338:	d9f5      	bls.n	8004326 <iap_set+0xa>
  }

  // Enable the SYSCFG peripheral clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <iap_set+0x44>)
 800433c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800433e:	2301      	movs	r3, #1
 8004340:	4319      	orrs	r1, r3
 8004342:	6411      	str	r1, [r2, #64]	@ 0x40
 8004344:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004346:	4013      	ands	r3, r2
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	9b01      	ldr	r3, [sp, #4]

  // Remap the memory to use SRAM for the vector table
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800434c:	4a05      	ldr	r2, [pc, #20]	@ (8004364 <iap_set+0x48>)
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	2103      	movs	r1, #3
 8004352:	430b      	orrs	r3, r1
 8004354:	6013      	str	r3, [r2, #0]
}
 8004356:	b002      	add	sp, #8
 8004358:	4770      	bx	lr
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	08002000 	.word	0x08002000
 8004360:	40021000 	.word	0x40021000
 8004364:	40010000 	.word	0x40010000

08004368 <chain_init>:
/**
 * @brief Initialize the chain device settings.
 * @param None
 * @retval None
 */
void chain_init(void) {
 8004368:	b510      	push	{r4, lr}
  // Get the bootloader version and store it in a global variable
  g_bootloader_version = get_bootloader_version();
 800436a:	f001 f9d9 	bl	8005720 <get_bootloader_version>
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <chain_init+0x4c>)
 8004370:	7018      	strb	r0, [r3, #0]

  // Check the current AB status; if it is uninitialized (0xFF)
  if (get_ab_status() == 0xFF) {
 8004372:	f001 f9db 	bl	800572c <get_ab_status>
 8004376:	28ff      	cmp	r0, #255	@ 0xff
 8004378:	d00c      	beq.n	8004394 <chain_init+0x2c>
    g_encoder_direct = ENCODER_AB;
    set_ab_status(g_encoder_direct); // Write the new status to flash memory
  } else {
    // If the AB status is initialized, read the current AB status from flash
    // memory
    g_encoder_direct = get_ab_status();
 800437a:	f001 f9d7 	bl	800572c <get_ab_status>
 800437e:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <chain_init+0x50>)
 8004380:	7018      	strb	r0, [r3, #0]
  }

  // Check the current RGB light status; if it is uninitialized (0xFF)
  if (get_rgb_light() == 0xFF) {
 8004382:	f001 f9a5 	bl	80056d0 <get_rgb_light>
 8004386:	28ff      	cmp	r0, #255	@ 0xff
 8004388:	d00c      	beq.n	80043a4 <chain_init+0x3c>
    g_light = RGB_LIGHT_BASE;
    set_rgb_light(g_light); // Write the new light status to flash memory
  } else {
    // If the RGB light status is initialized, read the current light status
    // from flash memory
    g_light = get_rgb_light();
 800438a:	f001 f9a1 	bl	80056d0 <get_rgb_light>
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <chain_init+0x54>)
 8004390:	7018      	strb	r0, [r3, #0]
  }
}
 8004392:	bd10      	pop	{r4, pc}
    g_encoder_direct = ENCODER_AB;
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <chain_init+0x50>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
    set_ab_status(g_encoder_direct); // Write the new status to flash memory
 800439a:	7818      	ldrb	r0, [r3, #0]
 800439c:	b2c0      	uxtb	r0, r0
 800439e:	f001 f9cb 	bl	8005738 <set_ab_status>
 80043a2:	e7ee      	b.n	8004382 <chain_init+0x1a>
    g_light = RGB_LIGHT_BASE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <chain_init+0x54>)
 80043a6:	2228      	movs	r2, #40	@ 0x28
 80043a8:	701a      	strb	r2, [r3, #0]
    set_rgb_light(g_light); // Write the new light status to flash memory
 80043aa:	7818      	ldrb	r0, [r3, #0]
 80043ac:	b2c0      	uxtb	r0, r0
 80043ae:	f001 f995 	bl	80056dc <set_rgb_light>
 80043b2:	e7ee      	b.n	8004392 <chain_init+0x2a>
 80043b4:	200002b1 	.word	0x200002b1
 80043b8:	20000bb8 	.word	0x20000bb8
 80043bc:	200002b0 	.word	0x200002b0

080043c0 <HAL_GPIO_EXTI_Falling_Callback>:
 *       It incorporates debouncing logic to only trigger the event once every
 * 200ms.
 * @param GPIO_Pin GPIO pin that triggered the interrupt.
 * @retval None
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80043c0:	b510      	push	{r4, lr}
  if (GPIO_Pin == BTN1_Pin) {
 80043c2:	2801      	cmp	r0, #1
 80043c4:	d000      	beq.n	80043c8 <HAL_GPIO_EXTI_Falling_Callback+0x8>

      // Update the last press time
      s_last_press_time = current_time;
    }
  }
}
 80043c6:	bd10      	pop	{r4, pc}
        HAL_GetTick(); // Get current system tick in milliseconds
 80043c8:	f001 fa24 	bl	8005814 <HAL_GetTick>
 80043cc:	0004      	movs	r4, r0
    if (current_time - s_last_press_time >= DEBOUNCE_TIME_MS) {
 80043ce:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	1ac3      	subs	r3, r0, r3
 80043d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80043d6:	d9f6      	bls.n	80043c6 <HAL_GPIO_EXTI_Falling_Callback+0x6>
      key_press_down_send();
 80043d8:	f7ff fcea 	bl	8003db0 <key_press_down_send>
      s_last_press_time = current_time;
 80043dc:	4b01      	ldr	r3, [pc, #4]	@ (80043e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 80043de:	601c      	str	r4, [r3, #0]
}
 80043e0:	e7f1      	b.n	80043c6 <HAL_GPIO_EXTI_Falling_Callback+0x6>
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	200002ac 	.word	0x200002ac

080043e8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80043e8:	b672      	cpsid	i
 */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80043ea:	e7fe      	b.n	80043ea <Error_Handler+0x2>

080043ec <SystemClock_Config>:
void SystemClock_Config(void) {
 80043ec:	b500      	push	{lr}
 80043ee:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043f0:	2238      	movs	r2, #56	@ 0x38
 80043f2:	2100      	movs	r1, #0
 80043f4:	a804      	add	r0, sp, #16
 80043f6:	f002 fec1 	bl	800717c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043fa:	2210      	movs	r2, #16
 80043fc:	2100      	movs	r1, #0
 80043fe:	4668      	mov	r0, sp
 8004400:	f002 febc 	bl	800717c <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004404:	2080      	movs	r0, #128	@ 0x80
 8004406:	0080      	lsls	r0, r0, #2
 8004408:	f001 fcb8 	bl	8005d7c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType =
 800440c:	230a      	movs	r3, #10
 800440e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004410:	33f6      	adds	r3, #246	@ 0xf6
 8004412:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004414:	2300      	movs	r3, #0
 8004416:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800441c:	3a3f      	subs	r2, #63	@ 0x3f
 800441e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004420:	3201      	adds	r2, #1
 8004422:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004424:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004426:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004428:	3308      	adds	r3, #8
 800442a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004432:	23c0      	movs	r3, #192	@ 0xc0
 8004434:	04db      	lsls	r3, r3, #19
 8004436:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	059b      	lsls	r3, r3, #22
 800443c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800443e:	a804      	add	r0, sp, #16
 8004440:	f001 fcc6 	bl	8005dd0 <HAL_RCC_OscConfig>
 8004444:	2800      	cmp	r0, #0
 8004446:	d10e      	bne.n	8004466 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType =
 8004448:	2307      	movs	r3, #7
 800444a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800444c:	3b05      	subs	r3, #5
 800444e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004450:	2300      	movs	r3, #0
 8004452:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004454:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004456:	2102      	movs	r1, #2
 8004458:	4668      	mov	r0, sp
 800445a:	f001 ff71 	bl	8006340 <HAL_RCC_ClockConfig>
 800445e:	2800      	cmp	r0, #0
 8004460:	d103      	bne.n	800446a <SystemClock_Config+0x7e>
}
 8004462:	b013      	add	sp, #76	@ 0x4c
 8004464:	bd00      	pop	{pc}
    Error_Handler();
 8004466:	f7ff ffbf 	bl	80043e8 <Error_Handler>
    Error_Handler();
 800446a:	f7ff ffbd 	bl	80043e8 <Error_Handler>
	...

08004470 <main>:
int main(void) {
 8004470:	b570      	push	{r4, r5, r6, lr}
  iap_set();
 8004472:	f7ff ff53 	bl	800431c <iap_set>
  chain_init();
 8004476:	f7ff ff77 	bl	8004368 <chain_init>
  HAL_Init();
 800447a:	f001 f9ab 	bl	80057d4 <HAL_Init>
  SystemClock_Config();
 800447e:	f7ff ffb5 	bl	80043ec <SystemClock_Config>
  MX_GPIO_Init();
 8004482:	f7ff fef9 	bl	8004278 <MX_GPIO_Init>
  MX_DMA_Init();
 8004486:	f7ff fec3 	bl	8004210 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800448a:	f000 fdcd 	bl	8005028 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800448e:	f000 ff2f 	bl	80052f0 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8004492:	f7ff ff21 	bl	80042d8 <MX_IWDG_Init>
  MX_TIM14_Init();
 8004496:	f000 fc85 	bl	8004da4 <MX_TIM14_Init>
  MX_TIM1_Init();
 800449a:	f000 fb6b 	bl	8004b74 <MX_TIM1_Init>
  MX_TIM16_Init();
 800449e:	f000 fcbd 	bl	8004e1c <MX_TIM16_Init>
  MX_TIM3_Init();
 80044a2:	f000 fc45 	bl	8004d30 <MX_TIM3_Init>
  MX_TIM17_Init();
 80044a6:	f000 fcf7 	bl	8004e98 <MX_TIM17_Init>
  rgb_init();
 80044aa:	f7ff fe13 	bl	80040d4 <rgb_init>
  encoder_init(); // encoder init
 80044ae:	f7ff fc19 	bl	8003ce4 <encoder_init>
  HAL_Delay(1);
 80044b2:	2001      	movs	r0, #1
 80044b4:	f001 f9b4 	bl	8005820 <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044b8:	4b41      	ldr	r3, [pc, #260]	@ (80045c0 <main+0x150>)
 80044ba:	2502      	movs	r5, #2
 80044bc:	426d      	negs	r5, r5
 80044be:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	2401      	movs	r4, #1
 80044c4:	4322      	orrs	r2, r4
 80044c6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4322      	orrs	r2, r4
 80044cc:	601a      	str	r2, [r3, #0]
  HAL_Delay(1);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f001 f9a6 	bl	8005820 <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044d4:	4b3b      	ldr	r3, [pc, #236]	@ (80045c4 <main+0x154>)
 80044d6:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	4322      	orrs	r2, r4
 80044dc:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4322      	orrs	r2, r4
 80044e2:	601a      	str	r2, [r3, #0]
  HAL_Delay(1);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f001 f99b 	bl	8005820 <HAL_Delay>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044ea:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <main+0x158>)
 80044ec:	611d      	str	r5, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4322      	orrs	r2, r4
 80044f2:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4322      	orrs	r2, r4
 80044f8:	601a      	str	r2, [r3, #0]
  HAL_Delay(1);
 80044fa:	2001      	movs	r0, #1
 80044fc:	f001 f990 	bl	8005820 <HAL_Delay>
 8004500:	e019      	b.n	8004536 <main+0xc6>
      switch (g_cmd_buf[0]) {
 8004502:	2bfb      	cmp	r3, #251	@ 0xfb
 8004504:	d058      	beq.n	80045b8 <main+0x148>
 8004506:	d907      	bls.n	8004518 <main+0xa8>
 8004508:	2bff      	cmp	r3, #255	@ 0xff
 800450a:	d10e      	bne.n	800452a <main+0xba>
        chain_iap_update_handle(g_cmd_buf[1]);
 800450c:	4b2f      	ldr	r3, [pc, #188]	@ (80045cc <main+0x15c>)
 800450e:	7858      	ldrb	r0, [r3, #1]
 8004510:	b2c0      	uxtb	r0, r0
 8004512:	f7ff fb89 	bl	8003c28 <chain_iap_update_handle>
        break;
 8004516:	e008      	b.n	800452a <main+0xba>
      switch (g_cmd_buf[0]) {
 8004518:	2bf9      	cmp	r3, #249	@ 0xf9
 800451a:	d04a      	beq.n	80045b2 <main+0x142>
 800451c:	2bfa      	cmp	r3, #250	@ 0xfa
 800451e:	d104      	bne.n	800452a <main+0xba>
        chain_get_firmware_version_handle();
 8004520:	f7ff fb6e 	bl	8003c00 <chain_get_firmware_version_handle>
        break;
 8004524:	e001      	b.n	800452a <main+0xba>
        chain_encoder_get_value_handle();
 8004526:	f7ff fc2f 	bl	8003d88 <chain_encoder_get_value_handle>
      g_cmd_status = CMD_SPACE_IDLE_STATUS;
 800452a:	4b29      	ldr	r3, [pc, #164]	@ (80045d0 <main+0x160>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <main+0x164>)
 8004532:	4a29      	ldr	r2, [pc, #164]	@ (80045d8 <main+0x168>)
 8004534:	601a      	str	r2, [r3, #0]
    encoder_update();
 8004536:	f7ff fbe1 	bl	8003cfc <encoder_update>
    if (g_cmd_status == CMD_SPACE_BUSY_STATUS) {
 800453a:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <main+0x160>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d1f6      	bne.n	8004530 <main+0xc0>
      switch (g_cmd_buf[0]) {
 8004542:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <main+0x15c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b23      	cmp	r3, #35	@ 0x23
 800454a:	d8da      	bhi.n	8004502 <main+0x92>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d3ec      	bcc.n	800452a <main+0xba>
 8004550:	3b10      	subs	r3, #16
 8004552:	b2da      	uxtb	r2, r3
 8004554:	2a13      	cmp	r2, #19
 8004556:	d8e8      	bhi.n	800452a <main+0xba>
 8004558:	0093      	lsls	r3, r2, #2
 800455a:	4a20      	ldr	r2, [pc, #128]	@ (80045dc <main+0x16c>)
 800455c:	58d3      	ldr	r3, [r2, r3]
 800455e:	469f      	mov	pc, r3
        chain_encoder_get_inc_value_handle();
 8004560:	f7ff fc1c 	bl	8003d9c <chain_encoder_get_inc_value_handle>
        g_increment_count = 0;
 8004564:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <main+0x170>)
 8004566:	2200      	movs	r2, #0
 8004568:	801a      	strh	r2, [r3, #0]
        break;
 800456a:	e7de      	b.n	800452a <main+0xba>
        chain_encoder_reset_value_handle();
 800456c:	f7ff fc2c 	bl	8003dc8 <chain_encoder_reset_value_handle>
        break;
 8004570:	e7db      	b.n	800452a <main+0xba>
        chain_encoder_reset_inc_value_handle();
 8004572:	f7ff fc4d 	bl	8003e10 <chain_encoder_reset_inc_value_handle>
        break;
 8004576:	e7d8      	b.n	800452a <main+0xba>
        chain_encoder_set_ab_status_handle(g_cmd_buf[1]);
 8004578:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <main+0x15c>)
 800457a:	7858      	ldrb	r0, [r3, #1]
 800457c:	b2c0      	uxtb	r0, r0
 800457e:	f7ff fc6b 	bl	8003e58 <chain_encoder_set_ab_status_handle>
        break;
 8004582:	e7d2      	b.n	800452a <main+0xba>
        chain_encoder_get_ab_status_handle();
 8004584:	f7ff fc8c 	bl	8003ea0 <chain_encoder_get_ab_status_handle>
        break;
 8004588:	e7cf      	b.n	800452a <main+0xba>
        chain_set_rgb_value((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 800458a:	4b16      	ldr	r3, [pc, #88]	@ (80045e4 <main+0x174>)
 800458c:	7819      	ldrb	r1, [r3, #0]
 800458e:	3901      	subs	r1, #1
 8004590:	b289      	uxth	r1, r1
 8004592:	4815      	ldr	r0, [pc, #84]	@ (80045e8 <main+0x178>)
 8004594:	f7ff fda8 	bl	80040e8 <chain_set_rgb_value>
        break;
 8004598:	e7c7      	b.n	800452a <main+0xba>
        chain_get_rgb_value();
 800459a:	f7ff fdd5 	bl	8004148 <chain_get_rgb_value>
        break;
 800459e:	e7c4      	b.n	800452a <main+0xba>
        chain_set_light_value(g_cmd_buf[1]);
 80045a0:	4b0a      	ldr	r3, [pc, #40]	@ (80045cc <main+0x15c>)
 80045a2:	7858      	ldrb	r0, [r3, #1]
 80045a4:	b2c0      	uxtb	r0, r0
 80045a6:	f7ff fded 	bl	8004184 <chain_set_light_value>
        break;
 80045aa:	e7be      	b.n	800452a <main+0xba>
        chain_get_light_value();
 80045ac:	f7ff fe1c 	bl	80041e8 <chain_get_light_value>
        break;
 80045b0:	e7bb      	b.n	800452a <main+0xba>
        chain_get_bootloader_version_handle();
 80045b2:	f7ff fb1b 	bl	8003bec <chain_get_bootloader_version_handle>
        break;
 80045b6:	e7b8      	b.n	800452a <main+0xba>
        chain_get_device_type_handle();
 80045b8:	f7ff fb2c 	bl	8003c14 <chain_get_device_type_handle>
        break;
 80045bc:	e7b5      	b.n	800452a <main+0xba>
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	40002000 	.word	0x40002000
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40014400 	.word	0x40014400
 80045cc:	200002b4 	.word	0x200002b4
 80045d0:	200002b2 	.word	0x200002b2
 80045d4:	40003000 	.word	0x40003000
 80045d8:	0000aaaa 	.word	0x0000aaaa
 80045dc:	08007254 	.word	0x08007254
 80045e0:	20000bba 	.word	0x20000bba
 80045e4:	200002b3 	.word	0x200002b3
 80045e8:	200002b5 	.word	0x200002b5

080045ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045ec:	b500      	push	{lr}
 80045ee:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <HAL_MspInit+0x3c>)
 80045f2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80045f4:	2201      	movs	r2, #1
 80045f6:	4311      	orrs	r1, r2
 80045f8:	6419      	str	r1, [r3, #64]	@ 0x40
 80045fa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80045fc:	400a      	ands	r2, r1
 80045fe:	9200      	str	r2, [sp, #0]
 8004600:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004604:	2180      	movs	r1, #128	@ 0x80
 8004606:	0549      	lsls	r1, r1, #21
 8004608:	430a      	orrs	r2, r1
 800460a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	400b      	ands	r3, r1
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8004614:	2200      	movs	r2, #0
 8004616:	2101      	movs	r1, #1
 8004618:	2003      	movs	r0, #3
 800461a:	f001 f95f 	bl	80058dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800461e:	2003      	movs	r0, #3
 8004620:	f001 f960 	bl	80058e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004624:	b003      	add	sp, #12
 8004626:	bd00      	pop	{pc}
 8004628:	40021000 	.word	0x40021000

0800462c <NMI_Handler>:
void NMI_Handler(void) {
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 800462c:	e7fe      	b.n	800462c <NMI_Handler>

0800462e <HardFault_Handler>:
 */
void HardFault_Handler(void) {
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 800462e:	e7fe      	b.n	800462e <HardFault_Handler>

08004630 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004630:	4770      	bx	lr

08004632 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004632:	4770      	bx	lr

08004634 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8004634:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004636:	f001 f8e1 	bl	80057fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463a:	bd10      	pop	{r4, pc}

0800463c <FLASH_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles Flash global interrupt.
 */
void FLASH_IRQHandler(void) {
 800463c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800463e:	f001 f971 	bl	8005924 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004642:	bd10      	pop	{r4, pc}

08004644 <EXTI0_1_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 and line 1 interrupts.
 */
void EXTI0_1_IRQHandler(void) {
 8004644:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8004646:	2001      	movs	r0, #1
 8004648:	f001 fb80 	bl	8005d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800464c:	bd10      	pop	{r4, pc}

0800464e <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800464e:	4770      	bx	lr

08004650 <DMA1_Channel2_3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
 */
void DMA1_Channel2_3_IRQHandler(void) {
 8004650:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8004652:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <DMA1_Channel2_3_IRQHandler+0x80>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	069b      	lsls	r3, r3, #26
 8004658:	d533      	bpl.n	80046c2 <DMA1_Channel2_3_IRQHandler+0x72>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 800465a:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <DMA1_Channel2_3_IRQHandler+0x80>)
 800465c:	2220      	movs	r2, #32
 800465e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004660:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <DMA1_Channel2_3_IRQHandler+0x84>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	2101      	movs	r1, #1
 8004666:	438b      	bics	r3, r1
 8004668:	6013      	str	r3, [r2, #0]
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2); // Disable DMA Channel 2 to
                                                   // prevent further data
                                                   // transfer until the next
                                                   // setup
    // If there are packets in the input transmission buffer queue
    if (tx_in_buffer.packet_count > 0) {
 800466a:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <DMA1_Channel2_3_IRQHandler+0x88>)
 800466c:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <DMA1_Channel2_3_IRQHandler+0x8c>)
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d027      	beq.n	80046c4 <DMA1_Channel2_3_IRQHandler+0x74>
 8004674:	b672      	cpsid	i
      __disable_irq();
      uint8_t index =
 8004676:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <DMA1_Channel2_3_IRQHandler+0x88>)
 8004678:	2681      	movs	r6, #129	@ 0x81
 800467a:	00b6      	lsls	r6, r6, #2
 800467c:	5d9a      	ldrb	r2, [r3, r6]
          tx_in_buffer.head; // Get the current head index of the queue
      uint16_t length =
 800467e:	01d5      	lsls	r5, r2, #7
 8004680:	1950      	adds	r0, r2, r5
 8004682:	0041      	lsls	r1, r0, #1
 8004684:	1859      	adds	r1, r3, r1
 8004686:	3101      	adds	r1, #1
 8004688:	31ff      	adds	r1, #255	@ 0xff
 800468a:	8808      	ldrh	r0, [r1, #0]
          tx_in_buffer.send_queue[index]
              .length; // Get the length of the data packet at the head

      // Update the head of the queue and decrement the packet count
      tx_in_buffer.head =
          (tx_in_buffer.head + 1) %
 800468c:	5d99      	ldrb	r1, [r3, r6]
 800468e:	3101      	adds	r1, #1
 8004690:	2401      	movs	r4, #1
      tx_in_buffer.head =
 8004692:	4021      	ands	r1, r4
 8004694:	5599      	strb	r1, [r3, r6]
          MAX_QUEUE_SIZE; // Move to the next packet in the circular buffer
      tx_in_buffer.packet_count--;
 8004696:	4e11      	ldr	r6, [pc, #68]	@ (80046dc <DMA1_Channel2_3_IRQHandler+0x8c>)
 8004698:	5d99      	ldrb	r1, [r3, r6]
 800469a:	3901      	subs	r1, #1
 800469c:	b2c9      	uxtb	r1, r1
 800469e:	5599      	strb	r1, [r3, r6]

      // Set up the DMA memory address for the next transmission and the data
      // length
      LL_DMA_SetMemoryAddress(
          DMA1, LL_DMA_CHANNEL_2,
          (uint32_t)tx_in_buffer.send_queue[index]
 80046a0:	1952      	adds	r2, r2, r5
 80046a2:	0051      	lsls	r1, r2, #1
 80046a4:	18c9      	adds	r1, r1, r3
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <DMA1_Channel2_3_IRQHandler+0x84>)
 80046a8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	0c12      	lsrs	r2, r2, #16
 80046ae:	0412      	lsls	r2, r2, #16
 80046b0:	4310      	orrs	r0, r2
 80046b2:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4322      	orrs	r2, r4
 80046b8:	601a      	str	r2, [r3, #0]
                           length); // Set the data length for this DMA transfer
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2); // Re-enable DMA Channel2 to
                                                    // start transferringthe
                                                    // next packet

      g_uart_in_transmit_complete =
 80046ba:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <DMA1_Channel2_3_IRQHandler+0x90>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046c0:	b662      	cpsie	i
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
      g_uart_in_transmit_complete = 1; // Mark transmission as complete if no
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <DMA1_Channel2_3_IRQHandler+0x90>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046cc:	b662      	cpsie	i
}
 80046ce:	e7f8      	b.n	80046c2 <DMA1_Channel2_3_IRQHandler+0x72>
 80046d0:	40020000 	.word	0x40020000
 80046d4:	4002001c 	.word	0x4002001c
 80046d8:	20000e14 	.word	0x20000e14
 80046dc:	00000206 	.word	0x00000206
 80046e0:	200000c5 	.word	0x200000c5

080046e4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1
 * interrupts.
 */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void) {
 80046e4:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 80046e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	049b      	lsls	r3, r3, #18
 80046ec:	d534      	bpl.n	8004758 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x74>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 80046ee:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xac>)
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	0192      	lsls	r2, r2, #6
 80046f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80046f6:	4a27      	ldr	r2, [pc, #156]	@ (8004794 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb0>)
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438b      	bics	r3, r1
 80046fe:	6013      	str	r3, [r2, #0]
  if (LL_DMA_IsActiveFlag_TC4(DMA1)) {
    LL_DMA_ClearFlag_TC4(DMA1); // Clear transfer complete flag for Channel 4
    LL_DMA_DisableChannel(
        DMA1, LL_DMA_CHANNEL_4); // Disable DMA Channel 4 to halt transmission
    // If there are packets in the output transmission buffer queue
    if (tx_out_buffer.packet_count > 0) {
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb4>)
 8004702:	4a26      	ldr	r2, [pc, #152]	@ (800479c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 8004704:	5c9b      	ldrb	r3, [r3, r2]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03b      	beq.n	8004782 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x9e>
  __ASM volatile ("cpsid i" : : : "memory");
 800470a:	b672      	cpsid	i
      __disable_irq();
      uint8_t index =
 800470c:	4b22      	ldr	r3, [pc, #136]	@ (8004798 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb4>)
 800470e:	2681      	movs	r6, #129	@ 0x81
 8004710:	00b6      	lsls	r6, r6, #2
 8004712:	5d9a      	ldrb	r2, [r3, r6]
          tx_out_buffer.head; // Get the current head index of the queue
      uint16_t length =
 8004714:	01d5      	lsls	r5, r2, #7
 8004716:	1950      	adds	r0, r2, r5
 8004718:	0041      	lsls	r1, r0, #1
 800471a:	1859      	adds	r1, r3, r1
 800471c:	3101      	adds	r1, #1
 800471e:	31ff      	adds	r1, #255	@ 0xff
 8004720:	8808      	ldrh	r0, [r1, #0]
          tx_out_buffer.send_queue[index]
              .length; // Get the length of the data packet at the head

      // Update the head of the queue and decrement the packet count
      tx_out_buffer.head =
          (tx_out_buffer.head + 1) %
 8004722:	5d99      	ldrb	r1, [r3, r6]
 8004724:	3101      	adds	r1, #1
 8004726:	2401      	movs	r4, #1
      tx_out_buffer.head =
 8004728:	4021      	ands	r1, r4
 800472a:	5599      	strb	r1, [r3, r6]
          MAX_QUEUE_SIZE; // Move to the next packet in the circular buffer
      tx_out_buffer.packet_count--;
 800472c:	4e1b      	ldr	r6, [pc, #108]	@ (800479c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb8>)
 800472e:	5d99      	ldrb	r1, [r3, r6]
 8004730:	3901      	subs	r1, #1
 8004732:	b2c9      	uxtb	r1, r1
 8004734:	5599      	strb	r1, [r3, r6]

      // Set up the DMA memory address for the next transmission and the data
      // length
      LL_DMA_SetMemoryAddress(
          DMA1, LL_DMA_CHANNEL_4,
          (uint32_t)tx_out_buffer.send_queue[index]
 8004736:	1952      	adds	r2, r2, r5
 8004738:	0051      	lsls	r1, r2, #1
 800473a:	18c9      	adds	r1, r1, r3
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xb0>)
 800473e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	0c12      	lsrs	r2, r2, #16
 8004744:	0412      	lsls	r2, r2, #16
 8004746:	4310      	orrs	r0, r2
 8004748:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4322      	orrs	r2, r4
 800474e:	601a      	str	r2, [r3, #0]

      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4); // Re-enable DMA Channel4 to
                                                    // start transferring next
                                                    // packet

      g_uart_out_transmit_complete =
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xbc>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8004758:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xac>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	039b      	lsls	r3, r3, #14
 800475e:	d50f      	bpl.n	8004780 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x9c>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xac>)
 8004762:	2280      	movs	r2, #128	@ 0x80
 8004764:	0252      	lsls	r2, r2, #9
 8004766:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004768:	2280      	movs	r2, #128	@ 0x80
 800476a:	0292      	lsls	r2, r2, #10
 800476c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800476e:	4a0d      	ldr	r2, [pc, #52]	@ (80047a4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc0>)
 8004770:	6813      	ldr	r3, [r2, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	438b      	bics	r3, r1
 8004776:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004778:	4a0b      	ldr	r2, [pc, #44]	@ (80047a8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xc4>)
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	438b      	bics	r3, r1
 800477e:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 8004780:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8004782:	b672      	cpsid	i
      g_uart_out_transmit_complete = 1; // Mark transmission as complete if no
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0xbc>)
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800478a:	b662      	cpsie	i
}
 800478c:	e7e4      	b.n	8004758 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x74>
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	40020000 	.word	0x40020000
 8004794:	40020044 	.word	0x40020044
 8004798:	20000c0c 	.word	0x20000c0c
 800479c:	00000206 	.word	0x00000206
 80047a0:	200000c4 	.word	0x200000c4
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM14_IRQHandler>:

/**
 * @brief This function handles TIM14 global interrupt.
 */
void TIM14_IRQHandler(void) {
 80047ac:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <TIM14_IRQHandler+0x3c>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	07db      	lsls	r3, r3, #31
 80047b4:	d516      	bpl.n	80047e4 <TIM14_IRQHandler+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80047b6:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <TIM14_IRQHandler+0x3c>)
 80047b8:	2202      	movs	r2, #2
 80047ba:	4252      	negs	r2, r2
 80047bc:	611a      	str	r2, [r3, #16]
  // Check if the update interrupt flag is set for TIM14
  if (LL_TIM_IsActiveFlag_UPDATE(TIM14) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM14); // Clear the update interrupt flag for TIM14

    // Decrement the count for the "enum please" packets to send
    g_enum_please_nums--;
 80047be:	4c0b      	ldr	r4, [pc, #44]	@ (80047ec <TIM14_IRQHandler+0x40>)
 80047c0:	7823      	ldrb	r3, [r4, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	7023      	strb	r3, [r4, #0]

    // Trigger a DMA transmission for the "enum please" data packet
    usart1_transmit_dma(s_enum_please_data_packet_buf,
 80047c6:	480a      	ldr	r0, [pc, #40]	@ (80047f0 <TIM14_IRQHandler+0x44>)
 80047c8:	2109      	movs	r1, #9
 80047ca:	f000 fe69 	bl	80054a0 <usart1_transmit_dma>
                        sizeof(s_enum_please_data_packet_buf));

    // Check if the number of packets to send has reached zero
    if (g_enum_please_nums == 0) {
 80047ce:	7823      	ldrb	r3, [r4, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <TIM14_IRQHandler+0x38>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <TIM14_IRQHandler+0x3c>)
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	2101      	movs	r1, #1
 80047da:	438a      	bics	r2, r1
 80047dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	40002000 	.word	0x40002000
 80047ec:	200000dd 	.word	0x200000dd
 80047f0:	200000d4 	.word	0x200000d4

080047f4 <TIM16_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <TIM16_IRQHandler+0x34>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	07db      	lsls	r3, r3, #31
 80047fa:	d514      	bpl.n	8004826 <TIM16_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <TIM16_IRQHandler+0x34>)
 80047fe:	2202      	movs	r2, #2
 8004800:	4252      	negs	r2, r2
 8004802:	611a      	str	r2, [r3, #16]
  // Check if the update interrupt flag is set for TIM16
  if (LL_TIM_IsActiveFlag_UPDATE(TIM16) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM16); // Clear the update interrupt flag for TIM16

    // Check if the device is currently not the tail in the chain
    if (g_tail_status == CHAIN_NON_TAIL_DEVICE) {
 8004804:	4b09      	ldr	r3, [pc, #36]	@ (800482c <TIM16_IRQHandler+0x38>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10c      	bne.n	8004826 <TIM16_IRQHandler+0x32>
      // Update the tail status to indicate that this device is now the tail
      g_tail_status = CHAIN_TAIL_DEVICE;
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <TIM16_IRQHandler+0x38>)
 800480e:	2101      	movs	r1, #1
 8004810:	7019      	strb	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <TIM16_IRQHandler+0x3c>)
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	430a      	orrs	r2, r1
 8004818:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
      // Enable TIM14 to start sending "enum please" packets
      LL_TIM_EnableIT_UPDATE(TIM14); // Enable update interrupt for TIM14
      LL_TIM_EnableCounter(TIM14);   // Start the TIM14 counter

      // Set the number of "enum please" packets to send
      g_enum_please_nums = ENUM_PLEASE_NUM;
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <TIM16_IRQHandler+0x40>)
 8004822:	2203      	movs	r2, #3
 8004824:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM16_IRQn 0 */
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004826:	4770      	bx	lr
 8004828:	40014400 	.word	0x40014400
 800482c:	200000c3 	.word	0x200000c3
 8004830:	40002000 	.word	0x40002000
 8004834:	200000dd 	.word	0x200000dd

08004838 <TIM17_IRQHandler>:

/**
 * @brief This function handles TIM17 global interrupt.
 */
void TIM17_IRQHandler(void) {
 8004838:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <TIM17_IRQHandler+0x1c>)
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d507      	bpl.n	8004852 <TIM17_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004842:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <TIM17_IRQHandler+0x1c>)
 8004844:	2202      	movs	r2, #2
 8004846:	4252      	negs	r2, r2
 8004848:	611a      	str	r2, [r3, #16]
  // Check if the update interrupt flag is set for TIM17
  if (LL_TIM_IsActiveFlag_UPDATE(TIM17) == SET) {
    LL_TIM_ClearFlag_UPDATE(TIM17); // Clear the update interrupt flag for TIM17

    // Transmit the heartbeat data packet using USART2 with DMA
    usart2_transmit_dma(g_heartbeat_data_pack_buf,
 800484a:	4803      	ldr	r0, [pc, #12]	@ (8004858 <TIM17_IRQHandler+0x20>)
 800484c:	2109      	movs	r1, #9
 800484e:	f000 fe71 	bl	8005534 <usart2_transmit_dma>

  /* USER CODE END TIM17_IRQn 0 */
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004852:	bd10      	pop	{r4, pc}
 8004854:	40014800 	.word	0x40014800
 8004858:	200000c8 	.word	0x200000c8

0800485c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up
 * interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	46ce      	mov	lr, r9
 8004860:	4647      	mov	r7, r8
 8004862:	b580      	push	{r7, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004864:	4b4d      	ldr	r3, [pc, #308]	@ (800499c <USART1_IRQHandler+0x140>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	06db      	lsls	r3, r3, #27
 800486a:	d53e      	bpl.n	80048ea <USART1_IRQHandler+0x8e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800486c:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <USART1_IRQHandler+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	06db      	lsls	r3, r3, #27
 8004872:	d53a      	bpl.n	80048ea <USART1_IRQHandler+0x8e>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004874:	4b49      	ldr	r3, [pc, #292]	@ (800499c <USART1_IRQHandler+0x140>)
 8004876:	2210      	movs	r2, #16
 8004878:	621a      	str	r2, [r3, #32]
 800487a:	4b49      	ldr	r3, [pc, #292]	@ (80049a0 <USART1_IRQHandler+0x144>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	438a      	bics	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004884:	685b      	ldr	r3, [r3, #4]
    LL_USART_ClearFlag_IDLE(USART1); // Clear the idle flag
    LL_DMA_DisableChannel(
        DMA1, LL_DMA_CHANNEL_1); // Temporarily disable DMA channel for RX

    // Calculate received data length
    uint16_t s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 8004886:	b29b      	uxth	r3, r3
 8004888:	2580      	movs	r5, #128	@ 0x80
 800488a:	006d      	lsls	r5, r5, #1
 800488c:	1aed      	subs	r5, r5, r3
 800488e:	b2ad      	uxth	r5, r5

    // Prevent buffer overflow by checking if buffer is full
    if (s_len == 0) {
 8004890:	2d00      	cmp	r5, #0
 8004892:	d026      	beq.n	80048e2 <USART1_IRQHandler+0x86>
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1); // Re-enable DMA reception
      return;
    }

    // Save current buffer index for processing and update to next index for DMA
    uint8_t current_index = g_uart_in_rx_index;
 8004894:	4a43      	ldr	r2, [pc, #268]	@ (80049a4 <USART1_IRQHandler+0x148>)
 8004896:	7816      	ldrb	r6, [r2, #0]
 8004898:	b2f6      	uxtb	r6, r6
    g_uart_in_rx_index = (g_uart_in_rx_index + 1) % UART_BUFFER_SIZE;
 800489a:	7813      	ldrb	r3, [r2, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	2101      	movs	r1, #1
 80048a0:	400b      	ands	r3, r1
 80048a2:	7013      	strb	r3, [r2, #0]

    // Set new buffer address and size for next DMA transfer
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                            (uint32_t)g_uart_in_rx_buf[g_uart_in_rx_index]);
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	0252      	lsls	r2, r2, #9
 80048a8:	483f      	ldr	r0, [pc, #252]	@ (80049a8 <USART1_IRQHandler+0x14c>)
 80048aa:	1812      	adds	r2, r2, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80048ac:	4b3c      	ldr	r3, [pc, #240]	@ (80049a0 <USART1_IRQHandler+0x144>)
 80048ae:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	0c12      	lsrs	r2, r2, #16
 80048b4:	0412      	lsls	r2, r2, #16
 80048b6:	2480      	movs	r4, #128	@ 0x80
 80048b8:	0064      	lsls	r4, r4, #1
 80048ba:	4322      	orrs	r2, r4
 80048bc:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c8:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80048cc:	4a33      	ldr	r2, [pc, #204]	@ (800499c <USART1_IRQHandler+0x140>)
 80048ce:	6893      	ldr	r3, [r2, #8]
 80048d0:	313f      	adds	r1, #63	@ 0x3f
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	f384 8810 	msr	PRIMASK, r4
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1); // Re-enable DMA
    LL_USART_EnableDMAReq_RX(USART1); // Re-enable DMA request for USART1 RX

    // Process received data if length is greater than 0
    if (s_len > 0) {
      uint8_t *incoming_buffer = (uint8_t *)g_uart_in_rx_buf[current_index];
 80048da:	0276      	lsls	r6, r6, #9
 80048dc:	1836      	adds	r6, r6, r0
      uint16_t i = 0;
 80048de:	2400      	movs	r4, #0

      // Parse incoming buffer data
      while (i < s_len) {
 80048e0:	e023      	b.n	800492a <USART1_IRQHandler+0xce>
 80048e2:	4a2f      	ldr	r2, [pc, #188]	@ (80049a0 <USART1_IRQHandler+0x144>)
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048ea:	bcc0      	pop	{r6, r7}
 80048ec:	46b9      	mov	r9, r7
 80048ee:	46b0      	mov	r8, r6
 80048f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i++;
 80048f2:	3401      	adds	r4, #1
 80048f4:	b2a4      	uxth	r4, r4
            continue;
 80048f6:	e018      	b.n	800492a <USART1_IRQHandler+0xce>
              chain_heartbeat_in_receive_handle();
 80048f8:	f7ff f8e8 	bl	8003acc <chain_heartbeat_in_receive_handle>
              break;
 80048fc:	e04b      	b.n	8004996 <USART1_IRQHandler+0x13a>
              if (incoming_buffer[i + 4] != 1) {
 80048fe:	1933      	adds	r3, r6, r4
 8004900:	791b      	ldrb	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d004      	beq.n	8004910 <USART1_IRQHandler+0xb4>
                chain_out_relay_handle(&incoming_buffer[i], total_length);
 8004906:	0001      	movs	r1, r0
 8004908:	4648      	mov	r0, r9
 800490a:	f7ff f90f 	bl	8003b2c <chain_out_relay_handle>
 800490e:	e042      	b.n	8004996 <USART1_IRQHandler+0x13a>
              } else if (pack_check(&incoming_buffer[i], total_length) ==
 8004910:	0001      	movs	r1, r0
 8004912:	4648      	mov	r0, r9
 8004914:	f7ff f893 	bl	8003a3e <pack_check>
 8004918:	2801      	cmp	r0, #1
 800491a:	d13c      	bne.n	8004996 <USART1_IRQHandler+0x13a>
                chain_deal_data_packet_handle(&incoming_buffer[i],
 800491c:	4641      	mov	r1, r8
 800491e:	4648      	mov	r0, r9
 8004920:	f7ff f8dc 	bl	8003adc <chain_deal_data_packet_handle>
 8004924:	e037      	b.n	8004996 <USART1_IRQHandler+0x13a>
        i++;
 8004926:	3401      	adds	r4, #1
 8004928:	b2a4      	uxth	r4, r4
      while (i < s_len) {
 800492a:	42ac      	cmp	r4, r5
 800492c:	d2dd      	bcs.n	80048ea <USART1_IRQHandler+0x8e>
        if (i + 4 <= s_len && incoming_buffer[i] == 0xAA &&
 800492e:	0022      	movs	r2, r4
 8004930:	1ce3      	adds	r3, r4, #3
 8004932:	42ab      	cmp	r3, r5
 8004934:	daf7      	bge.n	8004926 <USART1_IRQHandler+0xca>
 8004936:	1930      	adds	r0, r6, r4
 8004938:	4681      	mov	r9, r0
 800493a:	5d30      	ldrb	r0, [r6, r4]
 800493c:	28aa      	cmp	r0, #170	@ 0xaa
 800493e:	d1f2      	bne.n	8004926 <USART1_IRQHandler+0xca>
            incoming_buffer[i + 1] == 0x55) {
 8004940:	4648      	mov	r0, r9
 8004942:	7840      	ldrb	r0, [r0, #1]
        if (i + 4 <= s_len && incoming_buffer[i] == 0xAA &&
 8004944:	2855      	cmp	r0, #85	@ 0x55
 8004946:	d1ee      	bne.n	8004926 <USART1_IRQHandler+0xca>
          uint8_t len_low = incoming_buffer[i + 2];
 8004948:	1ca0      	adds	r0, r4, #2
 800494a:	5c30      	ldrb	r0, [r6, r0]
 800494c:	4680      	mov	r8, r0
          uint8_t len_high = incoming_buffer[i + 3];
 800494e:	1ce0      	adds	r0, r4, #3
 8004950:	5c30      	ldrb	r0, [r6, r0]
          uint16_t packet_length = len_low | (len_high << 8);
 8004952:	0200      	lsls	r0, r0, #8
 8004954:	4647      	mov	r7, r8
 8004956:	4307      	orrs	r7, r0
          if (packet_length > BUFFER_SIZE) {
 8004958:	2080      	movs	r0, #128	@ 0x80
 800495a:	0040      	lsls	r0, r0, #1
 800495c:	4287      	cmp	r7, r0
 800495e:	d8c8      	bhi.n	80048f2 <USART1_IRQHandler+0x96>
          uint16_t total_length = 2 + 2 + packet_length + 2;
 8004960:	0038      	movs	r0, r7
 8004962:	3006      	adds	r0, #6
 8004964:	b280      	uxth	r0, r0
 8004966:	4680      	mov	r8, r0
          if (i + total_length <= s_len &&
 8004968:	4442      	add	r2, r8
 800496a:	4295      	cmp	r5, r2
 800496c:	dbdb      	blt.n	8004926 <USART1_IRQHandler+0xca>
              incoming_buffer[i + total_length - 2] == 0x55 &&
 800496e:	18b1      	adds	r1, r6, r2
 8004970:	3902      	subs	r1, #2
 8004972:	7809      	ldrb	r1, [r1, #0]
          if (i + total_length <= s_len &&
 8004974:	2955      	cmp	r1, #85	@ 0x55
 8004976:	d1d6      	bne.n	8004926 <USART1_IRQHandler+0xca>
              incoming_buffer[i + total_length - 1] == 0xAA) {
 8004978:	18b2      	adds	r2, r6, r2
 800497a:	3a01      	subs	r2, #1
 800497c:	7812      	ldrb	r2, [r2, #0]
              incoming_buffer[i + total_length - 2] == 0x55 &&
 800497e:	2aaa      	cmp	r2, #170	@ 0xaa
 8004980:	d1d1      	bne.n	8004926 <USART1_IRQHandler+0xca>
            uint8_t packet_type = incoming_buffer[i + 5];
 8004982:	1d62      	adds	r2, r4, #5
 8004984:	5cb2      	ldrb	r2, [r6, r2]
            switch (packet_type) {
 8004986:	2afd      	cmp	r2, #253	@ 0xfd
 8004988:	d0b6      	beq.n	80048f8 <USART1_IRQHandler+0x9c>
 800498a:	2afe      	cmp	r2, #254	@ 0xfe
 800498c:	d1b7      	bne.n	80048fe <USART1_IRQHandler+0xa2>
              chain_enum_handle(&incoming_buffer[i], total_length);
 800498e:	0001      	movs	r1, r0
 8004990:	4648      	mov	r0, r9
 8004992:	f7ff f87f 	bl	8003a94 <chain_enum_handle>
            i += total_length; // Move to the next packet in the buffer
 8004996:	4444      	add	r4, r8
 8004998:	b2a4      	uxth	r4, r4
            continue;
 800499a:	e7c6      	b.n	800492a <USART1_IRQHandler+0xce>
 800499c:	40013800 	.word	0x40013800
 80049a0:	40020008 	.word	0x40020008
 80049a4:	200003b5 	.word	0x200003b5
 80049a8:	200007b8 	.word	0x200007b8

080049ac <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up
 * interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void) {
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	46ce      	mov	lr, r9
 80049b0:	4647      	mov	r7, r8
 80049b2:	b580      	push	{r7, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80049b4:	4b48      	ldr	r3, [pc, #288]	@ (8004ad8 <USART2_IRQHandler+0x12c>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	06db      	lsls	r3, r3, #27
 80049ba:	d543      	bpl.n	8004a44 <USART2_IRQHandler+0x98>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80049bc:	4b46      	ldr	r3, [pc, #280]	@ (8004ad8 <USART2_IRQHandler+0x12c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	06db      	lsls	r3, r3, #27
 80049c2:	d53f      	bpl.n	8004a44 <USART2_IRQHandler+0x98>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80049c4:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <USART2_IRQHandler+0x12c>)
 80049c6:	2210      	movs	r2, #16
 80049c8:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80049ca:	4b44      	ldr	r3, [pc, #272]	@ (8004adc <USART2_IRQHandler+0x130>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80049d4:	685b      	ldr	r3, [r3, #4]

    // Temporarily disable DMA channel for USART2 RX
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);

    // Calculate length of received data
    uint16_t s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2580      	movs	r5, #128	@ 0x80
 80049da:	006d      	lsls	r5, r5, #1
 80049dc:	1aed      	subs	r5, r5, r3
 80049de:	b2ad      	uxth	r5, r5

    // Prevent buffer overflow by checking if buffer is full
    if (s_len == 0) {
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	d02b      	beq.n	8004a3c <USART2_IRQHandler+0x90>
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
      return;
    }

    // Save current buffer index for processing and update to next index for DMA
    uint8_t current_index = g_uart_out_rx_index;
 80049e4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae0 <USART2_IRQHandler+0x134>)
 80049e6:	7816      	ldrb	r6, [r2, #0]
 80049e8:	b2f6      	uxtb	r6, r6
    g_uart_out_rx_index = (g_uart_out_rx_index + 1) % UART_BUFFER_SIZE;
 80049ea:	7813      	ldrb	r3, [r2, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	2101      	movs	r1, #1
 80049f0:	400b      	ands	r3, r1
 80049f2:	7013      	strb	r3, [r2, #0]

    // Set new DMA receive buffer address and size
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                            (uint32_t)g_uart_out_rx_buf[g_uart_out_rx_index]);
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	0252      	lsls	r2, r2, #9
 80049f8:	483a      	ldr	r0, [pc, #232]	@ (8004ae4 <USART2_IRQHandler+0x138>)
 80049fa:	1812      	adds	r2, r2, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80049fc:	4b37      	ldr	r3, [pc, #220]	@ (8004adc <USART2_IRQHandler+0x130>)
 80049fe:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	0c12      	lsrs	r2, r2, #16
 8004a04:	0412      	lsls	r2, r2, #16
 8004a06:	2480      	movs	r4, #128	@ 0x80
 8004a08:	0064      	lsls	r4, r4, #1
 8004a0a:	4322      	orrs	r2, r4
 8004a0c:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a14:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad8 <USART2_IRQHandler+0x12c>)
 8004a1e:	6893      	ldr	r3, [r2, #8]
 8004a20:	313f      	adds	r1, #63	@ 0x3f
 8004a22:	430b      	orrs	r3, r1
 8004a24:	6093      	str	r3, [r2, #8]
 8004a26:	f384 8810 	msr	PRIMASK, r4
  WRITE_REG(TIMx->CNT, Counter);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae8 <USART2_IRQHandler+0x13c>)
 8004a2e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Process received data if length is greater than 0
    if (s_len > 0) {
      // Reset counter and update tail status
      LL_TIM_SetCounter(TIM16, 0);
      g_tail_status = CHAIN_NON_TAIL_DEVICE;
 8004a30:	4a2e      	ldr	r2, [pc, #184]	@ (8004aec <USART2_IRQHandler+0x140>)
 8004a32:	7013      	strb	r3, [r2, #0]
      uint8_t *incoming_buffer = (uint8_t *)g_uart_out_rx_buf[current_index];
 8004a34:	0276      	lsls	r6, r6, #9
 8004a36:	1836      	adds	r6, r6, r0
      uint16_t i = 0;
 8004a38:	2400      	movs	r4, #0

      // Parse incoming buffer data
      while (i < s_len) {
 8004a3a:	e018      	b.n	8004a6e <USART2_IRQHandler+0xc2>
 8004a3c:	4a27      	ldr	r2, [pc, #156]	@ (8004adc <USART2_IRQHandler+0x130>)
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a44:	bcc0      	pop	{r6, r7}
 8004a46:	46b9      	mov	r9, r7
 8004a48:	46b0      	mov	r8, r6
 8004a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i++;
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	b2a4      	uxth	r4, r4
            continue;
 8004a50:	e00d      	b.n	8004a6e <USART2_IRQHandler+0xc2>
              chain_enum_return_handle(&incoming_buffer[i], total_length);
 8004a52:	0039      	movs	r1, r7
 8004a54:	4648      	mov	r0, r9
 8004a56:	f7ff f831 	bl	8003abc <chain_enum_return_handle>
            i += total_length; // Move to the next packet in the buffer
 8004a5a:	19e4      	adds	r4, r4, r7
 8004a5c:	b2a4      	uxth	r4, r4
            continue;
 8004a5e:	e006      	b.n	8004a6e <USART2_IRQHandler+0xc2>
              chain_enum_please_handle(&incoming_buffer[i], total_length);
 8004a60:	0039      	movs	r1, r7
 8004a62:	4648      	mov	r0, r9
 8004a64:	f7ff f82e 	bl	8003ac4 <chain_enum_please_handle>
              break;
 8004a68:	e7f7      	b.n	8004a5a <USART2_IRQHandler+0xae>
        i++;
 8004a6a:	3401      	adds	r4, #1
 8004a6c:	b2a4      	uxth	r4, r4
      while (i < s_len) {
 8004a6e:	42ac      	cmp	r4, r5
 8004a70:	d2e8      	bcs.n	8004a44 <USART2_IRQHandler+0x98>
        if (i + 4 < s_len && incoming_buffer[i] == 0xAA &&
 8004a72:	1d23      	adds	r3, r4, #4
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	daf8      	bge.n	8004a6a <USART2_IRQHandler+0xbe>
 8004a78:	0023      	movs	r3, r4
 8004a7a:	1930      	adds	r0, r6, r4
 8004a7c:	4681      	mov	r9, r0
 8004a7e:	5d37      	ldrb	r7, [r6, r4]
 8004a80:	2faa      	cmp	r7, #170	@ 0xaa
 8004a82:	d1f2      	bne.n	8004a6a <USART2_IRQHandler+0xbe>
            incoming_buffer[i + 1] == 0x55) {
 8004a84:	7847      	ldrb	r7, [r0, #1]
        if (i + 4 < s_len && incoming_buffer[i] == 0xAA &&
 8004a86:	2f55      	cmp	r7, #85	@ 0x55
 8004a88:	d1ef      	bne.n	8004a6a <USART2_IRQHandler+0xbe>
          uint8_t len_low = incoming_buffer[i + 2];
 8004a8a:	1ca7      	adds	r7, r4, #2
 8004a8c:	5df0      	ldrb	r0, [r6, r7]
          uint8_t len_high = incoming_buffer[i + 3];
 8004a8e:	1ce7      	adds	r7, r4, #3
 8004a90:	5df7      	ldrb	r7, [r6, r7]
          uint16_t packet_length = len_low | (len_high << 8);
 8004a92:	023f      	lsls	r7, r7, #8
 8004a94:	4338      	orrs	r0, r7
          if (packet_length > BUFFER_SIZE) {
 8004a96:	2780      	movs	r7, #128	@ 0x80
 8004a98:	007f      	lsls	r7, r7, #1
 8004a9a:	42b8      	cmp	r0, r7
 8004a9c:	d8d6      	bhi.n	8004a4c <USART2_IRQHandler+0xa0>
          uint16_t total_length = 2 + 2 + packet_length + 2;
 8004a9e:	0007      	movs	r7, r0
 8004aa0:	3706      	adds	r7, #6
 8004aa2:	b2bf      	uxth	r7, r7
          if (i + total_length <= s_len &&
 8004aa4:	193a      	adds	r2, r7, r4
 8004aa6:	4295      	cmp	r5, r2
 8004aa8:	dbdf      	blt.n	8004a6a <USART2_IRQHandler+0xbe>
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004aaa:	18b1      	adds	r1, r6, r2
 8004aac:	3902      	subs	r1, #2
 8004aae:	7809      	ldrb	r1, [r1, #0]
          if (i + total_length <= s_len &&
 8004ab0:	2955      	cmp	r1, #85	@ 0x55
 8004ab2:	d1da      	bne.n	8004a6a <USART2_IRQHandler+0xbe>
              incoming_buffer[i + total_length - 1] == 0xAA) {
 8004ab4:	18b2      	adds	r2, r6, r2
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	7812      	ldrb	r2, [r2, #0]
              incoming_buffer[i + total_length - 2] == 0x55 &&
 8004aba:	2aaa      	cmp	r2, #170	@ 0xaa
 8004abc:	d1d5      	bne.n	8004a6a <USART2_IRQHandler+0xbe>
            uint8_t packet_type = incoming_buffer[i + 5];
 8004abe:	3305      	adds	r3, #5
 8004ac0:	5cf3      	ldrb	r3, [r6, r3]
            switch (packet_type) {
 8004ac2:	2bfd      	cmp	r3, #253	@ 0xfd
 8004ac4:	d0c9      	beq.n	8004a5a <USART2_IRQHandler+0xae>
 8004ac6:	2bfe      	cmp	r3, #254	@ 0xfe
 8004ac8:	d0c3      	beq.n	8004a52 <USART2_IRQHandler+0xa6>
 8004aca:	2bfc      	cmp	r3, #252	@ 0xfc
 8004acc:	d0c8      	beq.n	8004a60 <USART2_IRQHandler+0xb4>
              chain_in_relay_handle(&incoming_buffer[i], total_length);
 8004ace:	0039      	movs	r1, r7
 8004ad0:	4648      	mov	r0, r9
 8004ad2:	f7ff f836 	bl	8003b42 <chain_in_relay_handle>
              break;
 8004ad6:	e7c0      	b.n	8004a5a <USART2_IRQHandler+0xae>
 8004ad8:	40004400 	.word	0x40004400
 8004adc:	40020030 	.word	0x40020030
 8004ae0:	200003b4 	.word	0x200003b4
 8004ae4:	200003b8 	.word	0x200003b8
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	200000c3 	.word	0x200000c3

08004af0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004af0:	4770      	bx	lr
	...

08004af4 <LL_TIM_OC_DisableFast>:
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d028      	beq.n	8004b4e <LL_TIM_OC_DisableFast+0x5a>
 8004afc:	d817      	bhi.n	8004b2e <LL_TIM_OC_DisableFast+0x3a>
 8004afe:	2910      	cmp	r1, #16
 8004b00:	d027      	beq.n	8004b52 <LL_TIM_OC_DisableFast+0x5e>
 8004b02:	d903      	bls.n	8004b0c <LL_TIM_OC_DisableFast+0x18>
 8004b04:	2940      	cmp	r1, #64	@ 0x40
 8004b06:	d12a      	bne.n	8004b5e <LL_TIM_OC_DisableFast+0x6a>
{
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e004      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b0c:	2901      	cmp	r1, #1
 8004b0e:	d022      	beq.n	8004b56 <LL_TIM_OC_DisableFast+0x62>
 8004b10:	2904      	cmp	r1, #4
 8004b12:	d122      	bne.n	8004b5a <LL_TIM_OC_DisableFast+0x66>
 8004b14:	3bff      	subs	r3, #255	@ 0xff
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004b16:	3018      	adds	r0, #24
 8004b18:	4a14      	ldr	r2, [pc, #80]	@ (8004b6c <LL_TIM_OC_DisableFast+0x78>)
 8004b1a:	5cd2      	ldrb	r2, [r2, r3]
 8004b1c:	1880      	adds	r0, r0, r2
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004b1e:	6802      	ldr	r2, [r0, #0]
 8004b20:	4913      	ldr	r1, [pc, #76]	@ (8004b70 <LL_TIM_OC_DisableFast+0x7c>)
 8004b22:	5cc9      	ldrb	r1, [r1, r3]
 8004b24:	2304      	movs	r3, #4
 8004b26:	408b      	lsls	r3, r1
 8004b28:	439a      	bics	r2, r3
 8004b2a:	6002      	str	r2, [r0, #0]
}
 8004b2c:	4770      	bx	lr
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	015b      	lsls	r3, r3, #5
 8004b32:	4299      	cmp	r1, r3
 8004b34:	d015      	beq.n	8004b62 <LL_TIM_OC_DisableFast+0x6e>
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	4299      	cmp	r1, r3
 8004b3c:	d101      	bne.n	8004b42 <LL_TIM_OC_DisableFast+0x4e>
{
 8004b3e:	2307      	movs	r3, #7
 8004b40:	e7e9      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d10d      	bne.n	8004b66 <LL_TIM_OC_DisableFast+0x72>
 8004b4a:	2305      	movs	r3, #5
 8004b4c:	e7e3      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b4e:	2304      	movs	r3, #4
 8004b50:	e7e1      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e7df      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b56:	2300      	movs	r3, #0
 8004b58:	e7dd      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	e7db      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	e7d9      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b62:	2306      	movs	r3, #6
 8004b64:	e7d7      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b66:	2308      	movs	r3, #8
 8004b68:	e7d5      	b.n	8004b16 <LL_TIM_OC_DisableFast+0x22>
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	08007310 	.word	0x08007310
 8004b70:	08007304 	.word	0x08007304

08004b74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	46c6      	mov	lr, r8
 8004b78:	b500      	push	{lr}
 8004b7a:	b0ac      	sub	sp, #176	@ 0xb0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b7c:	2214      	movs	r2, #20
 8004b7e:	2100      	movs	r1, #0
 8004b80:	a827      	add	r0, sp, #156	@ 0x9c
 8004b82:	f002 fafb 	bl	800717c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004b86:	2220      	movs	r2, #32
 8004b88:	2100      	movs	r1, #0
 8004b8a:	a81f      	add	r0, sp, #124	@ 0x7c
 8004b8c:	f002 faf6 	bl	800717c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004b90:	2230      	movs	r2, #48	@ 0x30
 8004b92:	2100      	movs	r1, #0
 8004b94:	a813      	add	r0, sp, #76	@ 0x4c
 8004b96:	f002 faf1 	bl	800717c <memset>

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b9a:	2228      	movs	r2, #40	@ 0x28
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	a809      	add	r0, sp, #36	@ 0x24
 8004ba0:	f002 faec 	bl	800717c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	039b      	lsls	r3, r3, #14
 8004ba8:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004baa:	a809      	add	r0, sp, #36	@ 0x24
 8004bac:	f001 fc8e 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d000      	beq.n	8004bb6 <MX_TIM1_Init+0x42>
 8004bb4:	e0a3      	b.n	8004cfe <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
  }

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb6:	2218      	movs	r2, #24
 8004bb8:	2100      	movs	r1, #0
 8004bba:	a803      	add	r0, sp, #12
 8004bbc:	f002 fade 	bl	800717c <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8004bc0:	4e50      	ldr	r6, [pc, #320]	@ (8004d04 <MX_TIM1_Init+0x190>)
 8004bc2:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004bc4:	2280      	movs	r2, #128	@ 0x80
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	6433      	str	r3, [r6, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004bcc:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004bce:	4013      	ands	r3, r2
 8004bd0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004bd2:	9b02      	ldr	r3, [sp, #8]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8004d08 <MX_TIM1_Init+0x194>)
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	213f      	movs	r1, #63	@ 0x3f
 8004bda:	438b      	bics	r3, r1
 8004bdc:	392b      	subs	r1, #43	@ 0x2b
 8004bde:	430b      	orrs	r3, r1
 8004be0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <MX_TIM1_Init+0x198>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	494a      	ldr	r1, [pc, #296]	@ (8004d10 <MX_TIM1_Init+0x19c>)
 8004be8:	400a      	ands	r2, r1
 8004bea:	2110      	movs	r1, #16
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4948      	ldr	r1, [pc, #288]	@ (8004d14 <MX_TIM1_Init+0x1a0>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	3120      	adds	r1, #32
 8004c04:	438a      	bics	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2780      	movs	r7, #128	@ 0x80
 8004c0c:	43ba      	bics	r2, r7
 8004c0e:	433a      	orrs	r2, r7
 8004c10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4940      	ldr	r1, [pc, #256]	@ (8004d18 <MX_TIM1_Init+0x1a4>)
 8004c16:	400a      	ands	r2, r1
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	0049      	lsls	r1, r1, #1
 8004c1c:	4688      	mov	r8, r1
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	493d      	ldr	r1, [pc, #244]	@ (8004d1c <MX_TIM1_Init+0x1a8>)
 8004c26:	400a      	ands	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004c2a:	a927      	add	r1, sp, #156	@ 0x9c
 8004c2c:	2400      	movs	r4, #0
 8004c2e:	800c      	strh	r4, [r1, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c30:	604c      	str	r4, [r1, #4]
  TIM_InitStruct.Autoreload = 79;
 8004c32:	234f      	movs	r3, #79	@ 0x4f
 8004c34:	608b      	str	r3, [r1, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004c36:	60cc      	str	r4, [r1, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004c38:	610c      	str	r4, [r1, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004c3a:	4d39      	ldr	r5, [pc, #228]	@ (8004d20 <MX_TIM1_Init+0x1ac>)
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f002 f921 	bl	8006e84 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	43bb      	bics	r3, r7
 8004c46:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004c48:	68ab      	ldr	r3, [r5, #8]
 8004c4a:	4a36      	ldr	r2, [pc, #216]	@ (8004d24 <MX_TIM1_Init+0x1b0>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004c50:	4a35      	ldr	r2, [pc, #212]	@ (8004d28 <MX_TIM1_Init+0x1b4>)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	2108      	movs	r1, #8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6013      	str	r3, [r2, #0]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004c5a:	2360      	movs	r3, #96	@ 0x60
 8004c5c:	931f      	str	r3, [sp, #124]	@ 0x7c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004c5e:	9420      	str	r4, [sp, #128]	@ 0x80
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004c60:	9421      	str	r4, [sp, #132]	@ 0x84
  TIM_OC_InitStruct.CompareValue = 0;
 8004c62:	9422      	str	r4, [sp, #136]	@ 0x88
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004c64:	9423      	str	r4, [sp, #140]	@ 0x8c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004c66:	9424      	str	r4, [sp, #144]	@ 0x90
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004c68:	9425      	str	r4, [sp, #148]	@ 0x94
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004c6a:	9426      	str	r4, [sp, #152]	@ 0x98
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004c6c:	aa1f      	add	r2, sp, #124	@ 0x7c
 8004c6e:	3907      	subs	r1, #7
 8004c70:	0028      	movs	r0, r5
 8004c72:	f002 f94f 	bl	8006f14 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8004c76:	2101      	movs	r1, #1
 8004c78:	0028      	movs	r0, r5
 8004c7a:	f7ff ff3b 	bl	8004af4 <LL_TIM_OC_DisableFast>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004c7e:	686b      	ldr	r3, [r5, #4]
 8004c80:	2270      	movs	r2, #112	@ 0x70
 8004c82:	4393      	bics	r3, r2
 8004c84:	606b      	str	r3, [r5, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004c86:	686b      	ldr	r3, [r5, #4]
 8004c88:	4a28      	ldr	r2, [pc, #160]	@ (8004d2c <MX_TIM1_Init+0x1b8>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004c8e:	68ab      	ldr	r3, [r5, #8]
 8004c90:	43bb      	bics	r3, r7
 8004c92:	60ab      	str	r3, [r5, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
  LL_TIM_DisableMasterSlaveMode(TIM1);
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004c94:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004c96:	9414      	str	r4, [sp, #80]	@ 0x50
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004c98:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_BDTRInitStruct.DeadTime = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	466a      	mov	r2, sp
 8004c9e:	2158      	movs	r1, #88	@ 0x58
 8004ca0:	1852      	adds	r2, r2, r1
 8004ca2:	7013      	strb	r3, [r2, #0]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004ca4:	466b      	mov	r3, sp
 8004ca6:	225a      	movs	r2, #90	@ 0x5a
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	801c      	strh	r4, [r3, #0]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	019b      	lsls	r3, r3, #6
 8004cb0:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004cb2:	9418      	str	r4, [sp, #96]	@ 0x60
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004cb4:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004cb6:	941a      	str	r4, [sp, #104]	@ 0x68
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	049b      	lsls	r3, r3, #18
 8004cbc:	931b      	str	r3, [sp, #108]	@ 0x6c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004cbe:	941c      	str	r4, [sp, #112]	@ 0x70
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004cc0:	941d      	str	r4, [sp, #116]	@ 0x74
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004cc2:	941e      	str	r4, [sp, #120]	@ 0x78
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8004cc4:	a913      	add	r1, sp, #76	@ 0x4c
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	f002 f952 	bl	8006f70 <LL_TIM_BDTR_Init>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8004ccc:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8004cce:	2301      	movs	r3, #1
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	6372      	str	r2, [r6, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8004cd4:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004cda:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END TIM1_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004cdc:	4643      	mov	r3, r8
 8004cde:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004ce0:	3bfe      	subs	r3, #254	@ 0xfe
 8004ce2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ce4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ce6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ce8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004cea:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	20a0      	movs	r0, #160	@ 0xa0
 8004cee:	a903      	add	r1, sp, #12
 8004cf0:	05c0      	lsls	r0, r0, #23
 8004cf2:	f001 fe41 	bl	8006978 <LL_GPIO_Init>

}
 8004cf6:	b02c      	add	sp, #176	@ 0xb0
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	46b8      	mov	r8, r7
 8004cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004cfe:	f7ff fb73 	bl	80043e8 <Error_Handler>
 8004d02:	e758      	b.n	8004bb6 <MX_TIM1_Init+0x42>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40020810 	.word	0x40020810
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	ffffbfef 	.word	0xffffbfef
 8004d14:	ffffcfff 	.word	0xffffcfff
 8004d18:	fffffcff 	.word	0xfffffcff
 8004d1c:	fffff3ff 	.word	0xfffff3ff
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	fffebff8 	.word	0xfffebff8
 8004d28:	40012c18 	.word	0x40012c18
 8004d2c:	ff0fffff 	.word	0xff0fffff

08004d30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d30:	b500      	push	{lr}
 8004d32:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d34:	2224      	movs	r2, #36	@ 0x24
 8004d36:	2100      	movs	r1, #0
 8004d38:	a803      	add	r0, sp, #12
 8004d3a:	f002 fa1f 	bl	800717c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d3e:	220c      	movs	r2, #12
 8004d40:	2100      	movs	r1, #0
 8004d42:	4668      	mov	r0, sp
 8004d44:	f002 fa1a 	bl	800717c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d48:	4813      	ldr	r0, [pc, #76]	@ (8004d98 <MX_TIM3_Init+0x68>)
 8004d4a:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <MX_TIM3_Init+0x6c>)
 8004d4c:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d52:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8004d54:	4a12      	ldr	r2, [pc, #72]	@ (8004da0 <MX_TIM3_Init+0x70>)
 8004d56:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d58:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d5a:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d60:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 15;
 8004d62:	220f      	movs	r2, #15
 8004d64:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d66:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 15;
 8004d68:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004d6a:	a903      	add	r1, sp, #12
 8004d6c:	f001 fcf8 	bl	8006760 <HAL_TIM_Encoder_Init>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d10a      	bne.n	8004d8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d78:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d7a:	4807      	ldr	r0, [pc, #28]	@ (8004d98 <MX_TIM3_Init+0x68>)
 8004d7c:	4669      	mov	r1, sp
 8004d7e:	f001 fdbf 	bl	8006900 <HAL_TIMEx_MasterConfigSynchronization>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d104      	bne.n	8004d90 <MX_TIM3_Init+0x60>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004d86:	b00d      	add	sp, #52	@ 0x34
 8004d88:	bd00      	pop	{pc}
    Error_Handler();
 8004d8a:	f7ff fb2d 	bl	80043e8 <Error_Handler>
 8004d8e:	e7f1      	b.n	8004d74 <MX_TIM3_Init+0x44>
    Error_Handler();
 8004d90:	f7ff fb2a 	bl	80043e8 <Error_Handler>
}
 8004d94:	e7f7      	b.n	8004d86 <MX_TIM3_Init+0x56>
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	20000bc0 	.word	0x20000bc0
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	0000ffff 	.word	0x0000ffff

08004da4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004da4:	b530      	push	{r4, r5, lr}
 8004da6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004da8:	ac01      	add	r4, sp, #4
 8004daa:	2214      	movs	r2, #20
 8004dac:	2100      	movs	r1, #0
 8004dae:	0020      	movs	r0, r4
 8004db0:	f002 f9e4 	bl	800717c <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004db4:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <MX_TIM14_Init+0x64>)
 8004db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db8:	2180      	movs	r1, #128	@ 0x80
 8004dba:	0209      	lsls	r1, r1, #8
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004dc6:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dc8:	4a10      	ldr	r2, [pc, #64]	@ (8004e0c <MX_TIM14_Init+0x68>)
 8004dca:	20c4      	movs	r0, #196	@ 0xc4
 8004dcc:	0080      	lsls	r0, r0, #2
 8004dce:	5813      	ldr	r3, [r2, r0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	2180      	movs	r1, #128	@ 0x80
 8004dd6:	05c9      	lsls	r1, r1, #23
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	031b      	lsls	r3, r3, #12
 8004de0:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(TIM14_IRQn);

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004de2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <MX_TIM14_Init+0x6c>)
 8004de4:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004de6:	2300      	movs	r3, #0
 8004de8:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 1699;
 8004dea:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <MX_TIM14_Init+0x70>)
 8004dec:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004dee:	60e3      	str	r3, [r4, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004df0:	4d09      	ldr	r5, [pc, #36]	@ (8004e18 <MX_TIM14_Init+0x74>)
 8004df2:	0021      	movs	r1, r4
 8004df4:	0028      	movs	r0, r5
 8004df6:	f002 f845 	bl	8006e84 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	2280      	movs	r2, #128	@ 0x80
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	602b      	str	r3, [r5, #0]
  LL_TIM_EnableARRPreload(TIM14);
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004e02:	b007      	add	sp, #28
 8004e04:	bd30      	pop	{r4, r5, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	e000e100 	.word	0xe000e100
 8004e10:	000018ff 	.word	0x000018ff
 8004e14:	000006a3 	.word	0x000006a3
 8004e18:	40002000 	.word	0x40002000

08004e1c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004e20:	ac01      	add	r4, sp, #4
 8004e22:	2214      	movs	r2, #20
 8004e24:	2100      	movs	r1, #0
 8004e26:	0020      	movs	r0, r4
 8004e28:	f002 f9a8 	bl	800717c <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004e2c:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <MX_TIM16_Init+0x64>)
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e30:	2180      	movs	r1, #128	@ 0x80
 8004e32:	0289      	lsls	r1, r1, #10
 8004e34:	430a      	orrs	r2, r1
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004e3e:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e40:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <MX_TIM16_Init+0x68>)
 8004e42:	20c5      	movs	r0, #197	@ 0xc5
 8004e44:	0080      	lsls	r0, r0, #2
 8004e46:	5819      	ldr	r1, [r3, r0]
 8004e48:	4a0f      	ldr	r2, [pc, #60]	@ (8004e88 <MX_TIM16_Init+0x6c>)
 8004e4a:	4011      	ands	r1, r2
 8004e4c:	2280      	movs	r2, #128	@ 0x80
 8004e4e:	01d2      	lsls	r2, r2, #7
 8004e50:	430a      	orrs	r2, r1
 8004e52:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e54:	2280      	movs	r2, #128	@ 0x80
 8004e56:	0392      	lsls	r2, r2, #14
 8004e58:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM16_IRQn);

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <MX_TIM16_Init+0x70>)
 8004e5c:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 29999;
 8004e62:	4a0b      	ldr	r2, [pc, #44]	@ (8004e90 <MX_TIM16_Init+0x74>)
 8004e64:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004e66:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004e68:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8004e6a:	4d0a      	ldr	r5, [pc, #40]	@ (8004e94 <MX_TIM16_Init+0x78>)
 8004e6c:	0021      	movs	r1, r4
 8004e6e:	0028      	movs	r0, r5
 8004e70:	f002 f808 	bl	8006e84 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	2280      	movs	r2, #128	@ 0x80
 8004e78:	4393      	bics	r3, r2
 8004e7a:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM16);
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004e7c:	b007      	add	sp, #28
 8004e7e:	bd30      	pop	{r4, r5, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	ffff00ff 	.word	0xffff00ff
 8004e8c:	000018ff 	.word	0x000018ff
 8004e90:	0000752f 	.word	0x0000752f
 8004e94:	40014400 	.word	0x40014400

08004e98 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004e98:	b530      	push	{r4, r5, lr}
 8004e9a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004e9c:	ac01      	add	r4, sp, #4
 8004e9e:	2214      	movs	r2, #20
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	0020      	movs	r0, r4
 8004ea4:	f002 f96a 	bl	800717c <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <MX_TIM17_Init+0x60>)
 8004eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eac:	2180      	movs	r1, #128	@ 0x80
 8004eae:	02c9      	lsls	r1, r1, #11
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004eba:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8004efc <MX_TIM17_Init+0x64>)
 8004ebe:	20c5      	movs	r0, #197	@ 0xc5
 8004ec0:	0080      	lsls	r0, r0, #2
 8004ec2:	5813      	ldr	r3, [r2, r0]
 8004ec4:	490e      	ldr	r1, [pc, #56]	@ (8004f00 <MX_TIM17_Init+0x68>)
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	2180      	movs	r1, #128	@ 0x80
 8004eca:	03c9      	lsls	r1, r1, #15
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed0:	6011      	str	r1, [r2, #0]
  NVIC_EnableIRQ(TIM17_IRQn);

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <MX_TIM17_Init+0x6c>)
 8004ed4:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 9999;
 8004eda:	4a0b      	ldr	r2, [pc, #44]	@ (8004f08 <MX_TIM17_Init+0x70>)
 8004edc:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004ede:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004ee0:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8004ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8004f0c <MX_TIM17_Init+0x74>)
 8004ee4:	0021      	movs	r1, r4
 8004ee6:	0028      	movs	r0, r5
 8004ee8:	f001 ffcc 	bl	8006e84 <LL_TIM_Init>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	2280      	movs	r2, #128	@ 0x80
 8004ef0:	4393      	bics	r3, r2
 8004ef2:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM17);
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004ef4:	b007      	add	sp, #28
 8004ef6:	bd30      	pop	{r4, r5, pc}
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	e000e100 	.word	0xe000e100
 8004f00:	ff00ffff 	.word	0xff00ffff
 8004f04:	000018ff 	.word	0x000018ff
 8004f08:	0000270f 	.word	0x0000270f
 8004f0c:	40014800 	.word	0x40014800

08004f10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004f10:	b510      	push	{r4, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	2214      	movs	r2, #20
 8004f18:	2100      	movs	r1, #0
 8004f1a:	a803      	add	r0, sp, #12
 8004f1c:	f002 f92e 	bl	800717c <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8004f20:	6822      	ldr	r2, [r4, #0]
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_TIM_Encoder_MspInit+0x54>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Encoder_MspInit+0x1c>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004f28:	b008      	add	sp, #32
 8004f2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <HAL_TIM_Encoder_MspInit+0x58>)
 8004f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f30:	2102      	movs	r1, #2
 8004f32:	430a      	orrs	r2, r1
 8004f34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f38:	400a      	ands	r2, r1
 8004f3a:	9201      	str	r2, [sp, #4]
 8004f3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f3e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004f40:	2201      	movs	r2, #1
 8004f42:	4310      	orrs	r0, r2
 8004f44:	6358      	str	r0, [r3, #52]	@ 0x34
 8004f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f48:	4013      	ands	r3, r2
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f4e:	23c0      	movs	r3, #192	@ 0xc0
 8004f50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f52:	9104      	str	r1, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004f54:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f56:	20a0      	movs	r0, #160	@ 0xa0
 8004f58:	a903      	add	r1, sp, #12
 8004f5a:	05c0      	lsls	r0, r0, #23
 8004f5c:	f000 fe34 	bl	8005bc8 <HAL_GPIO_Init>
}
 8004f60:	e7e2      	b.n	8004f28 <HAL_TIM_Encoder_MspInit+0x18>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40021000 	.word	0x40021000

08004f6c <usart1_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart1_hart_init(void) {
 8004f6c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	2101      	movs	r1, #1
 8004f74:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004f78:	4a24      	ldr	r2, [pc, #144]	@ (800500c <usart1_hart_init+0xa0>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	200c      	movs	r0, #12
 8004f7e:	4383      	bics	r3, r0
 8004f80:	4303      	orrs	r3, r0
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	2410      	movs	r4, #16
 8004f94:	4323      	orrs	r3, r4
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005010 <usart1_hart_init+0xa4>)
 8004f9e:	481d      	ldr	r0, [pc, #116]	@ (8005014 <usart1_hart_init+0xa8>)
 8004fa0:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_1,
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address where received data will be stored
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
                          (uint32_t)g_uart_in_rx_buf[g_uart_in_rx_index]);
 8004fa2:	481d      	ldr	r0, [pc, #116]	@ (8005018 <usart1_hart_init+0xac>)
 8004fa4:	7800      	ldrb	r0, [r0, #0]
 8004fa6:	0240      	lsls	r0, r0, #9
 8004fa8:	4d1c      	ldr	r5, [pc, #112]	@ (800501c <usart1_hart_init+0xb0>)
 8004faa:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004fac:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004fae:	6858      	ldr	r0, [r3, #4]
 8004fb0:	0c00      	lsrs	r0, r0, #16
 8004fb2:	0400      	lsls	r0, r0, #16
 8004fb4:	2580      	movs	r5, #128	@ 0x80
 8004fb6:	006d      	lsls	r5, r5, #1
 8004fb8:	4328      	orrs	r0, r5
 8004fba:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	3dfe      	subs	r5, #254	@ 0xfe
 8004fc0:	4328      	orrs	r0, r5
 8004fc2:	6018      	str	r0, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	2608      	movs	r6, #8
 8004fc8:	4330      	orrs	r0, r6
 8004fca:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	4308      	orrs	r0, r1
 8004fd0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004fda:	6893      	ldr	r3, [r2, #8]
 8004fdc:	3638      	adds	r6, #56	@ 0x38
 8004fde:	4333      	orrs	r3, r6
 8004fe0:	6093      	str	r3, [r2, #8]
 8004fe2:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004fe6:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <usart1_hart_init+0xb4>)
 8004fea:	480e      	ldr	r0, [pc, #56]	@ (8005024 <usart1_hart_init+0xb8>)
 8004fec:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff2:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004ff6:	6891      	ldr	r1, [r2, #8]
 8004ff8:	3470      	adds	r4, #112	@ 0x70
 8004ffa:	4321      	orrs	r1, r4
 8004ffc:	6091      	str	r1, [r2, #8]
 8004ffe:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	432a      	orrs	r2, r5
 8005006:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART1 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART1);
  // Enable DMA transfer complete interrupt for USART1 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
}
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	40013800 	.word	0x40013800
 8005010:	40020008 	.word	0x40020008
 8005014:	40013824 	.word	0x40013824
 8005018:	200003b5 	.word	0x200003b5
 800501c:	200007b8 	.word	0x200007b8
 8005020:	4002001c 	.word	0x4002001c
 8005024:	40013828 	.word	0x40013828

08005028 <MX_USART1_UART_Init>:
void MX_USART1_UART_Init(void) {
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	46de      	mov	lr, fp
 800502c:	4657      	mov	r7, sl
 800502e:	464e      	mov	r6, r9
 8005030:	4645      	mov	r5, r8
 8005032:	b5e0      	push	{r5, r6, r7, lr}
 8005034:	b09b      	sub	sp, #108	@ 0x6c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005036:	2220      	movs	r2, #32
 8005038:	2100      	movs	r1, #0
 800503a:	a812      	add	r0, sp, #72	@ 0x48
 800503c:	f002 f89e 	bl	800717c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	2218      	movs	r2, #24
 8005042:	2100      	movs	r1, #0
 8005044:	a80c      	add	r0, sp, #48	@ 0x30
 8005046:	f002 f899 	bl	800717c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800504a:	2228      	movs	r2, #40	@ 0x28
 800504c:	2100      	movs	r1, #0
 800504e:	a802      	add	r0, sp, #8
 8005050:	f002 f894 	bl	800717c <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005054:	2301      	movs	r3, #1
 8005056:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005058:	a802      	add	r0, sp, #8
 800505a:	f001 fa37 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 800505e:	2800      	cmp	r0, #0
 8005060:	d000      	beq.n	8005064 <MX_USART1_UART_Init+0x3c>
 8005062:	e0c6      	b.n	80051f2 <MX_USART1_UART_Init+0x1ca>
  SET_BIT(RCC->APBENR2, Periphs);
 8005064:	4b64      	ldr	r3, [pc, #400]	@ (80051f8 <MX_USART1_UART_Init+0x1d0>)
 8005066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005068:	2180      	movs	r1, #128	@ 0x80
 800506a:	01c9      	lsls	r1, r1, #7
 800506c:	430a      	orrs	r2, r1
 800506e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005072:	400a      	ands	r2, r1
 8005074:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005076:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8005078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800507a:	2502      	movs	r5, #2
 800507c:	432a      	orrs	r2, r5
 800507e:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	402b      	ands	r3, r5
 8005084:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005086:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005088:	2340      	movs	r3, #64	@ 0x40
 800508a:	4698      	mov	r8, r3
 800508c:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800508e:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005090:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005092:	2400      	movs	r4, #0
 8005094:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005096:	2601      	movs	r6, #1
 8005098:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800509a:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509c:	4b57      	ldr	r3, [pc, #348]	@ (80051fc <MX_USART1_UART_Init+0x1d4>)
 800509e:	4699      	mov	r9, r3
 80050a0:	a90c      	add	r1, sp, #48	@ 0x30
 80050a2:	0018      	movs	r0, r3
 80050a4:	f001 fc68 	bl	8006978 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80050a8:	2780      	movs	r7, #128	@ 0x80
 80050aa:	970c      	str	r7, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80050ac:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80050ae:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80050b0:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80050b2:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80050b4:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	a90c      	add	r1, sp, #48	@ 0x30
 80050b8:	4648      	mov	r0, r9
 80050ba:	f001 fc5d 	bl	8006978 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80050be:	4a50      	ldr	r2, [pc, #320]	@ (8005200 <MX_USART1_UART_Init+0x1d8>)
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	213f      	movs	r1, #63	@ 0x3f
 80050c4:	468a      	mov	sl, r1
 80050c6:	438b      	bics	r3, r1
 80050c8:	390d      	subs	r1, #13
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80050ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005204 <MX_USART1_UART_Init+0x1dc>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	494d      	ldr	r1, [pc, #308]	@ (8005208 <MX_USART1_UART_Init+0x1e0>)
 80050d4:	4689      	mov	r9, r1
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	494b      	ldr	r1, [pc, #300]	@ (800520c <MX_USART1_UART_Init+0x1e4>)
 80050de:	468c      	mov	ip, r1
 80050e0:	400a      	ands	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	351e      	adds	r5, #30
 80050e8:	43aa      	bics	r2, r5
 80050ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4641      	mov	r1, r8
 80050f0:	438a      	bics	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	43ba      	bics	r2, r7
 80050f8:	433a      	orrs	r2, r7
 80050fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4844      	ldr	r0, [pc, #272]	@ (8005210 <MX_USART1_UART_Init+0x1e8>)
 8005100:	4002      	ands	r2, r0
 8005102:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4943      	ldr	r1, [pc, #268]	@ (8005214 <MX_USART1_UART_Init+0x1ec>)
 8005108:	468b      	mov	fp, r1
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800510e:	4a42      	ldr	r2, [pc, #264]	@ (8005218 <MX_USART1_UART_Init+0x1f0>)
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	4651      	mov	r1, sl
 8005114:	438b      	bics	r3, r1
 8005116:	390c      	subs	r1, #12
 8005118:	430b      	orrs	r3, r1
 800511a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800511c:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <MX_USART1_UART_Init+0x1f4>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4649      	mov	r1, r9
 8005122:	400a      	ands	r2, r1
 8005124:	2110      	movs	r1, #16
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4661      	mov	r1, ip
 800512e:	400a      	ands	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	43aa      	bics	r2, r5
 8005136:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4641      	mov	r1, r8
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	43ba      	bics	r2, r7
 8005144:	433a      	orrs	r2, r7
 8005146:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4002      	ands	r2, r0
 800514c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	4659      	mov	r1, fp
 8005152:	400a      	ands	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005156:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <MX_USART1_UART_Init+0x1f8>)
 8005158:	21c6      	movs	r1, #198	@ 0xc6
 800515a:	0089      	lsls	r1, r1, #2
 800515c:	5853      	ldr	r3, [r2, r1]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	051b      	lsls	r3, r3, #20
 8005168:	6013      	str	r3, [r2, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800516a:	9412      	str	r4, [sp, #72]	@ 0x48
  USART_InitStruct.BaudRate = 115200;
 800516c:	23e1      	movs	r3, #225	@ 0xe1
 800516e:	025b      	lsls	r3, r3, #9
 8005170:	9313      	str	r3, [sp, #76]	@ 0x4c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005172:	9414      	str	r4, [sp, #80]	@ 0x50
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005174:	9415      	str	r4, [sp, #84]	@ 0x54
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005176:	9416      	str	r4, [sp, #88]	@ 0x58
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005178:	230c      	movs	r3, #12
 800517a:	9317      	str	r3, [sp, #92]	@ 0x5c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800517c:	9418      	str	r4, [sp, #96]	@ 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800517e:	9419      	str	r4, [sp, #100]	@ 0x64
  LL_USART_Init(USART1, &USART_InitStruct);
 8005180:	4c28      	ldr	r4, [pc, #160]	@ (8005224 <MX_USART1_UART_Init+0x1fc>)
 8005182:	a912      	add	r1, sp, #72	@ 0x48
 8005184:	0020      	movs	r0, r4
 8005186:	f001 ffa3 	bl	80070d0 <LL_USART_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518e:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	60a3      	str	r3, [r4, #8]
 800519a:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a2:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	491f      	ldr	r1, [pc, #124]	@ (8005228 <MX_USART1_UART_Init+0x200>)
 80051aa:	400b      	ands	r3, r1
 80051ac:	60a3      	str	r3, [r4, #8]
 80051ae:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <MX_USART1_UART_Init+0x204>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ba:	6863      	ldr	r3, [r4, #4]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005230 <MX_USART1_UART_Init+0x208>)
 80051be:	4013      	ands	r3, r2
 80051c0:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	222a      	movs	r2, #42	@ 0x2a
 80051c6:	4393      	bics	r3, r2
 80051c8:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	4333      	orrs	r3, r6
 80051ce:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80051d0:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <MX_USART1_UART_Init+0x1fc>)
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	d5fb      	bpl.n	80051d0 <MX_USART1_UART_Init+0x1a8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80051d8:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <MX_USART1_UART_Init+0x1fc>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	025b      	lsls	r3, r3, #9
 80051de:	d5f7      	bpl.n	80051d0 <MX_USART1_UART_Init+0x1a8>
  usart1_hart_init();
 80051e0:	f7ff fec4 	bl	8004f6c <usart1_hart_init>
}
 80051e4:	b01b      	add	sp, #108	@ 0x6c
 80051e6:	bcf0      	pop	{r4, r5, r6, r7}
 80051e8:	46bb      	mov	fp, r7
 80051ea:	46b2      	mov	sl, r6
 80051ec:	46a9      	mov	r9, r5
 80051ee:	46a0      	mov	r8, r4
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80051f2:	f7ff f8f9 	bl	80043e8 <Error_Handler>
 80051f6:	e735      	b.n	8005064 <MX_USART1_UART_Init+0x3c>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	50000400 	.word	0x50000400
 8005200:	40020800 	.word	0x40020800
 8005204:	40020008 	.word	0x40020008
 8005208:	ffffbfef 	.word	0xffffbfef
 800520c:	ffffcfff 	.word	0xffffcfff
 8005210:	fffffcff 	.word	0xfffffcff
 8005214:	fffff3ff 	.word	0xfffff3ff
 8005218:	40020804 	.word	0x40020804
 800521c:	4002001c 	.word	0x4002001c
 8005220:	e000e100 	.word	0xe000e100
 8005224:	40013800 	.word	0x40013800
 8005228:	f1ffffff 	.word	0xf1ffffff
 800522c:	dfffffff 	.word	0xdfffffff
 8005230:	ffffb7ff 	.word	0xffffb7ff

08005234 <usart2_hart_init>:
 * reception.
 *
 * @param  None
 * @retval None
 */
void usart2_hart_init(void) {
 8005234:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005236:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	2101      	movs	r1, #1
 800523c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005240:	4a24      	ldr	r2, [pc, #144]	@ (80052d4 <usart2_hart_init+0xa0>)
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	200c      	movs	r0, #12
 8005246:	4383      	bics	r3, r0
 8005248:	4303      	orrs	r3, r0
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005250:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005258:	6813      	ldr	r3, [r2, #0]
 800525a:	2410      	movs	r4, #16
 800525c:	4323      	orrs	r3, r4
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005264:	4b1c      	ldr	r3, [pc, #112]	@ (80052d8 <usart2_hart_init+0xa4>)
 8005266:	481d      	ldr	r0, [pc, #116]	@ (80052dc <usart2_hart_init+0xa8>)
 8005268:	6098      	str	r0, [r3, #8]
  LL_DMA_SetPeriphAddress(
      DMA1, LL_DMA_CHANNEL_3,
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
  // Set the memory address for storing the received data
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
                          (uint32_t)g_uart_out_rx_buf[g_uart_out_rx_index]);
 800526a:	481d      	ldr	r0, [pc, #116]	@ (80052e0 <usart2_hart_init+0xac>)
 800526c:	7800      	ldrb	r0, [r0, #0]
 800526e:	0240      	lsls	r0, r0, #9
 8005270:	4d1c      	ldr	r5, [pc, #112]	@ (80052e4 <usart2_hart_init+0xb0>)
 8005272:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005274:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005276:	6858      	ldr	r0, [r3, #4]
 8005278:	0c00      	lsrs	r0, r0, #16
 800527a:	0400      	lsls	r0, r0, #16
 800527c:	2580      	movs	r5, #128	@ 0x80
 800527e:	006d      	lsls	r5, r5, #1
 8005280:	4328      	orrs	r0, r5
 8005282:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	3dfe      	subs	r5, #254	@ 0xfe
 8005288:	4328      	orrs	r0, r5
 800528a:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	2608      	movs	r6, #8
 8005290:	4330      	orrs	r0, r6
 8005292:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	4308      	orrs	r0, r1
 8005298:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80052a2:	6893      	ldr	r3, [r2, #8]
 80052a4:	3638      	adds	r6, #56	@ 0x38
 80052a6:	4333      	orrs	r3, r6
 80052a8:	6093      	str	r3, [r2, #8]
 80052aa:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80052ae:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80052b0:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <usart2_hart_init+0xb4>)
 80052b2:	480e      	ldr	r0, [pc, #56]	@ (80052ec <usart2_hart_init+0xb8>)
 80052b4:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80052be:	6891      	ldr	r1, [r2, #8]
 80052c0:	3470      	adds	r4, #112	@ 0x70
 80052c2:	4321      	orrs	r1, r4
 80052c4:	6091      	str	r1, [r2, #8]
 80052c6:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	432a      	orrs	r2, r5
 80052ce:	601a      	str	r2, [r3, #0]
      LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
  // Enable USART2 TX DMA request for data transmission
  LL_USART_EnableDMAReq_TX(USART2);
  // Enable DMA transfer complete interrupt for USART2 TX
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
}
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	40004400 	.word	0x40004400
 80052d8:	40020030 	.word	0x40020030
 80052dc:	40004424 	.word	0x40004424
 80052e0:	200003b4 	.word	0x200003b4
 80052e4:	200003b8 	.word	0x200003b8
 80052e8:	40020044 	.word	0x40020044
 80052ec:	40004428 	.word	0x40004428

080052f0 <MX_USART2_UART_Init>:
void MX_USART2_UART_Init(void) {
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	46de      	mov	lr, fp
 80052f4:	4657      	mov	r7, sl
 80052f6:	464e      	mov	r6, r9
 80052f8:	4645      	mov	r5, r8
 80052fa:	b5e0      	push	{r5, r6, r7, lr}
 80052fc:	b091      	sub	sp, #68	@ 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80052fe:	2620      	movs	r6, #32
 8005300:	2220      	movs	r2, #32
 8005302:	2100      	movs	r1, #0
 8005304:	a808      	add	r0, sp, #32
 8005306:	f001 ff39 	bl	800717c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800530a:	2218      	movs	r2, #24
 800530c:	2100      	movs	r1, #0
 800530e:	a802      	add	r0, sp, #8
 8005310:	f001 ff34 	bl	800717c <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 8005314:	4b56      	ldr	r3, [pc, #344]	@ (8005470 <MX_USART2_UART_Init+0x180>)
 8005316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005318:	2180      	movs	r1, #128	@ 0x80
 800531a:	0289      	lsls	r1, r1, #10
 800531c:	430a      	orrs	r2, r1
 800531e:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8005320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005322:	400a      	ands	r2, r1
 8005324:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005326:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8005328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532a:	2501      	movs	r5, #1
 800532c:	432a      	orrs	r2, r5
 800532e:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005332:	402b      	ands	r3, r5
 8005334:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005336:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005338:	2304      	movs	r3, #4
 800533a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800533c:	2402      	movs	r4, #2
 800533e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005340:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005342:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005344:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005346:	27a0      	movs	r7, #160	@ 0xa0
 8005348:	05ff      	lsls	r7, r7, #23
 800534a:	a902      	add	r1, sp, #8
 800534c:	0038      	movs	r0, r7
 800534e:	f001 fb13 	bl	8006978 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8005352:	2308      	movs	r3, #8
 8005354:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005356:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005358:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800535a:	2400      	movs	r4, #0
 800535c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800535e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005360:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005362:	a902      	add	r1, sp, #8
 8005364:	0038      	movs	r0, r7
 8005366:	f001 fb07 	bl	8006978 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800536a:	4a42      	ldr	r2, [pc, #264]	@ (8005474 <MX_USART2_UART_Init+0x184>)
 800536c:	6813      	ldr	r3, [r2, #0]
 800536e:	213f      	movs	r1, #63	@ 0x3f
 8005370:	468a      	mov	sl, r1
 8005372:	438b      	bics	r3, r1
 8005374:	390b      	subs	r1, #11
 8005376:	430b      	orrs	r3, r1
 8005378:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800537a:	4b3f      	ldr	r3, [pc, #252]	@ (8005478 <MX_USART2_UART_Init+0x188>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	493f      	ldr	r1, [pc, #252]	@ (800547c <MX_USART2_UART_Init+0x18c>)
 8005380:	4689      	mov	r9, r1
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	493d      	ldr	r1, [pc, #244]	@ (8005480 <MX_USART2_UART_Init+0x190>)
 800538a:	4688      	mov	r8, r1
 800538c:	400a      	ands	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	43b2      	bics	r2, r6
 8005394:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2140      	movs	r1, #64	@ 0x40
 800539a:	468c      	mov	ip, r1
 800539c:	438a      	bics	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2780      	movs	r7, #128	@ 0x80
 80053a4:	43ba      	bics	r2, r7
 80053a6:	433a      	orrs	r2, r7
 80053a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4835      	ldr	r0, [pc, #212]	@ (8005484 <MX_USART2_UART_Init+0x194>)
 80053ae:	4002      	ands	r2, r0
 80053b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4934      	ldr	r1, [pc, #208]	@ (8005488 <MX_USART2_UART_Init+0x198>)
 80053b6:	468b      	mov	fp, r1
 80053b8:	400a      	ands	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <MX_USART2_UART_Init+0x19c>)
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	4651      	mov	r1, sl
 80053c2:	438b      	bics	r3, r1
 80053c4:	390a      	subs	r1, #10
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80053ca:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <MX_USART2_UART_Init+0x1a0>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4649      	mov	r1, r9
 80053d0:	400a      	ands	r2, r1
 80053d2:	2110      	movs	r1, #16
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4641      	mov	r1, r8
 80053dc:	400a      	ands	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	43b2      	bics	r2, r6
 80053e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4661      	mov	r1, ip
 80053ea:	438a      	bics	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	43ba      	bics	r2, r7
 80053f2:	433a      	orrs	r2, r7
 80053f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4002      	ands	r2, r0
 80053fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4659      	mov	r1, fp
 8005400:	400a      	ands	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005404:	4b23      	ldr	r3, [pc, #140]	@ (8005494 <MX_USART2_UART_Init+0x1a4>)
 8005406:	21c7      	movs	r1, #199	@ 0xc7
 8005408:	0089      	lsls	r1, r1, #2
 800540a:	585a      	ldr	r2, [r3, r1]
 800540c:	20ff      	movs	r0, #255	@ 0xff
 800540e:	4382      	bics	r2, r0
 8005410:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005412:	2280      	movs	r2, #128	@ 0x80
 8005414:	0552      	lsls	r2, r2, #21
 8005416:	601a      	str	r2, [r3, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005418:	9408      	str	r4, [sp, #32]
  USART_InitStruct.BaudRate = 115200;
 800541a:	23e1      	movs	r3, #225	@ 0xe1
 800541c:	025b      	lsls	r3, r3, #9
 800541e:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005420:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005422:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005424:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005426:	230c      	movs	r3, #12
 8005428:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800542a:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800542c:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800542e:	4c1a      	ldr	r4, [pc, #104]	@ (8005498 <MX_USART2_UART_Init+0x1a8>)
 8005430:	a908      	add	r1, sp, #32
 8005432:	0020      	movs	r0, r4
 8005434:	f001 fe4c 	bl	80070d0 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <MX_USART2_UART_Init+0x1ac>)
 800543c:	4013      	ands	r3, r2
 800543e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005440:	68a3      	ldr	r3, [r4, #8]
 8005442:	222a      	movs	r2, #42	@ 0x2a
 8005444:	4393      	bics	r3, r2
 8005446:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	432b      	orrs	r3, r5
 800544c:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <MX_USART2_UART_Init+0x1a8>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	d5fb      	bpl.n	800544e <MX_USART2_UART_Init+0x15e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005456:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <MX_USART2_UART_Init+0x1a8>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	025b      	lsls	r3, r3, #9
 800545c:	d5f7      	bpl.n	800544e <MX_USART2_UART_Init+0x15e>
  usart2_hart_init();
 800545e:	f7ff fee9 	bl	8005234 <usart2_hart_init>
}
 8005462:	b011      	add	sp, #68	@ 0x44
 8005464:	bcf0      	pop	{r4, r5, r6, r7}
 8005466:	46bb      	mov	fp, r7
 8005468:	46b2      	mov	sl, r6
 800546a:	46a9      	mov	r9, r5
 800546c:	46a0      	mov	r8, r4
 800546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	40020808 	.word	0x40020808
 8005478:	40020030 	.word	0x40020030
 800547c:	ffffbfef 	.word	0xffffbfef
 8005480:	ffffcfff 	.word	0xffffcfff
 8005484:	fffffcff 	.word	0xfffffcff
 8005488:	fffff3ff 	.word	0xfffff3ff
 800548c:	4002080c 	.word	0x4002080c
 8005490:	40020044 	.word	0x40020044
 8005494:	e000e100 	.word	0xe000e100
 8005498:	40004400 	.word	0x40004400
 800549c:	ffffb7ff 	.word	0xffffb7ff

080054a0 <usart1_transmit_dma>:
 *            contain the data that you want to send over USART1.
 * @param size Size of the data to be transmitted, specifying the number of
 *             bytes in the buffer to send.
 * @retval None
 */
void usart1_transmit_dma(uint8_t *buf, uint16_t size) {
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	000c      	movs	r4, r1
  // Check if the previous transmission is complete
  if (g_uart_in_transmit_complete) {
 80054a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005520 <usart1_transmit_dma+0x80>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <usart1_transmit_dma+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80054ac:	b672      	cpsid	i
    __disable_irq(); // Disable interrupts to protect the critical section
    g_uart_in_transmit_complete = 0; // Mark transmission as in progress
 80054ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005520 <usart1_transmit_dma+0x80>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80054b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <usart1_transmit_dma+0x84>)
 80054b6:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80054b8:	6853      	ldr	r3, [r2, #4]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	0419      	lsls	r1, r3, #16
 80054be:	4321      	orrs	r1, r4
 80054c0:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	430b      	orrs	r3, r1
 80054c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054ca:	b662      	cpsie	i
      tx_in_buffer.packet_count++;

      __enable_irq(); // Re-enable interrupts after critical section
    }
  }
}
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
    if (tx_in_buffer.packet_count < MAX_QUEUE_SIZE && size < BUFFER_SIZE) {
 80054ce:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <usart1_transmit_dma+0x88>)
 80054d0:	4a16      	ldr	r2, [pc, #88]	@ (800552c <usart1_transmit_dma+0x8c>)
 80054d2:	5c9b      	ldrb	r3, [r3, r2]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d8f8      	bhi.n	80054cc <usart1_transmit_dma+0x2c>
 80054da:	29ff      	cmp	r1, #255	@ 0xff
 80054dc:	d8f6      	bhi.n	80054cc <usart1_transmit_dma+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 80054de:	b672      	cpsid	i
      memcpy(tx_in_buffer.send_queue[tx_in_buffer.tail].data, buf, size);
 80054e0:	4d11      	ldr	r5, [pc, #68]	@ (8005528 <usart1_transmit_dma+0x88>)
 80054e2:	4e13      	ldr	r6, [pc, #76]	@ (8005530 <usart1_transmit_dma+0x90>)
 80054e4:	5dab      	ldrb	r3, [r5, r6]
 80054e6:	01da      	lsls	r2, r3, #7
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	195b      	adds	r3, r3, r5
 80054ee:	000a      	movs	r2, r1
 80054f0:	0001      	movs	r1, r0
 80054f2:	0018      	movs	r0, r3
 80054f4:	f001 fe6e 	bl	80071d4 <memcpy>
      tx_in_buffer.send_queue[tx_in_buffer.tail].length = size;
 80054f8:	5dab      	ldrb	r3, [r5, r6]
 80054fa:	01da      	lsls	r2, r3, #7
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	18eb      	adds	r3, r5, r3
 8005502:	3301      	adds	r3, #1
 8005504:	33ff      	adds	r3, #255	@ 0xff
 8005506:	801c      	strh	r4, [r3, #0]
      tx_in_buffer.tail = (tx_in_buffer.tail + 1) % MAX_QUEUE_SIZE;
 8005508:	5daa      	ldrb	r2, [r5, r6]
 800550a:	3201      	adds	r2, #1
 800550c:	2301      	movs	r3, #1
 800550e:	4013      	ands	r3, r2
 8005510:	55ab      	strb	r3, [r5, r6]
      tx_in_buffer.packet_count++;
 8005512:	4a06      	ldr	r2, [pc, #24]	@ (800552c <usart1_transmit_dma+0x8c>)
 8005514:	5cab      	ldrb	r3, [r5, r2]
 8005516:	3301      	adds	r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	54ab      	strb	r3, [r5, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 800551c:	b662      	cpsie	i
}
 800551e:	e7d5      	b.n	80054cc <usart1_transmit_dma+0x2c>
 8005520:	200000c5 	.word	0x200000c5
 8005524:	4002001c 	.word	0x4002001c
 8005528:	20000e14 	.word	0x20000e14
 800552c:	00000206 	.word	0x00000206
 8005530:	00000205 	.word	0x00000205

08005534 <usart2_transmit_dma>:
 *            contain the data that you want to send over USART2.
 * @param size Size of the data to be transmitted, specifying the number of
 *             bytes in the buffer to send.
 * @retval None
 */
void usart2_transmit_dma(uint8_t *buf, uint16_t size) {
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	000c      	movs	r4, r1
  // Check if the previous transmission is complete
  if (g_uart_out_transmit_complete) {
 8005538:	4b1e      	ldr	r3, [pc, #120]	@ (80055b4 <usart2_transmit_dma+0x80>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <usart2_transmit_dma+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8005540:	b672      	cpsid	i
    __disable_irq(); // Disable interrupts to protect the critical section
    g_uart_out_transmit_complete = 0; // Mark transmission as in progress
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <usart2_transmit_dma+0x80>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005548:	4a1b      	ldr	r2, [pc, #108]	@ (80055b8 <usart2_transmit_dma+0x84>)
 800554a:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800554c:	6853      	ldr	r3, [r2, #4]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	0419      	lsls	r1, r3, #16
 8005552:	4321      	orrs	r1, r4
 8005554:	6051      	str	r1, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	430b      	orrs	r3, r1
 800555c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800555e:	b662      	cpsie	i
      tx_out_buffer.packet_count++;

      __enable_irq(); // Re-enable interrupts after critical section
    }
  }
}
 8005560:	bd70      	pop	{r4, r5, r6, pc}
    if (tx_out_buffer.packet_count < MAX_QUEUE_SIZE && size < BUFFER_SIZE) {
 8005562:	4b16      	ldr	r3, [pc, #88]	@ (80055bc <usart2_transmit_dma+0x88>)
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <usart2_transmit_dma+0x8c>)
 8005566:	5c9b      	ldrb	r3, [r3, r2]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d8f8      	bhi.n	8005560 <usart2_transmit_dma+0x2c>
 800556e:	29ff      	cmp	r1, #255	@ 0xff
 8005570:	d8f6      	bhi.n	8005560 <usart2_transmit_dma+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8005572:	b672      	cpsid	i
      memcpy(tx_out_buffer.send_queue[tx_out_buffer.tail].data, buf, size);
 8005574:	4d11      	ldr	r5, [pc, #68]	@ (80055bc <usart2_transmit_dma+0x88>)
 8005576:	4e13      	ldr	r6, [pc, #76]	@ (80055c4 <usart2_transmit_dma+0x90>)
 8005578:	5dab      	ldrb	r3, [r5, r6]
 800557a:	01da      	lsls	r2, r3, #7
 800557c:	189b      	adds	r3, r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	195b      	adds	r3, r3, r5
 8005582:	000a      	movs	r2, r1
 8005584:	0001      	movs	r1, r0
 8005586:	0018      	movs	r0, r3
 8005588:	f001 fe24 	bl	80071d4 <memcpy>
      tx_out_buffer.send_queue[tx_out_buffer.tail].length = size;
 800558c:	5dab      	ldrb	r3, [r5, r6]
 800558e:	01da      	lsls	r2, r3, #7
 8005590:	189b      	adds	r3, r3, r2
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	18eb      	adds	r3, r5, r3
 8005596:	3301      	adds	r3, #1
 8005598:	33ff      	adds	r3, #255	@ 0xff
 800559a:	801c      	strh	r4, [r3, #0]
      tx_out_buffer.tail = (tx_out_buffer.tail + 1) % MAX_QUEUE_SIZE;
 800559c:	5daa      	ldrb	r2, [r5, r6]
 800559e:	3201      	adds	r2, #1
 80055a0:	2301      	movs	r3, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	55ab      	strb	r3, [r5, r6]
      tx_out_buffer.packet_count++;
 80055a6:	4a06      	ldr	r2, [pc, #24]	@ (80055c0 <usart2_transmit_dma+0x8c>)
 80055a8:	5cab      	ldrb	r3, [r5, r2]
 80055aa:	3301      	adds	r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	54ab      	strb	r3, [r5, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 80055b0:	b662      	cpsie	i
}
 80055b2:	e7d5      	b.n	8005560 <usart2_transmit_dma+0x2c>
 80055b4:	200000c4 	.word	0x200000c4
 80055b8:	40020044 	.word	0x40020044
 80055bc:	20000c0c 	.word	0x20000c0c
 80055c0:	00000206 	.word	0x00000206
 80055c4:	00000205 	.word	0x00000205

080055c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055c8:	480d      	ldr	r0, [pc, #52]	@ (8005600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80055cc:	f7ff fa90 	bl	8004af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055d0:	480c      	ldr	r0, [pc, #48]	@ (8005604 <LoopForever+0x6>)
  ldr r1, =_edata
 80055d2:	490d      	ldr	r1, [pc, #52]	@ (8005608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055d4:	4a0d      	ldr	r2, [pc, #52]	@ (800560c <LoopForever+0xe>)
  movs r3, #0
 80055d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d8:	e002      	b.n	80055e0 <LoopCopyDataInit>

080055da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055de:	3304      	adds	r3, #4

080055e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e4:	d3f9      	bcc.n	80055da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005614 <LoopForever+0x16>)
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055ec:	e001      	b.n	80055f2 <LoopFillZerobss>

080055ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055f0:	3204      	adds	r2, #4

080055f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f4:	d3fb      	bcc.n	80055ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055f6:	f001 fdc9 	bl	800718c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80055fa:	f7fe ff39 	bl	8004470 <main>

080055fe <LoopForever>:

LoopForever:
  b LoopForever
 80055fe:	e7fe      	b.n	80055fe <LoopForever>
  ldr   r0, =_estack
 8005600:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005604:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8005608:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 800560c:	08007354 	.word	0x08007354
  ldr r2, =_sbss
 8005610:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8005614:	2000103c 	.word	0x2000103c

08005618 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC1_IRQHandler>

0800561a <get_page>:
 * @param addr The memory address to check.
 * @retval The page number corresponding to the provided address.
 */
static uint32_t get_page(uint32_t addr)
{
    return (addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / STM32G0xx_PAGE_SIZE; // Return the page number
 800561a:	23f8      	movs	r3, #248	@ 0xf8
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	469c      	mov	ip, r3
 8005620:	4460      	add	r0, ip
 8005622:	0ac0      	lsrs	r0, r0, #11
}
 8005624:	4770      	bx	lr

08005626 <set_byte_in_uint64>:
 * @param byte_index The index of the byte to modify (0-7).
 * @param new_value The new byte value to set (0-255).
 * @retval None
 */
static void set_byte_in_uint64(uint64_t *data, uint8_t byte_index, uint8_t new_value)
{
 8005626:	b570      	push	{r4, r5, r6, lr}
    // Clear the byte at the specified index
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 8005628:	6804      	ldr	r4, [r0, #0]
 800562a:	6843      	ldr	r3, [r0, #4]
 800562c:	00c9      	lsls	r1, r1, #3
 800562e:	000e      	movs	r6, r1
 8005630:	3e20      	subs	r6, #32
 8005632:	d413      	bmi.n	800565c <set_byte_in_uint64+0x36>
 8005634:	25ff      	movs	r5, #255	@ 0xff
 8005636:	40b5      	lsls	r5, r6
 8005638:	26ff      	movs	r6, #255	@ 0xff
 800563a:	408e      	lsls	r6, r1
 800563c:	43b4      	bics	r4, r6
 800563e:	43ab      	bics	r3, r5
 8005640:	6004      	str	r4, [r0, #0]
 8005642:	6043      	str	r3, [r0, #4]
    // Set the new byte value
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 8005644:	000d      	movs	r5, r1
 8005646:	3d20      	subs	r5, #32
 8005648:	d40d      	bmi.n	8005666 <set_byte_in_uint64+0x40>
 800564a:	0016      	movs	r6, r2
 800564c:	40ae      	lsls	r6, r5
 800564e:	0035      	movs	r5, r6
 8005650:	408a      	lsls	r2, r1
 8005652:	4314      	orrs	r4, r2
 8005654:	6004      	str	r4, [r0, #0]
 8005656:	432b      	orrs	r3, r5
 8005658:	6043      	str	r3, [r0, #4]
}
 800565a:	bd70      	pop	{r4, r5, r6, pc}
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 800565c:	2620      	movs	r6, #32
 800565e:	1a76      	subs	r6, r6, r1
 8005660:	25ff      	movs	r5, #255	@ 0xff
 8005662:	40f5      	lsrs	r5, r6
 8005664:	e7e8      	b.n	8005638 <set_byte_in_uint64+0x12>
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 8005666:	2520      	movs	r5, #32
 8005668:	1a6d      	subs	r5, r5, r1
 800566a:	0016      	movs	r6, r2
 800566c:	40ee      	lsrs	r6, r5
 800566e:	0035      	movs	r5, r6
 8005670:	e7ee      	b.n	8005650 <set_byte_in_uint64+0x2a>

08005672 <my_flash_read_double_word>:
 * @param address The memory address from which to read.
 * @retval The 64-bit value read from the memory address.
 */
static uint64_t my_flash_read_double_word(uint32_t address)
{
    return *((__IO uint64_t *)(address)); // Read and return the 64-bit value
 8005672:	6841      	ldr	r1, [r0, #4]
 8005674:	6800      	ldr	r0, [r0, #0]
}
 8005676:	4770      	bx	lr

08005678 <my_flash_earse_pages>:
 *
 * @param page_address The address of the page to be erased.
 * @retval Success status (true if successful, false otherwise).
 */
static bool my_flash_earse_pages(uint32_t page_address)
{
 8005678:	b510      	push	{r4, lr}
 800567a:	b086      	sub	sp, #24
    uint32_t page_error = 0; // Variable to hold error information if the erase fails
 800567c:	2300      	movs	r3, #0
 800567e:	9305      	str	r3, [sp, #20]
    FLASH_EraseInitTypeDef my_flash; // Structure for flash erase initialization

    my_flash.TypeErase = FLASH_TYPEERASE_PAGES; // Specify that we are erasing pages
 8005680:	3302      	adds	r3, #2
 8005682:	9301      	str	r3, [sp, #4]
    my_flash.Page = get_page(page_address); // Get the page number based on the address
 8005684:	f7ff ffc9 	bl	800561a <get_page>
 8005688:	9003      	str	r0, [sp, #12]
    my_flash.NbPages = 1; // Specify that we want to erase one page
 800568a:	2301      	movs	r3, #1
 800568c:	9304      	str	r3, [sp, #16]

    HAL_FLASH_Unlock(); // Unlock the flash memory for write access
 800568e:	f000 f9a9 	bl	80059e4 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&my_flash, &page_error); // Perform the erase operation
 8005692:	a905      	add	r1, sp, #20
 8005694:	a801      	add	r0, sp, #4
 8005696:	f000 fa53 	bl	8005b40 <HAL_FLASHEx_Erase>
 800569a:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 800569c:	f000 fa22 	bl	8005ae4 <HAL_FLASH_Lock>

    // Return true if the erase was successful, false otherwise
    return (status == HAL_OK) ? true : false;
 80056a0:	4263      	negs	r3, r4
 80056a2:	415c      	adcs	r4, r3
 80056a4:	b2e0      	uxtb	r0, r4
}
 80056a6:	b006      	add	sp, #24
 80056a8:	bd10      	pop	{r4, pc}

080056aa <my_flash_write_double_word>:
 * @param address The memory address to which the data will be written.
 * @param data The 64-bit data to be written.
 * @retval true if the write operation is successful, false otherwise.
 */
static bool my_flash_write_double_word(uint32_t address, uint64_t data)
{
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	0004      	movs	r4, r0
 80056ae:	0016      	movs	r6, r2
 80056b0:	001d      	movs	r5, r3
    HAL_FLASH_Unlock(); // Unlock the flash memory for writing
 80056b2:	f000 f997 	bl	80059e4 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data); // Program the double word
 80056b6:	0032      	movs	r2, r6
 80056b8:	002b      	movs	r3, r5
 80056ba:	0021      	movs	r1, r4
 80056bc:	2001      	movs	r0, #1
 80056be:	f000 f9df 	bl	8005a80 <HAL_FLASH_Program>
 80056c2:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 80056c4:	f000 fa0e 	bl	8005ae4 <HAL_FLASH_Lock>

    return (status == HAL_OK); // Return success status
 80056c8:	4263      	negs	r3, r4
 80056ca:	415c      	adcs	r4, r3
 80056cc:	b2e0      	uxtb	r0, r4
}
 80056ce:	bd70      	pop	{r4, r5, r6, pc}

080056d0 <get_rgb_light>:
 * @param None
 * @retval The current RGB brightness value.
 */
uint8_t get_rgb_light(void)
{
    return *((__IO uint8_t *)(RGB_LIGHT_ADDR)); // Read and return the current RGB brightness value
 80056d0:	4b01      	ldr	r3, [pc, #4]	@ (80056d8 <get_rgb_light+0x8>)
 80056d2:	7818      	ldrb	r0, [r3, #0]
 80056d4:	b2c0      	uxtb	r0, r0
}
 80056d6:	4770      	bx	lr
 80056d8:	0800c001 	.word	0x0800c001

080056dc <set_rgb_light>:
{
 80056dc:	b530      	push	{r4, r5, lr}
 80056de:	b083      	sub	sp, #12
 80056e0:	0004      	movs	r4, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR); // Read current RGB light data
 80056e2:	4d0e      	ldr	r5, [pc, #56]	@ (800571c <set_rgb_light+0x40>)
 80056e4:	0028      	movs	r0, r5
 80056e6:	f7ff ffc4 	bl	8005672 <my_flash_read_double_word>
 80056ea:	9000      	str	r0, [sp, #0]
 80056ec:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 1, data); // Modify the brightness byte
 80056ee:	0022      	movs	r2, r4
 80056f0:	2101      	movs	r1, #1
 80056f2:	4668      	mov	r0, sp
 80056f4:	f7ff ff97 	bl	8005626 <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR); // Erase the flash page
 80056f8:	0028      	movs	r0, r5
 80056fa:	f7ff ffbd 	bl	8005678 <my_flash_earse_pages>
    while (!my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp))
 80056fe:	9a00      	ldr	r2, [sp, #0]
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	4806      	ldr	r0, [pc, #24]	@ (800571c <set_rgb_light+0x40>)
 8005704:	f7ff ffd1 	bl	80056aa <my_flash_write_double_word>
 8005708:	2800      	cmp	r0, #0
 800570a:	d0f8      	beq.n	80056fe <set_rgb_light+0x22>
    return (get_rgb_light() == data);
 800570c:	f7ff ffe0 	bl	80056d0 <get_rgb_light>
 8005710:	1b00      	subs	r0, r0, r4
 8005712:	4243      	negs	r3, r0
 8005714:	4158      	adcs	r0, r3
 8005716:	b2c0      	uxtb	r0, r0
}
 8005718:	b003      	add	sp, #12
 800571a:	bd30      	pop	{r4, r5, pc}
 800571c:	0800c000 	.word	0x0800c000

08005720 <get_bootloader_version>:
 * @param None
 * @retval The bootloader version number.
 */
uint8_t get_bootloader_version(void)
{
    return *((__IO uint8_t *)(BOOTLOADER_VERSION_ADDR)); // Read and return the bootloader version number
 8005720:	4b01      	ldr	r3, [pc, #4]	@ (8005728 <get_bootloader_version+0x8>)
 8005722:	7818      	ldrb	r0, [r3, #0]
 8005724:	b2c0      	uxtb	r0, r0
}
 8005726:	4770      	bx	lr
 8005728:	08001fff 	.word	0x08001fff

0800572c <get_ab_status>:
 * @param  None
 * @retval The current AB status value.
 */
uint8_t get_ab_status(void) {
    // Read and return the AB status from the memory address
    return *((__IO uint8_t*) (AB_STATUS_ADDR));
 800572c:	4b01      	ldr	r3, [pc, #4]	@ (8005734 <get_ab_status+0x8>)
 800572e:	7818      	ldrb	r0, [r3, #0]
 8005730:	b2c0      	uxtb	r0, r0
}
 8005732:	4770      	bx	lr
 8005734:	0800c000 	.word	0x0800c000

08005738 <set_ab_status>:
bool set_ab_status(uint8_t data) {
 8005738:	b530      	push	{r4, r5, lr}
 800573a:	b083      	sub	sp, #12
 800573c:	0005      	movs	r5, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR);
 800573e:	4c0e      	ldr	r4, [pc, #56]	@ (8005778 <set_ab_status+0x40>)
 8005740:	0020      	movs	r0, r4
 8005742:	f7ff ff96 	bl	8005672 <my_flash_read_double_word>
 8005746:	9000      	str	r0, [sp, #0]
 8005748:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 0, data);
 800574a:	002a      	movs	r2, r5
 800574c:	2100      	movs	r1, #0
 800574e:	4668      	mov	r0, sp
 8005750:	f7ff ff69 	bl	8005626 <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR);
 8005754:	0020      	movs	r0, r4
 8005756:	f7ff ff8f 	bl	8005678 <my_flash_earse_pages>
    while (my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp) != true) {
 800575a:	9a00      	ldr	r2, [sp, #0]
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	4806      	ldr	r0, [pc, #24]	@ (8005778 <set_ab_status+0x40>)
 8005760:	f7ff ffa3 	bl	80056aa <my_flash_write_double_word>
 8005764:	1e04      	subs	r4, r0, #0
 8005766:	d0f8      	beq.n	800575a <set_ab_status+0x22>
    uint8_t dat = get_ab_status();
 8005768:	f7ff ffe0 	bl	800572c <get_ab_status>
    if (dat == data) {
 800576c:	4285      	cmp	r5, r0
 800576e:	d000      	beq.n	8005772 <set_ab_status+0x3a>
    return false; // Operation failed
 8005770:	2400      	movs	r4, #0
}
 8005772:	0020      	movs	r0, r4
 8005774:	b003      	add	sp, #12
 8005776:	bd30      	pop	{r4, r5, pc}
 8005778:	0800c000 	.word	0x0800c000

0800577c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800577c:	b510      	push	{r4, lr}
 800577e:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005780:	4b11      	ldr	r3, [pc, #68]	@ (80057c8 <HAL_InitTick+0x4c>)
 8005782:	7819      	ldrb	r1, [r3, #0]
 8005784:	2900      	cmp	r1, #0
 8005786:	d101      	bne.n	800578c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005788:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800578a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800578c:	20fa      	movs	r0, #250	@ 0xfa
 800578e:	0080      	lsls	r0, r0, #2
 8005790:	f7fc fcba 	bl	8002108 <__udivsi3>
 8005794:	0001      	movs	r1, r0
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <HAL_InitTick+0x50>)
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	f7fc fcb5 	bl	8002108 <__udivsi3>
 800579e:	f000 f8ad 	bl	80058fc <HAL_SYSTICK_Config>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d10d      	bne.n	80057c2 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a6:	2c03      	cmp	r4, #3
 80057a8:	d901      	bls.n	80057ae <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80057aa:	2001      	movs	r0, #1
 80057ac:	e7ed      	b.n	800578a <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057ae:	3001      	adds	r0, #1
 80057b0:	2200      	movs	r2, #0
 80057b2:	0021      	movs	r1, r4
 80057b4:	4240      	negs	r0, r0
 80057b6:	f000 f891 	bl	80058dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057ba:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_InitTick+0x54>)
 80057bc:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80057be:	2000      	movs	r0, #0
 80057c0:	e7e3      	b.n	800578a <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80057c2:	2001      	movs	r0, #1
 80057c4:	e7e1      	b.n	800578a <HAL_InitTick+0xe>
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	200000e4 	.word	0x200000e4
 80057cc:	200000e0 	.word	0x200000e0
 80057d0:	200000e8 	.word	0x200000e8

080057d4 <HAL_Init>:
{
 80057d4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057d6:	4a08      	ldr	r2, [pc, #32]	@ (80057f8 <HAL_Init+0x24>)
 80057d8:	6811      	ldr	r1, [r2, #0]
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	430b      	orrs	r3, r1
 80057e0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057e2:	2003      	movs	r0, #3
 80057e4:	f7ff ffca 	bl	800577c <HAL_InitTick>
 80057e8:	1e04      	subs	r4, r0, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80057ec:	2401      	movs	r4, #1
}
 80057ee:	0020      	movs	r0, r4
 80057f0:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80057f2:	f7fe fefb 	bl	80045ec <HAL_MspInit>
 80057f6:	e7fa      	b.n	80057ee <HAL_Init+0x1a>
 80057f8:	40022000 	.word	0x40022000

080057fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80057fc:	4b03      	ldr	r3, [pc, #12]	@ (800580c <HAL_IncTick+0x10>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	4a03      	ldr	r2, [pc, #12]	@ (8005810 <HAL_IncTick+0x14>)
 8005802:	6811      	ldr	r1, [r2, #0]
 8005804:	185b      	adds	r3, r3, r1
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	4770      	bx	lr
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	200000e4 	.word	0x200000e4
 8005810:	2000101c 	.word	0x2000101c

08005814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005814:	4b01      	ldr	r3, [pc, #4]	@ (800581c <HAL_GetTick+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
}
 8005818:	4770      	bx	lr
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	2000101c 	.word	0x2000101c

08005820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005824:	f7ff fff6 	bl	8005814 <HAL_GetTick>
 8005828:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800582a:	1c63      	adds	r3, r4, #1
 800582c:	d002      	beq.n	8005834 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800582e:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <HAL_Delay+0x20>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005834:	f7ff ffee 	bl	8005814 <HAL_GetTick>
 8005838:	1b40      	subs	r0, r0, r5
 800583a:	42a0      	cmp	r0, r4
 800583c:	d3fa      	bcc.n	8005834 <HAL_Delay+0x14>
  {
  }
}
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	200000e4 	.word	0x200000e4

08005844 <__NVIC_SetPriority>:
{
 8005844:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8005846:	2800      	cmp	r0, #0
 8005848:	db11      	blt.n	800586e <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800584a:	0883      	lsrs	r3, r0, #2
 800584c:	4d13      	ldr	r5, [pc, #76]	@ (800589c <__NVIC_SetPriority+0x58>)
 800584e:	33c0      	adds	r3, #192	@ 0xc0
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	595c      	ldr	r4, [r3, r5]
 8005854:	2203      	movs	r2, #3
 8005856:	4010      	ands	r0, r2
 8005858:	00c0      	lsls	r0, r0, #3
 800585a:	32fc      	adds	r2, #252	@ 0xfc
 800585c:	0016      	movs	r6, r2
 800585e:	4086      	lsls	r6, r0
 8005860:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005862:	0189      	lsls	r1, r1, #6
 8005864:	400a      	ands	r2, r1
 8005866:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005868:	4322      	orrs	r2, r4
 800586a:	515a      	str	r2, [r3, r5]
}
 800586c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800586e:	230f      	movs	r3, #15
 8005870:	4003      	ands	r3, r0
 8005872:	3b08      	subs	r3, #8
 8005874:	089b      	lsrs	r3, r3, #2
 8005876:	3306      	adds	r3, #6
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a09      	ldr	r2, [pc, #36]	@ (80058a0 <__NVIC_SetPriority+0x5c>)
 800587c:	4694      	mov	ip, r2
 800587e:	4463      	add	r3, ip
 8005880:	685c      	ldr	r4, [r3, #4]
 8005882:	2203      	movs	r2, #3
 8005884:	4010      	ands	r0, r2
 8005886:	00c0      	lsls	r0, r0, #3
 8005888:	32fc      	adds	r2, #252	@ 0xfc
 800588a:	0015      	movs	r5, r2
 800588c:	4085      	lsls	r5, r0
 800588e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005890:	0189      	lsls	r1, r1, #6
 8005892:	400a      	ands	r2, r1
 8005894:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005896:	4322      	orrs	r2, r4
 8005898:	605a      	str	r2, [r3, #4]
}
 800589a:	e7e7      	b.n	800586c <__NVIC_SetPriority+0x28>
 800589c:	e000e100 	.word	0xe000e100
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a4:	3801      	subs	r0, #1
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	045b      	lsls	r3, r3, #17
 80058aa:	4298      	cmp	r0, r3
 80058ac:	d20f      	bcs.n	80058ce <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ae:	4a09      	ldr	r2, [pc, #36]	@ (80058d4 <SysTick_Config+0x30>)
 80058b0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058b2:	4809      	ldr	r0, [pc, #36]	@ (80058d8 <SysTick_Config+0x34>)
 80058b4:	6a03      	ldr	r3, [r0, #32]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	0a1b      	lsrs	r3, r3, #8
 80058ba:	21c0      	movs	r1, #192	@ 0xc0
 80058bc:	0609      	lsls	r1, r1, #24
 80058be:	430b      	orrs	r3, r1
 80058c0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c2:	2300      	movs	r3, #0
 80058c4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058c6:	3307      	adds	r3, #7
 80058c8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058ca:	2000      	movs	r0, #0
}
 80058cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80058ce:	2001      	movs	r0, #1
 80058d0:	e7fc      	b.n	80058cc <SysTick_Config+0x28>
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	e000e010 	.word	0xe000e010
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058dc:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80058de:	f7ff ffb1 	bl	8005844 <__NVIC_SetPriority>
}
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80058e4:	2800      	cmp	r0, #0
 80058e6:	db05      	blt.n	80058f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e8:	221f      	movs	r2, #31
 80058ea:	4002      	ands	r2, r0
 80058ec:	2301      	movs	r3, #1
 80058ee:	4093      	lsls	r3, r2
 80058f0:	4a01      	ldr	r2, [pc, #4]	@ (80058f8 <HAL_NVIC_EnableIRQ+0x14>)
 80058f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80058f4:	4770      	bx	lr
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	e000e100 	.word	0xe000e100

080058fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058fc:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 80058fe:	f7ff ffd1 	bl	80058a4 <SysTick_Config>
}
 8005902:	bd10      	pop	{r4, pc}

08005904 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005904:	b530      	push	{r4, r5, lr}
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005906:	4c05      	ldr	r4, [pc, #20]	@ (800591c <FLASH_Program_DoubleWord+0x18>)
 8005908:	6961      	ldr	r1, [r4, #20]
 800590a:	2501      	movs	r5, #1
 800590c:	4329      	orrs	r1, r5
 800590e:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005910:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005912:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005916:	6043      	str	r3, [r0, #4]
}
 8005918:	bd30      	pop	{r4, r5, pc}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	40022000 	.word	0x40022000

08005920 <HAL_FLASH_EndOfOperationCallback>:
}
 8005920:	4770      	bx	lr

08005922 <HAL_FLASH_OperationErrorCallback>:
}
 8005922:	4770      	bx	lr

08005924 <HAL_FLASH_IRQHandler>:
{
 8005924:	b510      	push	{r4, lr}
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005926:	4b2a      	ldr	r3, [pc, #168]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	4a2a      	ldr	r2, [pc, #168]	@ (80059d4 <HAL_FLASH_IRQHandler+0xb0>)
 800592c:	4013      	ands	r3, r2
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 800592e:	4a2a      	ldr	r2, [pc, #168]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005930:	6892      	ldr	r2, [r2, #8]
 8005932:	0751      	lsls	r1, r2, #29
 8005934:	d521      	bpl.n	800597a <HAL_FLASH_IRQHandler+0x56>
    param = pFlash.Banks;
 8005936:	4a28      	ldr	r2, [pc, #160]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005938:	6914      	ldr	r4, [r2, #16]
  if (error != 0x00U)
 800593a:	2b00      	cmp	r3, #0
 800593c:	d12a      	bne.n	8005994 <HAL_FLASH_IRQHandler+0x70>
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 800593e:	4b24      	ldr	r3, [pc, #144]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	07db      	lsls	r3, r3, #31
 8005944:	d50c      	bpl.n	8005960 <HAL_FLASH_IRQHandler+0x3c>
    FLASH->SR = FLASH_SR_EOP;
 8005946:	4b22      	ldr	r3, [pc, #136]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 8005948:	2201      	movs	r2, #1
 800594a:	611a      	str	r2, [r3, #16]
    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800594c:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d02c      	beq.n	80059ae <HAL_FLASH_IRQHandler+0x8a>
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8005954:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
    HAL_FLASH_EndOfOperationCallback(param);
 800595a:	0020      	movs	r0, r4
 800595c:	f7ff ffe0 	bl	8005920 <HAL_FLASH_EndOfOperationCallback>
  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8005960:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <HAL_FLASH_IRQHandler+0x54>
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8005968:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 800596a:	6953      	ldr	r3, [r2, #20]
 800596c:	491b      	ldr	r1, [pc, #108]	@ (80059dc <HAL_FLASH_IRQHandler+0xb8>)
 800596e:	400b      	ands	r3, r1
 8005970:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 8005972:	4b19      	ldr	r3, [pc, #100]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
}
 8005978:	bd10      	pop	{r4, pc}
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800597a:	4815      	ldr	r0, [pc, #84]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 800597c:	6941      	ldr	r1, [r0, #20]
 800597e:	4391      	bics	r1, r2
 8005980:	6141      	str	r1, [r0, #20]
    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 8005982:	4917      	ldr	r1, [pc, #92]	@ (80059e0 <HAL_FLASH_IRQHandler+0xbc>)
 8005984:	420a      	tst	r2, r1
 8005986:	d002      	beq.n	800598e <HAL_FLASH_IRQHandler+0x6a>
      param = pFlash.Address;
 8005988:	4a13      	ldr	r2, [pc, #76]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 800598a:	68d4      	ldr	r4, [r2, #12]
 800598c:	e7d5      	b.n	800593a <HAL_FLASH_IRQHandler+0x16>
      param = pFlash.Page;
 800598e:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005990:	6954      	ldr	r4, [r2, #20]
 8005992:	e7d2      	b.n	800593a <HAL_FLASH_IRQHandler+0x16>
    pFlash.ErrorCode |= error;
 8005994:	4a10      	ldr	r2, [pc, #64]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 8005996:	6851      	ldr	r1, [r2, #4]
 8005998:	430b      	orrs	r3, r1
 800599a:	6053      	str	r3, [r2, #4]
    FLASH->SR = FLASH_SR_ERRORS;
 800599c:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <HAL_FLASH_IRQHandler+0xac>)
 800599e:	490d      	ldr	r1, [pc, #52]	@ (80059d4 <HAL_FLASH_IRQHandler+0xb0>)
 80059a0:	6119      	str	r1, [r3, #16]
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	6093      	str	r3, [r2, #8]
    HAL_FLASH_OperationErrorCallback(param);
 80059a6:	0020      	movs	r0, r4
 80059a8:	f7ff ffbb 	bl	8005922 <HAL_FLASH_OperationErrorCallback>
 80059ac:	e7c7      	b.n	800593e <HAL_FLASH_IRQHandler+0x1a>
      pFlash.NbPagesToErase--;
 80059ae:	4a0a      	ldr	r2, [pc, #40]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 80059b0:	6993      	ldr	r3, [r2, #24]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	6193      	str	r3, [r2, #24]
      if (pFlash.NbPagesToErase != 0x00U)
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <HAL_FLASH_IRQHandler+0x9e>
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80059ba:	4b07      	ldr	r3, [pc, #28]	@ (80059d8 <HAL_FLASH_IRQHandler+0xb4>)
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e7cb      	b.n	800595a <HAL_FLASH_IRQHandler+0x36>
        pFlash.Page++;
 80059c2:	6951      	ldr	r1, [r2, #20]
 80059c4:	3101      	adds	r1, #1
 80059c6:	6151      	str	r1, [r2, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 80059c8:	6910      	ldr	r0, [r2, #16]
 80059ca:	f000 f8a9 	bl	8005b20 <FLASH_PageErase>
 80059ce:	e7c4      	b.n	800595a <HAL_FLASH_IRQHandler+0x36>
 80059d0:	40022000 	.word	0x40022000
 80059d4:	0000c3fa 	.word	0x0000c3fa
 80059d8:	20001020 	.word	0x20001020
 80059dc:	fcffffff 	.word	0xfcffffff
 80059e0:	00040001 	.word	0x00040001

080059e4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80059e4:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <HAL_FLASH_Unlock+0x24>)
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db01      	blt.n	80059f0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2000      	movs	r0, #0
}
 80059ee:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059f0:	4b05      	ldr	r3, [pc, #20]	@ (8005a08 <HAL_FLASH_Unlock+0x24>)
 80059f2:	4a06      	ldr	r2, [pc, #24]	@ (8005a0c <HAL_FLASH_Unlock+0x28>)
 80059f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059f6:	4a06      	ldr	r2, [pc, #24]	@ (8005a10 <HAL_FLASH_Unlock+0x2c>)
 80059f8:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db01      	blt.n	8005a04 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8005a00:	2000      	movs	r0, #0
 8005a02:	e7f4      	b.n	80059ee <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 8005a04:	2001      	movs	r0, #1
 8005a06:	e7f2      	b.n	80059ee <HAL_FLASH_Unlock+0xa>
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	45670123 	.word	0x45670123
 8005a10:	cdef89ab 	.word	0xcdef89ab

08005a14 <FLASH_WaitForLastOperation>:
{
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005a18:	f7ff fefc 	bl	8005814 <HAL_GetTick>
 8005a1c:	0005      	movs	r5, r0
  while ((FLASH->SR & error) != 0x00U)
 8005a1e:	4b14      	ldr	r3, [pc, #80]	@ (8005a70 <FLASH_WaitForLastOperation+0x5c>)
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	03db      	lsls	r3, r3, #15
 8005a24:	d508      	bpl.n	8005a38 <FLASH_WaitForLastOperation+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8005a26:	1c63      	adds	r3, r4, #1
 8005a28:	d0f9      	beq.n	8005a1e <FLASH_WaitForLastOperation+0xa>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a2a:	f7ff fef3 	bl	8005814 <HAL_GetTick>
 8005a2e:	1b40      	subs	r0, r0, r5
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d3f4      	bcc.n	8005a1e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8005a34:	2003      	movs	r0, #3
 8005a36:	e01a      	b.n	8005a6e <FLASH_WaitForLastOperation+0x5a>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005a38:	490d      	ldr	r1, [pc, #52]	@ (8005a70 <FLASH_WaitForLastOperation+0x5c>)
 8005a3a:	690a      	ldr	r2, [r1, #16]
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <FLASH_WaitForLastOperation+0x60>)
 8005a3e:	0016      	movs	r6, r2
 8005a40:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8005a42:	480d      	ldr	r0, [pc, #52]	@ (8005a78 <FLASH_WaitForLastOperation+0x64>)
 8005a44:	6108      	str	r0, [r1, #16]
  if (error != 0x00U)
 8005a46:	421a      	tst	r2, r3
 8005a48:	d10c      	bne.n	8005a64 <FLASH_WaitForLastOperation+0x50>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005a4a:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <FLASH_WaitForLastOperation+0x5c>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	035b      	lsls	r3, r3, #13
 8005a50:	d50c      	bpl.n	8005a6c <FLASH_WaitForLastOperation+0x58>
    if(Timeout != HAL_MAX_DELAY)
 8005a52:	1c63      	adds	r3, r4, #1
 8005a54:	d0f9      	beq.n	8005a4a <FLASH_WaitForLastOperation+0x36>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a56:	f7ff fedd 	bl	8005814 <HAL_GetTick>
 8005a5a:	1b40      	subs	r0, r0, r5
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d3f4      	bcc.n	8005a4a <FLASH_WaitForLastOperation+0x36>
        return HAL_TIMEOUT;
 8005a60:	2003      	movs	r0, #3
 8005a62:	e004      	b.n	8005a6e <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode = error;
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <FLASH_WaitForLastOperation+0x68>)
 8005a66:	605e      	str	r6, [r3, #4]
    return HAL_ERROR;
 8005a68:	2001      	movs	r0, #1
 8005a6a:	e000      	b.n	8005a6e <FLASH_WaitForLastOperation+0x5a>
  return HAL_OK;
 8005a6c:	2000      	movs	r0, #0
}
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	40022000 	.word	0x40022000
 8005a74:	0000c3fa 	.word	0x0000c3fa
 8005a78:	0000c3fb 	.word	0x0000c3fb
 8005a7c:	20001020 	.word	0x20001020

08005a80 <HAL_FLASH_Program>:
{
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	0007      	movs	r7, r0
 8005a84:	000c      	movs	r4, r1
 8005a86:	0015      	movs	r5, r2
 8005a88:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8005a8a:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <HAL_FLASH_Program+0x5c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d022      	beq.n	8005ad8 <HAL_FLASH_Program+0x58>
 8005a92:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <HAL_FLASH_Program+0x5c>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a9c:	20fa      	movs	r0, #250	@ 0xfa
 8005a9e:	0080      	lsls	r0, r0, #2
 8005aa0:	f7ff ffb8 	bl	8005a14 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005aa8:	2f01      	cmp	r7, #1
 8005aaa:	d00f      	beq.n	8005acc <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005aac:	0029      	movs	r1, r5
 8005aae:	0020      	movs	r0, r4
 8005ab0:	f001 fba6 	bl	8007200 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ab4:	20fa      	movs	r0, #250	@ 0xfa
 8005ab6:	0080      	lsls	r0, r0, #2
 8005ab8:	f7ff ffac 	bl	8005a14 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005abc:	4a08      	ldr	r2, [pc, #32]	@ (8005ae0 <HAL_FLASH_Program+0x60>)
 8005abe:	6953      	ldr	r3, [r2, #20]
 8005ac0:	43bb      	bics	r3, r7
 8005ac2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_FLASH_Program+0x5c>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
}
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8005acc:	002a      	movs	r2, r5
 8005ace:	0033      	movs	r3, r6
 8005ad0:	0020      	movs	r0, r4
 8005ad2:	f7ff ff17 	bl	8005904 <FLASH_Program_DoubleWord>
 8005ad6:	e7ed      	b.n	8005ab4 <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 8005ad8:	2002      	movs	r0, #2
 8005ada:	e7f6      	b.n	8005aca <HAL_FLASH_Program+0x4a>
 8005adc:	20001020 	.word	0x20001020
 8005ae0:	40022000 	.word	0x40022000

08005ae4 <HAL_FLASH_Lock>:
{
 8005ae4:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ae6:	20fa      	movs	r0, #250	@ 0xfa
 8005ae8:	0080      	lsls	r0, r0, #2
 8005aea:	f7ff ff93 	bl	8005a14 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <HAL_FLASH_Lock+0x24>)
 8005af0:	6959      	ldr	r1, [r3, #20]
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	0612      	lsls	r2, r2, #24
 8005af6:	430a      	orrs	r2, r1
 8005af8:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db01      	blt.n	8005b04 <HAL_FLASH_Lock+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
}
 8005b02:	bd10      	pop	{r4, pc}
    status = HAL_OK;
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7fc      	b.n	8005b02 <HAL_FLASH_Lock+0x1e>
 8005b08:	40022000 	.word	0x40022000

08005b0c <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005b0c:	4a03      	ldr	r2, [pc, #12]	@ (8005b1c <FLASH_MassErase+0x10>)
 8005b0e:	6953      	ldr	r3, [r2, #20]
 8005b10:	4303      	orrs	r3, r0
 8005b12:	2080      	movs	r0, #128	@ 0x80
 8005b14:	0240      	lsls	r0, r0, #9
 8005b16:	4318      	orrs	r0, r3
 8005b18:	6150      	str	r0, [r2, #20]
}
 8005b1a:	4770      	bx	lr
 8005b1c:	40022000 	.word	0x40022000

08005b20 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005b20:	4a04      	ldr	r2, [pc, #16]	@ (8005b34 <FLASH_PageErase+0x14>)
 8005b22:	6953      	ldr	r3, [r2, #20]
 8005b24:	4804      	ldr	r0, [pc, #16]	@ (8005b38 <FLASH_PageErase+0x18>)
 8005b26:	4003      	ands	r3, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005b28:	00c9      	lsls	r1, r1, #3
 8005b2a:	4319      	orrs	r1, r3
 8005b2c:	4b03      	ldr	r3, [pc, #12]	@ (8005b3c <FLASH_PageErase+0x1c>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6153      	str	r3, [r2, #20]
}
 8005b32:	4770      	bx	lr
 8005b34:	40022000 	.word	0x40022000
 8005b38:	ffffe007 	.word	0xffffe007
 8005b3c:	00010002 	.word	0x00010002

08005b40 <HAL_FLASHEx_Erase>:
{
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	0004      	movs	r4, r0
 8005b44:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8005b46:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc0 <HAL_FLASHEx_Erase+0x80>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d036      	beq.n	8005bbc <HAL_FLASHEx_Erase+0x7c>
 8005b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc0 <HAL_FLASHEx_Erase+0x80>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b54:	2200      	movs	r2, #0
 8005b56:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b58:	20fa      	movs	r0, #250	@ 0xfa
 8005b5a:	0080      	lsls	r0, r0, #2
 8005b5c:	f7ff ff5a 	bl	8005a14 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d127      	bne.n	8005bb4 <HAL_FLASHEx_Erase+0x74>
    pEraseInit->Banks = FLASH_BANK_1;
 8005b64:	2304      	movs	r3, #4
 8005b66:	6063      	str	r3, [r4, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d014      	beq.n	8005b98 <HAL_FLASHEx_Erase+0x58>
      *PageError = 0xFFFFFFFFU;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	425b      	negs	r3, r3
 8005b72:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005b74:	68a5      	ldr	r5, [r4, #8]
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	68e2      	ldr	r2, [r4, #12]
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	d914      	bls.n	8005baa <HAL_FLASHEx_Erase+0x6a>
        FLASH_PageErase(pEraseInit->Banks, index);
 8005b80:	6860      	ldr	r0, [r4, #4]
 8005b82:	0029      	movs	r1, r5
 8005b84:	f7ff ffcc 	bl	8005b20 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b88:	20fa      	movs	r0, #250	@ 0xfa
 8005b8a:	0080      	lsls	r0, r0, #2
 8005b8c:	f7ff ff42 	bl	8005a14 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_FLASHEx_Erase+0x68>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005b94:	3501      	adds	r5, #1
 8005b96:	e7ee      	b.n	8005b76 <HAL_FLASHEx_Erase+0x36>
      FLASH_MassErase(pEraseInit->Banks);
 8005b98:	3004      	adds	r0, #4
 8005b9a:	f7ff ffb7 	bl	8005b0c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b9e:	20fa      	movs	r0, #250	@ 0xfa
 8005ba0:	0080      	lsls	r0, r0, #2
 8005ba2:	f7ff ff37 	bl	8005a14 <FLASH_WaitForLastOperation>
 8005ba6:	e005      	b.n	8005bb4 <HAL_FLASHEx_Erase+0x74>
          *PageError = index;
 8005ba8:	6035      	str	r5, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005baa:	4a06      	ldr	r2, [pc, #24]	@ (8005bc4 <HAL_FLASHEx_Erase+0x84>)
 8005bac:	6953      	ldr	r3, [r2, #20]
 8005bae:	2102      	movs	r1, #2
 8005bb0:	438b      	bics	r3, r1
 8005bb2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8005bb4:	4b02      	ldr	r3, [pc, #8]	@ (8005bc0 <HAL_FLASHEx_Erase+0x80>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
}
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8005bbc:	2002      	movs	r0, #2
 8005bbe:	e7fc      	b.n	8005bba <HAL_FLASHEx_Erase+0x7a>
 8005bc0:	20001020 	.word	0x20001020
 8005bc4:	40022000 	.word	0x40022000

08005bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8005bca:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bcc:	e059      	b.n	8005c82 <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bd0:	005f      	lsls	r7, r3, #1
 8005bd2:	2403      	movs	r4, #3
 8005bd4:	40bc      	lsls	r4, r7
 8005bd6:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bd8:	68cc      	ldr	r4, [r1, #12]
 8005bda:	40bc      	lsls	r4, r7
 8005bdc:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8005bde:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be2:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005be4:	684e      	ldr	r6, [r1, #4]
 8005be6:	0936      	lsrs	r6, r6, #4
 8005be8:	2201      	movs	r2, #1
 8005bea:	4032      	ands	r2, r6
 8005bec:	409a      	lsls	r2, r3
 8005bee:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8005bf0:	6042      	str	r2, [r0, #4]
 8005bf2:	e056      	b.n	8005ca2 <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bf4:	08de      	lsrs	r6, r3, #3
 8005bf6:	3608      	adds	r6, #8
 8005bf8:	00b6      	lsls	r6, r6, #2
 8005bfa:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bfc:	3205      	adds	r2, #5
 8005bfe:	401a      	ands	r2, r3
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	240f      	movs	r4, #15
 8005c04:	4094      	lsls	r4, r2
 8005c06:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c08:	690c      	ldr	r4, [r1, #16]
 8005c0a:	4094      	lsls	r4, r2
 8005c0c:	0022      	movs	r2, r4
 8005c0e:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8005c10:	5032      	str	r2, [r6, r0]
 8005c12:	e059      	b.n	8005cc8 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005c14:	2603      	movs	r6, #3
 8005c16:	e000      	b.n	8005c1a <HAL_GPIO_Init+0x52>
 8005c18:	2600      	movs	r6, #0
 8005c1a:	40a6      	lsls	r6, r4
 8005c1c:	0034      	movs	r4, r6
 8005c1e:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8005c20:	4e42      	ldr	r6, [pc, #264]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005c22:	3218      	adds	r2, #24
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c28:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 8005c2a:	43ea      	mvns	r2, r5
 8005c2c:	003e      	movs	r6, r7
 8005c2e:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c30:	684c      	ldr	r4, [r1, #4]
 8005c32:	02e4      	lsls	r4, r4, #11
 8005c34:	d501      	bpl.n	8005c3a <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8005c36:	003e      	movs	r6, r7
 8005c38:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 8005c3a:	4c3c      	ldr	r4, [pc, #240]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005c3c:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8005c3e:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8005c40:	003e      	movs	r6, r7
 8005c42:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c44:	684c      	ldr	r4, [r1, #4]
 8005c46:	02a4      	lsls	r4, r4, #10
 8005c48:	d501      	bpl.n	8005c4e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8005c4a:	003e      	movs	r6, r7
 8005c4c:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8005c4e:	4c37      	ldr	r4, [pc, #220]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005c50:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c52:	2684      	movs	r6, #132	@ 0x84
 8005c54:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 8005c56:	003e      	movs	r6, r7
 8005c58:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c5a:	684c      	ldr	r4, [r1, #4]
 8005c5c:	03a4      	lsls	r4, r4, #14
 8005c5e:	d501      	bpl.n	8005c64 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8005c60:	003e      	movs	r6, r7
 8005c62:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8005c64:	4c31      	ldr	r4, [pc, #196]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005c66:	2784      	movs	r7, #132	@ 0x84
 8005c68:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8005c6a:	2680      	movs	r6, #128	@ 0x80
 8005c6c:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8005c6e:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c70:	684c      	ldr	r4, [r1, #4]
 8005c72:	03e4      	lsls	r4, r4, #15
 8005c74:	d501      	bpl.n	8005c7a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8005c76:	002a      	movs	r2, r5
 8005c78:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 8005c7a:	4d2c      	ldr	r5, [pc, #176]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005c7c:	2480      	movs	r4, #128	@ 0x80
 8005c7e:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8005c80:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c82:	680c      	ldr	r4, [r1, #0]
 8005c84:	0022      	movs	r2, r4
 8005c86:	40da      	lsrs	r2, r3
 8005c88:	d04e      	beq.n	8005d28 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	0025      	movs	r5, r4
 8005c90:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8005c92:	4214      	tst	r4, r2
 8005c94:	d0f4      	beq.n	8005c80 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c96:	684e      	ldr	r6, [r1, #4]
 8005c98:	2403      	movs	r4, #3
 8005c9a:	4034      	ands	r4, r6
 8005c9c:	3c01      	subs	r4, #1
 8005c9e:	2c01      	cmp	r4, #1
 8005ca0:	d995      	bls.n	8005bce <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ca2:	684c      	ldr	r4, [r1, #4]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	4022      	ands	r2, r4
 8005ca8:	2a03      	cmp	r2, #3
 8005caa:	d008      	beq.n	8005cbe <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8005cac:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005cae:	005e      	lsls	r6, r3, #1
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	40b2      	lsls	r2, r6
 8005cb4:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cb6:	688a      	ldr	r2, [r1, #8]
 8005cb8:	40b2      	lsls	r2, r6
 8005cba:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005cbc:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cbe:	684c      	ldr	r4, [r1, #4]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	4022      	ands	r2, r4
 8005cc4:	2a02      	cmp	r2, #2
 8005cc6:	d095      	beq.n	8005bf4 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8005cc8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cca:	005e      	lsls	r6, r3, #1
 8005ccc:	2203      	movs	r2, #3
 8005cce:	0017      	movs	r7, r2
 8005cd0:	40b7      	lsls	r7, r6
 8005cd2:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cd4:	684f      	ldr	r7, [r1, #4]
 8005cd6:	403a      	ands	r2, r7
 8005cd8:	40b2      	lsls	r2, r6
 8005cda:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005cdc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cde:	684c      	ldr	r4, [r1, #4]
 8005ce0:	22c0      	movs	r2, #192	@ 0xc0
 8005ce2:	0292      	lsls	r2, r2, #10
 8005ce4:	4214      	tst	r4, r2
 8005ce6:	d0cb      	beq.n	8005c80 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 8005ce8:	089a      	lsrs	r2, r3, #2
 8005cea:	0014      	movs	r4, r2
 8005cec:	3418      	adds	r4, #24
 8005cee:	00a4      	lsls	r4, r4, #2
 8005cf0:	4e0e      	ldr	r6, [pc, #56]	@ (8005d2c <HAL_GPIO_Init+0x164>)
 8005cf2:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005cf4:	2403      	movs	r4, #3
 8005cf6:	401c      	ands	r4, r3
 8005cf8:	00e4      	lsls	r4, r4, #3
 8005cfa:	260f      	movs	r6, #15
 8005cfc:	40a6      	lsls	r6, r4
 8005cfe:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005d00:	26a0      	movs	r6, #160	@ 0xa0
 8005d02:	05f6      	lsls	r6, r6, #23
 8005d04:	42b0      	cmp	r0, r6
 8005d06:	d087      	beq.n	8005c18 <HAL_GPIO_Init+0x50>
 8005d08:	4e09      	ldr	r6, [pc, #36]	@ (8005d30 <HAL_GPIO_Init+0x168>)
 8005d0a:	42b0      	cmp	r0, r6
 8005d0c:	d008      	beq.n	8005d20 <HAL_GPIO_Init+0x158>
 8005d0e:	4e09      	ldr	r6, [pc, #36]	@ (8005d34 <HAL_GPIO_Init+0x16c>)
 8005d10:	42b0      	cmp	r0, r6
 8005d12:	d007      	beq.n	8005d24 <HAL_GPIO_Init+0x15c>
 8005d14:	4e08      	ldr	r6, [pc, #32]	@ (8005d38 <HAL_GPIO_Init+0x170>)
 8005d16:	42b0      	cmp	r0, r6
 8005d18:	d100      	bne.n	8005d1c <HAL_GPIO_Init+0x154>
 8005d1a:	e77b      	b.n	8005c14 <HAL_GPIO_Init+0x4c>
 8005d1c:	2605      	movs	r6, #5
 8005d1e:	e77c      	b.n	8005c1a <HAL_GPIO_Init+0x52>
 8005d20:	2601      	movs	r6, #1
 8005d22:	e77a      	b.n	8005c1a <HAL_GPIO_Init+0x52>
 8005d24:	2602      	movs	r6, #2
 8005d26:	e778      	b.n	8005c1a <HAL_GPIO_Init+0x52>
  }
}
 8005d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	40021800 	.word	0x40021800
 8005d30:	50000400 	.word	0x50000400
 8005d34:	50000800 	.word	0x50000800
 8005d38:	50000c00 	.word	0x50000c00

08005d3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005d3c:	6903      	ldr	r3, [r0, #16]
 8005d3e:	420b      	tst	r3, r1
 8005d40:	d001      	beq.n	8005d46 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8005d42:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005d44:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8005d46:	2000      	movs	r0, #0
 8005d48:	e7fc      	b.n	8005d44 <HAL_GPIO_ReadPin+0x8>

08005d4a <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_GPIO_EXTI_IRQHandler>:
{
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005d50:	4b09      	ldr	r3, [pc, #36]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4218      	tst	r0, r3
 8005d56:	d104      	bne.n	8005d62 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005d58:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	4223      	tst	r3, r4
 8005d5e:	d105      	bne.n	8005d6c <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8005d60:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005d62:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d64:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005d66:	f7ff fff0 	bl	8005d4a <HAL_GPIO_EXTI_Rising_Callback>
 8005d6a:	e7f5      	b.n	8005d58 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005d6c:	4b02      	ldr	r3, [pc, #8]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d6e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005d70:	0020      	movs	r0, r4
 8005d72:	f7fe fb25 	bl	80043c0 <HAL_GPIO_EXTI_Falling_Callback>
}
 8005d76:	e7f3      	b.n	8005d60 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8005d78:	40021800 	.word	0x40021800

08005d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d7c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005d7e:	4a10      	ldr	r2, [pc, #64]	@ (8005dc0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	4910      	ldr	r1, [pc, #64]	@ (8005dc4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8005d84:	400b      	ands	r3, r1
 8005d86:	4303      	orrs	r3, r0
 8005d88:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	d001      	beq.n	8005d96 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005d92:	2000      	movs	r0, #0
}
 8005d94:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0058      	lsls	r0, r3, #1
 8005d9c:	18c0      	adds	r0, r0, r3
 8005d9e:	0040      	lsls	r0, r0, #1
 8005da0:	490a      	ldr	r1, [pc, #40]	@ (8005dcc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8005da2:	f7fc f9b1 	bl	8002108 <__udivsi3>
 8005da6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	055b      	lsls	r3, r3, #21
 8005dae:	d503      	bpl.n	8005db8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8005db4:	3801      	subs	r0, #1
 8005db6:	e7f7      	b.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8005db8:	2000      	movs	r0, #0
 8005dba:	e7eb      	b.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8005dbc:	2003      	movs	r0, #3
 8005dbe:	e7e9      	b.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x18>
 8005dc0:	40007000 	.word	0x40007000
 8005dc4:	fffff9ff 	.word	0xfffff9ff
 8005dc8:	200000e0 	.word	0x200000e0
 8005dcc:	000f4240 	.word	0x000f4240

08005dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd6:	d100      	bne.n	8005dda <HAL_RCC_OscConfig+0xa>
 8005dd8:	e231      	b.n	800623e <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dda:	6803      	ldr	r3, [r0, #0]
 8005ddc:	07db      	lsls	r3, r3, #31
 8005dde:	d539      	bpl.n	8005e54 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de0:	4ac1      	ldr	r2, [pc, #772]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005de2:	6891      	ldr	r1, [r2, #8]
 8005de4:	2338      	movs	r3, #56	@ 0x38
 8005de6:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de8:	68d1      	ldr	r1, [r2, #12]
 8005dea:	2203      	movs	r2, #3
 8005dec:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d026      	beq.n	8005e40 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d026      	beq.n	8005e44 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df6:	6863      	ldr	r3, [r4, #4]
 8005df8:	2280      	movs	r2, #128	@ 0x80
 8005dfa:	0252      	lsls	r2, r2, #9
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d07f      	beq.n	8005f00 <HAL_RCC_OscConfig+0x130>
 8005e00:	22a0      	movs	r2, #160	@ 0xa0
 8005e02:	02d2      	lsls	r2, r2, #11
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <HAL_RCC_OscConfig+0x3a>
 8005e08:	e081      	b.n	8005f0e <HAL_RCC_OscConfig+0x13e>
 8005e0a:	4bb7      	ldr	r3, [pc, #732]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	49b7      	ldr	r1, [pc, #732]	@ (80060ec <HAL_RCC_OscConfig+0x31c>)
 8005e10:	400a      	ands	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	49b6      	ldr	r1, [pc, #728]	@ (80060f0 <HAL_RCC_OscConfig+0x320>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d100      	bne.n	8005e24 <HAL_RCC_OscConfig+0x54>
 8005e22:	e080      	b.n	8005f26 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7ff fcf6 	bl	8005814 <HAL_GetTick>
 8005e28:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e2a:	4baf      	ldr	r3, [pc, #700]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	039b      	lsls	r3, r3, #14
 8005e30:	d410      	bmi.n	8005e54 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e32:	f7ff fcef 	bl	8005814 <HAL_GetTick>
 8005e36:	1b40      	subs	r0, r0, r5
 8005e38:	2864      	cmp	r0, #100	@ 0x64
 8005e3a:	d9f6      	bls.n	8005e2a <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8005e3c:	2003      	movs	r0, #3
 8005e3e:	e1ff      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005e40:	2a03      	cmp	r2, #3
 8005e42:	d1d6      	bne.n	8005df2 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e44:	4ba8      	ldr	r3, [pc, #672]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	039b      	lsls	r3, r3, #14
 8005e4a:	d503      	bpl.n	8005e54 <HAL_RCC_OscConfig+0x84>
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d100      	bne.n	8005e54 <HAL_RCC_OscConfig+0x84>
 8005e52:	e1f7      	b.n	8006244 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	079b      	lsls	r3, r3, #30
 8005e58:	d531      	bpl.n	8005ebe <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e5a:	4aa3      	ldr	r2, [pc, #652]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e5c:	6891      	ldr	r1, [r2, #8]
 8005e5e:	2338      	movs	r3, #56	@ 0x38
 8005e60:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e62:	68d1      	ldr	r1, [r2, #12]
 8005e64:	2203      	movs	r2, #3
 8005e66:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d06a      	beq.n	8005f42 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d16b      	bne.n	8005f48 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e70:	4a9d      	ldr	r2, [pc, #628]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	0552      	lsls	r2, r2, #21
 8005e76:	d503      	bpl.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e78:	68e2      	ldr	r2, [r4, #12]
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	d100      	bne.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e7e:	e1e3      	b.n	8006248 <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e80:	4899      	ldr	r0, [pc, #612]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005e82:	6842      	ldr	r2, [r0, #4]
 8005e84:	499b      	ldr	r1, [pc, #620]	@ (80060f4 <HAL_RCC_OscConfig+0x324>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	6961      	ldr	r1, [r4, #20]
 8005e8a:	0209      	lsls	r1, r1, #8
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005e94:	6803      	ldr	r3, [r0, #0]
 8005e96:	4998      	ldr	r1, [pc, #608]	@ (80060f8 <HAL_RCC_OscConfig+0x328>)
 8005e98:	400b      	ands	r3, r1
 8005e9a:	6921      	ldr	r1, [r4, #16]
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	0adb      	lsrs	r3, r3, #11
 8005ea4:	2207      	movs	r2, #7
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	4b94      	ldr	r3, [pc, #592]	@ (80060fc <HAL_RCC_OscConfig+0x32c>)
 8005eaa:	40d3      	lsrs	r3, r2
 8005eac:	4a94      	ldr	r2, [pc, #592]	@ (8006100 <HAL_RCC_OscConfig+0x330>)
 8005eae:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005eb0:	4b94      	ldr	r3, [pc, #592]	@ (8006104 <HAL_RCC_OscConfig+0x334>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f7ff fc62 	bl	800577c <HAL_InitTick>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d000      	beq.n	8005ebe <HAL_RCC_OscConfig+0xee>
 8005ebc:	e1c6      	b.n	800624c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	071b      	lsls	r3, r3, #28
 8005ec2:	d400      	bmi.n	8005ec6 <HAL_RCC_OscConfig+0xf6>
 8005ec4:	e081      	b.n	8005fca <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005ec6:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	2338      	movs	r3, #56	@ 0x38
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b18      	cmp	r3, #24
 8005ed0:	d073      	beq.n	8005fba <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ed2:	69a3      	ldr	r3, [r4, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d100      	bne.n	8005eda <HAL_RCC_OscConfig+0x10a>
 8005ed8:	e0b4      	b.n	8006044 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005eda:	4a83      	ldr	r2, [pc, #524]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005edc:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8005ede:	2101      	movs	r1, #1
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7ff fc96 	bl	8005814 <HAL_GetTick>
 8005ee8:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eea:	4b7f      	ldr	r3, [pc, #508]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eee:	079b      	lsls	r3, r3, #30
 8005ef0:	d46b      	bmi.n	8005fca <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef2:	f7ff fc8f 	bl	8005814 <HAL_GetTick>
 8005ef6:	1b40      	subs	r0, r0, r5
 8005ef8:	2802      	cmp	r0, #2
 8005efa:	d9f6      	bls.n	8005eea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005efc:	2003      	movs	r0, #3
 8005efe:	e19f      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f00:	4a79      	ldr	r2, [pc, #484]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f02:	6811      	ldr	r1, [r2, #0]
 8005f04:	2380      	movs	r3, #128	@ 0x80
 8005f06:	025b      	lsls	r3, r3, #9
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e786      	b.n	8005e1c <HAL_RCC_OscConfig+0x4c>
 8005f0e:	4b76      	ldr	r3, [pc, #472]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	2280      	movs	r2, #128	@ 0x80
 8005f14:	02d2      	lsls	r2, r2, #11
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	2280      	movs	r2, #128	@ 0x80
 8005f1e:	0252      	lsls	r2, r2, #9
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e77a      	b.n	8005e1c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005f26:	f7ff fc75 	bl	8005814 <HAL_GetTick>
 8005f2a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	039b      	lsls	r3, r3, #14
 8005f32:	d58f      	bpl.n	8005e54 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7ff fc6e 	bl	8005814 <HAL_GetTick>
 8005f38:	1b40      	subs	r0, r0, r5
 8005f3a:	2864      	cmp	r0, #100	@ 0x64
 8005f3c:	d9f6      	bls.n	8005f2c <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8005f3e:	2003      	movs	r0, #3
 8005f40:	e17e      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005f42:	2a02      	cmp	r2, #2
 8005f44:	d192      	bne.n	8005e6c <HAL_RCC_OscConfig+0x9c>
 8005f46:	e793      	b.n	8005e70 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f48:	68e3      	ldr	r3, [r4, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d022      	beq.n	8005f94 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005f4e:	4a66      	ldr	r2, [pc, #408]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	4969      	ldr	r1, [pc, #420]	@ (80060f8 <HAL_RCC_OscConfig+0x328>)
 8005f54:	400b      	ands	r3, r1
 8005f56:	6921      	ldr	r1, [r4, #16]
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	2380      	movs	r3, #128	@ 0x80
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f66:	f7ff fc55 	bl	8005814 <HAL_GetTick>
 8005f6a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	055b      	lsls	r3, r3, #21
 8005f72:	d406      	bmi.n	8005f82 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7ff fc4e 	bl	8005814 <HAL_GetTick>
 8005f78:	1b40      	subs	r0, r0, r5
 8005f7a:	2802      	cmp	r0, #2
 8005f7c:	d9f6      	bls.n	8005f6c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8005f7e:	2003      	movs	r0, #3
 8005f80:	e15e      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	4959      	ldr	r1, [pc, #356]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f84:	684b      	ldr	r3, [r1, #4]
 8005f86:	4a5b      	ldr	r2, [pc, #364]	@ (80060f4 <HAL_RCC_OscConfig+0x324>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	6962      	ldr	r2, [r4, #20]
 8005f8c:	0212      	lsls	r2, r2, #8
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
 8005f92:	e794      	b.n	8005ebe <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8005f94:	4a54      	ldr	r2, [pc, #336]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	495b      	ldr	r1, [pc, #364]	@ (8006108 <HAL_RCC_OscConfig+0x338>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f9e:	f7ff fc39 	bl	8005814 <HAL_GetTick>
 8005fa2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fa4:	4b50      	ldr	r3, [pc, #320]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	055b      	lsls	r3, r3, #21
 8005faa:	d588      	bpl.n	8005ebe <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fac:	f7ff fc32 	bl	8005814 <HAL_GetTick>
 8005fb0:	1b40      	subs	r0, r0, r5
 8005fb2:	2802      	cmp	r0, #2
 8005fb4:	d9f6      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8005fb6:	2003      	movs	r0, #3
 8005fb8:	e142      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005fba:	4b4b      	ldr	r3, [pc, #300]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	d503      	bpl.n	8005fca <HAL_RCC_OscConfig+0x1fa>
 8005fc2:	69a3      	ldr	r3, [r4, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d100      	bne.n	8005fca <HAL_RCC_OscConfig+0x1fa>
 8005fc8:	e142      	b.n	8006250 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	075b      	lsls	r3, r3, #29
 8005fce:	d400      	bmi.n	8005fd2 <HAL_RCC_OscConfig+0x202>
 8005fd0:	e0a2      	b.n	8006118 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fd2:	4b45      	ldr	r3, [pc, #276]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	2338      	movs	r3, #56	@ 0x38
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d045      	beq.n	800606a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fde:	4b42      	ldr	r3, [pc, #264]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	d44a      	bmi.n	800607c <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	4b40      	ldr	r3, [pc, #256]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8005fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fea:	2180      	movs	r1, #128	@ 0x80
 8005fec:	0549      	lsls	r1, r1, #21
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8005ffa:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ffc:	4b43      	ldr	r3, [pc, #268]	@ (800610c <HAL_RCC_OscConfig+0x33c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	05db      	lsls	r3, r3, #23
 8006002:	d53d      	bpl.n	8006080 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d04e      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2d8>
 800600a:	2b05      	cmp	r3, #5
 800600c:	d052      	beq.n	80060b4 <HAL_RCC_OscConfig+0x2e4>
 800600e:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8006010:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006012:	2101      	movs	r1, #1
 8006014:	438a      	bics	r2, r1
 8006016:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800601a:	3103      	adds	r1, #3
 800601c:	438a      	bics	r2, r1
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d050      	beq.n	80060c8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7ff fbf5 	bl	8005814 <HAL_GetTick>
 800602a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602c:	4b2e      	ldr	r3, [pc, #184]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 800602e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006030:	079b      	lsls	r3, r3, #30
 8006032:	d46f      	bmi.n	8006114 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7ff fbee 	bl	8005814 <HAL_GetTick>
 8006038:	1b80      	subs	r0, r0, r6
 800603a:	4b35      	ldr	r3, [pc, #212]	@ (8006110 <HAL_RCC_OscConfig+0x340>)
 800603c:	4298      	cmp	r0, r3
 800603e:	d9f5      	bls.n	800602c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8006040:	2003      	movs	r0, #3
 8006042:	e0fd      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8006044:	4a28      	ldr	r2, [pc, #160]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8006046:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8006048:	2101      	movs	r1, #1
 800604a:	438b      	bics	r3, r1
 800604c:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800604e:	f7ff fbe1 	bl	8005814 <HAL_GetTick>
 8006052:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006054:	4b24      	ldr	r3, [pc, #144]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 8006056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006058:	079b      	lsls	r3, r3, #30
 800605a:	d5b6      	bpl.n	8005fca <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605c:	f7ff fbda 	bl	8005814 <HAL_GetTick>
 8006060:	1b40      	subs	r0, r0, r5
 8006062:	2802      	cmp	r0, #2
 8006064:	d9f6      	bls.n	8006054 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8006066:	2003      	movs	r0, #3
 8006068:	e0ea      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800606a:	4b1f      	ldr	r3, [pc, #124]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 800606c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	d552      	bpl.n	8006118 <HAL_RCC_OscConfig+0x348>
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d14f      	bne.n	8006118 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
 800607a:	e0e1      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 800607c:	2500      	movs	r5, #0
 800607e:	e7bd      	b.n	8005ffc <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <HAL_RCC_OscConfig+0x33c>)
 8006082:	6811      	ldr	r1, [r2, #0]
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	430b      	orrs	r3, r1
 800608a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800608c:	f7ff fbc2 	bl	8005814 <HAL_GetTick>
 8006090:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006092:	4b1e      	ldr	r3, [pc, #120]	@ (800610c <HAL_RCC_OscConfig+0x33c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	05db      	lsls	r3, r3, #23
 8006098:	d4b4      	bmi.n	8006004 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609a:	f7ff fbbb 	bl	8005814 <HAL_GetTick>
 800609e:	1b80      	subs	r0, r0, r6
 80060a0:	2802      	cmp	r0, #2
 80060a2:	d9f6      	bls.n	8006092 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 80060a4:	2003      	movs	r0, #3
 80060a6:	e0cb      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a8:	4a0f      	ldr	r2, [pc, #60]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 80060aa:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80060ac:	2101      	movs	r1, #1
 80060ae:	430b      	orrs	r3, r1
 80060b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80060b2:	e7b5      	b.n	8006020 <HAL_RCC_OscConfig+0x250>
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 80060b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060b8:	2104      	movs	r1, #4
 80060ba:	430a      	orrs	r2, r1
 80060bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c0:	3903      	subs	r1, #3
 80060c2:	430a      	orrs	r2, r1
 80060c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060c6:	e7ab      	b.n	8006020 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7ff fba4 	bl	8005814 <HAL_GetTick>
 80060cc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCC_OscConfig+0x318>)
 80060d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d2:	079b      	lsls	r3, r3, #30
 80060d4:	d51e      	bpl.n	8006114 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d6:	f7ff fb9d 	bl	8005814 <HAL_GetTick>
 80060da:	1b80      	subs	r0, r0, r6
 80060dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <HAL_RCC_OscConfig+0x340>)
 80060de:	4298      	cmp	r0, r3
 80060e0:	d9f5      	bls.n	80060ce <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 80060e2:	2003      	movs	r0, #3
 80060e4:	e0ac      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	40021000 	.word	0x40021000
 80060ec:	fffeffff 	.word	0xfffeffff
 80060f0:	fffbffff 	.word	0xfffbffff
 80060f4:	ffff80ff 	.word	0xffff80ff
 80060f8:	ffffc7ff 	.word	0xffffc7ff
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	200000e0 	.word	0x200000e0
 8006104:	200000e8 	.word	0x200000e8
 8006108:	fffffeff 	.word	0xfffffeff
 800610c:	40007000 	.word	0x40007000
 8006110:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006114:	2d01      	cmp	r5, #1
 8006116:	d01e      	beq.n	8006156 <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006118:	69e3      	ldr	r3, [r4, #28]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d100      	bne.n	8006120 <HAL_RCC_OscConfig+0x350>
 800611e:	e099      	b.n	8006254 <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006120:	4a54      	ldr	r2, [pc, #336]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006122:	6891      	ldr	r1, [r2, #8]
 8006124:	2238      	movs	r2, #56	@ 0x38
 8006126:	400a      	ands	r2, r1
 8006128:	2a10      	cmp	r2, #16
 800612a:	d060      	beq.n	80061ee <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800612c:	2b02      	cmp	r3, #2
 800612e:	d018      	beq.n	8006162 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4a50      	ldr	r2, [pc, #320]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	4950      	ldr	r1, [pc, #320]	@ (8006278 <HAL_RCC_OscConfig+0x4a8>)
 8006136:	400b      	ands	r3, r1
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7ff fb6b 	bl	8005814 <HAL_GetTick>
 800613e:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006140:	4b4c      	ldr	r3, [pc, #304]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	019b      	lsls	r3, r3, #6
 8006146:	d54b      	bpl.n	80061e0 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006148:	f7ff fb64 	bl	8005814 <HAL_GetTick>
 800614c:	1b00      	subs	r0, r0, r4
 800614e:	2802      	cmp	r0, #2
 8006150:	d9f6      	bls.n	8006140 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006152:	2003      	movs	r0, #3
 8006154:	e074      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006156:	4a47      	ldr	r2, [pc, #284]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006158:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800615a:	4948      	ldr	r1, [pc, #288]	@ (800627c <HAL_RCC_OscConfig+0x4ac>)
 800615c:	400b      	ands	r3, r1
 800615e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006160:	e7da      	b.n	8006118 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8006162:	4a44      	ldr	r2, [pc, #272]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	4944      	ldr	r1, [pc, #272]	@ (8006278 <HAL_RCC_OscConfig+0x4a8>)
 8006168:	400b      	ands	r3, r1
 800616a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800616c:	f7ff fb52 	bl	8005814 <HAL_GetTick>
 8006170:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006172:	4b40      	ldr	r3, [pc, #256]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	d506      	bpl.n	8006188 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617a:	f7ff fb4b 	bl	8005814 <HAL_GetTick>
 800617e:	1b40      	subs	r0, r0, r5
 8006180:	2802      	cmp	r0, #2
 8006182:	d9f6      	bls.n	8006172 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8006184:	2003      	movs	r0, #3
 8006186:	e05b      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006188:	4a3a      	ldr	r2, [pc, #232]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 800618a:	68d3      	ldr	r3, [r2, #12]
 800618c:	493c      	ldr	r1, [pc, #240]	@ (8006280 <HAL_RCC_OscConfig+0x4b0>)
 800618e:	4019      	ands	r1, r3
 8006190:	6a23      	ldr	r3, [r4, #32]
 8006192:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006194:	4303      	orrs	r3, r0
 8006196:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006198:	0200      	lsls	r0, r0, #8
 800619a:	4303      	orrs	r3, r0
 800619c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800619e:	4303      	orrs	r3, r0
 80061a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80061a2:	4303      	orrs	r3, r0
 80061a4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80061a6:	4303      	orrs	r3, r0
 80061a8:	430b      	orrs	r3, r1
 80061aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	045b      	lsls	r3, r3, #17
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80061b6:	68d1      	ldr	r1, [r2, #12]
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	055b      	lsls	r3, r3, #21
 80061bc:	430b      	orrs	r3, r1
 80061be:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80061c0:	f7ff fb28 	bl	8005814 <HAL_GetTick>
 80061c4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	019b      	lsls	r3, r3, #6
 80061cc:	d406      	bmi.n	80061dc <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ce:	f7ff fb21 	bl	8005814 <HAL_GetTick>
 80061d2:	1b00      	subs	r0, r0, r4
 80061d4:	2802      	cmp	r0, #2
 80061d6:	d9f6      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 80061d8:	2003      	movs	r0, #3
 80061da:	e031      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80061dc:	2000      	movs	r0, #0
 80061de:	e02f      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80061e0:	4a24      	ldr	r2, [pc, #144]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 80061e2:	68d3      	ldr	r3, [r2, #12]
 80061e4:	4927      	ldr	r1, [pc, #156]	@ (8006284 <HAL_RCC_OscConfig+0x4b4>)
 80061e6:	400b      	ands	r3, r1
 80061e8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80061ea:	2000      	movs	r0, #0
 80061ec:	e028      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d032      	beq.n	8006258 <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <HAL_RCC_OscConfig+0x4a4>)
 80061f4:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f6:	2303      	movs	r3, #3
 80061f8:	4013      	ands	r3, r2
 80061fa:	6a21      	ldr	r1, [r4, #32]
 80061fc:	428b      	cmp	r3, r1
 80061fe:	d12d      	bne.n	800625c <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006200:	2370      	movs	r3, #112	@ 0x70
 8006202:	4013      	ands	r3, r2
 8006204:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006206:	428b      	cmp	r3, r1
 8006208:	d12a      	bne.n	8006260 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800620a:	21fe      	movs	r1, #254	@ 0xfe
 800620c:	01c9      	lsls	r1, r1, #7
 800620e:	4011      	ands	r1, r2
 8006210:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006212:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006214:	4299      	cmp	r1, r3
 8006216:	d125      	bne.n	8006264 <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006218:	23f8      	movs	r3, #248	@ 0xf8
 800621a:	039b      	lsls	r3, r3, #14
 800621c:	4013      	ands	r3, r2
 800621e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006220:	428b      	cmp	r3, r1
 8006222:	d121      	bne.n	8006268 <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006224:	23e0      	movs	r3, #224	@ 0xe0
 8006226:	051b      	lsls	r3, r3, #20
 8006228:	4013      	ands	r3, r2
 800622a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800622c:	428b      	cmp	r3, r1
 800622e:	d11d      	bne.n	800626c <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006230:	0f52      	lsrs	r2, r2, #29
 8006232:	0752      	lsls	r2, r2, #29
 8006234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d11a      	bne.n	8006270 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 800623a:	2000      	movs	r0, #0
 800623c:	e000      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 800623e:	2001      	movs	r0, #1
}
 8006240:	b002      	add	sp, #8
 8006242:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006244:	2001      	movs	r0, #1
 8006246:	e7fb      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006248:	2001      	movs	r0, #1
 800624a:	e7f9      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 800624c:	2001      	movs	r0, #1
 800624e:	e7f7      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006250:	2001      	movs	r0, #1
 8006252:	e7f5      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8006254:	2000      	movs	r0, #0
 8006256:	e7f3      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
 800625a:	e7f1      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 800625c:	2001      	movs	r0, #1
 800625e:	e7ef      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 8006260:	2001      	movs	r0, #1
 8006262:	e7ed      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 8006264:	2001      	movs	r0, #1
 8006266:	e7eb      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 8006268:	2001      	movs	r0, #1
 800626a:	e7e9      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 800626c:	2001      	movs	r0, #1
 800626e:	e7e7      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 8006270:	2001      	movs	r0, #1
 8006272:	e7e5      	b.n	8006240 <HAL_RCC_OscConfig+0x470>
 8006274:	40021000 	.word	0x40021000
 8006278:	feffffff 	.word	0xfeffffff
 800627c:	efffffff 	.word	0xefffffff
 8006280:	11c1808c 	.word	0x11c1808c
 8006284:	eefefffc 	.word	0xeefefffc

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800628a:	4b2a      	ldr	r3, [pc, #168]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2238      	movs	r2, #56	@ 0x38
 8006290:	421a      	tst	r2, r3
 8006292:	d107      	bne.n	80062a4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006294:	4b27      	ldr	r3, [pc, #156]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	0ad2      	lsrs	r2, r2, #11
 800629a:	2307      	movs	r3, #7
 800629c:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800629e:	4826      	ldr	r0, [pc, #152]	@ (8006338 <HAL_RCC_GetSysClockFreq+0xb0>)
 80062a0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80062a2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a4:	4b23      	ldr	r3, [pc, #140]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	2338      	movs	r3, #56	@ 0x38
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d03b      	beq.n	8006328 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062b0:	4b20      	ldr	r3, [pc, #128]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	2338      	movs	r3, #56	@ 0x38
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80062bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	2338      	movs	r3, #56	@ 0x38
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d031      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80062c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	2338      	movs	r3, #56	@ 0x38
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b18      	cmp	r3, #24
 80062d2:	d026      	beq.n	8006322 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 80062d4:	2000      	movs	r0, #0
  return sysclockfreq;
 80062d6:	e7e4      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80062d8:	4a16      	ldr	r2, [pc, #88]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062da:	68d1      	ldr	r1, [r2, #12]
 80062dc:	3b0d      	subs	r3, #13
 80062de:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	0912      	lsrs	r2, r2, #4
 80062e4:	2107      	movs	r1, #7
 80062e6:	4011      	ands	r1, r2
 80062e8:	3101      	adds	r1, #1
    switch (pllsource)
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d00f      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80062ee:	4812      	ldr	r0, [pc, #72]	@ (8006338 <HAL_RCC_GetSysClockFreq+0xb0>)
 80062f0:	f7fb ff0a 	bl	8002108 <__udivsi3>
 80062f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	0a12      	lsrs	r2, r2, #8
 80062fa:	237f      	movs	r3, #127	@ 0x7f
 80062fc:	4013      	ands	r3, r2
 80062fe:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 8006302:	68d9      	ldr	r1, [r3, #12]
 8006304:	0f49      	lsrs	r1, r1, #29
 8006306:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006308:	f7fb fefe 	bl	8002108 <__udivsi3>
 800630c:	e7c9      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800630e:	480b      	ldr	r0, [pc, #44]	@ (800633c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006310:	f7fb fefa 	bl	8002108 <__udivsi3>
 8006314:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <HAL_RCC_GetSysClockFreq+0xac>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	0a12      	lsrs	r2, r2, #8
 800631a:	237f      	movs	r3, #127	@ 0x7f
 800631c:	4013      	ands	r3, r2
 800631e:	4358      	muls	r0, r3
        break;
 8006320:	e7ee      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8006322:	20fa      	movs	r0, #250	@ 0xfa
 8006324:	01c0      	lsls	r0, r0, #7
 8006326:	e7bc      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8006328:	4804      	ldr	r0, [pc, #16]	@ (800633c <HAL_RCC_GetSysClockFreq+0xb4>)
 800632a:	e7ba      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 800632c:	2080      	movs	r0, #128	@ 0x80
 800632e:	0200      	lsls	r0, r0, #8
 8006330:	e7b7      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x1a>
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	40021000 	.word	0x40021000
 8006338:	00f42400 	.word	0x00f42400
 800633c:	007a1200 	.word	0x007a1200

08006340 <HAL_RCC_ClockConfig>:
{
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	0004      	movs	r4, r0
 8006344:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006346:	2800      	cmp	r0, #0
 8006348:	d100      	bne.n	800634c <HAL_RCC_ClockConfig+0xc>
 800634a:	e0aa      	b.n	80064a2 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800634c:	4b57      	ldr	r3, [pc, #348]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2307      	movs	r3, #7
 8006352:	4013      	ands	r3, r2
 8006354:	428b      	cmp	r3, r1
 8006356:	d321      	bcc.n	800639c <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	079a      	lsls	r2, r3, #30
 800635c:	d50e      	bpl.n	800637c <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635e:	075b      	lsls	r3, r3, #29
 8006360:	d505      	bpl.n	800636e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006362:	4a53      	ldr	r2, [pc, #332]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006364:	6891      	ldr	r1, [r2, #8]
 8006366:	23e0      	movs	r3, #224	@ 0xe0
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	430b      	orrs	r3, r1
 800636c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800636e:	4a50      	ldr	r2, [pc, #320]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006370:	6893      	ldr	r3, [r2, #8]
 8006372:	4950      	ldr	r1, [pc, #320]	@ (80064b4 <HAL_RCC_ClockConfig+0x174>)
 8006374:	400b      	ands	r3, r1
 8006376:	68a1      	ldr	r1, [r4, #8]
 8006378:	430b      	orrs	r3, r1
 800637a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07db      	lsls	r3, r3, #31
 8006380:	d554      	bpl.n	800642c <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d020      	beq.n	80063ca <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006388:	2b02      	cmp	r3, #2
 800638a:	d03b      	beq.n	8006404 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800638c:	2b00      	cmp	r3, #0
 800638e:	d13f      	bne.n	8006410 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006390:	4a47      	ldr	r2, [pc, #284]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	0552      	lsls	r2, r2, #21
 8006396:	d41c      	bmi.n	80063d2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006398:	2001      	movs	r0, #1
 800639a:	e06a      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639c:	4a43      	ldr	r2, [pc, #268]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	2107      	movs	r1, #7
 80063a2:	438b      	bics	r3, r1
 80063a4:	432b      	orrs	r3, r5
 80063a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80063a8:	f7ff fa34 	bl	8005814 <HAL_GetTick>
 80063ac:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80063ae:	4b3f      	ldr	r3, [pc, #252]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	2307      	movs	r3, #7
 80063b4:	4013      	ands	r3, r2
 80063b6:	42ab      	cmp	r3, r5
 80063b8:	d0ce      	beq.n	8006358 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ba:	f7ff fa2b 	bl	8005814 <HAL_GetTick>
 80063be:	1b80      	subs	r0, r0, r6
 80063c0:	4a3d      	ldr	r2, [pc, #244]	@ (80064b8 <HAL_RCC_ClockConfig+0x178>)
 80063c2:	4290      	cmp	r0, r2
 80063c4:	d9f3      	bls.n	80063ae <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80063c6:	2003      	movs	r0, #3
 80063c8:	e053      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ca:	4a39      	ldr	r2, [pc, #228]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	0392      	lsls	r2, r2, #14
 80063d0:	d569      	bpl.n	80064a6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d2:	4937      	ldr	r1, [pc, #220]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 80063d4:	688a      	ldr	r2, [r1, #8]
 80063d6:	2007      	movs	r0, #7
 80063d8:	4382      	bics	r2, r0
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80063de:	f7ff fa19 	bl	8005814 <HAL_GetTick>
 80063e2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e4:	4b32      	ldr	r3, [pc, #200]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2238      	movs	r2, #56	@ 0x38
 80063ea:	401a      	ands	r2, r3
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d01b      	beq.n	800642c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7ff fa0e 	bl	8005814 <HAL_GetTick>
 80063f8:	1b80      	subs	r0, r0, r6
 80063fa:	4b2f      	ldr	r3, [pc, #188]	@ (80064b8 <HAL_RCC_ClockConfig+0x178>)
 80063fc:	4298      	cmp	r0, r3
 80063fe:	d9f1      	bls.n	80063e4 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8006400:	2003      	movs	r0, #3
 8006402:	e036      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006404:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	0192      	lsls	r2, r2, #6
 800640a:	d4e2      	bmi.n	80063d2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800640c:	2001      	movs	r0, #1
 800640e:	e030      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006410:	2b03      	cmp	r3, #3
 8006412:	d005      	beq.n	8006420 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006414:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006416:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006418:	0792      	lsls	r2, r2, #30
 800641a:	d4da      	bmi.n	80063d2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800641c:	2001      	movs	r0, #1
 800641e:	e028      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006420:	4a23      	ldr	r2, [pc, #140]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006422:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006424:	0792      	lsls	r2, r2, #30
 8006426:	d4d4      	bmi.n	80063d2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006428:	2001      	movs	r0, #1
 800642a:	e022      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800642c:	4b1f      	ldr	r3, [pc, #124]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	2307      	movs	r3, #7
 8006432:	4013      	ands	r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	d81d      	bhi.n	8006474 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	075b      	lsls	r3, r3, #29
 800643c:	d506      	bpl.n	800644c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800643e:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006440:	6893      	ldr	r3, [r2, #8]
 8006442:	491e      	ldr	r1, [pc, #120]	@ (80064bc <HAL_RCC_ClockConfig+0x17c>)
 8006444:	400b      	ands	r3, r1
 8006446:	68e1      	ldr	r1, [r4, #12]
 8006448:	430b      	orrs	r3, r1
 800644a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800644c:	f7ff ff1c 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8006450:	4b17      	ldr	r3, [pc, #92]	@ (80064b0 <HAL_RCC_ClockConfig+0x170>)
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	0a12      	lsrs	r2, r2, #8
 8006456:	230f      	movs	r3, #15
 8006458:	4013      	ands	r3, r2
 800645a:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_RCC_ClockConfig+0x180>)
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	589a      	ldr	r2, [r3, r2]
 8006460:	231f      	movs	r3, #31
 8006462:	4013      	ands	r3, r2
 8006464:	40d8      	lsrs	r0, r3
 8006466:	4b17      	ldr	r3, [pc, #92]	@ (80064c4 <HAL_RCC_ClockConfig+0x184>)
 8006468:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800646a:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <HAL_RCC_ClockConfig+0x188>)
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff f985 	bl	800577c <HAL_InitTick>
}
 8006472:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006474:	4a0d      	ldr	r2, [pc, #52]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	2107      	movs	r1, #7
 800647a:	438b      	bics	r3, r1
 800647c:	432b      	orrs	r3, r5
 800647e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006480:	f7ff f9c8 	bl	8005814 <HAL_GetTick>
 8006484:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCC_ClockConfig+0x16c>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	2307      	movs	r3, #7
 800648c:	4013      	ands	r3, r2
 800648e:	42ab      	cmp	r3, r5
 8006490:	d0d2      	beq.n	8006438 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006492:	f7ff f9bf 	bl	8005814 <HAL_GetTick>
 8006496:	1b80      	subs	r0, r0, r6
 8006498:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <HAL_RCC_ClockConfig+0x178>)
 800649a:	4298      	cmp	r0, r3
 800649c:	d9f3      	bls.n	8006486 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 800649e:	2003      	movs	r0, #3
 80064a0:	e7e7      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 80064a2:	2001      	movs	r0, #1
 80064a4:	e7e5      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 80064a6:	2001      	movs	r0, #1
 80064a8:	e7e3      	b.n	8006472 <HAL_RCC_ClockConfig+0x132>
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	40022000 	.word	0x40022000
 80064b0:	40021000 	.word	0x40021000
 80064b4:	fffff0ff 	.word	0xfffff0ff
 80064b8:	00001388 	.word	0x00001388
 80064bc:	ffff8fff 	.word	0xffff8fff
 80064c0:	080072c4 	.word	0x080072c4
 80064c4:	200000e0 	.word	0x200000e0
 80064c8:	200000e8 	.word	0x200000e8

080064cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	b083      	sub	sp, #12
 80064d0:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064d2:	6803      	ldr	r3, [r0, #0]
 80064d4:	039b      	lsls	r3, r3, #14
 80064d6:	d562      	bpl.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	d41e      	bmi.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064e4:	2180      	movs	r1, #128	@ 0x80
 80064e6:	0549      	lsls	r1, r1, #21
 80064e8:	430a      	orrs	r2, r1
 80064ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80064ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ee:	400b      	ands	r3, r1
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80064f4:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064f6:	4a67      	ldr	r2, [pc, #412]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80064f8:	6811      	ldr	r1, [r2, #0]
 80064fa:	2380      	movs	r3, #128	@ 0x80
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	430b      	orrs	r3, r1
 8006500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006502:	f7ff f987 	bl	8005814 <HAL_GetTick>
 8006506:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006508:	4b62      	ldr	r3, [pc, #392]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	05db      	lsls	r3, r3, #23
 800650e:	d408      	bmi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006510:	f7ff f980 	bl	8005814 <HAL_GetTick>
 8006514:	1b40      	subs	r0, r0, r5
 8006516:	2802      	cmp	r0, #2
 8006518:	d9f6      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 800651a:	2503      	movs	r5, #3
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 800651e:	2600      	movs	r6, #0
 8006520:	e7e9      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006522:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8006524:	2d00      	cmp	r5, #0
 8006526:	d123      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006528:	4b59      	ldr	r3, [pc, #356]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800652a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800652c:	22c0      	movs	r2, #192	@ 0xc0
 800652e:	0092      	lsls	r2, r2, #2
 8006530:	000b      	movs	r3, r1
 8006532:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006534:	4211      	tst	r1, r2
 8006536:	d010      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8006538:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800653a:	429a      	cmp	r2, r3
 800653c:	d00d      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800653e:	4a54      	ldr	r2, [pc, #336]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006540:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006542:	4955      	ldr	r1, [pc, #340]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006544:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006546:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	0249      	lsls	r1, r1, #9
 800654c:	4301      	orrs	r1, r0
 800654e:	65d1      	str	r1, [r2, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006550:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8006552:	4852      	ldr	r0, [pc, #328]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006554:	4001      	ands	r1, r0
 8006556:	65d1      	str	r1, [r2, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006558:	65d3      	str	r3, [r2, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d410      	bmi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 800655e:	2d00      	cmp	r5, #0
 8006560:	d106      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006562:	4a4b      	ldr	r2, [pc, #300]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006564:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006566:	494c      	ldr	r1, [pc, #304]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006568:	400b      	ands	r3, r1
 800656a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800656c:	430b      	orrs	r3, r1
 800656e:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006570:	2e01      	cmp	r6, #1
 8006572:	d115      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006574:	4a46      	ldr	r2, [pc, #280]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006576:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006578:	4949      	ldr	r1, [pc, #292]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800657a:	400b      	ands	r3, r1
 800657c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800657e:	e00f      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8006580:	f7ff f948 	bl	8005814 <HAL_GetTick>
 8006584:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006586:	4b42      	ldr	r3, [pc, #264]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658a:	079b      	lsls	r3, r3, #30
 800658c:	d4e7      	bmi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658e:	f7ff f941 	bl	8005814 <HAL_GetTick>
 8006592:	1bc0      	subs	r0, r0, r7
 8006594:	4b43      	ldr	r3, [pc, #268]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006596:	4298      	cmp	r0, r3
 8006598:	d9f5      	bls.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 800659a:	2503      	movs	r5, #3
 800659c:	e7df      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800659e:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07db      	lsls	r3, r3, #31
 80065a4:	d506      	bpl.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065a8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065aa:	2103      	movs	r1, #3
 80065ac:	438b      	bics	r3, r1
 80065ae:	6861      	ldr	r1, [r4, #4]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	06db      	lsls	r3, r3, #27
 80065b8:	d506      	bpl.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ba:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065be:	493a      	ldr	r1, [pc, #232]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80065c0:	400b      	ands	r3, r1
 80065c2:	68a1      	ldr	r1, [r4, #8]
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	059b      	lsls	r3, r3, #22
 80065cc:	d506      	bpl.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065ce:	4a30      	ldr	r2, [pc, #192]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065d2:	4936      	ldr	r1, [pc, #216]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065d4:	400b      	ands	r3, r1
 80065d6:	6961      	ldr	r1, [r4, #20]
 80065d8:	430b      	orrs	r3, r1
 80065da:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	055b      	lsls	r3, r3, #21
 80065e0:	d506      	bpl.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065e6:	4932      	ldr	r1, [pc, #200]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80065e8:	400b      	ands	r3, r1
 80065ea:	69a1      	ldr	r1, [r4, #24]
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	069b      	lsls	r3, r3, #26
 80065f4:	d506      	bpl.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065f6:	4a26      	ldr	r2, [pc, #152]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065f8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065fa:	492e      	ldr	r1, [pc, #184]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80065fc:	400b      	ands	r3, r1
 80065fe:	68e1      	ldr	r1, [r4, #12]
 8006600:	430b      	orrs	r3, r1
 8006602:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	045b      	lsls	r3, r3, #17
 8006608:	d50b      	bpl.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800660a:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800660c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	69e1      	ldr	r1, [r4, #28]
 8006614:	430b      	orrs	r3, r1
 8006616:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006618:	69e2      	ldr	r2, [r4, #28]
 800661a:	2380      	movs	r3, #128	@ 0x80
 800661c:	05db      	lsls	r3, r3, #23
 800661e:	429a      	cmp	r2, r3
 8006620:	d020      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x198>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	d50b      	bpl.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006628:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800662a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800662c:	4922      	ldr	r1, [pc, #136]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800662e:	400b      	ands	r3, r1
 8006630:	6a21      	ldr	r1, [r4, #32]
 8006632:	430b      	orrs	r3, r1
 8006634:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006636:	6a22      	ldr	r2, [r4, #32]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	03db      	lsls	r3, r3, #15
 800663c:	429a      	cmp	r2, r3
 800663e:	d018      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	051b      	lsls	r3, r3, #20
 8006644:	d50b      	bpl.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006646:	4a12      	ldr	r2, [pc, #72]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006648:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800664a:	491c      	ldr	r1, [pc, #112]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800664c:	400b      	ands	r3, r1
 800664e:	6921      	ldr	r1, [r4, #16]
 8006650:	430b      	orrs	r3, r1
 8006652:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	2380      	movs	r3, #128	@ 0x80
 8006658:	01db      	lsls	r3, r3, #7
 800665a:	429a      	cmp	r2, r3
 800665c:	d010      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800665e:	0028      	movs	r0, r5
 8006660:	b003      	add	sp, #12
 8006662:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006664:	4a0a      	ldr	r2, [pc, #40]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006666:	68d1      	ldr	r1, [r2, #12]
 8006668:	2380      	movs	r3, #128	@ 0x80
 800666a:	025b      	lsls	r3, r3, #9
 800666c:	430b      	orrs	r3, r1
 800666e:	60d3      	str	r3, [r2, #12]
 8006670:	e7d7      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006672:	4a07      	ldr	r2, [pc, #28]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006674:	68d1      	ldr	r1, [r2, #12]
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	045b      	lsls	r3, r3, #17
 800667a:	430b      	orrs	r3, r1
 800667c:	60d3      	str	r3, [r2, #12]
 800667e:	e7df      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006680:	4a03      	ldr	r2, [pc, #12]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006682:	68d1      	ldr	r1, [r2, #12]
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	025b      	lsls	r3, r3, #9
 8006688:	430b      	orrs	r3, r1
 800668a:	60d3      	str	r3, [r2, #12]
 800668c:	e7e7      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	40021000 	.word	0x40021000
 8006694:	40007000 	.word	0x40007000
 8006698:	fffffcff 	.word	0xfffffcff
 800669c:	fffeffff 	.word	0xfffeffff
 80066a0:	efffffff 	.word	0xefffffff
 80066a4:	00001388 	.word	0x00001388
 80066a8:	fffff3ff 	.word	0xfffff3ff
 80066ac:	fff3ffff 	.word	0xfff3ffff
 80066b0:	ffcfffff 	.word	0xffcfffff
 80066b4:	ffffcfff 	.word	0xffffcfff
 80066b8:	ffbfffff 	.word	0xffbfffff
 80066bc:	ffff3fff 	.word	0xffff3fff

080066c0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c2:	4a21      	ldr	r2, [pc, #132]	@ (8006748 <TIM_Base_SetConfig+0x88>)
 80066c4:	4290      	cmp	r0, r2
 80066c6:	d006      	beq.n	80066d6 <TIM_Base_SetConfig+0x16>
 80066c8:	2280      	movs	r2, #128	@ 0x80
 80066ca:	05d2      	lsls	r2, r2, #23
 80066cc:	4290      	cmp	r0, r2
 80066ce:	d002      	beq.n	80066d6 <TIM_Base_SetConfig+0x16>
 80066d0:	4a1e      	ldr	r2, [pc, #120]	@ (800674c <TIM_Base_SetConfig+0x8c>)
 80066d2:	4290      	cmp	r0, r2
 80066d4:	d103      	bne.n	80066de <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d6:	2270      	movs	r2, #112	@ 0x70
 80066d8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80066da:	684a      	ldr	r2, [r1, #4]
 80066dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	4a1a      	ldr	r2, [pc, #104]	@ (8006748 <TIM_Base_SetConfig+0x88>)
 80066e0:	4290      	cmp	r0, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_Base_SetConfig+0x44>
 80066e4:	2280      	movs	r2, #128	@ 0x80
 80066e6:	05d2      	lsls	r2, r2, #23
 80066e8:	4290      	cmp	r0, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_Base_SetConfig+0x44>
 80066ec:	4a17      	ldr	r2, [pc, #92]	@ (800674c <TIM_Base_SetConfig+0x8c>)
 80066ee:	4290      	cmp	r0, r2
 80066f0:	d008      	beq.n	8006704 <TIM_Base_SetConfig+0x44>
 80066f2:	4a17      	ldr	r2, [pc, #92]	@ (8006750 <TIM_Base_SetConfig+0x90>)
 80066f4:	4290      	cmp	r0, r2
 80066f6:	d005      	beq.n	8006704 <TIM_Base_SetConfig+0x44>
 80066f8:	4a16      	ldr	r2, [pc, #88]	@ (8006754 <TIM_Base_SetConfig+0x94>)
 80066fa:	4290      	cmp	r0, r2
 80066fc:	d002      	beq.n	8006704 <TIM_Base_SetConfig+0x44>
 80066fe:	4a16      	ldr	r2, [pc, #88]	@ (8006758 <TIM_Base_SetConfig+0x98>)
 8006700:	4290      	cmp	r0, r2
 8006702:	d103      	bne.n	800670c <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006704:	4a15      	ldr	r2, [pc, #84]	@ (800675c <TIM_Base_SetConfig+0x9c>)
 8006706:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006708:	68cb      	ldr	r3, [r1, #12]
 800670a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	2280      	movs	r2, #128	@ 0x80
 800670e:	4393      	bics	r3, r2
 8006710:	694a      	ldr	r2, [r1, #20]
 8006712:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006714:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006716:	688b      	ldr	r3, [r1, #8]
 8006718:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800671a:	680b      	ldr	r3, [r1, #0]
 800671c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800671e:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <TIM_Base_SetConfig+0x88>)
 8006720:	4298      	cmp	r0, r3
 8006722:	d005      	beq.n	8006730 <TIM_Base_SetConfig+0x70>
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <TIM_Base_SetConfig+0x94>)
 8006726:	4298      	cmp	r0, r3
 8006728:	d002      	beq.n	8006730 <TIM_Base_SetConfig+0x70>
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <TIM_Base_SetConfig+0x98>)
 800672c:	4298      	cmp	r0, r3
 800672e:	d101      	bne.n	8006734 <TIM_Base_SetConfig+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006730:	690b      	ldr	r3, [r1, #16]
 8006732:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006734:	2301      	movs	r3, #1
 8006736:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006738:	6902      	ldr	r2, [r0, #16]
 800673a:	4213      	tst	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0x86>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673e:	6903      	ldr	r3, [r0, #16]
 8006740:	2201      	movs	r2, #1
 8006742:	4393      	bics	r3, r2
 8006744:	6103      	str	r3, [r0, #16]
  }
}
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40000400 	.word	0x40000400
 8006750:	40002000 	.word	0x40002000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800
 800675c:	fffffcff 	.word	0xfffffcff

08006760 <HAL_TIM_Encoder_Init>:
{
 8006760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006762:	46c6      	mov	lr, r8
 8006764:	b500      	push	{lr}
 8006766:	0004      	movs	r4, r0
 8006768:	000d      	movs	r5, r1
  if (htim == NULL)
 800676a:	2800      	cmp	r0, #0
 800676c:	d04d      	beq.n	800680a <HAL_TIM_Encoder_Init+0xaa>
  if (htim->State == HAL_TIM_STATE_RESET)
 800676e:	233d      	movs	r3, #61	@ 0x3d
 8006770:	5cc3      	ldrb	r3, [r0, r3]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d043      	beq.n	80067fe <HAL_TIM_Encoder_Init+0x9e>
  htim->State = HAL_TIM_STATE_BUSY;
 8006776:	263d      	movs	r6, #61	@ 0x3d
 8006778:	2302      	movs	r3, #2
 800677a:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	6893      	ldr	r3, [r2, #8]
 8006780:	4923      	ldr	r1, [pc, #140]	@ (8006810 <HAL_TIM_Encoder_Init+0xb0>)
 8006782:	400b      	ands	r3, r1
 8006784:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006786:	0021      	movs	r1, r4
 8006788:	c901      	ldmia	r1!, {r0}
 800678a:	f7ff ff99 	bl	80066c0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006792:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8006794:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006796:	6828      	ldr	r0, [r5, #0]
 8006798:	4318      	orrs	r0, r3
 800679a:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800679c:	4b1d      	ldr	r3, [pc, #116]	@ (8006814 <HAL_TIM_Encoder_Init+0xb4>)
 800679e:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067a0:	68ab      	ldr	r3, [r5, #8]
 80067a2:	69a8      	ldr	r0, [r5, #24]
 80067a4:	0200      	lsls	r0, r0, #8
 80067a6:	4303      	orrs	r3, r0
 80067a8:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006818 <HAL_TIM_Encoder_Init+0xb8>)
 80067ac:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067ae:	68ea      	ldr	r2, [r5, #12]
 80067b0:	69e8      	ldr	r0, [r5, #28]
 80067b2:	0200      	lsls	r0, r0, #8
 80067b4:	4302      	orrs	r2, r0
 80067b6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067b8:	692b      	ldr	r3, [r5, #16]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	6a28      	ldr	r0, [r5, #32]
 80067be:	0300      	lsls	r0, r0, #12
 80067c0:	4303      	orrs	r3, r0
 80067c2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067c4:	22aa      	movs	r2, #170	@ 0xaa
 80067c6:	4397      	bics	r7, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067c8:	686a      	ldr	r2, [r5, #4]
 80067ca:	696d      	ldr	r5, [r5, #20]
 80067cc:	012d      	lsls	r5, r5, #4
 80067ce:	432a      	orrs	r2, r5
 80067d0:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 80067d2:	4640      	mov	r0, r8
 80067d4:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80067d6:	6821      	ldr	r1, [r4, #0]
 80067d8:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067de:	2301      	movs	r3, #1
 80067e0:	2248      	movs	r2, #72	@ 0x48
 80067e2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	3a0a      	subs	r2, #10
 80067e6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	3201      	adds	r2, #1
 80067ea:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	3205      	adds	r2, #5
 80067ee:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	3201      	adds	r2, #1
 80067f2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 80067f6:	2000      	movs	r0, #0
}
 80067f8:	bc80      	pop	{r7}
 80067fa:	46b8      	mov	r8, r7
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80067fe:	333c      	adds	r3, #60	@ 0x3c
 8006800:	2200      	movs	r2, #0
 8006802:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8006804:	f7fe fb84 	bl	8004f10 <HAL_TIM_Encoder_MspInit>
 8006808:	e7b5      	b.n	8006776 <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 800680a:	2001      	movs	r0, #1
 800680c:	e7f4      	b.n	80067f8 <HAL_TIM_Encoder_Init+0x98>
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	fffebff8 	.word	0xfffebff8
 8006814:	fffffcfc 	.word	0xfffffcfc
 8006818:	ffff0303 	.word	0xffff0303

0800681c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800681c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800681e:	231f      	movs	r3, #31
 8006820:	4019      	ands	r1, r3
 8006822:	2401      	movs	r4, #1
 8006824:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006826:	6a03      	ldr	r3, [r0, #32]
 8006828:	43a3      	bics	r3, r4
 800682a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800682c:	6a03      	ldr	r3, [r0, #32]
 800682e:	408a      	lsls	r2, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	6203      	str	r3, [r0, #32]
}
 8006834:	bd10      	pop	{r4, pc}

08006836 <HAL_TIM_Encoder_Start>:
{
 8006836:	b570      	push	{r4, r5, r6, lr}
 8006838:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800683a:	233e      	movs	r3, #62	@ 0x3e
 800683c:	5cc0      	ldrb	r0, [r0, r3]
 800683e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006840:	3301      	adds	r3, #1
 8006842:	5ce3      	ldrb	r3, [r4, r3]
 8006844:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006846:	2244      	movs	r2, #68	@ 0x44
 8006848:	5ca2      	ldrb	r2, [r4, r2]
 800684a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800684c:	2545      	movs	r5, #69	@ 0x45
 800684e:	5d65      	ldrb	r5, [r4, r5]
 8006850:	b2ed      	uxtb	r5, r5
  if (Channel == TIM_CHANNEL_1)
 8006852:	2900      	cmp	r1, #0
 8006854:	d117      	bne.n	8006886 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006856:	2801      	cmp	r0, #1
 8006858:	d145      	bne.n	80068e6 <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800685a:	2a01      	cmp	r2, #1
 800685c:	d144      	bne.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685e:	2302      	movs	r3, #2
 8006860:	323d      	adds	r2, #61	@ 0x3d
 8006862:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006864:	3206      	adds	r2, #6
 8006866:	54a3      	strb	r3, [r4, r2]
  switch (Channel)
 8006868:	2900      	cmp	r1, #0
 800686a:	d02a      	beq.n	80068c2 <HAL_TIM_Encoder_Start+0x8c>
 800686c:	2904      	cmp	r1, #4
 800686e:	d034      	beq.n	80068da <HAL_TIM_Encoder_Start+0xa4>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	2201      	movs	r2, #1
 8006874:	2100      	movs	r1, #0
 8006876:	f7ff ffd1 	bl	800681c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	2104      	movs	r1, #4
 8006880:	f7ff ffcc 	bl	800681c <TIM_CCxChannelCmd>
      break;
 8006884:	e022      	b.n	80068cc <HAL_TIM_Encoder_Start+0x96>
  else if (Channel == TIM_CHANNEL_2)
 8006886:	2904      	cmp	r1, #4
 8006888:	d011      	beq.n	80068ae <HAL_TIM_Encoder_Start+0x78>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800688a:	2801      	cmp	r0, #1
 800688c:	d131      	bne.n	80068f2 <HAL_TIM_Encoder_Start+0xbc>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800688e:	2b01      	cmp	r3, #1
 8006890:	d12a      	bne.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006892:	2a01      	cmp	r2, #1
 8006894:	d12f      	bne.n	80068f6 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006896:	2d01      	cmp	r5, #1
 8006898:	d12f      	bne.n	80068fa <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689a:	3301      	adds	r3, #1
 800689c:	323d      	adds	r2, #61	@ 0x3d
 800689e:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a0:	3201      	adds	r2, #1
 80068a2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a4:	3205      	adds	r2, #5
 80068a6:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a8:	3201      	adds	r2, #1
 80068aa:	54a3      	strb	r3, [r4, r2]
 80068ac:	e7dc      	b.n	8006868 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d11b      	bne.n	80068ea <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068b2:	2d01      	cmp	r5, #1
 80068b4:	d11b      	bne.n	80068ee <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b6:	3301      	adds	r3, #1
 80068b8:	223f      	movs	r2, #63	@ 0x3f
 80068ba:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068bc:	3206      	adds	r2, #6
 80068be:	54a3      	strb	r3, [r4, r2]
 80068c0:	e7d2      	b.n	8006868 <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	2100      	movs	r1, #0
 80068c8:	f7ff ffa8 	bl	800681c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	2101      	movs	r1, #1
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80068d6:	2000      	movs	r0, #0
 80068d8:	e006      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	2104      	movs	r1, #4
 80068e0:	f7ff ff9c 	bl	800681c <TIM_CCxChannelCmd>
      break;
 80068e4:	e7f2      	b.n	80068cc <HAL_TIM_Encoder_Start+0x96>
      return HAL_ERROR;
 80068e6:	2001      	movs	r0, #1
}
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7fc      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
 80068ee:	0018      	movs	r0, r3
 80068f0:	e7fa      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
      return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
 80068f4:	e7f8      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
 80068f6:	0018      	movs	r0, r3
 80068f8:	e7f6      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
 80068fa:	0010      	movs	r0, r2
 80068fc:	e7f4      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xb2>
	...

08006900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006900:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	233c      	movs	r3, #60	@ 0x3c
 8006904:	5cc3      	ldrb	r3, [r0, r3]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d02d      	beq.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800690a:	233c      	movs	r3, #60	@ 0x3c
 800690c:	2201      	movs	r2, #1
 800690e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	3301      	adds	r3, #1
 8006912:	3201      	adds	r2, #1
 8006914:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006916:	6802      	ldr	r2, [r0, #0]
 8006918:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800691a:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800691c:	4c13      	ldr	r4, [pc, #76]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800691e:	42a2      	cmp	r2, r4
 8006920:	d01c      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006922:	2470      	movs	r4, #112	@ 0x70
 8006924:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006926:	680c      	ldr	r4, [r1, #0]
 8006928:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692c:	6803      	ldr	r3, [r0, #0]
 800692e:	4a0f      	ldr	r2, [pc, #60]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d006      	beq.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006934:	2280      	movs	r2, #128	@ 0x80
 8006936:	05d2      	lsls	r2, r2, #23
 8006938:	4293      	cmp	r3, r2
 800693a:	d002      	beq.n	8006942 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800693c:	4a0c      	ldr	r2, [pc, #48]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d104      	bne.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006942:	2280      	movs	r2, #128	@ 0x80
 8006944:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006946:	688a      	ldr	r2, [r1, #8]
 8006948:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694c:	233d      	movs	r3, #61	@ 0x3d
 800694e:	2201      	movs	r2, #1
 8006950:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8006952:	3b01      	subs	r3, #1
 8006954:	2200      	movs	r2, #0
 8006956:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8006958:	2000      	movs	r0, #0
}
 800695a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800695c:	4c05      	ldr	r4, [pc, #20]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800695e:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006960:	684c      	ldr	r4, [r1, #4]
 8006962:	4323      	orrs	r3, r4
 8006964:	e7dd      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8006966:	2002      	movs	r0, #2
 8006968:	e7f7      	b.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40000400 	.word	0x40000400
 8006974:	ff0fffff 	.word	0xff0fffff

08006978 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800697a:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800697c:	e016      	b.n	80069ac <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	469c      	mov	ip, r3
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006982:	68c4      	ldr	r4, [r0, #12]
 8006984:	002b      	movs	r3, r5
 8006986:	436b      	muls	r3, r5
 8006988:	005e      	lsls	r6, r3, #1
 800698a:	18f6      	adds	r6, r6, r3
 800698c:	43f7      	mvns	r7, r6
 800698e:	43b4      	bics	r4, r6
 8006990:	4666      	mov	r6, ip
 8006992:	435e      	muls	r6, r3
 8006994:	4334      	orrs	r4, r6
 8006996:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006998:	684c      	ldr	r4, [r1, #4]
 800699a:	2c02      	cmp	r4, #2
 800699c:	d025      	beq.n	80069ea <LL_GPIO_Init+0x72>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800699e:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80069a0:	6804      	ldr	r4, [r0, #0]
 80069a2:	403c      	ands	r4, r7
 80069a4:	436b      	muls	r3, r5
 80069a6:	4323      	orrs	r3, r4
 80069a8:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80069aa:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80069ac:	680c      	ldr	r4, [r1, #0]
 80069ae:	0023      	movs	r3, r4
 80069b0:	40d3      	lsrs	r3, r2
 80069b2:	d03a      	beq.n	8006a2a <LL_GPIO_Init+0xb2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80069b4:	2301      	movs	r3, #1
 80069b6:	4093      	lsls	r3, r2
 80069b8:	0025      	movs	r5, r4
 80069ba:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80069bc:	421c      	tst	r4, r3
 80069be:	d0f4      	beq.n	80069aa <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80069c0:	684b      	ldr	r3, [r1, #4]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d8da      	bhi.n	800697e <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80069c8:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80069ca:	6883      	ldr	r3, [r0, #8]
 80069cc:	002c      	movs	r4, r5
 80069ce:	436c      	muls	r4, r5
 80069d0:	0066      	lsls	r6, r4, #1
 80069d2:	1936      	adds	r6, r6, r4
 80069d4:	43b3      	bics	r3, r6
 80069d6:	437c      	muls	r4, r7
 80069d8:	4323      	orrs	r3, r4
 80069da:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80069dc:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80069de:	6843      	ldr	r3, [r0, #4]
 80069e0:	43ab      	bics	r3, r5
 80069e2:	436c      	muls	r4, r5
 80069e4:	4323      	orrs	r3, r4
 80069e6:	6043      	str	r3, [r0, #4]
}
 80069e8:	e7c9      	b.n	800697e <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 80069ea:	2dff      	cmp	r5, #255	@ 0xff
 80069ec:	d80d      	bhi.n	8006a0a <LL_GPIO_Init+0x92>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80069ee:	694c      	ldr	r4, [r1, #20]
 80069f0:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80069f2:	6a06      	ldr	r6, [r0, #32]
 80069f4:	001c      	movs	r4, r3
 80069f6:	436c      	muls	r4, r5
 80069f8:	436c      	muls	r4, r5
 80069fa:	0125      	lsls	r5, r4, #4
 80069fc:	1b2d      	subs	r5, r5, r4
 80069fe:	43ae      	bics	r6, r5
 8006a00:	4665      	mov	r5, ip
 8006a02:	436c      	muls	r4, r5
 8006a04:	4334      	orrs	r4, r6
 8006a06:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8006a08:	e7c9      	b.n	800699e <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006a0a:	694c      	ldr	r4, [r1, #20]
 8006a0c:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006a0e:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8006a10:	0a2d      	lsrs	r5, r5, #8
 8006a12:	002c      	movs	r4, r5
 8006a14:	436c      	muls	r4, r5
 8006a16:	436c      	muls	r4, r5
 8006a18:	436c      	muls	r4, r5
 8006a1a:	0125      	lsls	r5, r4, #4
 8006a1c:	1b2d      	subs	r5, r5, r4
 8006a1e:	43ae      	bics	r6, r5
 8006a20:	4665      	mov	r5, ip
 8006a22:	436c      	muls	r4, r5
 8006a24:	4334      	orrs	r4, r6
 8006a26:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8006a28:	e7b9      	b.n	800699e <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006a30 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a30:	4b05      	ldr	r3, [pc, #20]	@ (8006a48 <RCC_GetHCLKClockFreq+0x18>)
 8006a32:	689a      	ldr	r2, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006a34:	0a12      	lsrs	r2, r2, #8
 8006a36:	230f      	movs	r3, #15
 8006a38:	4013      	ands	r3, r2
 8006a3a:	4a04      	ldr	r2, [pc, #16]	@ (8006a4c <RCC_GetHCLKClockFreq+0x1c>)
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	589a      	ldr	r2, [r3, r2]
 8006a40:	231f      	movs	r3, #31
 8006a42:	4013      	ands	r3, r2
 8006a44:	40d8      	lsrs	r0, r3
}
 8006a46:	4770      	bx	lr
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	080072c4 	.word	0x080072c4

08006a50 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <RCC_GetPCLK1ClockFreq+0x18>)
 8006a52:	689a      	ldr	r2, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006a54:	0b12      	lsrs	r2, r2, #12
 8006a56:	2307      	movs	r3, #7
 8006a58:	4013      	ands	r3, r2
 8006a5a:	4a04      	ldr	r2, [pc, #16]	@ (8006a6c <RCC_GetPCLK1ClockFreq+0x1c>)
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	589a      	ldr	r2, [r3, r2]
 8006a60:	231f      	movs	r3, #31
 8006a62:	4013      	ands	r3, r2
 8006a64:	40d8      	lsrs	r0, r3
}
 8006a66:	4770      	bx	lr
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	080072a4 	.word	0x080072a4

08006a70 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006a70:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006a72:	4b0e      	ldr	r3, [pc, #56]	@ (8006aac <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	2303      	movs	r3, #3
 8006a78:	4013      	ands	r3, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d013      	beq.n	8006aa6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a80:	4c0a      	ldr	r4, [pc, #40]	@ (8006aac <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	207f      	movs	r0, #127	@ 0x7f
 8006a88:	4018      	ands	r0, r3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006a8a:	4350      	muls	r0, r2
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006a8c:	68e3      	ldr	r3, [r4, #12]
 8006a8e:	091b      	lsrs	r3, r3, #4
 8006a90:	2107      	movs	r1, #7
 8006a92:	4019      	ands	r1, r3
 8006a94:	3101      	adds	r1, #1
 8006a96:	f7fb fb37 	bl	8002108 <__udivsi3>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006a9a:	68e1      	ldr	r1, [r4, #12]
 8006a9c:	0f49      	lsrs	r1, r1, #29
 8006a9e:	3101      	adds	r1, #1
 8006aa0:	f7fb fb32 	bl	8002108 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006aa4:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 8006aa6:	4a03      	ldr	r2, [pc, #12]	@ (8006ab4 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 8006aa8:	e7ea      	b.n	8006a80 <RCC_PLL_GetFreqDomain_SYS+0x10>
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	007a1200 	.word	0x007a1200

08006ab8 <RCC_GetSystemClockFreq>:
{
 8006ab8:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <RCC_GetSystemClockFreq+0x2c>)
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	2338      	movs	r3, #56	@ 0x38
 8006ac0:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d00c      	beq.n	8006ae0 <RCC_GetSystemClockFreq+0x28>
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d102      	bne.n	8006ad0 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006aca:	f7ff ffd1 	bl	8006a70 <RCC_PLL_GetFreqDomain_SYS>
}
 8006ace:	bd10      	pop	{r4, pc}
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006ad0:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <RCC_GetSystemClockFreq+0x2c>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	0ad2      	lsrs	r2, r2, #11
 8006ad6:	2307      	movs	r3, #7
 8006ad8:	4013      	ands	r3, r2
      frequency = (HSI_VALUE / hsidiv);
 8006ada:	4803      	ldr	r0, [pc, #12]	@ (8006ae8 <RCC_GetSystemClockFreq+0x30>)
 8006adc:	40d8      	lsrs	r0, r3
      break;
 8006ade:	e7f6      	b.n	8006ace <RCC_GetSystemClockFreq+0x16>
  switch (LL_RCC_GetSysClkSource())
 8006ae0:	4802      	ldr	r0, [pc, #8]	@ (8006aec <RCC_GetSystemClockFreq+0x34>)
  return frequency;
 8006ae2:	e7f4      	b.n	8006ace <RCC_GetSystemClockFreq+0x16>
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	00f42400 	.word	0x00f42400
 8006aec:	007a1200 	.word	0x007a1200

08006af0 <LL_RCC_GetSystemClocksFreq>:
{
 8006af0:	b510      	push	{r4, lr}
 8006af2:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006af4:	f7ff ffe0 	bl	8006ab8 <RCC_GetSystemClockFreq>
 8006af8:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006afa:	f7ff ff99 	bl	8006a30 <RCC_GetHCLKClockFreq>
 8006afe:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006b00:	f7ff ffa6 	bl	8006a50 <RCC_GetPCLK1ClockFreq>
 8006b04:	60a0      	str	r0, [r4, #8]
}
 8006b06:	bd10      	pop	{r4, pc}

08006b08 <LL_RCC_GetUSARTClockFreq>:
{
 8006b08:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006b0a:	2803      	cmp	r0, #3
 8006b0c:	d001      	beq.n	8006b12 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006b0e:	2000      	movs	r0, #0
}
 8006b10:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006b12:	4b16      	ldr	r3, [pc, #88]	@ (8006b6c <LL_RCC_GetUSARTClockFreq+0x64>)
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	4003      	ands	r3, r0
 8006b18:	0400      	lsls	r0, r0, #16
 8006b1a:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006b1c:	4a14      	ldr	r2, [pc, #80]	@ (8006b70 <LL_RCC_GetUSARTClockFreq+0x68>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00f      	beq.n	8006b42 <LL_RCC_GetUSARTClockFreq+0x3a>
 8006b22:	4a14      	ldr	r2, [pc, #80]	@ (8006b74 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d016      	beq.n	8006b56 <LL_RCC_GetUSARTClockFreq+0x4e>
 8006b28:	4a13      	ldr	r2, [pc, #76]	@ (8006b78 <LL_RCC_GetUSARTClockFreq+0x70>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d006      	beq.n	8006b3c <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006b2e:	f7ff ffc3 	bl	8006ab8 <RCC_GetSystemClockFreq>
 8006b32:	f7ff ff7d 	bl	8006a30 <RCC_GetHCLKClockFreq>
 8006b36:	f7ff ff8b 	bl	8006a50 <RCC_GetPCLK1ClockFreq>
        break;
 8006b3a:	e7e9      	b.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8006b3c:	f7ff ffbc 	bl	8006ab8 <RCC_GetSystemClockFreq>
        break;
 8006b40:	e7e6      	b.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b42:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <LL_RCC_GetUSARTClockFreq+0x64>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	2380      	movs	r3, #128	@ 0x80
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	4018      	ands	r0, r3
 8006b4e:	421a      	tst	r2, r3
 8006b50:	d0de      	beq.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = HSI_VALUE;
 8006b52:	480a      	ldr	r0, [pc, #40]	@ (8006b7c <LL_RCC_GetUSARTClockFreq+0x74>)
 8006b54:	e7dc      	b.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b56:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <LL_RCC_GetUSARTClockFreq+0x64>)
 8006b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	0010      	movs	r0, r2
 8006b5e:	4018      	ands	r0, r3
 8006b60:	421a      	tst	r2, r3
 8006b62:	d0d5      	beq.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8006b64:	2080      	movs	r0, #128	@ 0x80
 8006b66:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8006b68:	e7d2      	b.n	8006b10 <LL_RCC_GetUSARTClockFreq+0x8>
 8006b6a:	46c0      	nop			@ (mov r8, r8)
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	00030002 	.word	0x00030002
 8006b74:	00030003 	.word	0x00030003
 8006b78:	00030001 	.word	0x00030001
 8006b7c:	00f42400 	.word	0x00f42400

08006b80 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006b80:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006b82:	6a03      	ldr	r3, [r0, #32]
 8006b84:	2601      	movs	r6, #1
 8006b86:	43b3      	bics	r3, r6
 8006b88:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006b8a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006b8c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006b8e:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006b90:	4c16      	ldr	r4, [pc, #88]	@ (8006bec <OC1Config+0x6c>)
 8006b92:	4022      	ands	r2, r4
 8006b94:	680c      	ldr	r4, [r1, #0]
 8006b96:	4314      	orrs	r4, r2

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006b98:	2202      	movs	r2, #2
 8006b9a:	4393      	bics	r3, r2
 8006b9c:	690a      	ldr	r2, [r1, #16]
 8006b9e:	4313      	orrs	r3, r2

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006ba0:	43b3      	bics	r3, r6
 8006ba2:	684a      	ldr	r2, [r1, #4]
 8006ba4:	4313      	orrs	r3, r2

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	4a12      	ldr	r2, [pc, #72]	@ (8006bf0 <OC1Config+0x70>)
 8006ba8:	4290      	cmp	r0, r2
 8006baa:	d005      	beq.n	8006bb8 <OC1Config+0x38>
 8006bac:	4a11      	ldr	r2, [pc, #68]	@ (8006bf4 <OC1Config+0x74>)
 8006bae:	4290      	cmp	r0, r2
 8006bb0:	d002      	beq.n	8006bb8 <OC1Config+0x38>
 8006bb2:	4a11      	ldr	r2, [pc, #68]	@ (8006bf8 <OC1Config+0x78>)
 8006bb4:	4290      	cmp	r0, r2
 8006bb6:	d112      	bne.n	8006bde <OC1Config+0x5e>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006bb8:	2208      	movs	r2, #8
 8006bba:	4393      	bics	r3, r2
 8006bbc:	694a      	ldr	r2, [r1, #20]
 8006bbe:	0092      	lsls	r2, r2, #2
 8006bc0:	4313      	orrs	r3, r2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	4393      	bics	r3, r2
 8006bc6:	688a      	ldr	r2, [r1, #8]
 8006bc8:	0092      	lsls	r2, r2, #2
 8006bca:	4313      	orrs	r3, r2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8006bfc <OC1Config+0x7c>)
 8006bce:	402a      	ands	r2, r5
 8006bd0:	698d      	ldr	r5, [r1, #24]
 8006bd2:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006bd4:	4d0a      	ldr	r5, [pc, #40]	@ (8006c00 <OC1Config+0x80>)
 8006bd6:	402a      	ands	r2, r5
 8006bd8:	69cd      	ldr	r5, [r1, #28]
 8006bda:	006d      	lsls	r5, r5, #1
 8006bdc:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006bde:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006be0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006be2:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006be4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006be6:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006be8:	2000      	movs	r0, #0
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	fffeff8c 	.word	0xfffeff8c
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800
 8006bfc:	fffffeff 	.word	0xfffffeff
 8006c00:	fffffdff 	.word	0xfffffdff

08006c04 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006c04:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006c06:	6a03      	ldr	r3, [r0, #32]
 8006c08:	2610      	movs	r6, #16
 8006c0a:	43b3      	bics	r3, r6
 8006c0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006c0e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006c10:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006c12:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006c14:	4d18      	ldr	r5, [pc, #96]	@ (8006c78 <OC2Config+0x74>)
 8006c16:	402a      	ands	r2, r5
 8006c18:	680d      	ldr	r5, [r1, #0]
 8006c1a:	022d      	lsls	r5, r5, #8
 8006c1c:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006c1e:	2520      	movs	r5, #32
 8006c20:	43ab      	bics	r3, r5
 8006c22:	690d      	ldr	r5, [r1, #16]
 8006c24:	012d      	lsls	r5, r5, #4
 8006c26:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006c28:	43b3      	bics	r3, r6
 8006c2a:	684d      	ldr	r5, [r1, #4]
 8006c2c:	012d      	lsls	r5, r5, #4
 8006c2e:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c30:	4d12      	ldr	r5, [pc, #72]	@ (8006c7c <OC2Config+0x78>)
 8006c32:	42a8      	cmp	r0, r5
 8006c34:	d005      	beq.n	8006c42 <OC2Config+0x3e>
 8006c36:	4d12      	ldr	r5, [pc, #72]	@ (8006c80 <OC2Config+0x7c>)
 8006c38:	42a8      	cmp	r0, r5
 8006c3a:	d002      	beq.n	8006c42 <OC2Config+0x3e>
 8006c3c:	4d11      	ldr	r5, [pc, #68]	@ (8006c84 <OC2Config+0x80>)
 8006c3e:	42a8      	cmp	r0, r5
 8006c40:	d113      	bne.n	8006c6a <OC2Config+0x66>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006c42:	2580      	movs	r5, #128	@ 0x80
 8006c44:	43ab      	bics	r3, r5
 8006c46:	694d      	ldr	r5, [r1, #20]
 8006c48:	01ad      	lsls	r5, r5, #6
 8006c4a:	432b      	orrs	r3, r5

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006c4c:	2540      	movs	r5, #64	@ 0x40
 8006c4e:	43ab      	bics	r3, r5
 8006c50:	688d      	ldr	r5, [r1, #8]
 8006c52:	01ad      	lsls	r5, r5, #6
 8006c54:	432b      	orrs	r3, r5

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006c56:	4d0c      	ldr	r5, [pc, #48]	@ (8006c88 <OC2Config+0x84>)
 8006c58:	4025      	ands	r5, r4
 8006c5a:	698c      	ldr	r4, [r1, #24]
 8006c5c:	00a4      	lsls	r4, r4, #2
 8006c5e:	4325      	orrs	r5, r4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006c60:	4c0a      	ldr	r4, [pc, #40]	@ (8006c8c <OC2Config+0x88>)
 8006c62:	4025      	ands	r5, r4
 8006c64:	69cc      	ldr	r4, [r1, #28]
 8006c66:	00e4      	lsls	r4, r4, #3
 8006c68:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006c6a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006c6c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006c6e:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c70:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006c72:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006c74:	2000      	movs	r0, #0
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	feff8cff 	.word	0xfeff8cff
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800
 8006c88:	fffffbff 	.word	0xfffffbff
 8006c8c:	fffff7ff 	.word	0xfffff7ff

08006c90 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006c90:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006c92:	6a03      	ldr	r3, [r0, #32]
 8006c94:	4e1b      	ldr	r6, [pc, #108]	@ (8006d04 <OC3Config+0x74>)
 8006c96:	4033      	ands	r3, r6
 8006c98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006c9a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006c9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006c9e:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006ca0:	4d19      	ldr	r5, [pc, #100]	@ (8006d08 <OC3Config+0x78>)
 8006ca2:	402a      	ands	r2, r5
 8006ca4:	680d      	ldr	r5, [r1, #0]
 8006ca6:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006ca8:	4d18      	ldr	r5, [pc, #96]	@ (8006d0c <OC3Config+0x7c>)
 8006caa:	402b      	ands	r3, r5
 8006cac:	690d      	ldr	r5, [r1, #16]
 8006cae:	022d      	lsls	r5, r5, #8
 8006cb0:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006cb2:	4033      	ands	r3, r6
 8006cb4:	684d      	ldr	r5, [r1, #4]
 8006cb6:	022d      	lsls	r5, r5, #8
 8006cb8:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cba:	4d15      	ldr	r5, [pc, #84]	@ (8006d10 <OC3Config+0x80>)
 8006cbc:	42a8      	cmp	r0, r5
 8006cbe:	d005      	beq.n	8006ccc <OC3Config+0x3c>
 8006cc0:	4d14      	ldr	r5, [pc, #80]	@ (8006d14 <OC3Config+0x84>)
 8006cc2:	42a8      	cmp	r0, r5
 8006cc4:	d002      	beq.n	8006ccc <OC3Config+0x3c>
 8006cc6:	4d14      	ldr	r5, [pc, #80]	@ (8006d18 <OC3Config+0x88>)
 8006cc8:	42a8      	cmp	r0, r5
 8006cca:	d113      	bne.n	8006cf4 <OC3Config+0x64>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006ccc:	4d13      	ldr	r5, [pc, #76]	@ (8006d1c <OC3Config+0x8c>)
 8006cce:	401d      	ands	r5, r3
 8006cd0:	694b      	ldr	r3, [r1, #20]
 8006cd2:	029b      	lsls	r3, r3, #10
 8006cd4:	431d      	orrs	r5, r3

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006cd6:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <OC3Config+0x90>)
 8006cd8:	401d      	ands	r5, r3
 8006cda:	688b      	ldr	r3, [r1, #8]
 8006cdc:	029b      	lsls	r3, r3, #10
 8006cde:	432b      	orrs	r3, r5

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006ce0:	4d10      	ldr	r5, [pc, #64]	@ (8006d24 <OC3Config+0x94>)
 8006ce2:	4025      	ands	r5, r4
 8006ce4:	698c      	ldr	r4, [r1, #24]
 8006ce6:	0124      	lsls	r4, r4, #4
 8006ce8:	4325      	orrs	r5, r4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006cea:	4c0f      	ldr	r4, [pc, #60]	@ (8006d28 <OC3Config+0x98>)
 8006cec:	4025      	ands	r5, r4
 8006cee:	69cc      	ldr	r4, [r1, #28]
 8006cf0:	0164      	lsls	r4, r4, #5
 8006cf2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006cf4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006cf6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006cf8:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006cfa:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006cfc:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006cfe:	2000      	movs	r0, #0
 8006d00:	bd70      	pop	{r4, r5, r6, pc}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	fffffeff 	.word	0xfffffeff
 8006d08:	fffeff8c 	.word	0xfffeff8c
 8006d0c:	fffffdff 	.word	0xfffffdff
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800
 8006d1c:	fffff7ff 	.word	0xfffff7ff
 8006d20:	fffffbff 	.word	0xfffffbff
 8006d24:	ffffefff 	.word	0xffffefff
 8006d28:	ffffdfff 	.word	0xffffdfff

08006d2c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006d2e:	6a03      	ldr	r3, [r0, #32]
 8006d30:	4e14      	ldr	r6, [pc, #80]	@ (8006d84 <OC4Config+0x58>)
 8006d32:	4033      	ands	r3, r6
 8006d34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006d36:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006d38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006d3a:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006d3c:	4d12      	ldr	r5, [pc, #72]	@ (8006d88 <OC4Config+0x5c>)
 8006d3e:	402a      	ands	r2, r5
 8006d40:	680d      	ldr	r5, [r1, #0]
 8006d42:	022d      	lsls	r5, r5, #8
 8006d44:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006d46:	4d11      	ldr	r5, [pc, #68]	@ (8006d8c <OC4Config+0x60>)
 8006d48:	402b      	ands	r3, r5
 8006d4a:	690d      	ldr	r5, [r1, #16]
 8006d4c:	032d      	lsls	r5, r5, #12
 8006d4e:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006d50:	4033      	ands	r3, r6
 8006d52:	684d      	ldr	r5, [r1, #4]
 8006d54:	032d      	lsls	r5, r5, #12
 8006d56:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	4d0d      	ldr	r5, [pc, #52]	@ (8006d90 <OC4Config+0x64>)
 8006d5a:	42a8      	cmp	r0, r5
 8006d5c:	d005      	beq.n	8006d6a <OC4Config+0x3e>
 8006d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d94 <OC4Config+0x68>)
 8006d60:	42a8      	cmp	r0, r5
 8006d62:	d002      	beq.n	8006d6a <OC4Config+0x3e>
 8006d64:	4d0c      	ldr	r5, [pc, #48]	@ (8006d98 <OC4Config+0x6c>)
 8006d66:	42a8      	cmp	r0, r5
 8006d68:	d104      	bne.n	8006d74 <OC4Config+0x48>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006d6a:	4d0c      	ldr	r5, [pc, #48]	@ (8006d9c <OC4Config+0x70>)
 8006d6c:	4025      	ands	r5, r4
 8006d6e:	698c      	ldr	r4, [r1, #24]
 8006d70:	01a4      	lsls	r4, r4, #6
 8006d72:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006d74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006d76:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006d78:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006d7a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006d7c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006d7e:	2000      	movs	r0, #0
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	ffffefff 	.word	0xffffefff
 8006d88:	feff8cff 	.word	0xfeff8cff
 8006d8c:	ffffdfff 	.word	0xffffdfff
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	ffffbfff 	.word	0xffffbfff

08006da0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006da0:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8006da2:	6a03      	ldr	r3, [r0, #32]
 8006da4:	4d14      	ldr	r5, [pc, #80]	@ (8006df8 <OC5Config+0x58>)
 8006da6:	402b      	ands	r3, r5
 8006da8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006daa:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006dac:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006dae:	4c13      	ldr	r4, [pc, #76]	@ (8006dfc <OC5Config+0x5c>)
 8006db0:	4022      	ands	r2, r4
 8006db2:	680c      	ldr	r4, [r1, #0]
 8006db4:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8006db6:	4c12      	ldr	r4, [pc, #72]	@ (8006e00 <OC5Config+0x60>)
 8006db8:	4023      	ands	r3, r4
 8006dba:	690c      	ldr	r4, [r1, #16]
 8006dbc:	0424      	lsls	r4, r4, #16
 8006dbe:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006dc0:	402b      	ands	r3, r5
 8006dc2:	684c      	ldr	r4, [r1, #4]
 8006dc4:	0424      	lsls	r4, r4, #16
 8006dc6:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc8:	4c0e      	ldr	r4, [pc, #56]	@ (8006e04 <OC5Config+0x64>)
 8006dca:	42a0      	cmp	r0, r4
 8006dcc:	d005      	beq.n	8006dda <OC5Config+0x3a>
 8006dce:	4c0e      	ldr	r4, [pc, #56]	@ (8006e08 <OC5Config+0x68>)
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d002      	beq.n	8006dda <OC5Config+0x3a>
 8006dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8006e0c <OC5Config+0x6c>)
 8006dd6:	42a0      	cmp	r0, r4
 8006dd8:	d106      	bne.n	8006de8 <OC5Config+0x48>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8006dda:	6844      	ldr	r4, [r0, #4]
 8006ddc:	4d06      	ldr	r5, [pc, #24]	@ (8006df8 <OC5Config+0x58>)
 8006dde:	402c      	ands	r4, r5
 8006de0:	698d      	ldr	r5, [r1, #24]
 8006de2:	022d      	lsls	r5, r5, #8
 8006de4:	432c      	orrs	r4, r5
 8006de6:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006de8:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8006dea:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8006dec:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8006dee:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006df0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006df2:	2000      	movs	r0, #0
 8006df4:	bd30      	pop	{r4, r5, pc}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	fffeffff 	.word	0xfffeffff
 8006dfc:	fffeff8f 	.word	0xfffeff8f
 8006e00:	fffdffff 	.word	0xfffdffff
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40014400 	.word	0x40014400
 8006e0c:	40014800 	.word	0x40014800

08006e10 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006e10:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8006e12:	6a03      	ldr	r3, [r0, #32]
 8006e14:	4d14      	ldr	r5, [pc, #80]	@ (8006e68 <OC6Config+0x58>)
 8006e16:	402b      	ands	r3, r5
 8006e18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006e1a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006e1c:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8006e1e:	4c13      	ldr	r4, [pc, #76]	@ (8006e6c <OC6Config+0x5c>)
 8006e20:	4022      	ands	r2, r4
 8006e22:	680c      	ldr	r4, [r1, #0]
 8006e24:	0224      	lsls	r4, r4, #8
 8006e26:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8006e28:	4c11      	ldr	r4, [pc, #68]	@ (8006e70 <OC6Config+0x60>)
 8006e2a:	4023      	ands	r3, r4
 8006e2c:	690c      	ldr	r4, [r1, #16]
 8006e2e:	0524      	lsls	r4, r4, #20
 8006e30:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8006e32:	402b      	ands	r3, r5
 8006e34:	684c      	ldr	r4, [r1, #4]
 8006e36:	0524      	lsls	r4, r4, #20
 8006e38:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	4c0e      	ldr	r4, [pc, #56]	@ (8006e74 <OC6Config+0x64>)
 8006e3c:	42a0      	cmp	r0, r4
 8006e3e:	d005      	beq.n	8006e4c <OC6Config+0x3c>
 8006e40:	4c0d      	ldr	r4, [pc, #52]	@ (8006e78 <OC6Config+0x68>)
 8006e42:	42a0      	cmp	r0, r4
 8006e44:	d002      	beq.n	8006e4c <OC6Config+0x3c>
 8006e46:	4c0d      	ldr	r4, [pc, #52]	@ (8006e7c <OC6Config+0x6c>)
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d106      	bne.n	8006e5a <OC6Config+0x4a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8006e4c:	6844      	ldr	r4, [r0, #4]
 8006e4e:	4d0c      	ldr	r5, [pc, #48]	@ (8006e80 <OC6Config+0x70>)
 8006e50:	402c      	ands	r4, r5
 8006e52:	698d      	ldr	r5, [r1, #24]
 8006e54:	02ad      	lsls	r5, r5, #10
 8006e56:	432c      	orrs	r4, r5
 8006e58:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006e5a:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8006e5c:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8006e5e:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006e60:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8006e62:	2000      	movs	r0, #0
 8006e64:	bd30      	pop	{r4, r5, pc}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	ffefffff 	.word	0xffefffff
 8006e6c:	feff8fff 	.word	0xfeff8fff
 8006e70:	ffdfffff 	.word	0xffdfffff
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800
 8006e80:	fffbffff 	.word	0xfffbffff

08006e84 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006e84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e86:	4a1d      	ldr	r2, [pc, #116]	@ (8006efc <LL_TIM_Init+0x78>)
 8006e88:	4290      	cmp	r0, r2
 8006e8a:	d006      	beq.n	8006e9a <LL_TIM_Init+0x16>
 8006e8c:	2280      	movs	r2, #128	@ 0x80
 8006e8e:	05d2      	lsls	r2, r2, #23
 8006e90:	4290      	cmp	r0, r2
 8006e92:	d002      	beq.n	8006e9a <LL_TIM_Init+0x16>
 8006e94:	4a1a      	ldr	r2, [pc, #104]	@ (8006f00 <LL_TIM_Init+0x7c>)
 8006e96:	4290      	cmp	r0, r2
 8006e98:	d103      	bne.n	8006ea2 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006e9a:	2270      	movs	r2, #112	@ 0x70
 8006e9c:	4393      	bics	r3, r2
 8006e9e:	684a      	ldr	r2, [r1, #4]
 8006ea0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea2:	4a16      	ldr	r2, [pc, #88]	@ (8006efc <LL_TIM_Init+0x78>)
 8006ea4:	4290      	cmp	r0, r2
 8006ea6:	d00f      	beq.n	8006ec8 <LL_TIM_Init+0x44>
 8006ea8:	2280      	movs	r2, #128	@ 0x80
 8006eaa:	05d2      	lsls	r2, r2, #23
 8006eac:	4290      	cmp	r0, r2
 8006eae:	d00b      	beq.n	8006ec8 <LL_TIM_Init+0x44>
 8006eb0:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <LL_TIM_Init+0x7c>)
 8006eb2:	4290      	cmp	r0, r2
 8006eb4:	d008      	beq.n	8006ec8 <LL_TIM_Init+0x44>
 8006eb6:	4a13      	ldr	r2, [pc, #76]	@ (8006f04 <LL_TIM_Init+0x80>)
 8006eb8:	4290      	cmp	r0, r2
 8006eba:	d005      	beq.n	8006ec8 <LL_TIM_Init+0x44>
 8006ebc:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <LL_TIM_Init+0x84>)
 8006ebe:	4290      	cmp	r0, r2
 8006ec0:	d002      	beq.n	8006ec8 <LL_TIM_Init+0x44>
 8006ec2:	4a12      	ldr	r2, [pc, #72]	@ (8006f0c <LL_TIM_Init+0x88>)
 8006ec4:	4290      	cmp	r0, r2
 8006ec6:	d103      	bne.n	8006ed0 <LL_TIM_Init+0x4c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006ec8:	4a11      	ldr	r2, [pc, #68]	@ (8006f10 <LL_TIM_Init+0x8c>)
 8006eca:	401a      	ands	r2, r3
 8006ecc:	68cb      	ldr	r3, [r1, #12]
 8006ece:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006ed0:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006ed2:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006ed4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006ed6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006ed8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eda:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <LL_TIM_Init+0x78>)
 8006edc:	4298      	cmp	r0, r3
 8006ede:	d005      	beq.n	8006eec <LL_TIM_Init+0x68>
 8006ee0:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <LL_TIM_Init+0x84>)
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	d002      	beq.n	8006eec <LL_TIM_Init+0x68>
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <LL_TIM_Init+0x88>)
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	d101      	bne.n	8006ef0 <LL_TIM_Init+0x6c>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006eec:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006eee:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006ef0:	6943      	ldr	r3, [r0, #20]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	6143      	str	r3, [r0, #20]
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	4770      	bx	lr
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40002000 	.word	0x40002000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	fffffcff 	.word	0xfffffcff

08006f14 <LL_TIM_OC_Init>:
{
 8006f14:	b510      	push	{r4, lr}
 8006f16:	000b      	movs	r3, r1
 8006f18:	0011      	movs	r1, r2
  switch (Channel)
 8006f1a:	2280      	movs	r2, #128	@ 0x80
 8006f1c:	0152      	lsls	r2, r2, #5
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d020      	beq.n	8006f64 <LL_TIM_OC_Init+0x50>
 8006f22:	d80f      	bhi.n	8006f44 <LL_TIM_OC_Init+0x30>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d01a      	beq.n	8006f5e <LL_TIM_OC_Init+0x4a>
 8006f28:	2280      	movs	r2, #128	@ 0x80
 8006f2a:	0052      	lsls	r2, r2, #1
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d102      	bne.n	8006f36 <LL_TIM_OC_Init+0x22>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006f30:	f7ff feae 	bl	8006c90 <OC3Config>
      break;
 8006f34:	e005      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d102      	bne.n	8006f40 <LL_TIM_OC_Init+0x2c>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006f3a:	f7ff fe21 	bl	8006b80 <OC1Config>
      break;
 8006f3e:	e000      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8006f40:	2001      	movs	r0, #1
}
 8006f42:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006f44:	2280      	movs	r2, #128	@ 0x80
 8006f46:	0252      	lsls	r2, r2, #9
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00e      	beq.n	8006f6a <LL_TIM_OC_Init+0x56>
 8006f4c:	2280      	movs	r2, #128	@ 0x80
 8006f4e:	0352      	lsls	r2, r2, #13
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d102      	bne.n	8006f5a <LL_TIM_OC_Init+0x46>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8006f54:	f7ff ff5c 	bl	8006e10 <OC6Config>
      break;
 8006f58:	e7f3      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	e7f1      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006f5e:	f7ff fe51 	bl	8006c04 <OC2Config>
      break;
 8006f62:	e7ee      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006f64:	f7ff fee2 	bl	8006d2c <OC4Config>
      break;
 8006f68:	e7eb      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8006f6a:	f7ff ff19 	bl	8006da0 <OC5Config>
      break;
 8006f6e:	e7e8      	b.n	8006f42 <LL_TIM_OC_Init+0x2e>

08006f70 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8006f70:	7b0b      	ldrb	r3, [r1, #12]
 8006f72:	688a      	ldr	r2, [r1, #8]
 8006f74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006f76:	4a19      	ldr	r2, [pc, #100]	@ (8006fdc <LL_TIM_BDTR_Init+0x6c>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	684a      	ldr	r2, [r1, #4]
 8006f7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006f7e:	4a18      	ldr	r2, [pc, #96]	@ (8006fe0 <LL_TIM_BDTR_Init+0x70>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	680a      	ldr	r2, [r1, #0]
 8006f84:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8006f86:	4a17      	ldr	r2, [pc, #92]	@ (8006fe4 <LL_TIM_BDTR_Init+0x74>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	89ca      	ldrh	r2, [r1, #14]
 8006f8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8006f8e:	4a16      	ldr	r2, [pc, #88]	@ (8006fe8 <LL_TIM_BDTR_Init+0x78>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	690a      	ldr	r2, [r1, #16]
 8006f94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006f96:	4a15      	ldr	r2, [pc, #84]	@ (8006fec <LL_TIM_BDTR_Init+0x7c>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006f9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8006f9e:	4a14      	ldr	r2, [pc, #80]	@ (8006ff0 <LL_TIM_BDTR_Init+0x80>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	694a      	ldr	r2, [r1, #20]
 8006fa4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8006fa6:	4a13      	ldr	r2, [pc, #76]	@ (8006ff4 <LL_TIM_BDTR_Init+0x84>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	698a      	ldr	r2, [r1, #24]
 8006fac:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8006fae:	4a12      	ldr	r2, [pc, #72]	@ (8006ff8 <LL_TIM_BDTR_Init+0x88>)
 8006fb0:	4290      	cmp	r0, r2
 8006fb2:	d002      	beq.n	8006fba <LL_TIM_BDTR_Init+0x4a>
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8006fb4:	6443      	str	r3, [r0, #68]	@ 0x44
}
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8006fba:	4a10      	ldr	r2, [pc, #64]	@ (8006ffc <LL_TIM_BDTR_Init+0x8c>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8006fc0:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8006fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8007000 <LL_TIM_BDTR_Init+0x90>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	69ca      	ldr	r2, [r1, #28]
 8006fc8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8006fca:	4a0e      	ldr	r2, [pc, #56]	@ (8007004 <LL_TIM_BDTR_Init+0x94>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	6a0a      	ldr	r2, [r1, #32]
 8006fd0:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8006fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8007008 <LL_TIM_BDTR_Init+0x98>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	e7eb      	b.n	8006fb4 <LL_TIM_BDTR_Init+0x44>
 8006fdc:	fffffbff 	.word	0xfffffbff
 8006fe0:	fffff7ff 	.word	0xfffff7ff
 8006fe4:	ffffefff 	.word	0xffffefff
 8006fe8:	ffffdfff 	.word	0xffffdfff
 8006fec:	ffffbfff 	.word	0xffffbfff
 8006ff0:	fff0ffff 	.word	0xfff0ffff
 8006ff4:	efffffff 	.word	0xefffffff
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	ff0fffff 	.word	0xff0fffff
 8007000:	feffffff 	.word	0xfeffffff
 8007004:	fdffffff 	.word	0xfdffffff
 8007008:	dfffffff 	.word	0xdfffffff

0800700c <LL_USART_SetBaudRate>:
{
 800700c:	b510      	push	{r4, lr}
 800700e:	0004      	movs	r4, r0
 8007010:	0008      	movs	r0, r1
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8007012:	2a0b      	cmp	r2, #11
 8007014:	d816      	bhi.n	8007044 <LL_USART_SetBaudRate+0x38>
  else if (BaudRate == 0U)
 8007016:	9902      	ldr	r1, [sp, #8]
 8007018:	2900      	cmp	r1, #0
 800701a:	d013      	beq.n	8007044 <LL_USART_SetBaudRate+0x38>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800701c:	2180      	movs	r1, #128	@ 0x80
 800701e:	0209      	lsls	r1, r1, #8
 8007020:	428b      	cmp	r3, r1
 8007022:	d010      	beq.n	8007046 <LL_USART_SetBaudRate+0x3a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8007024:	23ff      	movs	r3, #255	@ 0xff
 8007026:	4013      	ands	r3, r2
 8007028:	4a12      	ldr	r2, [pc, #72]	@ (8007074 <LL_USART_SetBaudRate+0x68>)
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	5899      	ldr	r1, [r3, r2]
 800702e:	f7fb f86b 	bl	8002108 <__udivsi3>
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	18c0      	adds	r0, r0, r3
 8007038:	9902      	ldr	r1, [sp, #8]
 800703a:	f7fb f865 	bl	8002108 <__udivsi3>
 800703e:	0400      	lsls	r0, r0, #16
 8007040:	0c00      	lsrs	r0, r0, #16
 8007042:	60e0      	str	r0, [r4, #12]
}
 8007044:	bd10      	pop	{r4, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8007046:	23ff      	movs	r3, #255	@ 0xff
 8007048:	4013      	ands	r3, r2
 800704a:	4a0a      	ldr	r2, [pc, #40]	@ (8007074 <LL_USART_SetBaudRate+0x68>)
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	5899      	ldr	r1, [r3, r2]
 8007050:	f7fb f85a 	bl	8002108 <__udivsi3>
 8007054:	0040      	lsls	r0, r0, #1
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	085b      	lsrs	r3, r3, #1
 800705a:	18c0      	adds	r0, r0, r3
 800705c:	9902      	ldr	r1, [sp, #8]
 800705e:	f7fb f853 	bl	8002108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8007062:	4a05      	ldr	r2, [pc, #20]	@ (8007078 <LL_USART_SetBaudRate+0x6c>)
 8007064:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007066:	0400      	lsls	r0, r0, #16
 8007068:	0c40      	lsrs	r0, r0, #17
 800706a:	2307      	movs	r3, #7
 800706c:	4003      	ands	r3, r0
 800706e:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8007070:	60e3      	str	r3, [r4, #12]
 8007072:	e7e7      	b.n	8007044 <LL_USART_SetBaudRate+0x38>
 8007074:	0800731c 	.word	0x0800731c
 8007078:	0000fff0 	.word	0x0000fff0

0800707c <LL_USART_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 800707c:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <LL_USART_DeInit+0x40>)
 800707e:	4298      	cmp	r0, r3
 8007080:	d004      	beq.n	800708c <LL_USART_DeInit+0x10>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
  }
  else if (USARTx == USART2)
 8007082:	4b0f      	ldr	r3, [pc, #60]	@ (80070c0 <LL_USART_DeInit+0x44>)
 8007084:	4298      	cmp	r0, r3
 8007086:	d00d      	beq.n	80070a4 <LL_USART_DeInit+0x28>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART6);
  }
#endif /* USART6 */
  else
  {
    status = ERROR;
 8007088:	2001      	movs	r0, #1
  }

  return (status);
}
 800708a:	4770      	bx	lr
  SET_BIT(RCC->APBRSTR2, Periphs);
 800708c:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <LL_USART_DeInit+0x48>)
 800708e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007090:	2280      	movs	r2, #128	@ 0x80
 8007092:	01d2      	lsls	r2, r2, #7
 8007094:	430a      	orrs	r2, r1
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 8007098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800709a:	490b      	ldr	r1, [pc, #44]	@ (80070c8 <LL_USART_DeInit+0x4c>)
 800709c:	400a      	ands	r2, r1
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 80070a0:	2000      	movs	r0, #0
}
 80070a2:	e7f2      	b.n	800708a <LL_USART_DeInit+0xe>
  SET_BIT(RCC->APBRSTR1, Periphs);
 80070a4:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <LL_USART_DeInit+0x48>)
 80070a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070a8:	2280      	movs	r2, #128	@ 0x80
 80070aa:	0292      	lsls	r2, r2, #10
 80070ac:	430a      	orrs	r2, r1
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80070b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b2:	4906      	ldr	r1, [pc, #24]	@ (80070cc <LL_USART_DeInit+0x50>)
 80070b4:	400a      	ands	r2, r1
 80070b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80070b8:	2000      	movs	r0, #0
}
 80070ba:	e7e6      	b.n	800708a <LL_USART_DeInit+0xe>
 80070bc:	40013800 	.word	0x40013800
 80070c0:	40004400 	.word	0x40004400
 80070c4:	40021000 	.word	0x40021000
 80070c8:	ffffbfff 	.word	0xffffbfff
 80070cc:	fffdffff 	.word	0xfffdffff

080070d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80070d0:	b530      	push	{r4, r5, lr}
 80070d2:	b087      	sub	sp, #28
 80070d4:	0004      	movs	r4, r0
 80070d6:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80070d8:	6803      	ldr	r3, [r0, #0]
 80070da:	07db      	lsls	r3, r3, #31
 80070dc:	d442      	bmi.n	8007164 <LL_USART_Init+0x94>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80070de:	6803      	ldr	r3, [r0, #0]
 80070e0:	4a21      	ldr	r2, [pc, #132]	@ (8007168 <LL_USART_Init+0x98>)
 80070e2:	401a      	ands	r2, r3
 80070e4:	688b      	ldr	r3, [r1, #8]
 80070e6:	6909      	ldr	r1, [r1, #16]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6969      	ldr	r1, [r5, #20]
 80070ec:	430b      	orrs	r3, r1
 80070ee:	69e9      	ldr	r1, [r5, #28]
 80070f0:	430b      	orrs	r3, r1
 80070f2:	4313      	orrs	r3, r2
 80070f4:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80070f6:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80070f8:	6842      	ldr	r2, [r0, #4]
 80070fa:	491c      	ldr	r1, [pc, #112]	@ (800716c <LL_USART_Init+0x9c>)
 80070fc:	400a      	ands	r2, r1
 80070fe:	4313      	orrs	r3, r2
 8007100:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007102:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007104:	6882      	ldr	r2, [r0, #8]
 8007106:	491a      	ldr	r1, [pc, #104]	@ (8007170 <LL_USART_Init+0xa0>)
 8007108:	400a      	ands	r2, r1
 800710a:	4313      	orrs	r3, r2
 800710c:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800710e:	4b19      	ldr	r3, [pc, #100]	@ (8007174 <LL_USART_Init+0xa4>)
 8007110:	4298      	cmp	r0, r3
 8007112:	d00d      	beq.n	8007130 <LL_USART_Init+0x60>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8007114:	4b18      	ldr	r3, [pc, #96]	@ (8007178 <LL_USART_Init+0xa8>)
 8007116:	4298      	cmp	r0, r3
 8007118:	d015      	beq.n	8007146 <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 800711a:	2001      	movs	r0, #1

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800711c:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800711e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007120:	210f      	movs	r1, #15
 8007122:	438a      	bics	r2, r1
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	0c1b      	lsrs	r3, r3, #16
 8007128:	4313      	orrs	r3, r2
 800712a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800712c:	b007      	add	sp, #28
 800712e:	bd30      	pop	{r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007130:	2003      	movs	r0, #3
 8007132:	f7ff fce9 	bl	8006b08 <LL_RCC_GetUSARTClockFreq>
 8007136:	0001      	movs	r1, r0
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007138:	2900      	cmp	r1, #0
 800713a:	d011      	beq.n	8007160 <LL_USART_Init+0x90>
        && (USART_InitStruct->BaudRate != 0U))
 800713c:	6868      	ldr	r0, [r5, #4]
 800713e:	2800      	cmp	r0, #0
 8007140:	d106      	bne.n	8007150 <LL_USART_Init+0x80>
  ErrorStatus status = ERROR;
 8007142:	2001      	movs	r0, #1
 8007144:	e7ea      	b.n	800711c <LL_USART_Init+0x4c>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8007146:	a803      	add	r0, sp, #12
 8007148:	f7ff fcd2 	bl	8006af0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800714c:	9905      	ldr	r1, [sp, #20]
 800714e:	e7f3      	b.n	8007138 <LL_USART_Init+0x68>
                           USART_InitStruct->PrescalerValue,
 8007150:	682a      	ldr	r2, [r5, #0]
                           USART_InitStruct->OverSampling,
 8007152:	69eb      	ldr	r3, [r5, #28]
      LL_USART_SetBaudRate(USARTx,
 8007154:	9000      	str	r0, [sp, #0]
 8007156:	0020      	movs	r0, r4
 8007158:	f7ff ff58 	bl	800700c <LL_USART_SetBaudRate>
      status = SUCCESS;
 800715c:	2000      	movs	r0, #0
 800715e:	e7dd      	b.n	800711c <LL_USART_Init+0x4c>
  ErrorStatus status = ERROR;
 8007160:	2001      	movs	r0, #1
 8007162:	e7db      	b.n	800711c <LL_USART_Init+0x4c>
 8007164:	2001      	movs	r0, #1
 8007166:	e7e1      	b.n	800712c <LL_USART_Init+0x5c>
 8007168:	efff69f3 	.word	0xefff69f3
 800716c:	ffffcfff 	.word	0xffffcfff
 8007170:	fffffcff 	.word	0xfffffcff
 8007174:	40013800 	.word	0x40013800
 8007178:	40004400 	.word	0x40004400

0800717c <memset>:
 800717c:	0003      	movs	r3, r0
 800717e:	1882      	adds	r2, r0, r2
 8007180:	4293      	cmp	r3, r2
 8007182:	d100      	bne.n	8007186 <memset+0xa>
 8007184:	4770      	bx	lr
 8007186:	7019      	strb	r1, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	e7f9      	b.n	8007180 <memset+0x4>

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	2600      	movs	r6, #0
 8007190:	4c0c      	ldr	r4, [pc, #48]	@ (80071c4 <__libc_init_array+0x38>)
 8007192:	4d0d      	ldr	r5, [pc, #52]	@ (80071c8 <__libc_init_array+0x3c>)
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	2600      	movs	r6, #0
 800719e:	f000 f823 	bl	80071e8 <_init>
 80071a2:	4c0a      	ldr	r4, [pc, #40]	@ (80071cc <__libc_init_array+0x40>)
 80071a4:	4d0a      	ldr	r5, [pc, #40]	@ (80071d0 <__libc_init_array+0x44>)
 80071a6:	1b64      	subs	r4, r4, r5
 80071a8:	10a4      	asrs	r4, r4, #2
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	00b3      	lsls	r3, r6, #2
 80071b2:	58eb      	ldr	r3, [r5, r3]
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	00b3      	lsls	r3, r6, #2
 80071bc:	58eb      	ldr	r3, [r5, r3]
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800734c 	.word	0x0800734c
 80071c8:	0800734c 	.word	0x0800734c
 80071cc:	08007350 	.word	0x08007350
 80071d0:	0800734c 	.word	0x0800734c

080071d4 <memcpy>:
 80071d4:	2300      	movs	r3, #0
 80071d6:	b510      	push	{r4, lr}
 80071d8:	429a      	cmp	r2, r3
 80071da:	d100      	bne.n	80071de <memcpy+0xa>
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	5ccc      	ldrb	r4, [r1, r3]
 80071e0:	54c4      	strb	r4, [r0, r3]
 80071e2:	3301      	adds	r3, #1
 80071e4:	e7f8      	b.n	80071d8 <memcpy+0x4>
	...

080071e8 <_init>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr

080071f4 <_fini>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	46c0      	nop			@ (mov r8, r8)
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <__FLASH_Program_Fast_veneer>:
 8007200:	b401      	push	{r0}
 8007202:	4802      	ldr	r0, [pc, #8]	@ (800720c <__FLASH_Program_Fast_veneer+0xc>)
 8007204:	4684      	mov	ip, r0
 8007206:	bc01      	pop	{r0}
 8007208:	4760      	bx	ip
 800720a:	bf00      	nop
 800720c:	200000ed 	.word	0x200000ed

Disassembly of section .data:

200000c0 <g_device_type>:
200000c0:	                                         ..

200000c2 <g_firmware_version>:
200000c2:	                                         .

200000c3 <g_tail_status>:
200000c3:	                                         .

200000c4 <g_uart_out_transmit_complete>:
200000c4:	                                         .

200000c5 <g_uart_in_transmit_complete>:
200000c5:	                                         ...

200000c8 <g_heartbeat_data_pack_buf>:
200000c8:	000355aa 55fcfdff 000000aa              .U.....U....

200000d4 <s_enum_please_data_packet_buf>:
200000d4:	000355aa 55fbfcff                        .U.....U.

200000dd <g_enum_please_nums>:
200000dd:	                                         ...

200000e0 <SystemCoreClock>:
200000e0:	00f42400                                .$..

200000e4 <uwTickFreq>:
200000e4:	00000001                                ....

200000e8 <uwTickPrio>:
200000e8:	00000004                                ....

200000ec <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000ec:	b510      	push	{r4, lr}
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ee:	4a0c      	ldr	r2, [pc, #48]	@ (20000120 <FLASH_Program_Fast+0x34>)
200000f0:	6954      	ldr	r4, [r2, #20]
200000f2:	2380      	movs	r3, #128	@ 0x80
200000f4:	02db      	lsls	r3, r3, #11
200000f6:	4323      	orrs	r3, r4
200000f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
200000fe:	b672      	cpsid	i
  uint8_t index = 0;
20000100:	2300      	movs	r3, #0
}
20000102:	e003      	b.n	2000010c <FLASH_Program_Fast+0x20>
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000104:	c904      	ldmia	r1!, {r2}
20000106:	c004      	stmia	r0!, {r2}
    src += 4U;
    dest += 4U;
    index++;
20000108:	3301      	adds	r3, #1
2000010a:	b2db      	uxtb	r3, r3
  while (index < 64U)
2000010c:	2b3f      	cmp	r3, #63	@ 0x3f
2000010e:	d9f9      	bls.n	20000104 <FLASH_Program_Fast+0x18>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000110:	4b03      	ldr	r3, [pc, #12]	@ (20000120 <FLASH_Program_Fast+0x34>)
20000112:	691b      	ldr	r3, [r3, #16]
20000114:	03db      	lsls	r3, r3, #15
20000116:	d4fb      	bmi.n	20000110 <FLASH_Program_Fast+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000118:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000011c:	bd10      	pop	{r4, pc}
2000011e:	46c0      	nop			@ (mov r8, r8)
20000120:	40022000 	.word	0x40022000
