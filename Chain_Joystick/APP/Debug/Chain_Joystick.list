
Chain_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002000  08002000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  080020c0  080020c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007748  08007748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007874  08007874  00007174  2**0
                  CONTENTS
  4 .ARM          00000000  08007874  08007874  00007174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007874  08007874  00007174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007874  08007874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007878  08007878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  200000c0  0800787c  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000e94  20000174  08007930  00007174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001008  08007930  00008008  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a07  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004990  00000000  00000000  0001dba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000063df  00000000  00000000  00022533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00028918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2a  00000000  00000000  000296b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b86f  00000000  00000000  0002a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018de5  00000000  00000000  00045a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bda9  00000000  00000000  0005e836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa5df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000243c  00000000  00000000  000fa624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000fca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080020c0 <__do_global_dtors_aux>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4c06      	ldr	r4, [pc, #24]	@ (80020dc <__do_global_dtors_aux+0x1c>)
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <__do_global_dtors_aux+0x1a>
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <__do_global_dtors_aux+0x20>)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <__do_global_dtors_aux+0x24>)
 80020d2:	e000      	b.n	80020d6 <__do_global_dtors_aux+0x16>
 80020d4:	bf00      	nop
 80020d6:	2301      	movs	r3, #1
 80020d8:	7023      	strb	r3, [r4, #0]
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	20000174 	.word	0x20000174
 80020e0:	00000000 	.word	0x00000000
 80020e4:	08007720 	.word	0x08007720

080020e8 <frame_dummy>:
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <frame_dummy+0x14>)
 80020ea:	b510      	push	{r4, lr}
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <frame_dummy+0x10>
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <frame_dummy+0x18>)
 80020f2:	4804      	ldr	r0, [pc, #16]	@ (8002104 <frame_dummy+0x1c>)
 80020f4:	e000      	b.n	80020f8 <frame_dummy+0x10>
 80020f6:	bf00      	nop
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	00000000 	.word	0x00000000
 8002100:	20000178 	.word	0x20000178
 8002104:	08007720 	.word	0x08007720

08002108 <__udivsi3>:
 8002108:	2200      	movs	r2, #0
 800210a:	0843      	lsrs	r3, r0, #1
 800210c:	428b      	cmp	r3, r1
 800210e:	d374      	bcc.n	80021fa <__udivsi3+0xf2>
 8002110:	0903      	lsrs	r3, r0, #4
 8002112:	428b      	cmp	r3, r1
 8002114:	d35f      	bcc.n	80021d6 <__udivsi3+0xce>
 8002116:	0a03      	lsrs	r3, r0, #8
 8002118:	428b      	cmp	r3, r1
 800211a:	d344      	bcc.n	80021a6 <__udivsi3+0x9e>
 800211c:	0b03      	lsrs	r3, r0, #12
 800211e:	428b      	cmp	r3, r1
 8002120:	d328      	bcc.n	8002174 <__udivsi3+0x6c>
 8002122:	0c03      	lsrs	r3, r0, #16
 8002124:	428b      	cmp	r3, r1
 8002126:	d30d      	bcc.n	8002144 <__udivsi3+0x3c>
 8002128:	22ff      	movs	r2, #255	@ 0xff
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	ba12      	rev	r2, r2
 800212e:	0c03      	lsrs	r3, r0, #16
 8002130:	428b      	cmp	r3, r1
 8002132:	d302      	bcc.n	800213a <__udivsi3+0x32>
 8002134:	1212      	asrs	r2, r2, #8
 8002136:	0209      	lsls	r1, r1, #8
 8002138:	d065      	beq.n	8002206 <__udivsi3+0xfe>
 800213a:	0b03      	lsrs	r3, r0, #12
 800213c:	428b      	cmp	r3, r1
 800213e:	d319      	bcc.n	8002174 <__udivsi3+0x6c>
 8002140:	e000      	b.n	8002144 <__udivsi3+0x3c>
 8002142:	0a09      	lsrs	r1, r1, #8
 8002144:	0bc3      	lsrs	r3, r0, #15
 8002146:	428b      	cmp	r3, r1
 8002148:	d301      	bcc.n	800214e <__udivsi3+0x46>
 800214a:	03cb      	lsls	r3, r1, #15
 800214c:	1ac0      	subs	r0, r0, r3
 800214e:	4152      	adcs	r2, r2
 8002150:	0b83      	lsrs	r3, r0, #14
 8002152:	428b      	cmp	r3, r1
 8002154:	d301      	bcc.n	800215a <__udivsi3+0x52>
 8002156:	038b      	lsls	r3, r1, #14
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	4152      	adcs	r2, r2
 800215c:	0b43      	lsrs	r3, r0, #13
 800215e:	428b      	cmp	r3, r1
 8002160:	d301      	bcc.n	8002166 <__udivsi3+0x5e>
 8002162:	034b      	lsls	r3, r1, #13
 8002164:	1ac0      	subs	r0, r0, r3
 8002166:	4152      	adcs	r2, r2
 8002168:	0b03      	lsrs	r3, r0, #12
 800216a:	428b      	cmp	r3, r1
 800216c:	d301      	bcc.n	8002172 <__udivsi3+0x6a>
 800216e:	030b      	lsls	r3, r1, #12
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	4152      	adcs	r2, r2
 8002174:	0ac3      	lsrs	r3, r0, #11
 8002176:	428b      	cmp	r3, r1
 8002178:	d301      	bcc.n	800217e <__udivsi3+0x76>
 800217a:	02cb      	lsls	r3, r1, #11
 800217c:	1ac0      	subs	r0, r0, r3
 800217e:	4152      	adcs	r2, r2
 8002180:	0a83      	lsrs	r3, r0, #10
 8002182:	428b      	cmp	r3, r1
 8002184:	d301      	bcc.n	800218a <__udivsi3+0x82>
 8002186:	028b      	lsls	r3, r1, #10
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	4152      	adcs	r2, r2
 800218c:	0a43      	lsrs	r3, r0, #9
 800218e:	428b      	cmp	r3, r1
 8002190:	d301      	bcc.n	8002196 <__udivsi3+0x8e>
 8002192:	024b      	lsls	r3, r1, #9
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	4152      	adcs	r2, r2
 8002198:	0a03      	lsrs	r3, r0, #8
 800219a:	428b      	cmp	r3, r1
 800219c:	d301      	bcc.n	80021a2 <__udivsi3+0x9a>
 800219e:	020b      	lsls	r3, r1, #8
 80021a0:	1ac0      	subs	r0, r0, r3
 80021a2:	4152      	adcs	r2, r2
 80021a4:	d2cd      	bcs.n	8002142 <__udivsi3+0x3a>
 80021a6:	09c3      	lsrs	r3, r0, #7
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d301      	bcc.n	80021b0 <__udivsi3+0xa8>
 80021ac:	01cb      	lsls	r3, r1, #7
 80021ae:	1ac0      	subs	r0, r0, r3
 80021b0:	4152      	adcs	r2, r2
 80021b2:	0983      	lsrs	r3, r0, #6
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d301      	bcc.n	80021bc <__udivsi3+0xb4>
 80021b8:	018b      	lsls	r3, r1, #6
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	4152      	adcs	r2, r2
 80021be:	0943      	lsrs	r3, r0, #5
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d301      	bcc.n	80021c8 <__udivsi3+0xc0>
 80021c4:	014b      	lsls	r3, r1, #5
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	4152      	adcs	r2, r2
 80021ca:	0903      	lsrs	r3, r0, #4
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d301      	bcc.n	80021d4 <__udivsi3+0xcc>
 80021d0:	010b      	lsls	r3, r1, #4
 80021d2:	1ac0      	subs	r0, r0, r3
 80021d4:	4152      	adcs	r2, r2
 80021d6:	08c3      	lsrs	r3, r0, #3
 80021d8:	428b      	cmp	r3, r1
 80021da:	d301      	bcc.n	80021e0 <__udivsi3+0xd8>
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	1ac0      	subs	r0, r0, r3
 80021e0:	4152      	adcs	r2, r2
 80021e2:	0883      	lsrs	r3, r0, #2
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d301      	bcc.n	80021ec <__udivsi3+0xe4>
 80021e8:	008b      	lsls	r3, r1, #2
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	4152      	adcs	r2, r2
 80021ee:	0843      	lsrs	r3, r0, #1
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d301      	bcc.n	80021f8 <__udivsi3+0xf0>
 80021f4:	004b      	lsls	r3, r1, #1
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	4152      	adcs	r2, r2
 80021fa:	1a41      	subs	r1, r0, r1
 80021fc:	d200      	bcs.n	8002200 <__udivsi3+0xf8>
 80021fe:	4601      	mov	r1, r0
 8002200:	4152      	adcs	r2, r2
 8002202:	4610      	mov	r0, r2
 8002204:	4770      	bx	lr
 8002206:	e7ff      	b.n	8002208 <__udivsi3+0x100>
 8002208:	b501      	push	{r0, lr}
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f8f0 	bl	80023f0 <__aeabi_idiv0>
 8002210:	bd02      	pop	{r1, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)

08002214 <__aeabi_uidivmod>:
 8002214:	2900      	cmp	r1, #0
 8002216:	d0f7      	beq.n	8002208 <__udivsi3+0x100>
 8002218:	e776      	b.n	8002108 <__udivsi3>
 800221a:	4770      	bx	lr

0800221c <__divsi3>:
 800221c:	4603      	mov	r3, r0
 800221e:	430b      	orrs	r3, r1
 8002220:	d47f      	bmi.n	8002322 <__divsi3+0x106>
 8002222:	2200      	movs	r2, #0
 8002224:	0843      	lsrs	r3, r0, #1
 8002226:	428b      	cmp	r3, r1
 8002228:	d374      	bcc.n	8002314 <__divsi3+0xf8>
 800222a:	0903      	lsrs	r3, r0, #4
 800222c:	428b      	cmp	r3, r1
 800222e:	d35f      	bcc.n	80022f0 <__divsi3+0xd4>
 8002230:	0a03      	lsrs	r3, r0, #8
 8002232:	428b      	cmp	r3, r1
 8002234:	d344      	bcc.n	80022c0 <__divsi3+0xa4>
 8002236:	0b03      	lsrs	r3, r0, #12
 8002238:	428b      	cmp	r3, r1
 800223a:	d328      	bcc.n	800228e <__divsi3+0x72>
 800223c:	0c03      	lsrs	r3, r0, #16
 800223e:	428b      	cmp	r3, r1
 8002240:	d30d      	bcc.n	800225e <__divsi3+0x42>
 8002242:	22ff      	movs	r2, #255	@ 0xff
 8002244:	0209      	lsls	r1, r1, #8
 8002246:	ba12      	rev	r2, r2
 8002248:	0c03      	lsrs	r3, r0, #16
 800224a:	428b      	cmp	r3, r1
 800224c:	d302      	bcc.n	8002254 <__divsi3+0x38>
 800224e:	1212      	asrs	r2, r2, #8
 8002250:	0209      	lsls	r1, r1, #8
 8002252:	d065      	beq.n	8002320 <__divsi3+0x104>
 8002254:	0b03      	lsrs	r3, r0, #12
 8002256:	428b      	cmp	r3, r1
 8002258:	d319      	bcc.n	800228e <__divsi3+0x72>
 800225a:	e000      	b.n	800225e <__divsi3+0x42>
 800225c:	0a09      	lsrs	r1, r1, #8
 800225e:	0bc3      	lsrs	r3, r0, #15
 8002260:	428b      	cmp	r3, r1
 8002262:	d301      	bcc.n	8002268 <__divsi3+0x4c>
 8002264:	03cb      	lsls	r3, r1, #15
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	4152      	adcs	r2, r2
 800226a:	0b83      	lsrs	r3, r0, #14
 800226c:	428b      	cmp	r3, r1
 800226e:	d301      	bcc.n	8002274 <__divsi3+0x58>
 8002270:	038b      	lsls	r3, r1, #14
 8002272:	1ac0      	subs	r0, r0, r3
 8002274:	4152      	adcs	r2, r2
 8002276:	0b43      	lsrs	r3, r0, #13
 8002278:	428b      	cmp	r3, r1
 800227a:	d301      	bcc.n	8002280 <__divsi3+0x64>
 800227c:	034b      	lsls	r3, r1, #13
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	4152      	adcs	r2, r2
 8002282:	0b03      	lsrs	r3, r0, #12
 8002284:	428b      	cmp	r3, r1
 8002286:	d301      	bcc.n	800228c <__divsi3+0x70>
 8002288:	030b      	lsls	r3, r1, #12
 800228a:	1ac0      	subs	r0, r0, r3
 800228c:	4152      	adcs	r2, r2
 800228e:	0ac3      	lsrs	r3, r0, #11
 8002290:	428b      	cmp	r3, r1
 8002292:	d301      	bcc.n	8002298 <__divsi3+0x7c>
 8002294:	02cb      	lsls	r3, r1, #11
 8002296:	1ac0      	subs	r0, r0, r3
 8002298:	4152      	adcs	r2, r2
 800229a:	0a83      	lsrs	r3, r0, #10
 800229c:	428b      	cmp	r3, r1
 800229e:	d301      	bcc.n	80022a4 <__divsi3+0x88>
 80022a0:	028b      	lsls	r3, r1, #10
 80022a2:	1ac0      	subs	r0, r0, r3
 80022a4:	4152      	adcs	r2, r2
 80022a6:	0a43      	lsrs	r3, r0, #9
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d301      	bcc.n	80022b0 <__divsi3+0x94>
 80022ac:	024b      	lsls	r3, r1, #9
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	4152      	adcs	r2, r2
 80022b2:	0a03      	lsrs	r3, r0, #8
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d301      	bcc.n	80022bc <__divsi3+0xa0>
 80022b8:	020b      	lsls	r3, r1, #8
 80022ba:	1ac0      	subs	r0, r0, r3
 80022bc:	4152      	adcs	r2, r2
 80022be:	d2cd      	bcs.n	800225c <__divsi3+0x40>
 80022c0:	09c3      	lsrs	r3, r0, #7
 80022c2:	428b      	cmp	r3, r1
 80022c4:	d301      	bcc.n	80022ca <__divsi3+0xae>
 80022c6:	01cb      	lsls	r3, r1, #7
 80022c8:	1ac0      	subs	r0, r0, r3
 80022ca:	4152      	adcs	r2, r2
 80022cc:	0983      	lsrs	r3, r0, #6
 80022ce:	428b      	cmp	r3, r1
 80022d0:	d301      	bcc.n	80022d6 <__divsi3+0xba>
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1ac0      	subs	r0, r0, r3
 80022d6:	4152      	adcs	r2, r2
 80022d8:	0943      	lsrs	r3, r0, #5
 80022da:	428b      	cmp	r3, r1
 80022dc:	d301      	bcc.n	80022e2 <__divsi3+0xc6>
 80022de:	014b      	lsls	r3, r1, #5
 80022e0:	1ac0      	subs	r0, r0, r3
 80022e2:	4152      	adcs	r2, r2
 80022e4:	0903      	lsrs	r3, r0, #4
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d301      	bcc.n	80022ee <__divsi3+0xd2>
 80022ea:	010b      	lsls	r3, r1, #4
 80022ec:	1ac0      	subs	r0, r0, r3
 80022ee:	4152      	adcs	r2, r2
 80022f0:	08c3      	lsrs	r3, r0, #3
 80022f2:	428b      	cmp	r3, r1
 80022f4:	d301      	bcc.n	80022fa <__divsi3+0xde>
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	1ac0      	subs	r0, r0, r3
 80022fa:	4152      	adcs	r2, r2
 80022fc:	0883      	lsrs	r3, r0, #2
 80022fe:	428b      	cmp	r3, r1
 8002300:	d301      	bcc.n	8002306 <__divsi3+0xea>
 8002302:	008b      	lsls	r3, r1, #2
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	4152      	adcs	r2, r2
 8002308:	0843      	lsrs	r3, r0, #1
 800230a:	428b      	cmp	r3, r1
 800230c:	d301      	bcc.n	8002312 <__divsi3+0xf6>
 800230e:	004b      	lsls	r3, r1, #1
 8002310:	1ac0      	subs	r0, r0, r3
 8002312:	4152      	adcs	r2, r2
 8002314:	1a41      	subs	r1, r0, r1
 8002316:	d200      	bcs.n	800231a <__divsi3+0xfe>
 8002318:	4601      	mov	r1, r0
 800231a:	4152      	adcs	r2, r2
 800231c:	4610      	mov	r0, r2
 800231e:	4770      	bx	lr
 8002320:	e05d      	b.n	80023de <__divsi3+0x1c2>
 8002322:	0fca      	lsrs	r2, r1, #31
 8002324:	d000      	beq.n	8002328 <__divsi3+0x10c>
 8002326:	4249      	negs	r1, r1
 8002328:	1003      	asrs	r3, r0, #32
 800232a:	d300      	bcc.n	800232e <__divsi3+0x112>
 800232c:	4240      	negs	r0, r0
 800232e:	4053      	eors	r3, r2
 8002330:	2200      	movs	r2, #0
 8002332:	469c      	mov	ip, r3
 8002334:	0903      	lsrs	r3, r0, #4
 8002336:	428b      	cmp	r3, r1
 8002338:	d32d      	bcc.n	8002396 <__divsi3+0x17a>
 800233a:	0a03      	lsrs	r3, r0, #8
 800233c:	428b      	cmp	r3, r1
 800233e:	d312      	bcc.n	8002366 <__divsi3+0x14a>
 8002340:	22fc      	movs	r2, #252	@ 0xfc
 8002342:	0189      	lsls	r1, r1, #6
 8002344:	ba12      	rev	r2, r2
 8002346:	0a03      	lsrs	r3, r0, #8
 8002348:	428b      	cmp	r3, r1
 800234a:	d30c      	bcc.n	8002366 <__divsi3+0x14a>
 800234c:	0189      	lsls	r1, r1, #6
 800234e:	1192      	asrs	r2, r2, #6
 8002350:	428b      	cmp	r3, r1
 8002352:	d308      	bcc.n	8002366 <__divsi3+0x14a>
 8002354:	0189      	lsls	r1, r1, #6
 8002356:	1192      	asrs	r2, r2, #6
 8002358:	428b      	cmp	r3, r1
 800235a:	d304      	bcc.n	8002366 <__divsi3+0x14a>
 800235c:	0189      	lsls	r1, r1, #6
 800235e:	d03a      	beq.n	80023d6 <__divsi3+0x1ba>
 8002360:	1192      	asrs	r2, r2, #6
 8002362:	e000      	b.n	8002366 <__divsi3+0x14a>
 8002364:	0989      	lsrs	r1, r1, #6
 8002366:	09c3      	lsrs	r3, r0, #7
 8002368:	428b      	cmp	r3, r1
 800236a:	d301      	bcc.n	8002370 <__divsi3+0x154>
 800236c:	01cb      	lsls	r3, r1, #7
 800236e:	1ac0      	subs	r0, r0, r3
 8002370:	4152      	adcs	r2, r2
 8002372:	0983      	lsrs	r3, r0, #6
 8002374:	428b      	cmp	r3, r1
 8002376:	d301      	bcc.n	800237c <__divsi3+0x160>
 8002378:	018b      	lsls	r3, r1, #6
 800237a:	1ac0      	subs	r0, r0, r3
 800237c:	4152      	adcs	r2, r2
 800237e:	0943      	lsrs	r3, r0, #5
 8002380:	428b      	cmp	r3, r1
 8002382:	d301      	bcc.n	8002388 <__divsi3+0x16c>
 8002384:	014b      	lsls	r3, r1, #5
 8002386:	1ac0      	subs	r0, r0, r3
 8002388:	4152      	adcs	r2, r2
 800238a:	0903      	lsrs	r3, r0, #4
 800238c:	428b      	cmp	r3, r1
 800238e:	d301      	bcc.n	8002394 <__divsi3+0x178>
 8002390:	010b      	lsls	r3, r1, #4
 8002392:	1ac0      	subs	r0, r0, r3
 8002394:	4152      	adcs	r2, r2
 8002396:	08c3      	lsrs	r3, r0, #3
 8002398:	428b      	cmp	r3, r1
 800239a:	d301      	bcc.n	80023a0 <__divsi3+0x184>
 800239c:	00cb      	lsls	r3, r1, #3
 800239e:	1ac0      	subs	r0, r0, r3
 80023a0:	4152      	adcs	r2, r2
 80023a2:	0883      	lsrs	r3, r0, #2
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d301      	bcc.n	80023ac <__divsi3+0x190>
 80023a8:	008b      	lsls	r3, r1, #2
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	4152      	adcs	r2, r2
 80023ae:	d2d9      	bcs.n	8002364 <__divsi3+0x148>
 80023b0:	0843      	lsrs	r3, r0, #1
 80023b2:	428b      	cmp	r3, r1
 80023b4:	d301      	bcc.n	80023ba <__divsi3+0x19e>
 80023b6:	004b      	lsls	r3, r1, #1
 80023b8:	1ac0      	subs	r0, r0, r3
 80023ba:	4152      	adcs	r2, r2
 80023bc:	1a41      	subs	r1, r0, r1
 80023be:	d200      	bcs.n	80023c2 <__divsi3+0x1a6>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4663      	mov	r3, ip
 80023c4:	4152      	adcs	r2, r2
 80023c6:	105b      	asrs	r3, r3, #1
 80023c8:	4610      	mov	r0, r2
 80023ca:	d301      	bcc.n	80023d0 <__divsi3+0x1b4>
 80023cc:	4240      	negs	r0, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d500      	bpl.n	80023d4 <__divsi3+0x1b8>
 80023d2:	4249      	negs	r1, r1
 80023d4:	4770      	bx	lr
 80023d6:	4663      	mov	r3, ip
 80023d8:	105b      	asrs	r3, r3, #1
 80023da:	d300      	bcc.n	80023de <__divsi3+0x1c2>
 80023dc:	4240      	negs	r0, r0
 80023de:	b501      	push	{r0, lr}
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f805 	bl	80023f0 <__aeabi_idiv0>
 80023e6:	bd02      	pop	{r1, pc}

080023e8 <__aeabi_idivmod>:
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0f8      	beq.n	80023de <__divsi3+0x1c2>
 80023ec:	e716      	b.n	800221c <__divsi3>
 80023ee:	4770      	bx	lr

080023f0 <__aeabi_idiv0>:
 80023f0:	4770      	bx	lr
 80023f2:	46c0      	nop			@ (mov r8, r8)

080023f4 <__aeabi_d2uiz>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	2200      	movs	r2, #0
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <__aeabi_d2uiz+0x38>)
 80023fa:	0004      	movs	r4, r0
 80023fc:	000d      	movs	r5, r1
 80023fe:	f001 fa33 	bl	8003868 <__aeabi_dcmpge>
 8002402:	2800      	cmp	r0, #0
 8002404:	d104      	bne.n	8002410 <__aeabi_d2uiz+0x1c>
 8002406:	0020      	movs	r0, r4
 8002408:	0029      	movs	r1, r5
 800240a:	f001 f98f 	bl	800372c <__aeabi_d2iz>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <__aeabi_d2uiz+0x38>)
 8002412:	2200      	movs	r2, #0
 8002414:	0020      	movs	r0, r4
 8002416:	0029      	movs	r1, r5
 8002418:	f000 fdec 	bl	8002ff4 <__aeabi_dsub>
 800241c:	f001 f986 	bl	800372c <__aeabi_d2iz>
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	469c      	mov	ip, r3
 8002426:	4460      	add	r0, ip
 8002428:	e7f1      	b.n	800240e <__aeabi_d2uiz+0x1a>
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	41e00000 	.word	0x41e00000

08002430 <__aeabi_ddiv>:
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	46de      	mov	lr, fp
 8002434:	4645      	mov	r5, r8
 8002436:	4657      	mov	r7, sl
 8002438:	464e      	mov	r6, r9
 800243a:	b5e0      	push	{r5, r6, r7, lr}
 800243c:	b087      	sub	sp, #28
 800243e:	9200      	str	r2, [sp, #0]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	030b      	lsls	r3, r1, #12
 8002444:	0b1b      	lsrs	r3, r3, #12
 8002446:	469b      	mov	fp, r3
 8002448:	0fca      	lsrs	r2, r1, #31
 800244a:	004b      	lsls	r3, r1, #1
 800244c:	0004      	movs	r4, r0
 800244e:	4680      	mov	r8, r0
 8002450:	0d5b      	lsrs	r3, r3, #21
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	d100      	bne.n	8002458 <__aeabi_ddiv+0x28>
 8002456:	e16a      	b.n	800272e <__aeabi_ddiv+0x2fe>
 8002458:	4ad4      	ldr	r2, [pc, #848]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d100      	bne.n	8002460 <__aeabi_ddiv+0x30>
 800245e:	e18c      	b.n	800277a <__aeabi_ddiv+0x34a>
 8002460:	4659      	mov	r1, fp
 8002462:	0f42      	lsrs	r2, r0, #29
 8002464:	00c9      	lsls	r1, r1, #3
 8002466:	430a      	orrs	r2, r1
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	0409      	lsls	r1, r1, #16
 800246c:	4311      	orrs	r1, r2
 800246e:	00c2      	lsls	r2, r0, #3
 8002470:	4690      	mov	r8, r2
 8002472:	4acf      	ldr	r2, [pc, #828]	@ (80027b0 <__aeabi_ddiv+0x380>)
 8002474:	4689      	mov	r9, r1
 8002476:	4692      	mov	sl, r2
 8002478:	449a      	add	sl, r3
 800247a:	2300      	movs	r3, #0
 800247c:	2400      	movs	r4, #0
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	9e00      	ldr	r6, [sp, #0]
 8002482:	9f01      	ldr	r7, [sp, #4]
 8002484:	033b      	lsls	r3, r7, #12
 8002486:	0b1b      	lsrs	r3, r3, #12
 8002488:	469b      	mov	fp, r3
 800248a:	007b      	lsls	r3, r7, #1
 800248c:	0030      	movs	r0, r6
 800248e:	0d5b      	lsrs	r3, r3, #21
 8002490:	0ffd      	lsrs	r5, r7, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d100      	bne.n	8002498 <__aeabi_ddiv+0x68>
 8002496:	e128      	b.n	80026ea <__aeabi_ddiv+0x2ba>
 8002498:	4ac4      	ldr	r2, [pc, #784]	@ (80027ac <__aeabi_ddiv+0x37c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d100      	bne.n	80024a0 <__aeabi_ddiv+0x70>
 800249e:	e177      	b.n	8002790 <__aeabi_ddiv+0x360>
 80024a0:	4659      	mov	r1, fp
 80024a2:	0f72      	lsrs	r2, r6, #29
 80024a4:	00c9      	lsls	r1, r1, #3
 80024a6:	430a      	orrs	r2, r1
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0409      	lsls	r1, r1, #16
 80024ac:	4311      	orrs	r1, r2
 80024ae:	468b      	mov	fp, r1
 80024b0:	49bf      	ldr	r1, [pc, #764]	@ (80027b0 <__aeabi_ddiv+0x380>)
 80024b2:	00f2      	lsls	r2, r6, #3
 80024b4:	468c      	mov	ip, r1
 80024b6:	4651      	mov	r1, sl
 80024b8:	4463      	add	r3, ip
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	469a      	mov	sl, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	9e02      	ldr	r6, [sp, #8]
 80024c2:	406e      	eors	r6, r5
 80024c4:	2c0f      	cmp	r4, #15
 80024c6:	d827      	bhi.n	8002518 <__aeabi_ddiv+0xe8>
 80024c8:	49ba      	ldr	r1, [pc, #744]	@ (80027b4 <__aeabi_ddiv+0x384>)
 80024ca:	00a4      	lsls	r4, r4, #2
 80024cc:	5909      	ldr	r1, [r1, r4]
 80024ce:	468f      	mov	pc, r1
 80024d0:	46cb      	mov	fp, r9
 80024d2:	4642      	mov	r2, r8
 80024d4:	9e02      	ldr	r6, [sp, #8]
 80024d6:	9b03      	ldr	r3, [sp, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d016      	beq.n	800250a <__aeabi_ddiv+0xda>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d100      	bne.n	80024e2 <__aeabi_ddiv+0xb2>
 80024e0:	e2a6      	b.n	8002a30 <__aeabi_ddiv+0x600>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d000      	beq.n	80024e8 <__aeabi_ddiv+0xb8>
 80024e6:	e0df      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	2400      	movs	r4, #0
 80024ee:	4690      	mov	r8, r2
 80024f0:	051b      	lsls	r3, r3, #20
 80024f2:	4323      	orrs	r3, r4
 80024f4:	07f6      	lsls	r6, r6, #31
 80024f6:	4333      	orrs	r3, r6
 80024f8:	4640      	mov	r0, r8
 80024fa:	0019      	movs	r1, r3
 80024fc:	b007      	add	sp, #28
 80024fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002500:	46bb      	mov	fp, r7
 8002502:	46b2      	mov	sl, r6
 8002504:	46a9      	mov	r9, r5
 8002506:	46a0      	mov	r8, r4
 8002508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250a:	2200      	movs	r2, #0
 800250c:	2400      	movs	r4, #0
 800250e:	4690      	mov	r8, r2
 8002510:	4ba6      	ldr	r3, [pc, #664]	@ (80027ac <__aeabi_ddiv+0x37c>)
 8002512:	e7ed      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002514:	002e      	movs	r6, r5
 8002516:	e7df      	b.n	80024d8 <__aeabi_ddiv+0xa8>
 8002518:	45cb      	cmp	fp, r9
 800251a:	d200      	bcs.n	800251e <__aeabi_ddiv+0xee>
 800251c:	e1d4      	b.n	80028c8 <__aeabi_ddiv+0x498>
 800251e:	d100      	bne.n	8002522 <__aeabi_ddiv+0xf2>
 8002520:	e1cf      	b.n	80028c2 <__aeabi_ddiv+0x492>
 8002522:	2301      	movs	r3, #1
 8002524:	425b      	negs	r3, r3
 8002526:	469c      	mov	ip, r3
 8002528:	4644      	mov	r4, r8
 800252a:	4648      	mov	r0, r9
 800252c:	2700      	movs	r7, #0
 800252e:	44e2      	add	sl, ip
 8002530:	465b      	mov	r3, fp
 8002532:	0e15      	lsrs	r5, r2, #24
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	431d      	orrs	r5, r3
 8002538:	0c19      	lsrs	r1, r3, #16
 800253a:	042b      	lsls	r3, r5, #16
 800253c:	0212      	lsls	r2, r2, #8
 800253e:	9500      	str	r5, [sp, #0]
 8002540:	0c1d      	lsrs	r5, r3, #16
 8002542:	4691      	mov	r9, r2
 8002544:	9102      	str	r1, [sp, #8]
 8002546:	9503      	str	r5, [sp, #12]
 8002548:	f7ff fe64 	bl	8002214 <__aeabi_uidivmod>
 800254c:	0002      	movs	r2, r0
 800254e:	436a      	muls	r2, r5
 8002550:	040b      	lsls	r3, r1, #16
 8002552:	0c21      	lsrs	r1, r4, #16
 8002554:	4680      	mov	r8, r0
 8002556:	4319      	orrs	r1, r3
 8002558:	428a      	cmp	r2, r1
 800255a:	d909      	bls.n	8002570 <__aeabi_ddiv+0x140>
 800255c:	9d00      	ldr	r5, [sp, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	46ac      	mov	ip, r5
 8002562:	425b      	negs	r3, r3
 8002564:	4461      	add	r1, ip
 8002566:	469c      	mov	ip, r3
 8002568:	44e0      	add	r8, ip
 800256a:	428d      	cmp	r5, r1
 800256c:	d800      	bhi.n	8002570 <__aeabi_ddiv+0x140>
 800256e:	e1fb      	b.n	8002968 <__aeabi_ddiv+0x538>
 8002570:	1a88      	subs	r0, r1, r2
 8002572:	9902      	ldr	r1, [sp, #8]
 8002574:	f7ff fe4e 	bl	8002214 <__aeabi_uidivmod>
 8002578:	9a03      	ldr	r2, [sp, #12]
 800257a:	0424      	lsls	r4, r4, #16
 800257c:	4342      	muls	r2, r0
 800257e:	0409      	lsls	r1, r1, #16
 8002580:	0c24      	lsrs	r4, r4, #16
 8002582:	0003      	movs	r3, r0
 8002584:	430c      	orrs	r4, r1
 8002586:	42a2      	cmp	r2, r4
 8002588:	d906      	bls.n	8002598 <__aeabi_ddiv+0x168>
 800258a:	9900      	ldr	r1, [sp, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	468c      	mov	ip, r1
 8002590:	4464      	add	r4, ip
 8002592:	42a1      	cmp	r1, r4
 8002594:	d800      	bhi.n	8002598 <__aeabi_ddiv+0x168>
 8002596:	e1e1      	b.n	800295c <__aeabi_ddiv+0x52c>
 8002598:	1aa0      	subs	r0, r4, r2
 800259a:	4642      	mov	r2, r8
 800259c:	0412      	lsls	r2, r2, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	4693      	mov	fp, r2
 80025a2:	464b      	mov	r3, r9
 80025a4:	4659      	mov	r1, fp
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	001d      	movs	r5, r3
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	040b      	lsls	r3, r1, #16
 80025ae:	4649      	mov	r1, r9
 80025b0:	0409      	lsls	r1, r1, #16
 80025b2:	0c09      	lsrs	r1, r1, #16
 80025b4:	000c      	movs	r4, r1
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	435c      	muls	r4, r3
 80025ba:	0c12      	lsrs	r2, r2, #16
 80025bc:	436b      	muls	r3, r5
 80025be:	4688      	mov	r8, r1
 80025c0:	4351      	muls	r1, r2
 80025c2:	436a      	muls	r2, r5
 80025c4:	0c25      	lsrs	r5, r4, #16
 80025c6:	46ac      	mov	ip, r5
 80025c8:	185b      	adds	r3, r3, r1
 80025ca:	4463      	add	r3, ip
 80025cc:	4299      	cmp	r1, r3
 80025ce:	d903      	bls.n	80025d8 <__aeabi_ddiv+0x1a8>
 80025d0:	2180      	movs	r1, #128	@ 0x80
 80025d2:	0249      	lsls	r1, r1, #9
 80025d4:	468c      	mov	ip, r1
 80025d6:	4462      	add	r2, ip
 80025d8:	0c19      	lsrs	r1, r3, #16
 80025da:	0424      	lsls	r4, r4, #16
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	0c24      	lsrs	r4, r4, #16
 80025e0:	188a      	adds	r2, r1, r2
 80025e2:	191c      	adds	r4, r3, r4
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d302      	bcc.n	80025ee <__aeabi_ddiv+0x1be>
 80025e8:	d116      	bne.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ea:	42a7      	cmp	r7, r4
 80025ec:	d214      	bcs.n	8002618 <__aeabi_ddiv+0x1e8>
 80025ee:	465b      	mov	r3, fp
 80025f0:	9d00      	ldr	r5, [sp, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	444f      	add	r7, r9
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	454f      	cmp	r7, r9
 80025fa:	419b      	sbcs	r3, r3
 80025fc:	46ac      	mov	ip, r5
 80025fe:	425b      	negs	r3, r3
 8002600:	4463      	add	r3, ip
 8002602:	18c0      	adds	r0, r0, r3
 8002604:	4285      	cmp	r5, r0
 8002606:	d300      	bcc.n	800260a <__aeabi_ddiv+0x1da>
 8002608:	e1a1      	b.n	800294e <__aeabi_ddiv+0x51e>
 800260a:	4282      	cmp	r2, r0
 800260c:	d900      	bls.n	8002610 <__aeabi_ddiv+0x1e0>
 800260e:	e1f6      	b.n	80029fe <__aeabi_ddiv+0x5ce>
 8002610:	d100      	bne.n	8002614 <__aeabi_ddiv+0x1e4>
 8002612:	e1f1      	b.n	80029f8 <__aeabi_ddiv+0x5c8>
 8002614:	9b05      	ldr	r3, [sp, #20]
 8002616:	469b      	mov	fp, r3
 8002618:	1b3c      	subs	r4, r7, r4
 800261a:	42a7      	cmp	r7, r4
 800261c:	41bf      	sbcs	r7, r7
 800261e:	9d00      	ldr	r5, [sp, #0]
 8002620:	1a80      	subs	r0, r0, r2
 8002622:	427f      	negs	r7, r7
 8002624:	1bc0      	subs	r0, r0, r7
 8002626:	4285      	cmp	r5, r0
 8002628:	d100      	bne.n	800262c <__aeabi_ddiv+0x1fc>
 800262a:	e1d0      	b.n	80029ce <__aeabi_ddiv+0x59e>
 800262c:	9902      	ldr	r1, [sp, #8]
 800262e:	f7ff fdf1 	bl	8002214 <__aeabi_uidivmod>
 8002632:	9a03      	ldr	r2, [sp, #12]
 8002634:	040b      	lsls	r3, r1, #16
 8002636:	4342      	muls	r2, r0
 8002638:	0c21      	lsrs	r1, r4, #16
 800263a:	0007      	movs	r7, r0
 800263c:	4319      	orrs	r1, r3
 800263e:	428a      	cmp	r2, r1
 8002640:	d900      	bls.n	8002644 <__aeabi_ddiv+0x214>
 8002642:	e178      	b.n	8002936 <__aeabi_ddiv+0x506>
 8002644:	1a88      	subs	r0, r1, r2
 8002646:	9902      	ldr	r1, [sp, #8]
 8002648:	f7ff fde4 	bl	8002214 <__aeabi_uidivmod>
 800264c:	9a03      	ldr	r2, [sp, #12]
 800264e:	0424      	lsls	r4, r4, #16
 8002650:	4342      	muls	r2, r0
 8002652:	0409      	lsls	r1, r1, #16
 8002654:	0c24      	lsrs	r4, r4, #16
 8002656:	0003      	movs	r3, r0
 8002658:	430c      	orrs	r4, r1
 800265a:	42a2      	cmp	r2, r4
 800265c:	d900      	bls.n	8002660 <__aeabi_ddiv+0x230>
 800265e:	e15d      	b.n	800291c <__aeabi_ddiv+0x4ec>
 8002660:	4641      	mov	r1, r8
 8002662:	1aa4      	subs	r4, r4, r2
 8002664:	043a      	lsls	r2, r7, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	9d04      	ldr	r5, [sp, #16]
 800266a:	0413      	lsls	r3, r2, #16
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	4359      	muls	r1, r3
 8002670:	4647      	mov	r7, r8
 8002672:	436b      	muls	r3, r5
 8002674:	469c      	mov	ip, r3
 8002676:	0c10      	lsrs	r0, r2, #16
 8002678:	4347      	muls	r7, r0
 800267a:	0c0b      	lsrs	r3, r1, #16
 800267c:	44bc      	add	ip, r7
 800267e:	4463      	add	r3, ip
 8002680:	4368      	muls	r0, r5
 8002682:	429f      	cmp	r7, r3
 8002684:	d903      	bls.n	800268e <__aeabi_ddiv+0x25e>
 8002686:	2580      	movs	r5, #128	@ 0x80
 8002688:	026d      	lsls	r5, r5, #9
 800268a:	46ac      	mov	ip, r5
 800268c:	4460      	add	r0, ip
 800268e:	0c1f      	lsrs	r7, r3, #16
 8002690:	0409      	lsls	r1, r1, #16
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	0c09      	lsrs	r1, r1, #16
 8002696:	183f      	adds	r7, r7, r0
 8002698:	185b      	adds	r3, r3, r1
 800269a:	42bc      	cmp	r4, r7
 800269c:	d200      	bcs.n	80026a0 <__aeabi_ddiv+0x270>
 800269e:	e102      	b.n	80028a6 <__aeabi_ddiv+0x476>
 80026a0:	d100      	bne.n	80026a4 <__aeabi_ddiv+0x274>
 80026a2:	e0fd      	b.n	80028a0 <__aeabi_ddiv+0x470>
 80026a4:	2301      	movs	r3, #1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <__aeabi_ddiv+0x388>)
 80026aa:	4453      	add	r3, sl
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	dc00      	bgt.n	80026b2 <__aeabi_ddiv+0x282>
 80026b0:	e0ae      	b.n	8002810 <__aeabi_ddiv+0x3e0>
 80026b2:	0751      	lsls	r1, r2, #29
 80026b4:	d000      	beq.n	80026b8 <__aeabi_ddiv+0x288>
 80026b6:	e198      	b.n	80029ea <__aeabi_ddiv+0x5ba>
 80026b8:	4659      	mov	r1, fp
 80026ba:	01c9      	lsls	r1, r1, #7
 80026bc:	d506      	bpl.n	80026cc <__aeabi_ddiv+0x29c>
 80026be:	4659      	mov	r1, fp
 80026c0:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <__aeabi_ddiv+0x38c>)
 80026c2:	4019      	ands	r1, r3
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	468b      	mov	fp, r1
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4453      	add	r3, sl
 80026cc:	493c      	ldr	r1, [pc, #240]	@ (80027c0 <__aeabi_ddiv+0x390>)
 80026ce:	428b      	cmp	r3, r1
 80026d0:	dd00      	ble.n	80026d4 <__aeabi_ddiv+0x2a4>
 80026d2:	e71a      	b.n	800250a <__aeabi_ddiv+0xda>
 80026d4:	4659      	mov	r1, fp
 80026d6:	08d2      	lsrs	r2, r2, #3
 80026d8:	0749      	lsls	r1, r1, #29
 80026da:	4311      	orrs	r1, r2
 80026dc:	465a      	mov	r2, fp
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	0254      	lsls	r4, r2, #9
 80026e2:	4688      	mov	r8, r1
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	0d5b      	lsrs	r3, r3, #21
 80026e8:	e702      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80026ea:	465a      	mov	r2, fp
 80026ec:	9b00      	ldr	r3, [sp, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	d100      	bne.n	80026f4 <__aeabi_ddiv+0x2c4>
 80026f2:	e07e      	b.n	80027f2 <__aeabi_ddiv+0x3c2>
 80026f4:	465b      	mov	r3, fp
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <__aeabi_ddiv+0x2cc>
 80026fa:	e100      	b.n	80028fe <__aeabi_ddiv+0x4ce>
 80026fc:	4658      	mov	r0, fp
 80026fe:	f001 f8bd 	bl	800387c <__clzsi2>
 8002702:	0002      	movs	r2, r0
 8002704:	0003      	movs	r3, r0
 8002706:	3a0b      	subs	r2, #11
 8002708:	271d      	movs	r7, #29
 800270a:	9e00      	ldr	r6, [sp, #0]
 800270c:	1aba      	subs	r2, r7, r2
 800270e:	0019      	movs	r1, r3
 8002710:	4658      	mov	r0, fp
 8002712:	40d6      	lsrs	r6, r2
 8002714:	3908      	subs	r1, #8
 8002716:	4088      	lsls	r0, r1
 8002718:	0032      	movs	r2, r6
 800271a:	4302      	orrs	r2, r0
 800271c:	4693      	mov	fp, r2
 800271e:	9a00      	ldr	r2, [sp, #0]
 8002720:	408a      	lsls	r2, r1
 8002722:	4928      	ldr	r1, [pc, #160]	@ (80027c4 <__aeabi_ddiv+0x394>)
 8002724:	4453      	add	r3, sl
 8002726:	468a      	mov	sl, r1
 8002728:	449a      	add	sl, r3
 800272a:	2300      	movs	r3, #0
 800272c:	e6c8      	b.n	80024c0 <__aeabi_ddiv+0x90>
 800272e:	465b      	mov	r3, fp
 8002730:	4303      	orrs	r3, r0
 8002732:	4699      	mov	r9, r3
 8002734:	d056      	beq.n	80027e4 <__aeabi_ddiv+0x3b4>
 8002736:	465b      	mov	r3, fp
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <__aeabi_ddiv+0x30e>
 800273c:	e0cd      	b.n	80028da <__aeabi_ddiv+0x4aa>
 800273e:	4658      	mov	r0, fp
 8002740:	f001 f89c 	bl	800387c <__clzsi2>
 8002744:	230b      	movs	r3, #11
 8002746:	425b      	negs	r3, r3
 8002748:	469c      	mov	ip, r3
 800274a:	0002      	movs	r2, r0
 800274c:	4484      	add	ip, r0
 800274e:	4666      	mov	r6, ip
 8002750:	231d      	movs	r3, #29
 8002752:	1b9b      	subs	r3, r3, r6
 8002754:	0026      	movs	r6, r4
 8002756:	0011      	movs	r1, r2
 8002758:	4658      	mov	r0, fp
 800275a:	40de      	lsrs	r6, r3
 800275c:	3908      	subs	r1, #8
 800275e:	4088      	lsls	r0, r1
 8002760:	0033      	movs	r3, r6
 8002762:	4303      	orrs	r3, r0
 8002764:	4699      	mov	r9, r3
 8002766:	0023      	movs	r3, r4
 8002768:	408b      	lsls	r3, r1
 800276a:	4698      	mov	r8, r3
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <__aeabi_ddiv+0x398>)
 800276e:	2400      	movs	r4, #0
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	469a      	mov	sl, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	e682      	b.n	8002480 <__aeabi_ddiv+0x50>
 800277a:	465a      	mov	r2, fp
 800277c:	4302      	orrs	r2, r0
 800277e:	4691      	mov	r9, r2
 8002780:	d12a      	bne.n	80027d8 <__aeabi_ddiv+0x3a8>
 8002782:	2200      	movs	r2, #0
 8002784:	469a      	mov	sl, r3
 8002786:	2302      	movs	r3, #2
 8002788:	4690      	mov	r8, r2
 800278a:	2408      	movs	r4, #8
 800278c:	9303      	str	r3, [sp, #12]
 800278e:	e677      	b.n	8002480 <__aeabi_ddiv+0x50>
 8002790:	465a      	mov	r2, fp
 8002792:	9b00      	ldr	r3, [sp, #0]
 8002794:	431a      	orrs	r2, r3
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <__aeabi_ddiv+0x39c>)
 8002798:	469c      	mov	ip, r3
 800279a:	44e2      	add	sl, ip
 800279c:	2a00      	cmp	r2, #0
 800279e:	d117      	bne.n	80027d0 <__aeabi_ddiv+0x3a0>
 80027a0:	2302      	movs	r3, #2
 80027a2:	431c      	orrs	r4, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	469b      	mov	fp, r3
 80027a8:	3302      	adds	r3, #2
 80027aa:	e689      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	0800774c 	.word	0x0800774c
 80027b8:	000003ff 	.word	0x000003ff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	000007fe 	.word	0x000007fe
 80027c4:	000003f3 	.word	0x000003f3
 80027c8:	fffffc0d 	.word	0xfffffc0d
 80027cc:	fffff801 	.word	0xfffff801
 80027d0:	2303      	movs	r3, #3
 80027d2:	0032      	movs	r2, r6
 80027d4:	431c      	orrs	r4, r3
 80027d6:	e673      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027d8:	469a      	mov	sl, r3
 80027da:	2303      	movs	r3, #3
 80027dc:	46d9      	mov	r9, fp
 80027de:	240c      	movs	r4, #12
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	e64d      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027e4:	2300      	movs	r3, #0
 80027e6:	4698      	mov	r8, r3
 80027e8:	469a      	mov	sl, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	2404      	movs	r4, #4
 80027ee:	9303      	str	r3, [sp, #12]
 80027f0:	e646      	b.n	8002480 <__aeabi_ddiv+0x50>
 80027f2:	2301      	movs	r3, #1
 80027f4:	431c      	orrs	r4, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	469b      	mov	fp, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	e660      	b.n	80024c0 <__aeabi_ddiv+0x90>
 80027fe:	2300      	movs	r3, #0
 8002800:	2480      	movs	r4, #128	@ 0x80
 8002802:	4698      	mov	r8, r3
 8002804:	2600      	movs	r6, #0
 8002806:	4b92      	ldr	r3, [pc, #584]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	e671      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800280c:	2201      	movs	r2, #1
 800280e:	4252      	negs	r2, r2
 8002810:	2101      	movs	r1, #1
 8002812:	1ac9      	subs	r1, r1, r3
 8002814:	2938      	cmp	r1, #56	@ 0x38
 8002816:	dd00      	ble.n	800281a <__aeabi_ddiv+0x3ea>
 8002818:	e666      	b.n	80024e8 <__aeabi_ddiv+0xb8>
 800281a:	291f      	cmp	r1, #31
 800281c:	dc00      	bgt.n	8002820 <__aeabi_ddiv+0x3f0>
 800281e:	e0ab      	b.n	8002978 <__aeabi_ddiv+0x548>
 8002820:	201f      	movs	r0, #31
 8002822:	4240      	negs	r0, r0
 8002824:	1ac3      	subs	r3, r0, r3
 8002826:	4658      	mov	r0, fp
 8002828:	40d8      	lsrs	r0, r3
 800282a:	0003      	movs	r3, r0
 800282c:	2920      	cmp	r1, #32
 800282e:	d004      	beq.n	800283a <__aeabi_ddiv+0x40a>
 8002830:	4658      	mov	r0, fp
 8002832:	4988      	ldr	r1, [pc, #544]	@ (8002a54 <__aeabi_ddiv+0x624>)
 8002834:	4451      	add	r1, sl
 8002836:	4088      	lsls	r0, r1
 8002838:	4302      	orrs	r2, r0
 800283a:	1e51      	subs	r1, r2, #1
 800283c:	418a      	sbcs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	2307      	movs	r3, #7
 8002842:	0019      	movs	r1, r3
 8002844:	2400      	movs	r4, #0
 8002846:	4011      	ands	r1, r2
 8002848:	4213      	tst	r3, r2
 800284a:	d00c      	beq.n	8002866 <__aeabi_ddiv+0x436>
 800284c:	230f      	movs	r3, #15
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d100      	bne.n	8002856 <__aeabi_ddiv+0x426>
 8002854:	e0f9      	b.n	8002a4a <__aeabi_ddiv+0x61a>
 8002856:	1d11      	adds	r1, r2, #4
 8002858:	4291      	cmp	r1, r2
 800285a:	419b      	sbcs	r3, r3
 800285c:	000a      	movs	r2, r1
 800285e:	425b      	negs	r3, r3
 8002860:	0759      	lsls	r1, r3, #29
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	0b1c      	lsrs	r4, r3, #12
 8002866:	08d2      	lsrs	r2, r2, #3
 8002868:	430a      	orrs	r2, r1
 800286a:	4690      	mov	r8, r2
 800286c:	2300      	movs	r3, #0
 800286e:	e63f      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002870:	2480      	movs	r4, #128	@ 0x80
 8002872:	464b      	mov	r3, r9
 8002874:	0324      	lsls	r4, r4, #12
 8002876:	4223      	tst	r3, r4
 8002878:	d009      	beq.n	800288e <__aeabi_ddiv+0x45e>
 800287a:	465b      	mov	r3, fp
 800287c:	4223      	tst	r3, r4
 800287e:	d106      	bne.n	800288e <__aeabi_ddiv+0x45e>
 8002880:	431c      	orrs	r4, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	002e      	movs	r6, r5
 8002886:	4690      	mov	r8, r2
 8002888:	4b71      	ldr	r3, [pc, #452]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800288a:	0b24      	lsrs	r4, r4, #12
 800288c:	e630      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 800288e:	2480      	movs	r4, #128	@ 0x80
 8002890:	464b      	mov	r3, r9
 8002892:	0324      	lsls	r4, r4, #12
 8002894:	431c      	orrs	r4, r3
 8002896:	0324      	lsls	r4, r4, #12
 8002898:	9e02      	ldr	r6, [sp, #8]
 800289a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <__aeabi_ddiv+0x620>)
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	e627      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d100      	bne.n	80028a6 <__aeabi_ddiv+0x476>
 80028a4:	e700      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80028a6:	9800      	ldr	r0, [sp, #0]
 80028a8:	1e51      	subs	r1, r2, #1
 80028aa:	4684      	mov	ip, r0
 80028ac:	4464      	add	r4, ip
 80028ae:	4284      	cmp	r4, r0
 80028b0:	d200      	bcs.n	80028b4 <__aeabi_ddiv+0x484>
 80028b2:	e084      	b.n	80029be <__aeabi_ddiv+0x58e>
 80028b4:	42bc      	cmp	r4, r7
 80028b6:	d200      	bcs.n	80028ba <__aeabi_ddiv+0x48a>
 80028b8:	e0ae      	b.n	8002a18 <__aeabi_ddiv+0x5e8>
 80028ba:	d100      	bne.n	80028be <__aeabi_ddiv+0x48e>
 80028bc:	e0c1      	b.n	8002a42 <__aeabi_ddiv+0x612>
 80028be:	000a      	movs	r2, r1
 80028c0:	e6f0      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80028c2:	4542      	cmp	r2, r8
 80028c4:	d900      	bls.n	80028c8 <__aeabi_ddiv+0x498>
 80028c6:	e62c      	b.n	8002522 <__aeabi_ddiv+0xf2>
 80028c8:	464b      	mov	r3, r9
 80028ca:	07dc      	lsls	r4, r3, #31
 80028cc:	0858      	lsrs	r0, r3, #1
 80028ce:	4643      	mov	r3, r8
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	431c      	orrs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	07df      	lsls	r7, r3, #31
 80028d8:	e62a      	b.n	8002530 <__aeabi_ddiv+0x100>
 80028da:	f000 ffcf 	bl	800387c <__clzsi2>
 80028de:	2315      	movs	r3, #21
 80028e0:	469c      	mov	ip, r3
 80028e2:	4484      	add	ip, r0
 80028e4:	0002      	movs	r2, r0
 80028e6:	4663      	mov	r3, ip
 80028e8:	3220      	adds	r2, #32
 80028ea:	2b1c      	cmp	r3, #28
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_ddiv+0x4c0>
 80028ee:	e72e      	b.n	800274e <__aeabi_ddiv+0x31e>
 80028f0:	0023      	movs	r3, r4
 80028f2:	3808      	subs	r0, #8
 80028f4:	4083      	lsls	r3, r0
 80028f6:	4699      	mov	r9, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	4698      	mov	r8, r3
 80028fc:	e736      	b.n	800276c <__aeabi_ddiv+0x33c>
 80028fe:	f000 ffbd 	bl	800387c <__clzsi2>
 8002902:	0002      	movs	r2, r0
 8002904:	0003      	movs	r3, r0
 8002906:	3215      	adds	r2, #21
 8002908:	3320      	adds	r3, #32
 800290a:	2a1c      	cmp	r2, #28
 800290c:	dc00      	bgt.n	8002910 <__aeabi_ddiv+0x4e0>
 800290e:	e6fb      	b.n	8002708 <__aeabi_ddiv+0x2d8>
 8002910:	9900      	ldr	r1, [sp, #0]
 8002912:	3808      	subs	r0, #8
 8002914:	4081      	lsls	r1, r0
 8002916:	2200      	movs	r2, #0
 8002918:	468b      	mov	fp, r1
 800291a:	e702      	b.n	8002722 <__aeabi_ddiv+0x2f2>
 800291c:	9900      	ldr	r1, [sp, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	468c      	mov	ip, r1
 8002922:	4464      	add	r4, ip
 8002924:	42a1      	cmp	r1, r4
 8002926:	d900      	bls.n	800292a <__aeabi_ddiv+0x4fa>
 8002928:	e69a      	b.n	8002660 <__aeabi_ddiv+0x230>
 800292a:	42a2      	cmp	r2, r4
 800292c:	d800      	bhi.n	8002930 <__aeabi_ddiv+0x500>
 800292e:	e697      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002930:	1e83      	subs	r3, r0, #2
 8002932:	4464      	add	r4, ip
 8002934:	e694      	b.n	8002660 <__aeabi_ddiv+0x230>
 8002936:	46ac      	mov	ip, r5
 8002938:	4461      	add	r1, ip
 800293a:	3f01      	subs	r7, #1
 800293c:	428d      	cmp	r5, r1
 800293e:	d900      	bls.n	8002942 <__aeabi_ddiv+0x512>
 8002940:	e680      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002942:	428a      	cmp	r2, r1
 8002944:	d800      	bhi.n	8002948 <__aeabi_ddiv+0x518>
 8002946:	e67d      	b.n	8002644 <__aeabi_ddiv+0x214>
 8002948:	1e87      	subs	r7, r0, #2
 800294a:	4461      	add	r1, ip
 800294c:	e67a      	b.n	8002644 <__aeabi_ddiv+0x214>
 800294e:	4285      	cmp	r5, r0
 8002950:	d000      	beq.n	8002954 <__aeabi_ddiv+0x524>
 8002952:	e65f      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 8002954:	45b9      	cmp	r9, r7
 8002956:	d900      	bls.n	800295a <__aeabi_ddiv+0x52a>
 8002958:	e65c      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 800295a:	e656      	b.n	800260a <__aeabi_ddiv+0x1da>
 800295c:	42a2      	cmp	r2, r4
 800295e:	d800      	bhi.n	8002962 <__aeabi_ddiv+0x532>
 8002960:	e61a      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002962:	1e83      	subs	r3, r0, #2
 8002964:	4464      	add	r4, ip
 8002966:	e617      	b.n	8002598 <__aeabi_ddiv+0x168>
 8002968:	428a      	cmp	r2, r1
 800296a:	d800      	bhi.n	800296e <__aeabi_ddiv+0x53e>
 800296c:	e600      	b.n	8002570 <__aeabi_ddiv+0x140>
 800296e:	46ac      	mov	ip, r5
 8002970:	1e83      	subs	r3, r0, #2
 8002972:	4698      	mov	r8, r3
 8002974:	4461      	add	r1, ip
 8002976:	e5fb      	b.n	8002570 <__aeabi_ddiv+0x140>
 8002978:	4837      	ldr	r0, [pc, #220]	@ (8002a58 <__aeabi_ddiv+0x628>)
 800297a:	0014      	movs	r4, r2
 800297c:	4450      	add	r0, sl
 800297e:	4082      	lsls	r2, r0
 8002980:	465b      	mov	r3, fp
 8002982:	0017      	movs	r7, r2
 8002984:	4083      	lsls	r3, r0
 8002986:	40cc      	lsrs	r4, r1
 8002988:	1e7a      	subs	r2, r7, #1
 800298a:	4197      	sbcs	r7, r2
 800298c:	4323      	orrs	r3, r4
 800298e:	433b      	orrs	r3, r7
 8002990:	001a      	movs	r2, r3
 8002992:	465b      	mov	r3, fp
 8002994:	40cb      	lsrs	r3, r1
 8002996:	0751      	lsls	r1, r2, #29
 8002998:	d009      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 800299a:	210f      	movs	r1, #15
 800299c:	4011      	ands	r1, r2
 800299e:	2904      	cmp	r1, #4
 80029a0:	d005      	beq.n	80029ae <__aeabi_ddiv+0x57e>
 80029a2:	1d11      	adds	r1, r2, #4
 80029a4:	4291      	cmp	r1, r2
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	4252      	negs	r2, r2
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	0219      	lsls	r1, r3, #8
 80029b0:	d400      	bmi.n	80029b4 <__aeabi_ddiv+0x584>
 80029b2:	e755      	b.n	8002860 <__aeabi_ddiv+0x430>
 80029b4:	2200      	movs	r2, #0
 80029b6:	2301      	movs	r3, #1
 80029b8:	2400      	movs	r4, #0
 80029ba:	4690      	mov	r8, r2
 80029bc:	e598      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 80029be:	000a      	movs	r2, r1
 80029c0:	42bc      	cmp	r4, r7
 80029c2:	d000      	beq.n	80029c6 <__aeabi_ddiv+0x596>
 80029c4:	e66e      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029c6:	454b      	cmp	r3, r9
 80029c8:	d000      	beq.n	80029cc <__aeabi_ddiv+0x59c>
 80029ca:	e66b      	b.n	80026a4 <__aeabi_ddiv+0x274>
 80029cc:	e66c      	b.n	80026a8 <__aeabi_ddiv+0x278>
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <__aeabi_ddiv+0x62c>)
 80029d0:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <__aeabi_ddiv+0x630>)
 80029d2:	4453      	add	r3, sl
 80029d4:	4592      	cmp	sl, r2
 80029d6:	da00      	bge.n	80029da <__aeabi_ddiv+0x5aa>
 80029d8:	e718      	b.n	800280c <__aeabi_ddiv+0x3dc>
 80029da:	2101      	movs	r1, #1
 80029dc:	4249      	negs	r1, r1
 80029de:	1d0a      	adds	r2, r1, #4
 80029e0:	428a      	cmp	r2, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	4249      	negs	r1, r1
 80029e6:	448b      	add	fp, r1
 80029e8:	e666      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029ea:	210f      	movs	r1, #15
 80029ec:	4011      	ands	r1, r2
 80029ee:	2904      	cmp	r1, #4
 80029f0:	d100      	bne.n	80029f4 <__aeabi_ddiv+0x5c4>
 80029f2:	e661      	b.n	80026b8 <__aeabi_ddiv+0x288>
 80029f4:	0011      	movs	r1, r2
 80029f6:	e7f2      	b.n	80029de <__aeabi_ddiv+0x5ae>
 80029f8:	42bc      	cmp	r4, r7
 80029fa:	d800      	bhi.n	80029fe <__aeabi_ddiv+0x5ce>
 80029fc:	e60a      	b.n	8002614 <__aeabi_ddiv+0x1e4>
 80029fe:	2302      	movs	r3, #2
 8002a00:	425b      	negs	r3, r3
 8002a02:	469c      	mov	ip, r3
 8002a04:	9900      	ldr	r1, [sp, #0]
 8002a06:	444f      	add	r7, r9
 8002a08:	454f      	cmp	r7, r9
 8002a0a:	419b      	sbcs	r3, r3
 8002a0c:	44e3      	add	fp, ip
 8002a0e:	468c      	mov	ip, r1
 8002a10:	425b      	negs	r3, r3
 8002a12:	4463      	add	r3, ip
 8002a14:	18c0      	adds	r0, r0, r3
 8002a16:	e5ff      	b.n	8002618 <__aeabi_ddiv+0x1e8>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	9d00      	ldr	r5, [sp, #0]
 8002a1c:	0048      	lsls	r0, r1, #1
 8002a1e:	4548      	cmp	r0, r9
 8002a20:	4189      	sbcs	r1, r1
 8002a22:	46ac      	mov	ip, r5
 8002a24:	4249      	negs	r1, r1
 8002a26:	4461      	add	r1, ip
 8002a28:	4681      	mov	r9, r0
 8002a2a:	3a02      	subs	r2, #2
 8002a2c:	1864      	adds	r4, r4, r1
 8002a2e:	e7c7      	b.n	80029c0 <__aeabi_ddiv+0x590>
 8002a30:	2480      	movs	r4, #128	@ 0x80
 8002a32:	465b      	mov	r3, fp
 8002a34:	0324      	lsls	r4, r4, #12
 8002a36:	431c      	orrs	r4, r3
 8002a38:	0324      	lsls	r4, r4, #12
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__aeabi_ddiv+0x620>)
 8002a3e:	0b24      	lsrs	r4, r4, #12
 8002a40:	e556      	b.n	80024f0 <__aeabi_ddiv+0xc0>
 8002a42:	4599      	cmp	r9, r3
 8002a44:	d3e8      	bcc.n	8002a18 <__aeabi_ddiv+0x5e8>
 8002a46:	000a      	movs	r2, r1
 8002a48:	e7bd      	b.n	80029c6 <__aeabi_ddiv+0x596>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e708      	b.n	8002860 <__aeabi_ddiv+0x430>
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	000007ff 	.word	0x000007ff
 8002a54:	0000043e 	.word	0x0000043e
 8002a58:	0000041e 	.word	0x0000041e
 8002a5c:	000003ff 	.word	0x000003ff
 8002a60:	fffffc02 	.word	0xfffffc02

08002a64 <__aeabi_dmul>:
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	4657      	mov	r7, sl
 8002a68:	46de      	mov	lr, fp
 8002a6a:	464e      	mov	r6, r9
 8002a6c:	4645      	mov	r5, r8
 8002a6e:	b5e0      	push	{r5, r6, r7, lr}
 8002a70:	001f      	movs	r7, r3
 8002a72:	030b      	lsls	r3, r1, #12
 8002a74:	0b1b      	lsrs	r3, r3, #12
 8002a76:	0016      	movs	r6, r2
 8002a78:	469a      	mov	sl, r3
 8002a7a:	0fca      	lsrs	r2, r1, #31
 8002a7c:	004b      	lsls	r3, r1, #1
 8002a7e:	0004      	movs	r4, r0
 8002a80:	4693      	mov	fp, r2
 8002a82:	b087      	sub	sp, #28
 8002a84:	0d5b      	lsrs	r3, r3, #21
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dmul+0x26>
 8002a88:	e0d5      	b.n	8002c36 <__aeabi_dmul+0x1d2>
 8002a8a:	4abb      	ldr	r2, [pc, #748]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dmul+0x2e>
 8002a90:	e0f8      	b.n	8002c84 <__aeabi_dmul+0x220>
 8002a92:	4651      	mov	r1, sl
 8002a94:	0f42      	lsrs	r2, r0, #29
 8002a96:	00c9      	lsls	r1, r1, #3
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0409      	lsls	r1, r1, #16
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	00c2      	lsls	r2, r0, #3
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	4ab5      	ldr	r2, [pc, #724]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002aa6:	468a      	mov	sl, r1
 8002aa8:	189d      	adds	r5, r3, r2
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4698      	mov	r8, r3
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	033c      	lsls	r4, r7, #12
 8002ab2:	007b      	lsls	r3, r7, #1
 8002ab4:	0ffa      	lsrs	r2, r7, #31
 8002ab6:	0030      	movs	r0, r6
 8002ab8:	0b24      	lsrs	r4, r4, #12
 8002aba:	0d5b      	lsrs	r3, r3, #21
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	d100      	bne.n	8002ac2 <__aeabi_dmul+0x5e>
 8002ac0:	e096      	b.n	8002bf0 <__aeabi_dmul+0x18c>
 8002ac2:	4aad      	ldr	r2, [pc, #692]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <__aeabi_dmul+0xc8>
 8002ac8:	0f72      	lsrs	r2, r6, #29
 8002aca:	00e4      	lsls	r4, r4, #3
 8002acc:	4322      	orrs	r2, r4
 8002ace:	2480      	movs	r4, #128	@ 0x80
 8002ad0:	0424      	lsls	r4, r4, #16
 8002ad2:	4314      	orrs	r4, r2
 8002ad4:	4aa9      	ldr	r2, [pc, #676]	@ (8002d7c <__aeabi_dmul+0x318>)
 8002ad6:	00f0      	lsls	r0, r6, #3
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	195b      	adds	r3, r3, r5
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	2a0a      	cmp	r2, #10
 8002ae8:	dc42      	bgt.n	8002b70 <__aeabi_dmul+0x10c>
 8002aea:	465a      	mov	r2, fp
 8002aec:	9900      	ldr	r1, [sp, #0]
 8002aee:	404a      	eors	r2, r1
 8002af0:	4693      	mov	fp, r2
 8002af2:	4642      	mov	r2, r8
 8002af4:	2a02      	cmp	r2, #2
 8002af6:	dc32      	bgt.n	8002b5e <__aeabi_dmul+0xfa>
 8002af8:	3a01      	subs	r2, #1
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d900      	bls.n	8002b00 <__aeabi_dmul+0x9c>
 8002afe:	e149      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002b00:	2e02      	cmp	r6, #2
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dmul+0xa2>
 8002b04:	e0ca      	b.n	8002c9c <__aeabi_dmul+0x238>
 8002b06:	2e01      	cmp	r6, #1
 8002b08:	d13d      	bne.n	8002b86 <__aeabi_dmul+0x122>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	0010      	movs	r0, r2
 8002b12:	465a      	mov	r2, fp
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	4323      	orrs	r3, r4
 8002b18:	07d2      	lsls	r2, r2, #31
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	b007      	add	sp, #28
 8002b20:	bcf0      	pop	{r4, r5, r6, r7}
 8002b22:	46bb      	mov	fp, r7
 8002b24:	46b2      	mov	sl, r6
 8002b26:	46a9      	mov	r9, r5
 8002b28:	46a0      	mov	r8, r4
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2c:	4b92      	ldr	r3, [pc, #584]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002b2e:	4326      	orrs	r6, r4
 8002b30:	18eb      	adds	r3, r5, r3
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dmul+0xd4>
 8002b36:	e0bb      	b.n	8002cb0 <__aeabi_dmul+0x24c>
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	465a      	mov	r2, fp
 8002b40:	4688      	mov	r8, r1
 8002b42:	9900      	ldr	r1, [sp, #0]
 8002b44:	404a      	eors	r2, r1
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0109      	lsls	r1, r1, #4
 8002b4a:	468c      	mov	ip, r1
 8002b4c:	0029      	movs	r1, r5
 8002b4e:	4461      	add	r1, ip
 8002b50:	9101      	str	r1, [sp, #4]
 8002b52:	4641      	mov	r1, r8
 8002b54:	290a      	cmp	r1, #10
 8002b56:	dd00      	ble.n	8002b5a <__aeabi_dmul+0xf6>
 8002b58:	e233      	b.n	8002fc2 <__aeabi_dmul+0x55e>
 8002b5a:	4693      	mov	fp, r2
 8002b5c:	2603      	movs	r6, #3
 8002b5e:	4642      	mov	r2, r8
 8002b60:	2701      	movs	r7, #1
 8002b62:	4097      	lsls	r7, r2
 8002b64:	21a6      	movs	r1, #166	@ 0xa6
 8002b66:	003a      	movs	r2, r7
 8002b68:	00c9      	lsls	r1, r1, #3
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	420f      	tst	r7, r1
 8002b6e:	d031      	beq.n	8002bd4 <__aeabi_dmul+0x170>
 8002b70:	9e02      	ldr	r6, [sp, #8]
 8002b72:	2e02      	cmp	r6, #2
 8002b74:	d100      	bne.n	8002b78 <__aeabi_dmul+0x114>
 8002b76:	e235      	b.n	8002fe4 <__aeabi_dmul+0x580>
 8002b78:	2e03      	cmp	r6, #3
 8002b7a:	d100      	bne.n	8002b7e <__aeabi_dmul+0x11a>
 8002b7c:	e1d2      	b.n	8002f24 <__aeabi_dmul+0x4c0>
 8002b7e:	4654      	mov	r4, sl
 8002b80:	4648      	mov	r0, r9
 8002b82:	2e01      	cmp	r6, #1
 8002b84:	d0c1      	beq.n	8002b0a <__aeabi_dmul+0xa6>
 8002b86:	9a01      	ldr	r2, [sp, #4]
 8002b88:	4b7d      	ldr	r3, [pc, #500]	@ (8002d80 <__aeabi_dmul+0x31c>)
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	4463      	add	r3, ip
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc00      	bgt.n	8002b94 <__aeabi_dmul+0x130>
 8002b92:	e0c0      	b.n	8002d16 <__aeabi_dmul+0x2b2>
 8002b94:	0742      	lsls	r2, r0, #29
 8002b96:	d009      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002b98:	220f      	movs	r2, #15
 8002b9a:	4002      	ands	r2, r0
 8002b9c:	2a04      	cmp	r2, #4
 8002b9e:	d005      	beq.n	8002bac <__aeabi_dmul+0x148>
 8002ba0:	1d02      	adds	r2, r0, #4
 8002ba2:	4282      	cmp	r2, r0
 8002ba4:	4180      	sbcs	r0, r0
 8002ba6:	4240      	negs	r0, r0
 8002ba8:	1824      	adds	r4, r4, r0
 8002baa:	0010      	movs	r0, r2
 8002bac:	01e2      	lsls	r2, r4, #7
 8002bae:	d506      	bpl.n	8002bbe <__aeabi_dmul+0x15a>
 8002bb0:	4b74      	ldr	r3, [pc, #464]	@ (8002d84 <__aeabi_dmul+0x320>)
 8002bb2:	9a01      	ldr	r2, [sp, #4]
 8002bb4:	401c      	ands	r4, r3
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	4694      	mov	ip, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4463      	add	r3, ip
 8002bbe:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <__aeabi_dmul+0x324>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	dc6b      	bgt.n	8002c9c <__aeabi_dmul+0x238>
 8002bc4:	0762      	lsls	r2, r4, #29
 8002bc6:	08c0      	lsrs	r0, r0, #3
 8002bc8:	0264      	lsls	r4, r4, #9
 8002bca:	055b      	lsls	r3, r3, #21
 8002bcc:	4302      	orrs	r2, r0
 8002bce:	0b24      	lsrs	r4, r4, #12
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	e79d      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002bd4:	2190      	movs	r1, #144	@ 0x90
 8002bd6:	0089      	lsls	r1, r1, #2
 8002bd8:	420f      	tst	r7, r1
 8002bda:	d163      	bne.n	8002ca4 <__aeabi_dmul+0x240>
 8002bdc:	2288      	movs	r2, #136	@ 0x88
 8002bde:	423a      	tst	r2, r7
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dmul+0x180>
 8002be2:	e0d7      	b.n	8002d94 <__aeabi_dmul+0x330>
 8002be4:	9b00      	ldr	r3, [sp, #0]
 8002be6:	46a2      	mov	sl, r4
 8002be8:	469b      	mov	fp, r3
 8002bea:	4681      	mov	r9, r0
 8002bec:	9602      	str	r6, [sp, #8]
 8002bee:	e7bf      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002bf0:	0023      	movs	r3, r4
 8002bf2:	4333      	orrs	r3, r6
 8002bf4:	d100      	bne.n	8002bf8 <__aeabi_dmul+0x194>
 8002bf6:	e07f      	b.n	8002cf8 <__aeabi_dmul+0x294>
 8002bf8:	2c00      	cmp	r4, #0
 8002bfa:	d100      	bne.n	8002bfe <__aeabi_dmul+0x19a>
 8002bfc:	e1ad      	b.n	8002f5a <__aeabi_dmul+0x4f6>
 8002bfe:	0020      	movs	r0, r4
 8002c00:	f000 fe3c 	bl	800387c <__clzsi2>
 8002c04:	0002      	movs	r2, r0
 8002c06:	0003      	movs	r3, r0
 8002c08:	3a0b      	subs	r2, #11
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	1a82      	subs	r2, r0, r2
 8002c10:	0030      	movs	r0, r6
 8002c12:	3908      	subs	r1, #8
 8002c14:	40d0      	lsrs	r0, r2
 8002c16:	408c      	lsls	r4, r1
 8002c18:	4304      	orrs	r4, r0
 8002c1a:	0030      	movs	r0, r6
 8002c1c:	4088      	lsls	r0, r1
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c20:	1aeb      	subs	r3, r5, r3
 8002c22:	4694      	mov	ip, r2
 8002c24:	4463      	add	r3, ip
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	2a0a      	cmp	r2, #10
 8002c30:	dc00      	bgt.n	8002c34 <__aeabi_dmul+0x1d0>
 8002c32:	e75a      	b.n	8002aea <__aeabi_dmul+0x86>
 8002c34:	e79c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002c36:	4653      	mov	r3, sl
 8002c38:	4303      	orrs	r3, r0
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	d054      	beq.n	8002ce8 <__aeabi_dmul+0x284>
 8002c3e:	4653      	mov	r3, sl
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dmul+0x1e2>
 8002c44:	e177      	b.n	8002f36 <__aeabi_dmul+0x4d2>
 8002c46:	4650      	mov	r0, sl
 8002c48:	f000 fe18 	bl	800387c <__clzsi2>
 8002c4c:	230b      	movs	r3, #11
 8002c4e:	425b      	negs	r3, r3
 8002c50:	469c      	mov	ip, r3
 8002c52:	0002      	movs	r2, r0
 8002c54:	4484      	add	ip, r0
 8002c56:	0011      	movs	r1, r2
 8002c58:	4650      	mov	r0, sl
 8002c5a:	3908      	subs	r1, #8
 8002c5c:	4088      	lsls	r0, r1
 8002c5e:	231d      	movs	r3, #29
 8002c60:	4680      	mov	r8, r0
 8002c62:	4660      	mov	r0, ip
 8002c64:	1a1b      	subs	r3, r3, r0
 8002c66:	0020      	movs	r0, r4
 8002c68:	40d8      	lsrs	r0, r3
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4303      	orrs	r3, r0
 8002c70:	469a      	mov	sl, r3
 8002c72:	0023      	movs	r3, r4
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4699      	mov	r9, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4d44      	ldr	r5, [pc, #272]	@ (8002d8c <__aeabi_dmul+0x328>)
 8002c7c:	4698      	mov	r8, r3
 8002c7e:	1aad      	subs	r5, r5, r2
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	e715      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c84:	4652      	mov	r2, sl
 8002c86:	4302      	orrs	r2, r0
 8002c88:	4691      	mov	r9, r2
 8002c8a:	d126      	bne.n	8002cda <__aeabi_dmul+0x276>
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	001d      	movs	r5, r3
 8002c90:	2302      	movs	r3, #2
 8002c92:	4692      	mov	sl, r2
 8002c94:	3208      	adds	r2, #8
 8002c96:	4690      	mov	r8, r2
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	e709      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002ca2:	e735      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2480      	movs	r4, #128	@ 0x80
 8002ca8:	469b      	mov	fp, r3
 8002caa:	0324      	lsls	r4, r4, #12
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <__aeabi_dmul+0x314>)
 8002cae:	e72f      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4694      	mov	ip, r2
 8002cbc:	002a      	movs	r2, r5
 8002cbe:	4462      	add	r2, ip
 8002cc0:	4688      	mov	r8, r1
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	290a      	cmp	r1, #10
 8002cc6:	dd00      	ble.n	8002cca <__aeabi_dmul+0x266>
 8002cc8:	e752      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002cca:	465a      	mov	r2, fp
 8002ccc:	2000      	movs	r0, #0
 8002cce:	9900      	ldr	r1, [sp, #0]
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	404a      	eors	r2, r1
 8002cd4:	4693      	mov	fp, r2
 8002cd6:	2602      	movs	r6, #2
 8002cd8:	e70b      	b.n	8002af2 <__aeabi_dmul+0x8e>
 8002cda:	220c      	movs	r2, #12
 8002cdc:	001d      	movs	r5, r3
 8002cde:	2303      	movs	r3, #3
 8002ce0:	4681      	mov	r9, r0
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	e6e3      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	469a      	mov	sl, r3
 8002cec:	3304      	adds	r3, #4
 8002cee:	4698      	mov	r8, r3
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	e6db      	b.n	8002ab0 <__aeabi_dmul+0x4c>
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	002b      	movs	r3, r5
 8002d00:	4690      	mov	r8, r2
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	4642      	mov	r2, r8
 8002d08:	2400      	movs	r4, #0
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	2601      	movs	r6, #1
 8002d0e:	2a0a      	cmp	r2, #10
 8002d10:	dc00      	bgt.n	8002d14 <__aeabi_dmul+0x2b0>
 8002d12:	e6ea      	b.n	8002aea <__aeabi_dmul+0x86>
 8002d14:	e72c      	b.n	8002b70 <__aeabi_dmul+0x10c>
 8002d16:	2201      	movs	r2, #1
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	2a38      	cmp	r2, #56	@ 0x38
 8002d1c:	dd00      	ble.n	8002d20 <__aeabi_dmul+0x2bc>
 8002d1e:	e6f4      	b.n	8002b0a <__aeabi_dmul+0xa6>
 8002d20:	2a1f      	cmp	r2, #31
 8002d22:	dc00      	bgt.n	8002d26 <__aeabi_dmul+0x2c2>
 8002d24:	e12a      	b.n	8002f7c <__aeabi_dmul+0x518>
 8002d26:	211f      	movs	r1, #31
 8002d28:	4249      	negs	r1, r1
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	40d9      	lsrs	r1, r3
 8002d30:	000b      	movs	r3, r1
 8002d32:	2a20      	cmp	r2, #32
 8002d34:	d005      	beq.n	8002d42 <__aeabi_dmul+0x2de>
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <__aeabi_dmul+0x32c>)
 8002d38:	9d01      	ldr	r5, [sp, #4]
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	4465      	add	r5, ip
 8002d3e:	40ac      	lsls	r4, r5
 8002d40:	4320      	orrs	r0, r4
 8002d42:	1e42      	subs	r2, r0, #1
 8002d44:	4190      	sbcs	r0, r2
 8002d46:	4318      	orrs	r0, r3
 8002d48:	2307      	movs	r3, #7
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	4001      	ands	r1, r0
 8002d50:	4203      	tst	r3, r0
 8002d52:	d00c      	beq.n	8002d6e <__aeabi_dmul+0x30a>
 8002d54:	230f      	movs	r3, #15
 8002d56:	4003      	ands	r3, r0
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dmul+0x2fa>
 8002d5c:	e140      	b.n	8002fe0 <__aeabi_dmul+0x57c>
 8002d5e:	1d03      	adds	r3, r0, #4
 8002d60:	4283      	cmp	r3, r0
 8002d62:	41a4      	sbcs	r4, r4
 8002d64:	0018      	movs	r0, r3
 8002d66:	4264      	negs	r4, r4
 8002d68:	0761      	lsls	r1, r4, #29
 8002d6a:	0264      	lsls	r4, r4, #9
 8002d6c:	0b24      	lsrs	r4, r4, #12
 8002d6e:	08c2      	lsrs	r2, r0, #3
 8002d70:	2300      	movs	r3, #0
 8002d72:	430a      	orrs	r2, r1
 8002d74:	e6cc      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff
 8002d7c:	fffffc01 	.word	0xfffffc01
 8002d80:	000003ff 	.word	0x000003ff
 8002d84:	feffffff 	.word	0xfeffffff
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	fffffc0d 	.word	0xfffffc0d
 8002d90:	0000043e 	.word	0x0000043e
 8002d94:	4649      	mov	r1, r9
 8002d96:	464a      	mov	r2, r9
 8002d98:	0409      	lsls	r1, r1, #16
 8002d9a:	0c09      	lsrs	r1, r1, #16
 8002d9c:	000d      	movs	r5, r1
 8002d9e:	0c16      	lsrs	r6, r2, #16
 8002da0:	0c02      	lsrs	r2, r0, #16
 8002da2:	0400      	lsls	r0, r0, #16
 8002da4:	0c00      	lsrs	r0, r0, #16
 8002da6:	4345      	muls	r5, r0
 8002da8:	46ac      	mov	ip, r5
 8002daa:	0005      	movs	r5, r0
 8002dac:	4375      	muls	r5, r6
 8002dae:	46a8      	mov	r8, r5
 8002db0:	0015      	movs	r5, r2
 8002db2:	000f      	movs	r7, r1
 8002db4:	4375      	muls	r5, r6
 8002db6:	9200      	str	r2, [sp, #0]
 8002db8:	9502      	str	r5, [sp, #8]
 8002dba:	002a      	movs	r2, r5
 8002dbc:	9d00      	ldr	r5, [sp, #0]
 8002dbe:	436f      	muls	r7, r5
 8002dc0:	4665      	mov	r5, ip
 8002dc2:	0c2d      	lsrs	r5, r5, #16
 8002dc4:	46a9      	mov	r9, r5
 8002dc6:	4447      	add	r7, r8
 8002dc8:	444f      	add	r7, r9
 8002dca:	45b8      	cmp	r8, r7
 8002dcc:	d905      	bls.n	8002dda <__aeabi_dmul+0x376>
 8002dce:	0015      	movs	r5, r2
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	0252      	lsls	r2, r2, #9
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4445      	add	r5, r8
 8002dd8:	9502      	str	r5, [sp, #8]
 8002dda:	0c3d      	lsrs	r5, r7, #16
 8002ddc:	9503      	str	r5, [sp, #12]
 8002dde:	4665      	mov	r5, ip
 8002de0:	042d      	lsls	r5, r5, #16
 8002de2:	043f      	lsls	r7, r7, #16
 8002de4:	0c2d      	lsrs	r5, r5, #16
 8002de6:	46ac      	mov	ip, r5
 8002de8:	003d      	movs	r5, r7
 8002dea:	4465      	add	r5, ip
 8002dec:	9504      	str	r5, [sp, #16]
 8002dee:	0c25      	lsrs	r5, r4, #16
 8002df0:	0424      	lsls	r4, r4, #16
 8002df2:	0c24      	lsrs	r4, r4, #16
 8002df4:	46ac      	mov	ip, r5
 8002df6:	0025      	movs	r5, r4
 8002df8:	4375      	muls	r5, r6
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	4665      	mov	r5, ip
 8002dfe:	000f      	movs	r7, r1
 8002e00:	4369      	muls	r1, r5
 8002e02:	4441      	add	r1, r8
 8002e04:	4689      	mov	r9, r1
 8002e06:	4367      	muls	r7, r4
 8002e08:	0c39      	lsrs	r1, r7, #16
 8002e0a:	4449      	add	r1, r9
 8002e0c:	436e      	muls	r6, r5
 8002e0e:	4588      	cmp	r8, r1
 8002e10:	d903      	bls.n	8002e1a <__aeabi_dmul+0x3b6>
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	0252      	lsls	r2, r2, #9
 8002e16:	4690      	mov	r8, r2
 8002e18:	4446      	add	r6, r8
 8002e1a:	0c0d      	lsrs	r5, r1, #16
 8002e1c:	46a8      	mov	r8, r5
 8002e1e:	0035      	movs	r5, r6
 8002e20:	4445      	add	r5, r8
 8002e22:	9505      	str	r5, [sp, #20]
 8002e24:	9d03      	ldr	r5, [sp, #12]
 8002e26:	043f      	lsls	r7, r7, #16
 8002e28:	46a8      	mov	r8, r5
 8002e2a:	0c3f      	lsrs	r7, r7, #16
 8002e2c:	0409      	lsls	r1, r1, #16
 8002e2e:	19c9      	adds	r1, r1, r7
 8002e30:	4488      	add	r8, r1
 8002e32:	4645      	mov	r5, r8
 8002e34:	9503      	str	r5, [sp, #12]
 8002e36:	4655      	mov	r5, sl
 8002e38:	042e      	lsls	r6, r5, #16
 8002e3a:	0c36      	lsrs	r6, r6, #16
 8002e3c:	0c2f      	lsrs	r7, r5, #16
 8002e3e:	0035      	movs	r5, r6
 8002e40:	4345      	muls	r5, r0
 8002e42:	4378      	muls	r0, r7
 8002e44:	4681      	mov	r9, r0
 8002e46:	0038      	movs	r0, r7
 8002e48:	46a8      	mov	r8, r5
 8002e4a:	0c2d      	lsrs	r5, r5, #16
 8002e4c:	46aa      	mov	sl, r5
 8002e4e:	9a00      	ldr	r2, [sp, #0]
 8002e50:	4350      	muls	r0, r2
 8002e52:	4372      	muls	r2, r6
 8002e54:	444a      	add	r2, r9
 8002e56:	4452      	add	r2, sl
 8002e58:	4591      	cmp	r9, r2
 8002e5a:	d903      	bls.n	8002e64 <__aeabi_dmul+0x400>
 8002e5c:	2580      	movs	r5, #128	@ 0x80
 8002e5e:	026d      	lsls	r5, r5, #9
 8002e60:	46a9      	mov	r9, r5
 8002e62:	4448      	add	r0, r9
 8002e64:	0c15      	lsrs	r5, r2, #16
 8002e66:	46a9      	mov	r9, r5
 8002e68:	4645      	mov	r5, r8
 8002e6a:	042d      	lsls	r5, r5, #16
 8002e6c:	0c2d      	lsrs	r5, r5, #16
 8002e6e:	46a8      	mov	r8, r5
 8002e70:	4665      	mov	r5, ip
 8002e72:	437d      	muls	r5, r7
 8002e74:	0412      	lsls	r2, r2, #16
 8002e76:	4448      	add	r0, r9
 8002e78:	4490      	add	r8, r2
 8002e7a:	46a9      	mov	r9, r5
 8002e7c:	0032      	movs	r2, r6
 8002e7e:	4665      	mov	r5, ip
 8002e80:	4362      	muls	r2, r4
 8002e82:	436e      	muls	r6, r5
 8002e84:	437c      	muls	r4, r7
 8002e86:	0c17      	lsrs	r7, r2, #16
 8002e88:	1936      	adds	r6, r6, r4
 8002e8a:	19bf      	adds	r7, r7, r6
 8002e8c:	42bc      	cmp	r4, r7
 8002e8e:	d903      	bls.n	8002e98 <__aeabi_dmul+0x434>
 8002e90:	2480      	movs	r4, #128	@ 0x80
 8002e92:	0264      	lsls	r4, r4, #9
 8002e94:	46a4      	mov	ip, r4
 8002e96:	44e1      	add	r9, ip
 8002e98:	9c02      	ldr	r4, [sp, #8]
 8002e9a:	9e03      	ldr	r6, [sp, #12]
 8002e9c:	46a4      	mov	ip, r4
 8002e9e:	9d05      	ldr	r5, [sp, #20]
 8002ea0:	4466      	add	r6, ip
 8002ea2:	428e      	cmp	r6, r1
 8002ea4:	4189      	sbcs	r1, r1
 8002ea6:	46ac      	mov	ip, r5
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	043c      	lsls	r4, r7, #16
 8002eac:	0c12      	lsrs	r2, r2, #16
 8002eae:	18a2      	adds	r2, r4, r2
 8002eb0:	4462      	add	r2, ip
 8002eb2:	4249      	negs	r1, r1
 8002eb4:	1854      	adds	r4, r2, r1
 8002eb6:	4446      	add	r6, r8
 8002eb8:	46a4      	mov	ip, r4
 8002eba:	4546      	cmp	r6, r8
 8002ebc:	41a4      	sbcs	r4, r4
 8002ebe:	4682      	mov	sl, r0
 8002ec0:	4264      	negs	r4, r4
 8002ec2:	46a0      	mov	r8, r4
 8002ec4:	42aa      	cmp	r2, r5
 8002ec6:	4192      	sbcs	r2, r2
 8002ec8:	458c      	cmp	ip, r1
 8002eca:	4189      	sbcs	r1, r1
 8002ecc:	44e2      	add	sl, ip
 8002ece:	44d0      	add	r8, sl
 8002ed0:	4249      	negs	r1, r1
 8002ed2:	4252      	negs	r2, r2
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	45a0      	cmp	r8, r4
 8002ed8:	41a4      	sbcs	r4, r4
 8002eda:	4582      	cmp	sl, r0
 8002edc:	4189      	sbcs	r1, r1
 8002ede:	4264      	negs	r4, r4
 8002ee0:	4249      	negs	r1, r1
 8002ee2:	430c      	orrs	r4, r1
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	0c3f      	lsrs	r7, r7, #16
 8002ee8:	19d2      	adds	r2, r2, r7
 8002eea:	1912      	adds	r2, r2, r4
 8002eec:	0dcc      	lsrs	r4, r1, #23
 8002eee:	9904      	ldr	r1, [sp, #16]
 8002ef0:	0270      	lsls	r0, r6, #9
 8002ef2:	4308      	orrs	r0, r1
 8002ef4:	1e41      	subs	r1, r0, #1
 8002ef6:	4188      	sbcs	r0, r1
 8002ef8:	4641      	mov	r1, r8
 8002efa:	444a      	add	r2, r9
 8002efc:	0df6      	lsrs	r6, r6, #23
 8002efe:	0252      	lsls	r2, r2, #9
 8002f00:	4330      	orrs	r0, r6
 8002f02:	0249      	lsls	r1, r1, #9
 8002f04:	4314      	orrs	r4, r2
 8002f06:	4308      	orrs	r0, r1
 8002f08:	01d2      	lsls	r2, r2, #7
 8002f0a:	d535      	bpl.n	8002f78 <__aeabi_dmul+0x514>
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	0843      	lsrs	r3, r0, #1
 8002f10:	4002      	ands	r2, r0
 8002f12:	4313      	orrs	r3, r2
 8002f14:	07e0      	lsls	r0, r4, #31
 8002f16:	4318      	orrs	r0, r3
 8002f18:	0864      	lsrs	r4, r4, #1
 8002f1a:	e634      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	46a2      	mov	sl, r4
 8002f20:	469b      	mov	fp, r3
 8002f22:	4681      	mov	r9, r0
 8002f24:	2480      	movs	r4, #128	@ 0x80
 8002f26:	4653      	mov	r3, sl
 8002f28:	0324      	lsls	r4, r4, #12
 8002f2a:	431c      	orrs	r4, r3
 8002f2c:	0324      	lsls	r4, r4, #12
 8002f2e:	464a      	mov	r2, r9
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <__aeabi_dmul+0x588>)
 8002f32:	0b24      	lsrs	r4, r4, #12
 8002f34:	e5ec      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002f36:	f000 fca1 	bl	800387c <__clzsi2>
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	469c      	mov	ip, r3
 8002f3e:	4484      	add	ip, r0
 8002f40:	0002      	movs	r2, r0
 8002f42:	4663      	mov	r3, ip
 8002f44:	3220      	adds	r2, #32
 8002f46:	2b1c      	cmp	r3, #28
 8002f48:	dc00      	bgt.n	8002f4c <__aeabi_dmul+0x4e8>
 8002f4a:	e684      	b.n	8002c56 <__aeabi_dmul+0x1f2>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4699      	mov	r9, r3
 8002f50:	0023      	movs	r3, r4
 8002f52:	3808      	subs	r0, #8
 8002f54:	4083      	lsls	r3, r0
 8002f56:	469a      	mov	sl, r3
 8002f58:	e68e      	b.n	8002c78 <__aeabi_dmul+0x214>
 8002f5a:	f000 fc8f 	bl	800387c <__clzsi2>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	0003      	movs	r3, r0
 8002f62:	3215      	adds	r2, #21
 8002f64:	3320      	adds	r3, #32
 8002f66:	2a1c      	cmp	r2, #28
 8002f68:	dc00      	bgt.n	8002f6c <__aeabi_dmul+0x508>
 8002f6a:	e64e      	b.n	8002c0a <__aeabi_dmul+0x1a6>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	0034      	movs	r4, r6
 8002f70:	3a08      	subs	r2, #8
 8002f72:	2000      	movs	r0, #0
 8002f74:	4094      	lsls	r4, r2
 8002f76:	e652      	b.n	8002c1e <__aeabi_dmul+0x1ba>
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	e604      	b.n	8002b86 <__aeabi_dmul+0x122>
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <__aeabi_dmul+0x58c>)
 8002f7e:	0021      	movs	r1, r4
 8002f80:	469c      	mov	ip, r3
 8002f82:	0003      	movs	r3, r0
 8002f84:	9d01      	ldr	r5, [sp, #4]
 8002f86:	40d3      	lsrs	r3, r2
 8002f88:	4465      	add	r5, ip
 8002f8a:	40a9      	lsls	r1, r5
 8002f8c:	4319      	orrs	r1, r3
 8002f8e:	0003      	movs	r3, r0
 8002f90:	40ab      	lsls	r3, r5
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	4183      	sbcs	r3, r0
 8002f96:	4319      	orrs	r1, r3
 8002f98:	0008      	movs	r0, r1
 8002f9a:	40d4      	lsrs	r4, r2
 8002f9c:	074b      	lsls	r3, r1, #29
 8002f9e:	d009      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <__aeabi_dmul+0x550>
 8002fa8:	1d0b      	adds	r3, r1, #4
 8002faa:	428b      	cmp	r3, r1
 8002fac:	4180      	sbcs	r0, r0
 8002fae:	4240      	negs	r0, r0
 8002fb0:	1824      	adds	r4, r4, r0
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	0223      	lsls	r3, r4, #8
 8002fb6:	d400      	bmi.n	8002fba <__aeabi_dmul+0x556>
 8002fb8:	e6d6      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	e5a6      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fc2:	290f      	cmp	r1, #15
 8002fc4:	d1aa      	bne.n	8002f1c <__aeabi_dmul+0x4b8>
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	4652      	mov	r2, sl
 8002fca:	031b      	lsls	r3, r3, #12
 8002fcc:	421a      	tst	r2, r3
 8002fce:	d0a9      	beq.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd0:	421c      	tst	r4, r3
 8002fd2:	d1a7      	bne.n	8002f24 <__aeabi_dmul+0x4c0>
 8002fd4:	431c      	orrs	r4, r3
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	0002      	movs	r2, r0
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fde:	e597      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	e6c1      	b.n	8002d68 <__aeabi_dmul+0x304>
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	4b01      	ldr	r3, [pc, #4]	@ (8002fec <__aeabi_dmul+0x588>)
 8002fe8:	0022      	movs	r2, r4
 8002fea:	e591      	b.n	8002b10 <__aeabi_dmul+0xac>
 8002fec:	000007ff 	.word	0x000007ff
 8002ff0:	0000041e 	.word	0x0000041e

08002ff4 <__aeabi_dsub>:
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	464e      	mov	r6, r9
 8002ff8:	4645      	mov	r5, r8
 8002ffa:	46de      	mov	lr, fp
 8002ffc:	4657      	mov	r7, sl
 8002ffe:	b5e0      	push	{r5, r6, r7, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	9000      	str	r0, [sp, #0]
 8003004:	9101      	str	r1, [sp, #4]
 8003006:	030c      	lsls	r4, r1, #12
 8003008:	004f      	lsls	r7, r1, #1
 800300a:	0fce      	lsrs	r6, r1, #31
 800300c:	0a61      	lsrs	r1, r4, #9
 800300e:	9c00      	ldr	r4, [sp, #0]
 8003010:	46b0      	mov	r8, r6
 8003012:	0f64      	lsrs	r4, r4, #29
 8003014:	430c      	orrs	r4, r1
 8003016:	9900      	ldr	r1, [sp, #0]
 8003018:	0d7f      	lsrs	r7, r7, #21
 800301a:	00c8      	lsls	r0, r1, #3
 800301c:	0011      	movs	r1, r2
 800301e:	001a      	movs	r2, r3
 8003020:	031b      	lsls	r3, r3, #12
 8003022:	469c      	mov	ip, r3
 8003024:	9100      	str	r1, [sp, #0]
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	0051      	lsls	r1, r2, #1
 800302a:	0d4b      	lsrs	r3, r1, #21
 800302c:	4699      	mov	r9, r3
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	9d00      	ldr	r5, [sp, #0]
 8003032:	0fd9      	lsrs	r1, r3, #31
 8003034:	4663      	mov	r3, ip
 8003036:	0f6a      	lsrs	r2, r5, #29
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	4313      	orrs	r3, r2
 800303c:	00ea      	lsls	r2, r5, #3
 800303e:	4694      	mov	ip, r2
 8003040:	4693      	mov	fp, r2
 8003042:	4ac1      	ldr	r2, [pc, #772]	@ (8003348 <__aeabi_dsub+0x354>)
 8003044:	9003      	str	r0, [sp, #12]
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	4591      	cmp	r9, r2
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x5a>
 800304c:	e0cd      	b.n	80031ea <__aeabi_dsub+0x1f6>
 800304e:	2501      	movs	r5, #1
 8003050:	4069      	eors	r1, r5
 8003052:	464d      	mov	r5, r9
 8003054:	1b7d      	subs	r5, r7, r5
 8003056:	46aa      	mov	sl, r5
 8003058:	428e      	cmp	r6, r1
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x6a>
 800305c:	e080      	b.n	8003160 <__aeabi_dsub+0x16c>
 800305e:	2d00      	cmp	r5, #0
 8003060:	dc00      	bgt.n	8003064 <__aeabi_dsub+0x70>
 8003062:	e335      	b.n	80036d0 <__aeabi_dsub+0x6dc>
 8003064:	4649      	mov	r1, r9
 8003066:	2900      	cmp	r1, #0
 8003068:	d100      	bne.n	800306c <__aeabi_dsub+0x78>
 800306a:	e0df      	b.n	800322c <__aeabi_dsub+0x238>
 800306c:	4297      	cmp	r7, r2
 800306e:	d100      	bne.n	8003072 <__aeabi_dsub+0x7e>
 8003070:	e194      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003072:	4652      	mov	r2, sl
 8003074:	2501      	movs	r5, #1
 8003076:	2a38      	cmp	r2, #56	@ 0x38
 8003078:	dc19      	bgt.n	80030ae <__aeabi_dsub+0xba>
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	0412      	lsls	r2, r2, #16
 8003080:	4313      	orrs	r3, r2
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	4652      	mov	r2, sl
 8003086:	2a1f      	cmp	r2, #31
 8003088:	dd00      	ble.n	800308c <__aeabi_dsub+0x98>
 800308a:	e1e3      	b.n	8003454 <__aeabi_dsub+0x460>
 800308c:	4653      	mov	r3, sl
 800308e:	2220      	movs	r2, #32
 8003090:	4661      	mov	r1, ip
 8003092:	9d02      	ldr	r5, [sp, #8]
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	4095      	lsls	r5, r2
 8003098:	40d9      	lsrs	r1, r3
 800309a:	430d      	orrs	r5, r1
 800309c:	4661      	mov	r1, ip
 800309e:	4091      	lsls	r1, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	1e51      	subs	r1, r2, #1
 80030a4:	418a      	sbcs	r2, r1
 80030a6:	4315      	orrs	r5, r2
 80030a8:	9a02      	ldr	r2, [sp, #8]
 80030aa:	40da      	lsrs	r2, r3
 80030ac:	1aa4      	subs	r4, r4, r2
 80030ae:	1b45      	subs	r5, r0, r5
 80030b0:	42a8      	cmp	r0, r5
 80030b2:	4180      	sbcs	r0, r0
 80030b4:	4240      	negs	r0, r0
 80030b6:	1a24      	subs	r4, r4, r0
 80030b8:	0223      	lsls	r3, r4, #8
 80030ba:	d400      	bmi.n	80030be <__aeabi_dsub+0xca>
 80030bc:	e13d      	b.n	800333a <__aeabi_dsub+0x346>
 80030be:	0264      	lsls	r4, r4, #9
 80030c0:	0a64      	lsrs	r4, r4, #9
 80030c2:	2c00      	cmp	r4, #0
 80030c4:	d100      	bne.n	80030c8 <__aeabi_dsub+0xd4>
 80030c6:	e147      	b.n	8003358 <__aeabi_dsub+0x364>
 80030c8:	0020      	movs	r0, r4
 80030ca:	f000 fbd7 	bl	800387c <__clzsi2>
 80030ce:	0003      	movs	r3, r0
 80030d0:	3b08      	subs	r3, #8
 80030d2:	2120      	movs	r1, #32
 80030d4:	0028      	movs	r0, r5
 80030d6:	1aca      	subs	r2, r1, r3
 80030d8:	40d0      	lsrs	r0, r2
 80030da:	409c      	lsls	r4, r3
 80030dc:	0002      	movs	r2, r0
 80030de:	409d      	lsls	r5, r3
 80030e0:	4322      	orrs	r2, r4
 80030e2:	429f      	cmp	r7, r3
 80030e4:	dd00      	ble.n	80030e8 <__aeabi_dsub+0xf4>
 80030e6:	e177      	b.n	80033d8 <__aeabi_dsub+0x3e4>
 80030e8:	1bd8      	subs	r0, r3, r7
 80030ea:	3001      	adds	r0, #1
 80030ec:	1a09      	subs	r1, r1, r0
 80030ee:	002c      	movs	r4, r5
 80030f0:	408d      	lsls	r5, r1
 80030f2:	40c4      	lsrs	r4, r0
 80030f4:	1e6b      	subs	r3, r5, #1
 80030f6:	419d      	sbcs	r5, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	40c2      	lsrs	r2, r0
 80030fc:	408b      	lsls	r3, r1
 80030fe:	4325      	orrs	r5, r4
 8003100:	2700      	movs	r7, #0
 8003102:	0014      	movs	r4, r2
 8003104:	431d      	orrs	r5, r3
 8003106:	076b      	lsls	r3, r5, #29
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x12a>
 800310a:	230f      	movs	r3, #15
 800310c:	402b      	ands	r3, r5
 800310e:	2b04      	cmp	r3, #4
 8003110:	d005      	beq.n	800311e <__aeabi_dsub+0x12a>
 8003112:	1d2b      	adds	r3, r5, #4
 8003114:	42ab      	cmp	r3, r5
 8003116:	41ad      	sbcs	r5, r5
 8003118:	426d      	negs	r5, r5
 800311a:	1964      	adds	r4, r4, r5
 800311c:	001d      	movs	r5, r3
 800311e:	0223      	lsls	r3, r4, #8
 8003120:	d400      	bmi.n	8003124 <__aeabi_dsub+0x130>
 8003122:	e140      	b.n	80033a6 <__aeabi_dsub+0x3b2>
 8003124:	4a88      	ldr	r2, [pc, #544]	@ (8003348 <__aeabi_dsub+0x354>)
 8003126:	3701      	adds	r7, #1
 8003128:	4297      	cmp	r7, r2
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x13a>
 800312c:	e101      	b.n	8003332 <__aeabi_dsub+0x33e>
 800312e:	2601      	movs	r6, #1
 8003130:	4643      	mov	r3, r8
 8003132:	4986      	ldr	r1, [pc, #536]	@ (800334c <__aeabi_dsub+0x358>)
 8003134:	08ed      	lsrs	r5, r5, #3
 8003136:	4021      	ands	r1, r4
 8003138:	074a      	lsls	r2, r1, #29
 800313a:	432a      	orrs	r2, r5
 800313c:	057c      	lsls	r4, r7, #21
 800313e:	024d      	lsls	r5, r1, #9
 8003140:	0b2d      	lsrs	r5, r5, #12
 8003142:	0d64      	lsrs	r4, r4, #21
 8003144:	401e      	ands	r6, r3
 8003146:	0524      	lsls	r4, r4, #20
 8003148:	432c      	orrs	r4, r5
 800314a:	07f6      	lsls	r6, r6, #31
 800314c:	4334      	orrs	r4, r6
 800314e:	0010      	movs	r0, r2
 8003150:	0021      	movs	r1, r4
 8003152:	b005      	add	sp, #20
 8003154:	bcf0      	pop	{r4, r5, r6, r7}
 8003156:	46bb      	mov	fp, r7
 8003158:	46b2      	mov	sl, r6
 800315a:	46a9      	mov	r9, r5
 800315c:	46a0      	mov	r8, r4
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003160:	2d00      	cmp	r5, #0
 8003162:	dc00      	bgt.n	8003166 <__aeabi_dsub+0x172>
 8003164:	e2d0      	b.n	8003708 <__aeabi_dsub+0x714>
 8003166:	4649      	mov	r1, r9
 8003168:	2900      	cmp	r1, #0
 800316a:	d000      	beq.n	800316e <__aeabi_dsub+0x17a>
 800316c:	e0d4      	b.n	8003318 <__aeabi_dsub+0x324>
 800316e:	4661      	mov	r1, ip
 8003170:	9b02      	ldr	r3, [sp, #8]
 8003172:	4319      	orrs	r1, r3
 8003174:	d100      	bne.n	8003178 <__aeabi_dsub+0x184>
 8003176:	e12b      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003178:	1e69      	subs	r1, r5, #1
 800317a:	2d01      	cmp	r5, #1
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x18c>
 800317e:	e1d9      	b.n	8003534 <__aeabi_dsub+0x540>
 8003180:	4295      	cmp	r5, r2
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x192>
 8003184:	e10a      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003186:	2501      	movs	r5, #1
 8003188:	2938      	cmp	r1, #56	@ 0x38
 800318a:	dc17      	bgt.n	80031bc <__aeabi_dsub+0x1c8>
 800318c:	468a      	mov	sl, r1
 800318e:	4653      	mov	r3, sl
 8003190:	2b1f      	cmp	r3, #31
 8003192:	dd00      	ble.n	8003196 <__aeabi_dsub+0x1a2>
 8003194:	e1e7      	b.n	8003566 <__aeabi_dsub+0x572>
 8003196:	2220      	movs	r2, #32
 8003198:	1ad2      	subs	r2, r2, r3
 800319a:	9b02      	ldr	r3, [sp, #8]
 800319c:	4661      	mov	r1, ip
 800319e:	4093      	lsls	r3, r2
 80031a0:	001d      	movs	r5, r3
 80031a2:	4653      	mov	r3, sl
 80031a4:	40d9      	lsrs	r1, r3
 80031a6:	4663      	mov	r3, ip
 80031a8:	4093      	lsls	r3, r2
 80031aa:	001a      	movs	r2, r3
 80031ac:	430d      	orrs	r5, r1
 80031ae:	1e51      	subs	r1, r2, #1
 80031b0:	418a      	sbcs	r2, r1
 80031b2:	4653      	mov	r3, sl
 80031b4:	4315      	orrs	r5, r2
 80031b6:	9a02      	ldr	r2, [sp, #8]
 80031b8:	40da      	lsrs	r2, r3
 80031ba:	18a4      	adds	r4, r4, r2
 80031bc:	182d      	adds	r5, r5, r0
 80031be:	4285      	cmp	r5, r0
 80031c0:	4180      	sbcs	r0, r0
 80031c2:	4240      	negs	r0, r0
 80031c4:	1824      	adds	r4, r4, r0
 80031c6:	0223      	lsls	r3, r4, #8
 80031c8:	d400      	bmi.n	80031cc <__aeabi_dsub+0x1d8>
 80031ca:	e0b6      	b.n	800333a <__aeabi_dsub+0x346>
 80031cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003348 <__aeabi_dsub+0x354>)
 80031ce:	3701      	adds	r7, #1
 80031d0:	429f      	cmp	r7, r3
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x1e2>
 80031d4:	e0ad      	b.n	8003332 <__aeabi_dsub+0x33e>
 80031d6:	2101      	movs	r1, #1
 80031d8:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <__aeabi_dsub+0x358>)
 80031da:	086a      	lsrs	r2, r5, #1
 80031dc:	401c      	ands	r4, r3
 80031de:	4029      	ands	r1, r5
 80031e0:	430a      	orrs	r2, r1
 80031e2:	07e5      	lsls	r5, r4, #31
 80031e4:	4315      	orrs	r5, r2
 80031e6:	0864      	lsrs	r4, r4, #1
 80031e8:	e78d      	b.n	8003106 <__aeabi_dsub+0x112>
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <__aeabi_dsub+0x35c>)
 80031ec:	9b02      	ldr	r3, [sp, #8]
 80031ee:	4692      	mov	sl, r2
 80031f0:	4662      	mov	r2, ip
 80031f2:	44ba      	add	sl, r7
 80031f4:	431a      	orrs	r2, r3
 80031f6:	d02c      	beq.n	8003252 <__aeabi_dsub+0x25e>
 80031f8:	428e      	cmp	r6, r1
 80031fa:	d02e      	beq.n	800325a <__aeabi_dsub+0x266>
 80031fc:	4652      	mov	r2, sl
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d060      	beq.n	80032c4 <__aeabi_dsub+0x2d0>
 8003202:	2f00      	cmp	r7, #0
 8003204:	d100      	bne.n	8003208 <__aeabi_dsub+0x214>
 8003206:	e0db      	b.n	80033c0 <__aeabi_dsub+0x3cc>
 8003208:	4663      	mov	r3, ip
 800320a:	000e      	movs	r6, r1
 800320c:	9c02      	ldr	r4, [sp, #8]
 800320e:	08d8      	lsrs	r0, r3, #3
 8003210:	0762      	lsls	r2, r4, #29
 8003212:	4302      	orrs	r2, r0
 8003214:	08e4      	lsrs	r4, r4, #3
 8003216:	0013      	movs	r3, r2
 8003218:	4323      	orrs	r3, r4
 800321a:	d100      	bne.n	800321e <__aeabi_dsub+0x22a>
 800321c:	e254      	b.n	80036c8 <__aeabi_dsub+0x6d4>
 800321e:	2580      	movs	r5, #128	@ 0x80
 8003220:	032d      	lsls	r5, r5, #12
 8003222:	4325      	orrs	r5, r4
 8003224:	032d      	lsls	r5, r5, #12
 8003226:	4c48      	ldr	r4, [pc, #288]	@ (8003348 <__aeabi_dsub+0x354>)
 8003228:	0b2d      	lsrs	r5, r5, #12
 800322a:	e78c      	b.n	8003146 <__aeabi_dsub+0x152>
 800322c:	4661      	mov	r1, ip
 800322e:	9b02      	ldr	r3, [sp, #8]
 8003230:	4319      	orrs	r1, r3
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x242>
 8003234:	e0cc      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003236:	0029      	movs	r1, r5
 8003238:	3901      	subs	r1, #1
 800323a:	2d01      	cmp	r5, #1
 800323c:	d100      	bne.n	8003240 <__aeabi_dsub+0x24c>
 800323e:	e188      	b.n	8003552 <__aeabi_dsub+0x55e>
 8003240:	4295      	cmp	r5, r2
 8003242:	d100      	bne.n	8003246 <__aeabi_dsub+0x252>
 8003244:	e0aa      	b.n	800339c <__aeabi_dsub+0x3a8>
 8003246:	2501      	movs	r5, #1
 8003248:	2938      	cmp	r1, #56	@ 0x38
 800324a:	dd00      	ble.n	800324e <__aeabi_dsub+0x25a>
 800324c:	e72f      	b.n	80030ae <__aeabi_dsub+0xba>
 800324e:	468a      	mov	sl, r1
 8003250:	e718      	b.n	8003084 <__aeabi_dsub+0x90>
 8003252:	2201      	movs	r2, #1
 8003254:	4051      	eors	r1, r2
 8003256:	428e      	cmp	r6, r1
 8003258:	d1d0      	bne.n	80031fc <__aeabi_dsub+0x208>
 800325a:	4653      	mov	r3, sl
 800325c:	2b00      	cmp	r3, #0
 800325e:	d100      	bne.n	8003262 <__aeabi_dsub+0x26e>
 8003260:	e0be      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 8003262:	2f00      	cmp	r7, #0
 8003264:	d000      	beq.n	8003268 <__aeabi_dsub+0x274>
 8003266:	e138      	b.n	80034da <__aeabi_dsub+0x4e6>
 8003268:	46ca      	mov	sl, r9
 800326a:	0022      	movs	r2, r4
 800326c:	4302      	orrs	r2, r0
 800326e:	d100      	bne.n	8003272 <__aeabi_dsub+0x27e>
 8003270:	e1e2      	b.n	8003638 <__aeabi_dsub+0x644>
 8003272:	4653      	mov	r3, sl
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d100      	bne.n	800327c <__aeabi_dsub+0x288>
 800327a:	e20d      	b.n	8003698 <__aeabi_dsub+0x6a4>
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <__aeabi_dsub+0x354>)
 800327e:	4592      	cmp	sl, r2
 8003280:	d100      	bne.n	8003284 <__aeabi_dsub+0x290>
 8003282:	e1d2      	b.n	800362a <__aeabi_dsub+0x636>
 8003284:	2701      	movs	r7, #1
 8003286:	2938      	cmp	r1, #56	@ 0x38
 8003288:	dc13      	bgt.n	80032b2 <__aeabi_dsub+0x2be>
 800328a:	291f      	cmp	r1, #31
 800328c:	dd00      	ble.n	8003290 <__aeabi_dsub+0x29c>
 800328e:	e1ee      	b.n	800366e <__aeabi_dsub+0x67a>
 8003290:	2220      	movs	r2, #32
 8003292:	9b02      	ldr	r3, [sp, #8]
 8003294:	1a52      	subs	r2, r2, r1
 8003296:	0025      	movs	r5, r4
 8003298:	0007      	movs	r7, r0
 800329a:	469a      	mov	sl, r3
 800329c:	40cc      	lsrs	r4, r1
 800329e:	4090      	lsls	r0, r2
 80032a0:	4095      	lsls	r5, r2
 80032a2:	40cf      	lsrs	r7, r1
 80032a4:	44a2      	add	sl, r4
 80032a6:	1e42      	subs	r2, r0, #1
 80032a8:	4190      	sbcs	r0, r2
 80032aa:	4653      	mov	r3, sl
 80032ac:	432f      	orrs	r7, r5
 80032ae:	4307      	orrs	r7, r0
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	003d      	movs	r5, r7
 80032b4:	4465      	add	r5, ip
 80032b6:	4565      	cmp	r5, ip
 80032b8:	4192      	sbcs	r2, r2
 80032ba:	9b02      	ldr	r3, [sp, #8]
 80032bc:	4252      	negs	r2, r2
 80032be:	464f      	mov	r7, r9
 80032c0:	18d4      	adds	r4, r2, r3
 80032c2:	e780      	b.n	80031c6 <__aeabi_dsub+0x1d2>
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <__aeabi_dsub+0x360>)
 80032c6:	1c7d      	adds	r5, r7, #1
 80032c8:	4215      	tst	r5, r2
 80032ca:	d000      	beq.n	80032ce <__aeabi_dsub+0x2da>
 80032cc:	e0aa      	b.n	8003424 <__aeabi_dsub+0x430>
 80032ce:	4662      	mov	r2, ip
 80032d0:	0025      	movs	r5, r4
 80032d2:	9b02      	ldr	r3, [sp, #8]
 80032d4:	4305      	orrs	r5, r0
 80032d6:	431a      	orrs	r2, r3
 80032d8:	2f00      	cmp	r7, #0
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x2ea>
 80032dc:	e0f5      	b.n	80034ca <__aeabi_dsub+0x4d6>
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d100      	bne.n	80032e4 <__aeabi_dsub+0x2f0>
 80032e2:	e16b      	b.n	80035bc <__aeabi_dsub+0x5c8>
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d100      	bne.n	80032ea <__aeabi_dsub+0x2f6>
 80032e8:	e152      	b.n	8003590 <__aeabi_dsub+0x59c>
 80032ea:	4663      	mov	r3, ip
 80032ec:	1ac5      	subs	r5, r0, r3
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	1ae2      	subs	r2, r4, r3
 80032f2:	42a8      	cmp	r0, r5
 80032f4:	419b      	sbcs	r3, r3
 80032f6:	425b      	negs	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	d400      	bmi.n	8003300 <__aeabi_dsub+0x30c>
 80032fe:	e1d5      	b.n	80036ac <__aeabi_dsub+0x6b8>
 8003300:	4663      	mov	r3, ip
 8003302:	1a1d      	subs	r5, r3, r0
 8003304:	45ac      	cmp	ip, r5
 8003306:	4192      	sbcs	r2, r2
 8003308:	2601      	movs	r6, #1
 800330a:	9b02      	ldr	r3, [sp, #8]
 800330c:	4252      	negs	r2, r2
 800330e:	1b1c      	subs	r4, r3, r4
 8003310:	4688      	mov	r8, r1
 8003312:	1aa4      	subs	r4, r4, r2
 8003314:	400e      	ands	r6, r1
 8003316:	e6f6      	b.n	8003106 <__aeabi_dsub+0x112>
 8003318:	4297      	cmp	r7, r2
 800331a:	d03f      	beq.n	800339c <__aeabi_dsub+0x3a8>
 800331c:	4652      	mov	r2, sl
 800331e:	2501      	movs	r5, #1
 8003320:	2a38      	cmp	r2, #56	@ 0x38
 8003322:	dd00      	ble.n	8003326 <__aeabi_dsub+0x332>
 8003324:	e74a      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003326:	2280      	movs	r2, #128	@ 0x80
 8003328:	9b02      	ldr	r3, [sp, #8]
 800332a:	0412      	lsls	r2, r2, #16
 800332c:	4313      	orrs	r3, r2
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	e72d      	b.n	800318e <__aeabi_dsub+0x19a>
 8003332:	003c      	movs	r4, r7
 8003334:	2500      	movs	r5, #0
 8003336:	2200      	movs	r2, #0
 8003338:	e705      	b.n	8003146 <__aeabi_dsub+0x152>
 800333a:	2307      	movs	r3, #7
 800333c:	402b      	ands	r3, r5
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <__aeabi_dsub+0x350>
 8003342:	e6e2      	b.n	800310a <__aeabi_dsub+0x116>
 8003344:	e06b      	b.n	800341e <__aeabi_dsub+0x42a>
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	000007ff 	.word	0x000007ff
 800334c:	ff7fffff 	.word	0xff7fffff
 8003350:	fffff801 	.word	0xfffff801
 8003354:	000007fe 	.word	0x000007fe
 8003358:	0028      	movs	r0, r5
 800335a:	f000 fa8f 	bl	800387c <__clzsi2>
 800335e:	0003      	movs	r3, r0
 8003360:	3318      	adds	r3, #24
 8003362:	2b1f      	cmp	r3, #31
 8003364:	dc00      	bgt.n	8003368 <__aeabi_dsub+0x374>
 8003366:	e6b4      	b.n	80030d2 <__aeabi_dsub+0xde>
 8003368:	002a      	movs	r2, r5
 800336a:	3808      	subs	r0, #8
 800336c:	4082      	lsls	r2, r0
 800336e:	429f      	cmp	r7, r3
 8003370:	dd00      	ble.n	8003374 <__aeabi_dsub+0x380>
 8003372:	e0b9      	b.n	80034e8 <__aeabi_dsub+0x4f4>
 8003374:	1bdb      	subs	r3, r3, r7
 8003376:	1c58      	adds	r0, r3, #1
 8003378:	281f      	cmp	r0, #31
 800337a:	dc00      	bgt.n	800337e <__aeabi_dsub+0x38a>
 800337c:	e1a0      	b.n	80036c0 <__aeabi_dsub+0x6cc>
 800337e:	0015      	movs	r5, r2
 8003380:	3b1f      	subs	r3, #31
 8003382:	40dd      	lsrs	r5, r3
 8003384:	2820      	cmp	r0, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x3a0>
 8003388:	2340      	movs	r3, #64	@ 0x40
 800338a:	1a1b      	subs	r3, r3, r0
 800338c:	409a      	lsls	r2, r3
 800338e:	1e53      	subs	r3, r2, #1
 8003390:	419a      	sbcs	r2, r3
 8003392:	4315      	orrs	r5, r2
 8003394:	2307      	movs	r3, #7
 8003396:	2700      	movs	r7, #0
 8003398:	402b      	ands	r3, r5
 800339a:	e7d0      	b.n	800333e <__aeabi_dsub+0x34a>
 800339c:	08c0      	lsrs	r0, r0, #3
 800339e:	0762      	lsls	r2, r4, #29
 80033a0:	4302      	orrs	r2, r0
 80033a2:	08e4      	lsrs	r4, r4, #3
 80033a4:	e737      	b.n	8003216 <__aeabi_dsub+0x222>
 80033a6:	08ea      	lsrs	r2, r5, #3
 80033a8:	0763      	lsls	r3, r4, #29
 80033aa:	431a      	orrs	r2, r3
 80033ac:	4bd3      	ldr	r3, [pc, #844]	@ (80036fc <__aeabi_dsub+0x708>)
 80033ae:	08e4      	lsrs	r4, r4, #3
 80033b0:	429f      	cmp	r7, r3
 80033b2:	d100      	bne.n	80033b6 <__aeabi_dsub+0x3c2>
 80033b4:	e72f      	b.n	8003216 <__aeabi_dsub+0x222>
 80033b6:	0324      	lsls	r4, r4, #12
 80033b8:	0b25      	lsrs	r5, r4, #12
 80033ba:	057c      	lsls	r4, r7, #21
 80033bc:	0d64      	lsrs	r4, r4, #21
 80033be:	e6c2      	b.n	8003146 <__aeabi_dsub+0x152>
 80033c0:	46ca      	mov	sl, r9
 80033c2:	0022      	movs	r2, r4
 80033c4:	4302      	orrs	r2, r0
 80033c6:	d158      	bne.n	800347a <__aeabi_dsub+0x486>
 80033c8:	4663      	mov	r3, ip
 80033ca:	000e      	movs	r6, r1
 80033cc:	9c02      	ldr	r4, [sp, #8]
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	4657      	mov	r7, sl
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	e7e7      	b.n	80033a8 <__aeabi_dsub+0x3b4>
 80033d8:	4cc9      	ldr	r4, [pc, #804]	@ (8003700 <__aeabi_dsub+0x70c>)
 80033da:	1aff      	subs	r7, r7, r3
 80033dc:	4014      	ands	r4, r2
 80033de:	e692      	b.n	8003106 <__aeabi_dsub+0x112>
 80033e0:	4dc8      	ldr	r5, [pc, #800]	@ (8003704 <__aeabi_dsub+0x710>)
 80033e2:	1c7a      	adds	r2, r7, #1
 80033e4:	422a      	tst	r2, r5
 80033e6:	d000      	beq.n	80033ea <__aeabi_dsub+0x3f6>
 80033e8:	e084      	b.n	80034f4 <__aeabi_dsub+0x500>
 80033ea:	0022      	movs	r2, r4
 80033ec:	4302      	orrs	r2, r0
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d000      	beq.n	80033f4 <__aeabi_dsub+0x400>
 80033f2:	e0ef      	b.n	80035d4 <__aeabi_dsub+0x5e0>
 80033f4:	2a00      	cmp	r2, #0
 80033f6:	d100      	bne.n	80033fa <__aeabi_dsub+0x406>
 80033f8:	e0e5      	b.n	80035c6 <__aeabi_dsub+0x5d2>
 80033fa:	4662      	mov	r2, ip
 80033fc:	9902      	ldr	r1, [sp, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x410>
 8003402:	e0c5      	b.n	8003590 <__aeabi_dsub+0x59c>
 8003404:	4663      	mov	r3, ip
 8003406:	18c5      	adds	r5, r0, r3
 8003408:	468c      	mov	ip, r1
 800340a:	4285      	cmp	r5, r0
 800340c:	4180      	sbcs	r0, r0
 800340e:	4464      	add	r4, ip
 8003410:	4240      	negs	r0, r0
 8003412:	1824      	adds	r4, r4, r0
 8003414:	0223      	lsls	r3, r4, #8
 8003416:	d502      	bpl.n	800341e <__aeabi_dsub+0x42a>
 8003418:	4bb9      	ldr	r3, [pc, #740]	@ (8003700 <__aeabi_dsub+0x70c>)
 800341a:	3701      	adds	r7, #1
 800341c:	401c      	ands	r4, r3
 800341e:	46ba      	mov	sl, r7
 8003420:	9503      	str	r5, [sp, #12]
 8003422:	e7d5      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003424:	4662      	mov	r2, ip
 8003426:	1a85      	subs	r5, r0, r2
 8003428:	42a8      	cmp	r0, r5
 800342a:	4192      	sbcs	r2, r2
 800342c:	4252      	negs	r2, r2
 800342e:	4691      	mov	r9, r2
 8003430:	9b02      	ldr	r3, [sp, #8]
 8003432:	1ae3      	subs	r3, r4, r3
 8003434:	001a      	movs	r2, r3
 8003436:	464b      	mov	r3, r9
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	4691      	mov	r9, r2
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	d46c      	bmi.n	800351c <__aeabi_dsub+0x528>
 8003442:	464a      	mov	r2, r9
 8003444:	464c      	mov	r4, r9
 8003446:	432a      	orrs	r2, r5
 8003448:	d000      	beq.n	800344c <__aeabi_dsub+0x458>
 800344a:	e63a      	b.n	80030c2 <__aeabi_dsub+0xce>
 800344c:	2600      	movs	r6, #0
 800344e:	2400      	movs	r4, #0
 8003450:	2500      	movs	r5, #0
 8003452:	e678      	b.n	8003146 <__aeabi_dsub+0x152>
 8003454:	9902      	ldr	r1, [sp, #8]
 8003456:	4653      	mov	r3, sl
 8003458:	000d      	movs	r5, r1
 800345a:	3a20      	subs	r2, #32
 800345c:	40d5      	lsrs	r5, r2
 800345e:	2b20      	cmp	r3, #32
 8003460:	d006      	beq.n	8003470 <__aeabi_dsub+0x47c>
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	000b      	movs	r3, r1
 8003468:	4093      	lsls	r3, r2
 800346a:	4662      	mov	r2, ip
 800346c:	431a      	orrs	r2, r3
 800346e:	4693      	mov	fp, r2
 8003470:	465b      	mov	r3, fp
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	4193      	sbcs	r3, r2
 8003476:	431d      	orrs	r5, r3
 8003478:	e619      	b.n	80030ae <__aeabi_dsub+0xba>
 800347a:	4653      	mov	r3, sl
 800347c:	1e5a      	subs	r2, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d100      	bne.n	8003484 <__aeabi_dsub+0x490>
 8003482:	e0c6      	b.n	8003612 <__aeabi_dsub+0x61e>
 8003484:	4e9d      	ldr	r6, [pc, #628]	@ (80036fc <__aeabi_dsub+0x708>)
 8003486:	45b2      	cmp	sl, r6
 8003488:	d100      	bne.n	800348c <__aeabi_dsub+0x498>
 800348a:	e6bd      	b.n	8003208 <__aeabi_dsub+0x214>
 800348c:	4688      	mov	r8, r1
 800348e:	000e      	movs	r6, r1
 8003490:	2501      	movs	r5, #1
 8003492:	2a38      	cmp	r2, #56	@ 0x38
 8003494:	dc10      	bgt.n	80034b8 <__aeabi_dsub+0x4c4>
 8003496:	2a1f      	cmp	r2, #31
 8003498:	dc7f      	bgt.n	800359a <__aeabi_dsub+0x5a6>
 800349a:	2120      	movs	r1, #32
 800349c:	0025      	movs	r5, r4
 800349e:	1a89      	subs	r1, r1, r2
 80034a0:	0007      	movs	r7, r0
 80034a2:	4088      	lsls	r0, r1
 80034a4:	408d      	lsls	r5, r1
 80034a6:	40d7      	lsrs	r7, r2
 80034a8:	40d4      	lsrs	r4, r2
 80034aa:	1e41      	subs	r1, r0, #1
 80034ac:	4188      	sbcs	r0, r1
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	433d      	orrs	r5, r7
 80034b2:	1b1b      	subs	r3, r3, r4
 80034b4:	4305      	orrs	r5, r0
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	4662      	mov	r2, ip
 80034ba:	1b55      	subs	r5, r2, r5
 80034bc:	45ac      	cmp	ip, r5
 80034be:	4192      	sbcs	r2, r2
 80034c0:	9b02      	ldr	r3, [sp, #8]
 80034c2:	4252      	negs	r2, r2
 80034c4:	464f      	mov	r7, r9
 80034c6:	1a9c      	subs	r4, r3, r2
 80034c8:	e5f6      	b.n	80030b8 <__aeabi_dsub+0xc4>
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	d000      	beq.n	80034d0 <__aeabi_dsub+0x4dc>
 80034ce:	e0b7      	b.n	8003640 <__aeabi_dsub+0x64c>
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x4e2>
 80034d4:	e0f0      	b.n	80036b8 <__aeabi_dsub+0x6c4>
 80034d6:	2601      	movs	r6, #1
 80034d8:	400e      	ands	r6, r1
 80034da:	4663      	mov	r3, ip
 80034dc:	9802      	ldr	r0, [sp, #8]
 80034de:	08d9      	lsrs	r1, r3, #3
 80034e0:	0742      	lsls	r2, r0, #29
 80034e2:	430a      	orrs	r2, r1
 80034e4:	08c4      	lsrs	r4, r0, #3
 80034e6:	e696      	b.n	8003216 <__aeabi_dsub+0x222>
 80034e8:	4c85      	ldr	r4, [pc, #532]	@ (8003700 <__aeabi_dsub+0x70c>)
 80034ea:	1aff      	subs	r7, r7, r3
 80034ec:	4014      	ands	r4, r2
 80034ee:	0762      	lsls	r2, r4, #29
 80034f0:	08e4      	lsrs	r4, r4, #3
 80034f2:	e760      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80034f4:	4981      	ldr	r1, [pc, #516]	@ (80036fc <__aeabi_dsub+0x708>)
 80034f6:	428a      	cmp	r2, r1
 80034f8:	d100      	bne.n	80034fc <__aeabi_dsub+0x508>
 80034fa:	e0c9      	b.n	8003690 <__aeabi_dsub+0x69c>
 80034fc:	4663      	mov	r3, ip
 80034fe:	18c1      	adds	r1, r0, r3
 8003500:	4281      	cmp	r1, r0
 8003502:	4180      	sbcs	r0, r0
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	4240      	negs	r0, r0
 8003508:	18e3      	adds	r3, r4, r3
 800350a:	181b      	adds	r3, r3, r0
 800350c:	07dd      	lsls	r5, r3, #31
 800350e:	085c      	lsrs	r4, r3, #1
 8003510:	2307      	movs	r3, #7
 8003512:	0849      	lsrs	r1, r1, #1
 8003514:	430d      	orrs	r5, r1
 8003516:	0017      	movs	r7, r2
 8003518:	402b      	ands	r3, r5
 800351a:	e710      	b.n	800333e <__aeabi_dsub+0x34a>
 800351c:	4663      	mov	r3, ip
 800351e:	1a1d      	subs	r5, r3, r0
 8003520:	45ac      	cmp	ip, r5
 8003522:	4192      	sbcs	r2, r2
 8003524:	2601      	movs	r6, #1
 8003526:	9b02      	ldr	r3, [sp, #8]
 8003528:	4252      	negs	r2, r2
 800352a:	1b1c      	subs	r4, r3, r4
 800352c:	4688      	mov	r8, r1
 800352e:	1aa4      	subs	r4, r4, r2
 8003530:	400e      	ands	r6, r1
 8003532:	e5c6      	b.n	80030c2 <__aeabi_dsub+0xce>
 8003534:	4663      	mov	r3, ip
 8003536:	18c5      	adds	r5, r0, r3
 8003538:	9b02      	ldr	r3, [sp, #8]
 800353a:	4285      	cmp	r5, r0
 800353c:	4180      	sbcs	r0, r0
 800353e:	469c      	mov	ip, r3
 8003540:	4240      	negs	r0, r0
 8003542:	4464      	add	r4, ip
 8003544:	1824      	adds	r4, r4, r0
 8003546:	2701      	movs	r7, #1
 8003548:	0223      	lsls	r3, r4, #8
 800354a:	d400      	bmi.n	800354e <__aeabi_dsub+0x55a>
 800354c:	e6f5      	b.n	800333a <__aeabi_dsub+0x346>
 800354e:	2702      	movs	r7, #2
 8003550:	e641      	b.n	80031d6 <__aeabi_dsub+0x1e2>
 8003552:	4663      	mov	r3, ip
 8003554:	1ac5      	subs	r5, r0, r3
 8003556:	42a8      	cmp	r0, r5
 8003558:	4180      	sbcs	r0, r0
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	4240      	negs	r0, r0
 800355e:	1ae4      	subs	r4, r4, r3
 8003560:	2701      	movs	r7, #1
 8003562:	1a24      	subs	r4, r4, r0
 8003564:	e5a8      	b.n	80030b8 <__aeabi_dsub+0xc4>
 8003566:	9d02      	ldr	r5, [sp, #8]
 8003568:	4652      	mov	r2, sl
 800356a:	002b      	movs	r3, r5
 800356c:	3a20      	subs	r2, #32
 800356e:	40d3      	lsrs	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	4653      	mov	r3, sl
 8003574:	2b20      	cmp	r3, #32
 8003576:	d006      	beq.n	8003586 <__aeabi_dsub+0x592>
 8003578:	2240      	movs	r2, #64	@ 0x40
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	002b      	movs	r3, r5
 800357e:	4093      	lsls	r3, r2
 8003580:	4662      	mov	r2, ip
 8003582:	431a      	orrs	r2, r3
 8003584:	4693      	mov	fp, r2
 8003586:	465d      	mov	r5, fp
 8003588:	1e6b      	subs	r3, r5, #1
 800358a:	419d      	sbcs	r5, r3
 800358c:	430d      	orrs	r5, r1
 800358e:	e615      	b.n	80031bc <__aeabi_dsub+0x1c8>
 8003590:	0762      	lsls	r2, r4, #29
 8003592:	08c0      	lsrs	r0, r0, #3
 8003594:	4302      	orrs	r2, r0
 8003596:	08e4      	lsrs	r4, r4, #3
 8003598:	e70d      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 800359a:	0011      	movs	r1, r2
 800359c:	0027      	movs	r7, r4
 800359e:	3920      	subs	r1, #32
 80035a0:	40cf      	lsrs	r7, r1
 80035a2:	2a20      	cmp	r2, #32
 80035a4:	d005      	beq.n	80035b2 <__aeabi_dsub+0x5be>
 80035a6:	2140      	movs	r1, #64	@ 0x40
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	4094      	lsls	r4, r2
 80035ac:	0025      	movs	r5, r4
 80035ae:	4305      	orrs	r5, r0
 80035b0:	9503      	str	r5, [sp, #12]
 80035b2:	9d03      	ldr	r5, [sp, #12]
 80035b4:	1e6a      	subs	r2, r5, #1
 80035b6:	4195      	sbcs	r5, r2
 80035b8:	433d      	orrs	r5, r7
 80035ba:	e77d      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d100      	bne.n	80035c2 <__aeabi_dsub+0x5ce>
 80035c0:	e744      	b.n	800344c <__aeabi_dsub+0x458>
 80035c2:	2601      	movs	r6, #1
 80035c4:	400e      	ands	r6, r1
 80035c6:	4663      	mov	r3, ip
 80035c8:	08d9      	lsrs	r1, r3, #3
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	075a      	lsls	r2, r3, #29
 80035ce:	430a      	orrs	r2, r1
 80035d0:	08dc      	lsrs	r4, r3, #3
 80035d2:	e6f0      	b.n	80033b6 <__aeabi_dsub+0x3c2>
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	d028      	beq.n	800362a <__aeabi_dsub+0x636>
 80035d8:	4662      	mov	r2, ip
 80035da:	9f02      	ldr	r7, [sp, #8]
 80035dc:	08c0      	lsrs	r0, r0, #3
 80035de:	433a      	orrs	r2, r7
 80035e0:	d100      	bne.n	80035e4 <__aeabi_dsub+0x5f0>
 80035e2:	e6dc      	b.n	800339e <__aeabi_dsub+0x3aa>
 80035e4:	0762      	lsls	r2, r4, #29
 80035e6:	4310      	orrs	r0, r2
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	08e4      	lsrs	r4, r4, #3
 80035ec:	0312      	lsls	r2, r2, #12
 80035ee:	4214      	tst	r4, r2
 80035f0:	d009      	beq.n	8003606 <__aeabi_dsub+0x612>
 80035f2:	08fd      	lsrs	r5, r7, #3
 80035f4:	4215      	tst	r5, r2
 80035f6:	d106      	bne.n	8003606 <__aeabi_dsub+0x612>
 80035f8:	4663      	mov	r3, ip
 80035fa:	2601      	movs	r6, #1
 80035fc:	002c      	movs	r4, r5
 80035fe:	08d8      	lsrs	r0, r3, #3
 8003600:	077b      	lsls	r3, r7, #29
 8003602:	4318      	orrs	r0, r3
 8003604:	400e      	ands	r6, r1
 8003606:	0f42      	lsrs	r2, r0, #29
 8003608:	00c0      	lsls	r0, r0, #3
 800360a:	08c0      	lsrs	r0, r0, #3
 800360c:	0752      	lsls	r2, r2, #29
 800360e:	4302      	orrs	r2, r0
 8003610:	e601      	b.n	8003216 <__aeabi_dsub+0x222>
 8003612:	4663      	mov	r3, ip
 8003614:	1a1d      	subs	r5, r3, r0
 8003616:	45ac      	cmp	ip, r5
 8003618:	4192      	sbcs	r2, r2
 800361a:	9b02      	ldr	r3, [sp, #8]
 800361c:	4252      	negs	r2, r2
 800361e:	1b1c      	subs	r4, r3, r4
 8003620:	000e      	movs	r6, r1
 8003622:	4688      	mov	r8, r1
 8003624:	2701      	movs	r7, #1
 8003626:	1aa4      	subs	r4, r4, r2
 8003628:	e546      	b.n	80030b8 <__aeabi_dsub+0xc4>
 800362a:	4663      	mov	r3, ip
 800362c:	08d9      	lsrs	r1, r3, #3
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	075a      	lsls	r2, r3, #29
 8003632:	430a      	orrs	r2, r1
 8003634:	08dc      	lsrs	r4, r3, #3
 8003636:	e5ee      	b.n	8003216 <__aeabi_dsub+0x222>
 8003638:	4663      	mov	r3, ip
 800363a:	9c02      	ldr	r4, [sp, #8]
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	e6c7      	b.n	80033d0 <__aeabi_dsub+0x3dc>
 8003640:	08c0      	lsrs	r0, r0, #3
 8003642:	2a00      	cmp	r2, #0
 8003644:	d100      	bne.n	8003648 <__aeabi_dsub+0x654>
 8003646:	e6aa      	b.n	800339e <__aeabi_dsub+0x3aa>
 8003648:	0762      	lsls	r2, r4, #29
 800364a:	4310      	orrs	r0, r2
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	08e4      	lsrs	r4, r4, #3
 8003650:	0312      	lsls	r2, r2, #12
 8003652:	4214      	tst	r4, r2
 8003654:	d0d7      	beq.n	8003606 <__aeabi_dsub+0x612>
 8003656:	9f02      	ldr	r7, [sp, #8]
 8003658:	08fd      	lsrs	r5, r7, #3
 800365a:	4215      	tst	r5, r2
 800365c:	d1d3      	bne.n	8003606 <__aeabi_dsub+0x612>
 800365e:	4663      	mov	r3, ip
 8003660:	2601      	movs	r6, #1
 8003662:	08d8      	lsrs	r0, r3, #3
 8003664:	077b      	lsls	r3, r7, #29
 8003666:	002c      	movs	r4, r5
 8003668:	4318      	orrs	r0, r3
 800366a:	400e      	ands	r6, r1
 800366c:	e7cb      	b.n	8003606 <__aeabi_dsub+0x612>
 800366e:	000a      	movs	r2, r1
 8003670:	0027      	movs	r7, r4
 8003672:	3a20      	subs	r2, #32
 8003674:	40d7      	lsrs	r7, r2
 8003676:	2920      	cmp	r1, #32
 8003678:	d005      	beq.n	8003686 <__aeabi_dsub+0x692>
 800367a:	2240      	movs	r2, #64	@ 0x40
 800367c:	1a52      	subs	r2, r2, r1
 800367e:	4094      	lsls	r4, r2
 8003680:	0025      	movs	r5, r4
 8003682:	4305      	orrs	r5, r0
 8003684:	9503      	str	r5, [sp, #12]
 8003686:	9d03      	ldr	r5, [sp, #12]
 8003688:	1e6a      	subs	r2, r5, #1
 800368a:	4195      	sbcs	r5, r2
 800368c:	432f      	orrs	r7, r5
 800368e:	e610      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003690:	0014      	movs	r4, r2
 8003692:	2500      	movs	r5, #0
 8003694:	2200      	movs	r2, #0
 8003696:	e556      	b.n	8003146 <__aeabi_dsub+0x152>
 8003698:	9b02      	ldr	r3, [sp, #8]
 800369a:	4460      	add	r0, ip
 800369c:	4699      	mov	r9, r3
 800369e:	4560      	cmp	r0, ip
 80036a0:	4192      	sbcs	r2, r2
 80036a2:	444c      	add	r4, r9
 80036a4:	4252      	negs	r2, r2
 80036a6:	0005      	movs	r5, r0
 80036a8:	18a4      	adds	r4, r4, r2
 80036aa:	e74c      	b.n	8003546 <__aeabi_dsub+0x552>
 80036ac:	001a      	movs	r2, r3
 80036ae:	001c      	movs	r4, r3
 80036b0:	432a      	orrs	r2, r5
 80036b2:	d000      	beq.n	80036b6 <__aeabi_dsub+0x6c2>
 80036b4:	e6b3      	b.n	800341e <__aeabi_dsub+0x42a>
 80036b6:	e6c9      	b.n	800344c <__aeabi_dsub+0x458>
 80036b8:	2480      	movs	r4, #128	@ 0x80
 80036ba:	2600      	movs	r6, #0
 80036bc:	0324      	lsls	r4, r4, #12
 80036be:	e5ae      	b.n	800321e <__aeabi_dsub+0x22a>
 80036c0:	2120      	movs	r1, #32
 80036c2:	2500      	movs	r5, #0
 80036c4:	1a09      	subs	r1, r1, r0
 80036c6:	e517      	b.n	80030f8 <__aeabi_dsub+0x104>
 80036c8:	2200      	movs	r2, #0
 80036ca:	2500      	movs	r5, #0
 80036cc:	4c0b      	ldr	r4, [pc, #44]	@ (80036fc <__aeabi_dsub+0x708>)
 80036ce:	e53a      	b.n	8003146 <__aeabi_dsub+0x152>
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	d100      	bne.n	80036d6 <__aeabi_dsub+0x6e2>
 80036d4:	e5f6      	b.n	80032c4 <__aeabi_dsub+0x2d0>
 80036d6:	464b      	mov	r3, r9
 80036d8:	1bda      	subs	r2, r3, r7
 80036da:	4692      	mov	sl, r2
 80036dc:	2f00      	cmp	r7, #0
 80036de:	d100      	bne.n	80036e2 <__aeabi_dsub+0x6ee>
 80036e0:	e66f      	b.n	80033c2 <__aeabi_dsub+0x3ce>
 80036e2:	2a38      	cmp	r2, #56	@ 0x38
 80036e4:	dc05      	bgt.n	80036f2 <__aeabi_dsub+0x6fe>
 80036e6:	2680      	movs	r6, #128	@ 0x80
 80036e8:	0436      	lsls	r6, r6, #16
 80036ea:	4334      	orrs	r4, r6
 80036ec:	4688      	mov	r8, r1
 80036ee:	000e      	movs	r6, r1
 80036f0:	e6d1      	b.n	8003496 <__aeabi_dsub+0x4a2>
 80036f2:	4688      	mov	r8, r1
 80036f4:	000e      	movs	r6, r1
 80036f6:	2501      	movs	r5, #1
 80036f8:	e6de      	b.n	80034b8 <__aeabi_dsub+0x4c4>
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	000007ff 	.word	0x000007ff
 8003700:	ff7fffff 	.word	0xff7fffff
 8003704:	000007fe 	.word	0x000007fe
 8003708:	2d00      	cmp	r5, #0
 800370a:	d100      	bne.n	800370e <__aeabi_dsub+0x71a>
 800370c:	e668      	b.n	80033e0 <__aeabi_dsub+0x3ec>
 800370e:	464b      	mov	r3, r9
 8003710:	1bd9      	subs	r1, r3, r7
 8003712:	2f00      	cmp	r7, #0
 8003714:	d101      	bne.n	800371a <__aeabi_dsub+0x726>
 8003716:	468a      	mov	sl, r1
 8003718:	e5a7      	b.n	800326a <__aeabi_dsub+0x276>
 800371a:	2701      	movs	r7, #1
 800371c:	2938      	cmp	r1, #56	@ 0x38
 800371e:	dd00      	ble.n	8003722 <__aeabi_dsub+0x72e>
 8003720:	e5c7      	b.n	80032b2 <__aeabi_dsub+0x2be>
 8003722:	2280      	movs	r2, #128	@ 0x80
 8003724:	0412      	lsls	r2, r2, #16
 8003726:	4314      	orrs	r4, r2
 8003728:	e5af      	b.n	800328a <__aeabi_dsub+0x296>
 800372a:	46c0      	nop			@ (mov r8, r8)

0800372c <__aeabi_d2iz>:
 800372c:	000b      	movs	r3, r1
 800372e:	0002      	movs	r2, r0
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d16      	ldr	r5, [pc, #88]	@ (800378c <__aeabi_d2iz+0x60>)
 8003734:	030c      	lsls	r4, r1, #12
 8003736:	b082      	sub	sp, #8
 8003738:	0049      	lsls	r1, r1, #1
 800373a:	2000      	movs	r0, #0
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	0b24      	lsrs	r4, r4, #12
 8003742:	0d49      	lsrs	r1, r1, #21
 8003744:	0fde      	lsrs	r6, r3, #31
 8003746:	42a9      	cmp	r1, r5
 8003748:	dd04      	ble.n	8003754 <__aeabi_d2iz+0x28>
 800374a:	4811      	ldr	r0, [pc, #68]	@ (8003790 <__aeabi_d2iz+0x64>)
 800374c:	4281      	cmp	r1, r0
 800374e:	dd03      	ble.n	8003758 <__aeabi_d2iz+0x2c>
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <__aeabi_d2iz+0x68>)
 8003752:	18f0      	adds	r0, r6, r3
 8003754:	b002      	add	sp, #8
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	2080      	movs	r0, #128	@ 0x80
 800375a:	0340      	lsls	r0, r0, #13
 800375c:	4320      	orrs	r0, r4
 800375e:	4c0e      	ldr	r4, [pc, #56]	@ (8003798 <__aeabi_d2iz+0x6c>)
 8003760:	1a64      	subs	r4, r4, r1
 8003762:	2c1f      	cmp	r4, #31
 8003764:	dd08      	ble.n	8003778 <__aeabi_d2iz+0x4c>
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <__aeabi_d2iz+0x70>)
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	40d8      	lsrs	r0, r3
 800376c:	0003      	movs	r3, r0
 800376e:	4258      	negs	r0, r3
 8003770:	2e00      	cmp	r6, #0
 8003772:	d1ef      	bne.n	8003754 <__aeabi_d2iz+0x28>
 8003774:	0018      	movs	r0, r3
 8003776:	e7ed      	b.n	8003754 <__aeabi_d2iz+0x28>
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <__aeabi_d2iz+0x74>)
 800377a:	9a00      	ldr	r2, [sp, #0]
 800377c:	469c      	mov	ip, r3
 800377e:	0003      	movs	r3, r0
 8003780:	4461      	add	r1, ip
 8003782:	408b      	lsls	r3, r1
 8003784:	40e2      	lsrs	r2, r4
 8003786:	4313      	orrs	r3, r2
 8003788:	e7f1      	b.n	800376e <__aeabi_d2iz+0x42>
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	000003fe 	.word	0x000003fe
 8003790:	0000041d 	.word	0x0000041d
 8003794:	7fffffff 	.word	0x7fffffff
 8003798:	00000433 	.word	0x00000433
 800379c:	00000413 	.word	0x00000413
 80037a0:	fffffbed 	.word	0xfffffbed

080037a4 <__aeabi_i2d>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d016      	beq.n	80037d8 <__aeabi_i2d+0x34>
 80037aa:	17c3      	asrs	r3, r0, #31
 80037ac:	18c5      	adds	r5, r0, r3
 80037ae:	405d      	eors	r5, r3
 80037b0:	0fc4      	lsrs	r4, r0, #31
 80037b2:	0028      	movs	r0, r5
 80037b4:	f000 f862 	bl	800387c <__clzsi2>
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <__aeabi_i2d+0x58>)
 80037ba:	1a1b      	subs	r3, r3, r0
 80037bc:	055b      	lsls	r3, r3, #21
 80037be:	0d5b      	lsrs	r3, r3, #21
 80037c0:	280a      	cmp	r0, #10
 80037c2:	dc14      	bgt.n	80037ee <__aeabi_i2d+0x4a>
 80037c4:	0002      	movs	r2, r0
 80037c6:	002e      	movs	r6, r5
 80037c8:	3215      	adds	r2, #21
 80037ca:	4096      	lsls	r6, r2
 80037cc:	220b      	movs	r2, #11
 80037ce:	1a12      	subs	r2, r2, r0
 80037d0:	40d5      	lsrs	r5, r2
 80037d2:	032d      	lsls	r5, r5, #12
 80037d4:	0b2d      	lsrs	r5, r5, #12
 80037d6:	e003      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037d8:	2400      	movs	r4, #0
 80037da:	2300      	movs	r3, #0
 80037dc:	2500      	movs	r5, #0
 80037de:	2600      	movs	r6, #0
 80037e0:	051b      	lsls	r3, r3, #20
 80037e2:	432b      	orrs	r3, r5
 80037e4:	07e4      	lsls	r4, r4, #31
 80037e6:	4323      	orrs	r3, r4
 80037e8:	0030      	movs	r0, r6
 80037ea:	0019      	movs	r1, r3
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	380b      	subs	r0, #11
 80037f0:	4085      	lsls	r5, r0
 80037f2:	032d      	lsls	r5, r5, #12
 80037f4:	2600      	movs	r6, #0
 80037f6:	0b2d      	lsrs	r5, r5, #12
 80037f8:	e7f2      	b.n	80037e0 <__aeabi_i2d+0x3c>
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	0000041e 	.word	0x0000041e

08003800 <__aeabi_cdrcmple>:
 8003800:	4684      	mov	ip, r0
 8003802:	0010      	movs	r0, r2
 8003804:	4662      	mov	r2, ip
 8003806:	468c      	mov	ip, r1
 8003808:	0019      	movs	r1, r3
 800380a:	4663      	mov	r3, ip
 800380c:	e000      	b.n	8003810 <__aeabi_cdcmpeq>
 800380e:	46c0      	nop			@ (mov r8, r8)

08003810 <__aeabi_cdcmpeq>:
 8003810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003812:	f000 f909 	bl	8003a28 <__ledf2>
 8003816:	2800      	cmp	r0, #0
 8003818:	d401      	bmi.n	800381e <__aeabi_cdcmpeq+0xe>
 800381a:	2100      	movs	r1, #0
 800381c:	42c8      	cmn	r0, r1
 800381e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003820 <__aeabi_dcmpeq>:
 8003820:	b510      	push	{r4, lr}
 8003822:	f000 f849 	bl	80038b8 <__eqdf2>
 8003826:	4240      	negs	r0, r0
 8003828:	3001      	adds	r0, #1
 800382a:	bd10      	pop	{r4, pc}

0800382c <__aeabi_dcmplt>:
 800382c:	b510      	push	{r4, lr}
 800382e:	f000 f8fb 	bl	8003a28 <__ledf2>
 8003832:	2800      	cmp	r0, #0
 8003834:	db01      	blt.n	800383a <__aeabi_dcmplt+0xe>
 8003836:	2000      	movs	r0, #0
 8003838:	bd10      	pop	{r4, pc}
 800383a:	2001      	movs	r0, #1
 800383c:	bd10      	pop	{r4, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)

08003840 <__aeabi_dcmple>:
 8003840:	b510      	push	{r4, lr}
 8003842:	f000 f8f1 	bl	8003a28 <__ledf2>
 8003846:	2800      	cmp	r0, #0
 8003848:	dd01      	ble.n	800384e <__aeabi_dcmple+0xe>
 800384a:	2000      	movs	r0, #0
 800384c:	bd10      	pop	{r4, pc}
 800384e:	2001      	movs	r0, #1
 8003850:	bd10      	pop	{r4, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)

08003854 <__aeabi_dcmpgt>:
 8003854:	b510      	push	{r4, lr}
 8003856:	f000 f873 	bl	8003940 <__gedf2>
 800385a:	2800      	cmp	r0, #0
 800385c:	dc01      	bgt.n	8003862 <__aeabi_dcmpgt+0xe>
 800385e:	2000      	movs	r0, #0
 8003860:	bd10      	pop	{r4, pc}
 8003862:	2001      	movs	r0, #1
 8003864:	bd10      	pop	{r4, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)

08003868 <__aeabi_dcmpge>:
 8003868:	b510      	push	{r4, lr}
 800386a:	f000 f869 	bl	8003940 <__gedf2>
 800386e:	2800      	cmp	r0, #0
 8003870:	da01      	bge.n	8003876 <__aeabi_dcmpge+0xe>
 8003872:	2000      	movs	r0, #0
 8003874:	bd10      	pop	{r4, pc}
 8003876:	2001      	movs	r0, #1
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)

0800387c <__clzsi2>:
 800387c:	211c      	movs	r1, #28
 800387e:	2301      	movs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4298      	cmp	r0, r3
 8003884:	d301      	bcc.n	800388a <__clzsi2+0xe>
 8003886:	0c00      	lsrs	r0, r0, #16
 8003888:	3910      	subs	r1, #16
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	4298      	cmp	r0, r3
 800388e:	d301      	bcc.n	8003894 <__clzsi2+0x18>
 8003890:	0a00      	lsrs	r0, r0, #8
 8003892:	3908      	subs	r1, #8
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	4298      	cmp	r0, r3
 8003898:	d301      	bcc.n	800389e <__clzsi2+0x22>
 800389a:	0900      	lsrs	r0, r0, #4
 800389c:	3904      	subs	r1, #4
 800389e:	a202      	add	r2, pc, #8	@ (adr r2, 80038a8 <__clzsi2+0x2c>)
 80038a0:	5c10      	ldrb	r0, [r2, r0]
 80038a2:	1840      	adds	r0, r0, r1
 80038a4:	4770      	bx	lr
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	02020304 	.word	0x02020304
 80038ac:	01010101 	.word	0x01010101
	...

080038b8 <__eqdf2>:
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	4657      	mov	r7, sl
 80038bc:	46de      	mov	lr, fp
 80038be:	464e      	mov	r6, r9
 80038c0:	4645      	mov	r5, r8
 80038c2:	b5e0      	push	{r5, r6, r7, lr}
 80038c4:	000d      	movs	r5, r1
 80038c6:	0004      	movs	r4, r0
 80038c8:	0fe8      	lsrs	r0, r5, #31
 80038ca:	4683      	mov	fp, r0
 80038cc:	0309      	lsls	r1, r1, #12
 80038ce:	0fd8      	lsrs	r0, r3, #31
 80038d0:	0b09      	lsrs	r1, r1, #12
 80038d2:	4682      	mov	sl, r0
 80038d4:	4819      	ldr	r0, [pc, #100]	@ (800393c <__eqdf2+0x84>)
 80038d6:	468c      	mov	ip, r1
 80038d8:	031f      	lsls	r7, r3, #12
 80038da:	0069      	lsls	r1, r5, #1
 80038dc:	005e      	lsls	r6, r3, #1
 80038de:	0d49      	lsrs	r1, r1, #21
 80038e0:	0b3f      	lsrs	r7, r7, #12
 80038e2:	0d76      	lsrs	r6, r6, #21
 80038e4:	4281      	cmp	r1, r0
 80038e6:	d018      	beq.n	800391a <__eqdf2+0x62>
 80038e8:	4286      	cmp	r6, r0
 80038ea:	d00f      	beq.n	800390c <__eqdf2+0x54>
 80038ec:	2001      	movs	r0, #1
 80038ee:	42b1      	cmp	r1, r6
 80038f0:	d10d      	bne.n	800390e <__eqdf2+0x56>
 80038f2:	45bc      	cmp	ip, r7
 80038f4:	d10b      	bne.n	800390e <__eqdf2+0x56>
 80038f6:	4294      	cmp	r4, r2
 80038f8:	d109      	bne.n	800390e <__eqdf2+0x56>
 80038fa:	45d3      	cmp	fp, sl
 80038fc:	d01c      	beq.n	8003938 <__eqdf2+0x80>
 80038fe:	2900      	cmp	r1, #0
 8003900:	d105      	bne.n	800390e <__eqdf2+0x56>
 8003902:	4660      	mov	r0, ip
 8003904:	4320      	orrs	r0, r4
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	4198      	sbcs	r0, r3
 800390a:	e000      	b.n	800390e <__eqdf2+0x56>
 800390c:	2001      	movs	r0, #1
 800390e:	bcf0      	pop	{r4, r5, r6, r7}
 8003910:	46bb      	mov	fp, r7
 8003912:	46b2      	mov	sl, r6
 8003914:	46a9      	mov	r9, r5
 8003916:	46a0      	mov	r8, r4
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	2001      	movs	r0, #1
 800391c:	428e      	cmp	r6, r1
 800391e:	d1f6      	bne.n	800390e <__eqdf2+0x56>
 8003920:	4661      	mov	r1, ip
 8003922:	4339      	orrs	r1, r7
 8003924:	000f      	movs	r7, r1
 8003926:	4317      	orrs	r7, r2
 8003928:	4327      	orrs	r7, r4
 800392a:	d1f0      	bne.n	800390e <__eqdf2+0x56>
 800392c:	465b      	mov	r3, fp
 800392e:	4652      	mov	r2, sl
 8003930:	1a98      	subs	r0, r3, r2
 8003932:	1e43      	subs	r3, r0, #1
 8003934:	4198      	sbcs	r0, r3
 8003936:	e7ea      	b.n	800390e <__eqdf2+0x56>
 8003938:	2000      	movs	r0, #0
 800393a:	e7e8      	b.n	800390e <__eqdf2+0x56>
 800393c:	000007ff 	.word	0x000007ff

08003940 <__gedf2>:
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	4657      	mov	r7, sl
 8003944:	464e      	mov	r6, r9
 8003946:	4645      	mov	r5, r8
 8003948:	46de      	mov	lr, fp
 800394a:	b5e0      	push	{r5, r6, r7, lr}
 800394c:	000d      	movs	r5, r1
 800394e:	030f      	lsls	r7, r1, #12
 8003950:	0b39      	lsrs	r1, r7, #12
 8003952:	b083      	sub	sp, #12
 8003954:	0004      	movs	r4, r0
 8003956:	4680      	mov	r8, r0
 8003958:	9101      	str	r1, [sp, #4]
 800395a:	0058      	lsls	r0, r3, #1
 800395c:	0fe9      	lsrs	r1, r5, #31
 800395e:	4f31      	ldr	r7, [pc, #196]	@ (8003a24 <__gedf2+0xe4>)
 8003960:	0d40      	lsrs	r0, r0, #21
 8003962:	468c      	mov	ip, r1
 8003964:	006e      	lsls	r6, r5, #1
 8003966:	0319      	lsls	r1, r3, #12
 8003968:	4682      	mov	sl, r0
 800396a:	4691      	mov	r9, r2
 800396c:	0d76      	lsrs	r6, r6, #21
 800396e:	0b09      	lsrs	r1, r1, #12
 8003970:	0fd8      	lsrs	r0, r3, #31
 8003972:	42be      	cmp	r6, r7
 8003974:	d01f      	beq.n	80039b6 <__gedf2+0x76>
 8003976:	45ba      	cmp	sl, r7
 8003978:	d00f      	beq.n	800399a <__gedf2+0x5a>
 800397a:	2e00      	cmp	r6, #0
 800397c:	d12f      	bne.n	80039de <__gedf2+0x9e>
 800397e:	4655      	mov	r5, sl
 8003980:	9e01      	ldr	r6, [sp, #4]
 8003982:	4334      	orrs	r4, r6
 8003984:	2d00      	cmp	r5, #0
 8003986:	d127      	bne.n	80039d8 <__gedf2+0x98>
 8003988:	430a      	orrs	r2, r1
 800398a:	d03a      	beq.n	8003a02 <__gedf2+0xc2>
 800398c:	2c00      	cmp	r4, #0
 800398e:	d145      	bne.n	8003a1c <__gedf2+0xdc>
 8003990:	2800      	cmp	r0, #0
 8003992:	d11a      	bne.n	80039ca <__gedf2+0x8a>
 8003994:	2001      	movs	r0, #1
 8003996:	4240      	negs	r0, r0
 8003998:	e017      	b.n	80039ca <__gedf2+0x8a>
 800399a:	4311      	orrs	r1, r2
 800399c:	d13b      	bne.n	8003a16 <__gedf2+0xd6>
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d102      	bne.n	80039a8 <__gedf2+0x68>
 80039a2:	9f01      	ldr	r7, [sp, #4]
 80039a4:	4327      	orrs	r7, r4
 80039a6:	d0f3      	beq.n	8003990 <__gedf2+0x50>
 80039a8:	4584      	cmp	ip, r0
 80039aa:	d109      	bne.n	80039c0 <__gedf2+0x80>
 80039ac:	4663      	mov	r3, ip
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <__gedf2+0x54>
 80039b2:	4660      	mov	r0, ip
 80039b4:	e009      	b.n	80039ca <__gedf2+0x8a>
 80039b6:	9f01      	ldr	r7, [sp, #4]
 80039b8:	4327      	orrs	r7, r4
 80039ba:	d12c      	bne.n	8003a16 <__gedf2+0xd6>
 80039bc:	45b2      	cmp	sl, r6
 80039be:	d024      	beq.n	8003a0a <__gedf2+0xca>
 80039c0:	4663      	mov	r3, ip
 80039c2:	2002      	movs	r0, #2
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4018      	ands	r0, r3
 80039c8:	3801      	subs	r0, #1
 80039ca:	b003      	add	sp, #12
 80039cc:	bcf0      	pop	{r4, r5, r6, r7}
 80039ce:	46bb      	mov	fp, r7
 80039d0:	46b2      	mov	sl, r6
 80039d2:	46a9      	mov	r9, r5
 80039d4:	46a0      	mov	r8, r4
 80039d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d0d9      	beq.n	8003990 <__gedf2+0x50>
 80039dc:	e7e4      	b.n	80039a8 <__gedf2+0x68>
 80039de:	4654      	mov	r4, sl
 80039e0:	2c00      	cmp	r4, #0
 80039e2:	d0ed      	beq.n	80039c0 <__gedf2+0x80>
 80039e4:	4584      	cmp	ip, r0
 80039e6:	d1eb      	bne.n	80039c0 <__gedf2+0x80>
 80039e8:	4556      	cmp	r6, sl
 80039ea:	dce9      	bgt.n	80039c0 <__gedf2+0x80>
 80039ec:	dbde      	blt.n	80039ac <__gedf2+0x6c>
 80039ee:	9b01      	ldr	r3, [sp, #4]
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d8e5      	bhi.n	80039c0 <__gedf2+0x80>
 80039f4:	d1da      	bne.n	80039ac <__gedf2+0x6c>
 80039f6:	45c8      	cmp	r8, r9
 80039f8:	d8e2      	bhi.n	80039c0 <__gedf2+0x80>
 80039fa:	2000      	movs	r0, #0
 80039fc:	45c8      	cmp	r8, r9
 80039fe:	d2e4      	bcs.n	80039ca <__gedf2+0x8a>
 8003a00:	e7d4      	b.n	80039ac <__gedf2+0x6c>
 8003a02:	2000      	movs	r0, #0
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d0e0      	beq.n	80039ca <__gedf2+0x8a>
 8003a08:	e7da      	b.n	80039c0 <__gedf2+0x80>
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	d103      	bne.n	8003a16 <__gedf2+0xd6>
 8003a0e:	4584      	cmp	ip, r0
 8003a10:	d1d6      	bne.n	80039c0 <__gedf2+0x80>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e7d9      	b.n	80039ca <__gedf2+0x8a>
 8003a16:	2002      	movs	r0, #2
 8003a18:	4240      	negs	r0, r0
 8003a1a:	e7d6      	b.n	80039ca <__gedf2+0x8a>
 8003a1c:	4584      	cmp	ip, r0
 8003a1e:	d0e6      	beq.n	80039ee <__gedf2+0xae>
 8003a20:	e7ce      	b.n	80039c0 <__gedf2+0x80>
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	000007ff 	.word	0x000007ff

08003a28 <__ledf2>:
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	4657      	mov	r7, sl
 8003a2c:	464e      	mov	r6, r9
 8003a2e:	4645      	mov	r5, r8
 8003a30:	46de      	mov	lr, fp
 8003a32:	b5e0      	push	{r5, r6, r7, lr}
 8003a34:	000d      	movs	r5, r1
 8003a36:	030f      	lsls	r7, r1, #12
 8003a38:	0004      	movs	r4, r0
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	0fe8      	lsrs	r0, r5, #31
 8003a3e:	0b39      	lsrs	r1, r7, #12
 8003a40:	4684      	mov	ip, r0
 8003a42:	b083      	sub	sp, #12
 8003a44:	0058      	lsls	r0, r3, #1
 8003a46:	4f30      	ldr	r7, [pc, #192]	@ (8003b08 <__ledf2+0xe0>)
 8003a48:	0d40      	lsrs	r0, r0, #21
 8003a4a:	9101      	str	r1, [sp, #4]
 8003a4c:	031e      	lsls	r6, r3, #12
 8003a4e:	0069      	lsls	r1, r5, #1
 8003a50:	4682      	mov	sl, r0
 8003a52:	4691      	mov	r9, r2
 8003a54:	0d49      	lsrs	r1, r1, #21
 8003a56:	0b36      	lsrs	r6, r6, #12
 8003a58:	0fd8      	lsrs	r0, r3, #31
 8003a5a:	42b9      	cmp	r1, r7
 8003a5c:	d020      	beq.n	8003aa0 <__ledf2+0x78>
 8003a5e:	45ba      	cmp	sl, r7
 8003a60:	d00f      	beq.n	8003a82 <__ledf2+0x5a>
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d12b      	bne.n	8003abe <__ledf2+0x96>
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	430c      	orrs	r4, r1
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	d137      	bne.n	8003ae0 <__ledf2+0xb8>
 8003a70:	4332      	orrs	r2, r6
 8003a72:	d038      	beq.n	8003ae6 <__ledf2+0xbe>
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d144      	bne.n	8003b02 <__ledf2+0xda>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d119      	bne.n	8003ab0 <__ledf2+0x88>
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	4240      	negs	r0, r0
 8003a80:	e016      	b.n	8003ab0 <__ledf2+0x88>
 8003a82:	4316      	orrs	r6, r2
 8003a84:	d113      	bne.n	8003aae <__ledf2+0x86>
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d102      	bne.n	8003a90 <__ledf2+0x68>
 8003a8a:	9f01      	ldr	r7, [sp, #4]
 8003a8c:	4327      	orrs	r7, r4
 8003a8e:	d0f3      	beq.n	8003a78 <__ledf2+0x50>
 8003a90:	4584      	cmp	ip, r0
 8003a92:	d020      	beq.n	8003ad6 <__ledf2+0xae>
 8003a94:	4663      	mov	r3, ip
 8003a96:	2002      	movs	r0, #2
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4018      	ands	r0, r3
 8003a9c:	3801      	subs	r0, #1
 8003a9e:	e007      	b.n	8003ab0 <__ledf2+0x88>
 8003aa0:	9f01      	ldr	r7, [sp, #4]
 8003aa2:	4327      	orrs	r7, r4
 8003aa4:	d103      	bne.n	8003aae <__ledf2+0x86>
 8003aa6:	458a      	cmp	sl, r1
 8003aa8:	d1f4      	bne.n	8003a94 <__ledf2+0x6c>
 8003aaa:	4316      	orrs	r6, r2
 8003aac:	d01f      	beq.n	8003aee <__ledf2+0xc6>
 8003aae:	2002      	movs	r0, #2
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ab4:	46bb      	mov	fp, r7
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	46a9      	mov	r9, r5
 8003aba:	46a0      	mov	r8, r4
 8003abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003abe:	4654      	mov	r4, sl
 8003ac0:	2c00      	cmp	r4, #0
 8003ac2:	d0e7      	beq.n	8003a94 <__ledf2+0x6c>
 8003ac4:	4584      	cmp	ip, r0
 8003ac6:	d1e5      	bne.n	8003a94 <__ledf2+0x6c>
 8003ac8:	4551      	cmp	r1, sl
 8003aca:	dce3      	bgt.n	8003a94 <__ledf2+0x6c>
 8003acc:	db03      	blt.n	8003ad6 <__ledf2+0xae>
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	42b3      	cmp	r3, r6
 8003ad2:	d8df      	bhi.n	8003a94 <__ledf2+0x6c>
 8003ad4:	d00f      	beq.n	8003af6 <__ledf2+0xce>
 8003ad6:	4663      	mov	r3, ip
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0cf      	beq.n	8003a7c <__ledf2+0x54>
 8003adc:	4660      	mov	r0, ip
 8003ade:	e7e7      	b.n	8003ab0 <__ledf2+0x88>
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d0c9      	beq.n	8003a78 <__ledf2+0x50>
 8003ae4:	e7d4      	b.n	8003a90 <__ledf2+0x68>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d0e1      	beq.n	8003ab0 <__ledf2+0x88>
 8003aec:	e7d2      	b.n	8003a94 <__ledf2+0x6c>
 8003aee:	4584      	cmp	ip, r0
 8003af0:	d1d0      	bne.n	8003a94 <__ledf2+0x6c>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e7dc      	b.n	8003ab0 <__ledf2+0x88>
 8003af6:	45c8      	cmp	r8, r9
 8003af8:	d8cc      	bhi.n	8003a94 <__ledf2+0x6c>
 8003afa:	2000      	movs	r0, #0
 8003afc:	45c8      	cmp	r8, r9
 8003afe:	d2d7      	bcs.n	8003ab0 <__ledf2+0x88>
 8003b00:	e7e9      	b.n	8003ad6 <__ledf2+0xae>
 8003b02:	4584      	cmp	ip, r0
 8003b04:	d0e3      	beq.n	8003ace <__ledf2+0xa6>
 8003b06:	e7c5      	b.n	8003a94 <__ledf2+0x6c>
 8003b08:	000007ff 	.word	0x000007ff

08003b0c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b0c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <__NVIC_SystemReset+0x14>)
 8003b12:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <__NVIC_SystemReset+0x18>)
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b1a:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003b1c:	e7fd      	b.n	8003b1a <__NVIC_SystemReset+0xe>
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	e000ed00 	.word	0xe000ed00
 8003b24:	05fa0004 	.word	0x05fa0004

08003b28 <iap_gpio_init>:
 * 
 * @param  None
 * @retval None
 */
static void iap_gpio_init(void)
{
 8003b28:	b500      	push	{lr}
 8003b2a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	2214      	movs	r2, #20
 8003b2e:	2100      	movs	r1, #0
 8003b30:	a801      	add	r0, sp, #4
 8003b32:	f003 fdaf 	bl	8007694 <memset>
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <iap_gpio_init+0x34>)
 8003b38:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4319      	orrs	r1, r3
 8003b3e:	6351      	str	r1, [r2, #52]	@ 0x34
 8003b40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b42:	401a      	ands	r2, r3
 8003b44:	9200      	str	r2, [sp, #0]
 8003b46:	9a00      	ldr	r2, [sp, #0]

	/* Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003b48:	22c0      	movs	r2, #192	@ 0xc0
 8003b4a:	9201      	str	r2, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Configure pull-up resistors
 8003b4c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); // Initialize GPIOB with the configuration
 8003b4e:	a901      	add	r1, sp, #4
 8003b50:	4803      	ldr	r0, [pc, #12]	@ (8003b60 <iap_gpio_init+0x38>)
 8003b52:	f002 fd35 	bl	80065c0 <HAL_GPIO_Init>
}
 8003b56:	b007      	add	sp, #28
 8003b58:	bd00      	pop	{pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	50000400 	.word	0x50000400

08003b64 <add_pack_head>:
{
 8003b64:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_HEAD_HIGH; // Add high byte of header
 8003b66:	4806      	ldr	r0, [pc, #24]	@ (8003b80 <add_pack_head+0x1c>)
 8003b68:	7803      	ldrb	r3, [r0, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	7002      	strb	r2, [r0, #0]
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <add_pack_head+0x20>)
 8003b72:	24aa      	movs	r4, #170	@ 0xaa
 8003b74:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_HEAD_LOW;  // Add low byte of header
 8003b76:	3302      	adds	r3, #2
 8003b78:	7003      	strb	r3, [r0, #0]
 8003b7a:	2355      	movs	r3, #85	@ 0x55
 8003b7c:	548b      	strb	r3, [r1, r2]
}
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	20000190 	.word	0x20000190
 8003b84:	20000194 	.word	0x20000194

08003b88 <add_pack_end>:
{
 8003b88:	b510      	push	{r4, lr}
    s_send_buf[s_send_len++] = PACK_END_HIGH; // Add high byte of footer
 8003b8a:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <add_pack_end+0x1c>)
 8003b8c:	7803      	ldrb	r3, [r0, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	7002      	strb	r2, [r0, #0]
 8003b94:	4904      	ldr	r1, [pc, #16]	@ (8003ba8 <add_pack_end+0x20>)
 8003b96:	2455      	movs	r4, #85	@ 0x55
 8003b98:	54cc      	strb	r4, [r1, r3]
    s_send_buf[s_send_len++] = PACK_END_LOW;  // Add low byte of footer
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	7003      	strb	r3, [r0, #0]
 8003b9e:	23aa      	movs	r3, #170	@ 0xaa
 8003ba0:	548b      	strb	r3, [r1, r2]
}
 8003ba2:	bd10      	pop	{r4, pc}
 8003ba4:	20000190 	.word	0x20000190
 8003ba8:	20000194 	.word	0x20000194

08003bac <head_end_check>:
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003bac:	7803      	ldrb	r3, [r0, #0]
 8003bae:	2baa      	cmp	r3, #170	@ 0xaa
 8003bb0:	d001      	beq.n	8003bb6 <head_end_check+0xa>
    return CHECK_ERROR; // Return error if checks fail
 8003bb2:	2000      	movs	r0, #0
}
 8003bb4:	4770      	bx	lr
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003bb6:	7843      	ldrb	r3, [r0, #1]
 8003bb8:	2b55      	cmp	r3, #85	@ 0x55
 8003bba:	d001      	beq.n	8003bc0 <head_end_check+0x14>
    return CHECK_ERROR; // Return error if checks fail
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	e7f9      	b.n	8003bb4 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003bc0:	1843      	adds	r3, r0, r1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	781b      	ldrb	r3, [r3, #0]
    if (buffer[0] == PACK_HEAD_HIGH && buffer[1] == PACK_HEAD_LOW &&
 8003bc6:	2baa      	cmp	r3, #170	@ 0xaa
 8003bc8:	d001      	beq.n	8003bce <head_end_check+0x22>
    return CHECK_ERROR; // Return error if checks fail
 8003bca:	2000      	movs	r0, #0
 8003bcc:	e7f2      	b.n	8003bb4 <head_end_check+0x8>
        buffer[size - 1] == PACK_END_LOW && buffer[size - 2] == PACK_END_HIGH)
 8003bce:	1840      	adds	r0, r0, r1
 8003bd0:	3802      	subs	r0, #2
 8003bd2:	7803      	ldrb	r3, [r0, #0]
 8003bd4:	2b55      	cmp	r3, #85	@ 0x55
 8003bd6:	d001      	beq.n	8003bdc <head_end_check+0x30>
    return CHECK_ERROR; // Return error if checks fail
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e7eb      	b.n	8003bb4 <head_end_check+0x8>
        return CHECK_PASS; // Return success if checks pass
 8003bdc:	2001      	movs	r0, #1
 8003bde:	e7e9      	b.n	8003bb4 <head_end_check+0x8>

08003be0 <crc_check>:
{
 8003be0:	b530      	push	{r4, r5, lr}
    uint8_t crc = buffer[size - 3]; // Extract the CRC from the packet
 8003be2:	3903      	subs	r1, #3
 8003be4:	5c45      	ldrb	r5, [r0, r1]
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003be6:	2200      	movs	r2, #0
    uint8_t temp = 0;
 8003be8:	2100      	movs	r1, #0
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003bea:	e005      	b.n	8003bf8 <crc_check+0x18>
        temp += buffer[i + 4]; // Start after header, offset by 4
 8003bec:	1883      	adds	r3, r0, r2
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	1859      	adds	r1, r3, r1
 8003bf2:	b2c9      	uxtb	r1, r1
    for (uint16_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 1); i++)
 8003bf4:	3201      	adds	r2, #1
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	78c3      	ldrb	r3, [r0, #3]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	7884      	ldrb	r4, [r0, #2]
 8003bfe:	4323      	orrs	r3, r4
 8003c00:	3b01      	subs	r3, #1
 8003c02:	429a      	cmp	r2, r3
 8003c04:	dbf2      	blt.n	8003bec <crc_check+0xc>
    if (crc == temp)
 8003c06:	42a9      	cmp	r1, r5
 8003c08:	d001      	beq.n	8003c0e <crc_check+0x2e>
    return CHECK_ERROR; // CRC does not match
 8003c0a:	2000      	movs	r0, #0
}
 8003c0c:	bd30      	pop	{r4, r5, pc}
        return CHECK_PASS; // CRC matches
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e7fc      	b.n	8003c0c <crc_check+0x2c>

08003c12 <pack_check>:
{
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	0005      	movs	r5, r0
 8003c16:	000c      	movs	r4, r1
    if (size <= 4)
 8003c18:	2904      	cmp	r1, #4
 8003c1a:	d90d      	bls.n	8003c38 <pack_check+0x26>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003c1c:	f7ff ffc6 	bl	8003bac <head_end_check>
 8003c20:	2801      	cmp	r0, #1
 8003c22:	d001      	beq.n	8003c28 <pack_check+0x16>
    return CHECK_ERROR; // Packet is invalid
 8003c24:	2000      	movs	r0, #0
}
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
        crc_check(buffer, size) == CHECK_PASS)
 8003c28:	0021      	movs	r1, r4
 8003c2a:	0028      	movs	r0, r5
 8003c2c:	f7ff ffd8 	bl	8003be0 <crc_check>
    if (head_end_check(buffer, size) == CHECK_PASS &&
 8003c30:	2801      	cmp	r0, #1
 8003c32:	d0f8      	beq.n	8003c26 <pack_check+0x14>
    return CHECK_ERROR; // Packet is invalid
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f6      	b.n	8003c26 <pack_check+0x14>
        return CHECK_ERROR; // Packet is too small
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e7f4      	b.n	8003c26 <pack_check+0x14>

08003c3c <crc_construct>:
{
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	0004      	movs	r4, r0
    for (uint16_t i = 0; i < size; i++)
 8003c40:	2300      	movs	r3, #0
    uint8_t temp = 0;
 8003c42:	2000      	movs	r0, #0
    for (uint16_t i = 0; i < size; i++)
 8003c44:	e004      	b.n	8003c50 <crc_construct+0x14>
        temp += buffer[i];
 8003c46:	5ce2      	ldrb	r2, [r4, r3]
 8003c48:	1810      	adds	r0, r2, r0
 8003c4a:	b2c0      	uxtb	r0, r0
    for (uint16_t i = 0; i < size; i++)
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	428b      	cmp	r3, r1
 8003c52:	d3f8      	bcc.n	8003c46 <crc_construct+0xa>
}
 8003c54:	bd10      	pop	{r4, pc}

08003c56 <uart_in_send>:
{
 8003c56:	b510      	push	{r4, lr}
    usart1_transmit_dma(buffer, size); // Send data using USART1 in DMA mode
 8003c58:	f001 fb08 	bl	800526c <usart1_transmit_dma>
}
 8003c5c:	bd10      	pop	{r4, pc}

08003c5e <uart_out_send>:
{
 8003c5e:	b510      	push	{r4, lr}
    usart2_transmit_dma(buffer, size); // Send data using USART2 in DMA mode
 8003c60:	f001 fb1c 	bl	800529c <usart2_transmit_dma>
}
 8003c64:	bd10      	pop	{r4, pc}
	...

08003c68 <chain_enum_handle>:
{
 8003c68:	b510      	push	{r4, lr}
	buffer[6]++;
 8003c6a:	7983      	ldrb	r3, [r0, #6]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	7183      	strb	r3, [r0, #6]
	buffer[7]++;
 8003c70:	79c3      	ldrb	r3, [r0, #7]
 8003c72:	3301      	adds	r3, #1
 8003c74:	71c3      	strb	r3, [r0, #7]
	if (g_tail_status == CHAIN_TAIL_DEVICE)
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <chain_enum_handle+0x24>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d002      	beq.n	8003c84 <chain_enum_handle+0x1c>
		uart_out_send(buffer, size); // Forward to the master
 8003c7e:	f7ff ffee 	bl	8003c5e <uart_out_send>
}
 8003c82:	bd10      	pop	{r4, pc}
		uart_in_send(buffer, size); // Forward to the slave
 8003c84:	f7ff ffe7 	bl	8003c56 <uart_in_send>
 8003c88:	e7fb      	b.n	8003c82 <chain_enum_handle+0x1a>
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	200000c3 	.word	0x200000c3

08003c90 <chain_enum_return_handle>:
{
 8003c90:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003c92:	f7ff ffe0 	bl	8003c56 <uart_in_send>
}
 8003c96:	bd10      	pop	{r4, pc}

08003c98 <chain_enum_please_handle>:
{
 8003c98:	b510      	push	{r4, lr}
	uart_in_send(buffer, size); // Send the incoming buffer
 8003c9a:	f7ff ffdc 	bl	8003c56 <uart_in_send>
}
 8003c9e:	bd10      	pop	{r4, pc}

08003ca0 <chain_heartbeat_in_receive_handle>:
{
 8003ca0:	b510      	push	{r4, lr}
	uart_in_send(g_heartbeat_data_pack_buf, sizeof(g_heartbeat_data_pack_buf)); // Send heartbeat data
 8003ca2:	4802      	ldr	r0, [pc, #8]	@ (8003cac <chain_heartbeat_in_receive_handle+0xc>)
 8003ca4:	2109      	movs	r1, #9
 8003ca6:	f7ff ffd6 	bl	8003c56 <uart_in_send>
}
 8003caa:	bd10      	pop	{r4, pc}
 8003cac:	200000c8 	.word	0x200000c8

08003cb0 <chain_heartbeat_out_receive_handle>:
{
 8003cb0:	b510      	push	{r4, lr}
	g_heartbeat_reply_status_buf[(g_reply_index + 2) % 3] = 1; // Update the heartbeat reply status
 8003cb2:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <chain_heartbeat_out_receive_handle+0x18>)
 8003cb4:	7818      	ldrb	r0, [r3, #0]
 8003cb6:	3002      	adds	r0, #2
 8003cb8:	2103      	movs	r1, #3
 8003cba:	f7fe fb95 	bl	80023e8 <__aeabi_idivmod>
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <chain_heartbeat_out_receive_handle+0x1c>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	545a      	strb	r2, [r3, r1]
}
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	20000e90 	.word	0x20000e90
 8003ccc:	20000e94 	.word	0x20000e94

08003cd0 <chain_deal_data_packet_handle>:
{
 8003cd0:	b510      	push	{r4, lr}
	if (g_cmd_status == CMD_SPACE_IDLE_STATUS)
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <chain_deal_data_packet_handle+0x44>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d119      	bne.n	8003d10 <chain_deal_data_packet_handle+0x40>
		g_cmd_size = 0;						  // Reset command size
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <chain_deal_data_packet_handle+0x48>)
 8003cde:	2100      	movs	r1, #0
 8003ce0:	7019      	strb	r1, [r3, #0]
		g_cmd_status = CMD_SPACE_BUSY_STATUS; // Set command status to busy
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <chain_deal_data_packet_handle+0x44>)
 8003ce4:	3101      	adds	r1, #1
 8003ce6:	7019      	strb	r1, [r3, #0]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003ce8:	e00b      	b.n	8003d02 <chain_deal_data_packet_handle+0x32>
			g_cmd_buf[g_cmd_size++] = buffer[i + 5]; // Copy data from the buffer
 8003cea:	490b      	ldr	r1, [pc, #44]	@ (8003d18 <chain_deal_data_packet_handle+0x48>)
 8003cec:	780b      	ldrb	r3, [r1, #0]
 8003cee:	b2dc      	uxtb	r4, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	700b      	strb	r3, [r1, #0]
 8003cf6:	1883      	adds	r3, r0, r2
 8003cf8:	7959      	ldrb	r1, [r3, #5]
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <chain_deal_data_packet_handle+0x4c>)
 8003cfc:	5519      	strb	r1, [r3, r4]
		for (uint8_t i = 0; i < (((buffer[3] << 8) | buffer[2]) - 2); i++)
 8003cfe:	3201      	adds	r2, #1
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	78c3      	ldrb	r3, [r0, #3]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	7881      	ldrb	r1, [r0, #2]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	3b02      	subs	r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dbec      	blt.n	8003cea <chain_deal_data_packet_handle+0x1a>
}
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	2000048a 	.word	0x2000048a
 8003d18:	2000048b 	.word	0x2000048b
 8003d1c:	2000048c 	.word	0x2000048c

08003d20 <chain_out_relay_handle>:
{
 8003d20:	b510      	push	{r4, lr}
	buffer[4]--;				 // Index decrement
 8003d22:	7903      	ldrb	r3, [r0, #4]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]--;			 // CRC update
 8003d28:	1eca      	subs	r2, r1, #3
 8003d2a:	5c83      	ldrb	r3, [r0, r2]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	5483      	strb	r3, [r0, r2]
	uart_out_send(buffer, size); // Forward to the lower level
 8003d30:	f7ff ff95 	bl	8003c5e <uart_out_send>
}
 8003d34:	bd10      	pop	{r4, pc}

08003d36 <chain_in_relay_handle>:
{
 8003d36:	b510      	push	{r4, lr}
	buffer[4]++;				// Index increment
 8003d38:	7903      	ldrb	r3, [r0, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	7103      	strb	r3, [r0, #4]
	buffer[size - 3]++;			// CRC update
 8003d3e:	1eca      	subs	r2, r1, #3
 8003d40:	5c83      	ldrb	r3, [r0, r2]
 8003d42:	3301      	adds	r3, #1
 8003d44:	5483      	strb	r3, [r0, r2]
	uart_in_send(buffer, size); // Forward to the upper level
 8003d46:	f7ff ff86 	bl	8003c56 <uart_in_send>
}
 8003d4a:	bd10      	pop	{r4, pc}

08003d4c <chain_command_complete_return>:
{
 8003d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4e:	46c6      	mov	lr, r8
 8003d50:	b500      	push	{lr}
 8003d52:	4680      	mov	r8, r0
 8003d54:	000f      	movs	r7, r1
 8003d56:	0016      	movs	r6, r2
	s_send_len = 0;
 8003d58:	4c1e      	ldr	r4, [pc, #120]	@ (8003dd4 <chain_command_complete_return+0x88>)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	7023      	strb	r3, [r4, #0]
	uint16_t len = size + 3;
 8003d5e:	1cd5      	adds	r5, r2, #3
 8003d60:	b2ad      	uxth	r5, r5
	add_pack_head();
 8003d62:	f7ff feff 	bl	8003b64 <add_pack_head>
	s_send_buf[s_send_len++] = (uint8_t)(len & 0xFF);
 8003d66:	7823      	ldrb	r3, [r4, #0]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	7022      	strb	r2, [r4, #0]
 8003d6e:	491a      	ldr	r1, [pc, #104]	@ (8003dd8 <chain_command_complete_return+0x8c>)
 8003d70:	54cd      	strb	r5, [r1, r3]
	s_send_buf[s_send_len++] = (uint8_t)((len >> 8) & 0xFF);
 8003d72:	1c98      	adds	r0, r3, #2
 8003d74:	b2c0      	uxtb	r0, r0
 8003d76:	7020      	strb	r0, [r4, #0]
 8003d78:	0a2d      	lsrs	r5, r5, #8
 8003d7a:	548d      	strb	r5, [r1, r2]
	s_send_buf[s_send_len++] = DEFAULT_INDEX;
 8003d7c:	1cda      	adds	r2, r3, #3
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	7022      	strb	r2, [r4, #0]
 8003d82:	2501      	movs	r5, #1
 8003d84:	540d      	strb	r5, [r1, r0]
	s_send_buf[s_send_len++] = cmd;
 8003d86:	3304      	adds	r3, #4
 8003d88:	7023      	strb	r3, [r4, #0]
 8003d8a:	4643      	mov	r3, r8
 8003d8c:	548b      	strb	r3, [r1, r2]
	for (uint8_t i = 0; i < size; i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e008      	b.n	8003da4 <chain_command_complete_return+0x58>
		s_send_buf[s_send_len++] = buffer[i]; // Add data from buffer
 8003d92:	4c10      	ldr	r4, [pc, #64]	@ (8003dd4 <chain_command_complete_return+0x88>)
 8003d94:	7820      	ldrb	r0, [r4, #0]
 8003d96:	1c42      	adds	r2, r0, #1
 8003d98:	7022      	strb	r2, [r4, #0]
 8003d9a:	5cfd      	ldrb	r5, [r7, r3]
 8003d9c:	4c0e      	ldr	r4, [pc, #56]	@ (8003dd8 <chain_command_complete_return+0x8c>)
 8003d9e:	5425      	strb	r5, [r4, r0]
	for (uint8_t i = 0; i < size; i++)
 8003da0:	3301      	adds	r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	42b3      	cmp	r3, r6
 8003da6:	d3f4      	bcc.n	8003d92 <chain_command_complete_return+0x46>
	s_send_buf[s_send_len] = crc_construct((uint8_t *)(s_send_buf + 4),
 8003da8:	4e0a      	ldr	r6, [pc, #40]	@ (8003dd4 <chain_command_complete_return+0x88>)
 8003daa:	7835      	ldrb	r5, [r6, #0]
 8003dac:	1f29      	subs	r1, r5, #4
 8003dae:	b289      	uxth	r1, r1
 8003db0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ddc <chain_command_complete_return+0x90>)
 8003db2:	0020      	movs	r0, r4
 8003db4:	f7ff ff42 	bl	8003c3c <crc_construct>
 8003db8:	3c04      	subs	r4, #4
 8003dba:	5560      	strb	r0, [r4, r5]
	s_send_len++;
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	7035      	strb	r5, [r6, #0]
	add_pack_end();
 8003dc0:	f7ff fee2 	bl	8003b88 <add_pack_end>
	uart_in_send(s_send_buf, s_send_len); // Send the complete packet
 8003dc4:	7831      	ldrb	r1, [r6, #0]
 8003dc6:	0020      	movs	r0, r4
 8003dc8:	f7ff ff45 	bl	8003c56 <uart_in_send>
}
 8003dcc:	bc80      	pop	{r7}
 8003dce:	46b8      	mov	r8, r7
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	20000190 	.word	0x20000190
 8003dd8:	20000194 	.word	0x20000194
 8003ddc:	20000198 	.word	0x20000198

08003de0 <chain_get_bootloader_version_handle>:
{
 8003de0:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_BOOTLOADER_VERSION,
 8003de2:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <chain_get_bootloader_version_handle+0x10>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	20f9      	movs	r0, #249	@ 0xf9
 8003de8:	f7ff ffb0 	bl	8003d4c <chain_command_complete_return>
}
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	20000489 	.word	0x20000489

08003df4 <chain_get_firmware_version_handle>:
{
 8003df4:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_VERSION_DEVICE,
 8003df6:	4903      	ldr	r1, [pc, #12]	@ (8003e04 <chain_get_firmware_version_handle+0x10>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	20fa      	movs	r0, #250	@ 0xfa
 8003dfc:	f7ff ffa6 	bl	8003d4c <chain_command_complete_return>
}
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	200000c2 	.word	0x200000c2

08003e08 <chain_get_device_type_handle>:
{
 8003e08:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_GET_DEVICE_TYPE,
 8003e0a:	4903      	ldr	r1, [pc, #12]	@ (8003e18 <chain_get_device_type_handle+0x10>)
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	20fb      	movs	r0, #251	@ 0xfb
 8003e10:	f7ff ff9c 	bl	8003d4c <chain_command_complete_return>
}
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	200000c0 	.word	0x200000c0

08003e1c <chain_iap_update_handle>:
 * 
 * @param  data Verification bit
 * @retval None
 */
void chain_iap_update_handle(uint8_t data)
{
 8003e1c:	b530      	push	{r4, r5, lr}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	466b      	mov	r3, sp
 8003e22:	1ddd      	adds	r5, r3, #7
 8003e24:	71d8      	strb	r0, [r3, #7]
	uint32_t reset_wait_start = HAL_GetTick(); // Get the current tick count
 8003e26:	f001 fb4f 	bl	80054c8 <HAL_GetTick>
 8003e2a:	0004      	movs	r4, r0
	if (data == 0x86) // Check for expected data
 8003e2c:	782b      	ldrb	r3, [r5, #0]
 8003e2e:	2b86      	cmp	r3, #134	@ 0x86
 8003e30:	d001      	beq.n	8003e36 <chain_iap_update_handle+0x1a>
		{
			NVIC_SystemReset(); // Reset the microcontroller
		}
		NVIC_SystemReset(); // Reset the microcontroller again
	}
}
 8003e32:	b003      	add	sp, #12
 8003e34:	bd30      	pop	{r4, r5, pc}
		chain_command_complete_return(CHAIN_IAP_UPDATE,
 8003e36:	2201      	movs	r2, #1
 8003e38:	0029      	movs	r1, r5
 8003e3a:	20ff      	movs	r0, #255	@ 0xff
 8003e3c:	f7ff ff86 	bl	8003d4c <chain_command_complete_return>
		HAL_Delay(10); // Delay to ensure packet is sent
 8003e40:	200a      	movs	r0, #10
 8003e42:	f001 fb47 	bl	80054d4 <HAL_Delay>
		LL_USART_DeInit(USART1); // Deinitialize USART1
 8003e46:	4d1a      	ldr	r5, [pc, #104]	@ (8003eb0 <chain_iap_update_handle+0x94>)
 8003e48:	0028      	movs	r0, r5
 8003e4a:	f003 fab9 	bl	80073c0 <LL_USART_DeInit>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4393      	bics	r3, r2
 8003e54:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e56:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	321f      	adds	r2, #31
 8003e62:	4393      	bics	r3, r2
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	f381 8810 	msr	PRIMASK, r1
		iap_gpio_init(); // Initialize GPIO for IAP
 8003e6a:	f7ff fe5d 	bl	8003b28 <iap_gpio_init>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8003e6e:	e006      	b.n	8003e7e <chain_iap_update_handle+0x62>
			if (HAL_GetTick() - reset_wait_start > 1000) // Check timeout
 8003e70:	f001 fb2a 	bl	80054c8 <HAL_GetTick>
 8003e74:	1b00      	subs	r0, r0, r4
 8003e76:	22fa      	movs	r2, #250	@ 0xfa
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	4290      	cmp	r0, r2
 8003e7c:	d80b      	bhi.n	8003e96 <chain_iap_update_handle+0x7a>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8003e7e:	2140      	movs	r1, #64	@ 0x40
 8003e80:	480c      	ldr	r0, [pc, #48]	@ (8003eb4 <chain_iap_update_handle+0x98>)
 8003e82:	f002 fc57 	bl	8006734 <HAL_GPIO_ReadPin>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d1f2      	bne.n	8003e70 <chain_iap_update_handle+0x54>
 8003e8a:	2180      	movs	r1, #128	@ 0x80
 8003e8c:	4809      	ldr	r0, [pc, #36]	@ (8003eb4 <chain_iap_update_handle+0x98>)
 8003e8e:	f002 fc51 	bl	8006734 <HAL_GPIO_ReadPin>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1ec      	bne.n	8003e70 <chain_iap_update_handle+0x54>
		if (HAL_GetTick() - reset_wait_start > 1000) // Check if timed out
 8003e96:	f001 fb17 	bl	80054c8 <HAL_GetTick>
 8003e9a:	1b00      	subs	r0, r0, r4
 8003e9c:	23fa      	movs	r3, #250	@ 0xfa
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4298      	cmp	r0, r3
 8003ea2:	d903      	bls.n	8003eac <chain_iap_update_handle+0x90>
			MX_USART1_UART_Init(); // Reinitialize USART1 if no reset occurred
 8003ea4:	f000 ffa6 	bl	8004df4 <MX_USART1_UART_Init>
		NVIC_SystemReset(); // Reset the microcontroller again
 8003ea8:	f7ff fe30 	bl	8003b0c <__NVIC_SystemReset>
			NVIC_SystemReset(); // Reset the microcontroller
 8003eac:	f7ff fe2e 	bl	8003b0c <__NVIC_SystemReset>
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	50000400 	.word	0x50000400

08003eb8 <HAL_ADC_ConvCpltCallback>:
	  result = out_max;
  }
  return result;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003eb8:	b510      	push	{r4, lr}
	int16_t tmp = 0;

	HAL_ADC_Stop_DMA(hadc);
 8003eba:	f001 ff21 	bl	8005d00 <HAL_ADC_Stop_DMA>
	// 更新adc值
	for(uint8_t i =0 ;i<ADC_CHANNEL_NUMS;i++){
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e00c      	b.n	8003edc <HAL_ADC_ConvCpltCallback+0x24>
		s_adc_12value_buf[i] = s_adc_collect_buf[i];
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <HAL_ADC_ConvCpltCallback+0x34>)
 8003ec4:	0099      	lsls	r1, r3, #2
 8003ec6:	5889      	ldr	r1, [r1, r2]
 8003ec8:	b289      	uxth	r1, r1
 8003eca:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_ADC_ConvCpltCallback+0x38>)
 8003ecc:	0058      	lsls	r0, r3, #1
 8003ece:	5281      	strh	r1, [r0, r2]
		s_adc_8value_buf[i] = (s_adc_12value_buf[i],0,65535,0,255);
 8003ed0:	5a82      	ldrh	r2, [r0, r2]
 8003ed2:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003ed4:	21ff      	movs	r1, #255	@ 0xff
 8003ed6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i =0 ;i<ADC_CHANNEL_NUMS;i++){
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d9f0      	bls.n	8003ec2 <HAL_ADC_ConvCpltCallback+0xa>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) s_adc_collect_buf, ADC_CHANNEL_NUMS);
 8003ee0:	4902      	ldr	r1, [pc, #8]	@ (8003eec <HAL_ADC_ConvCpltCallback+0x34>)
 8003ee2:	4805      	ldr	r0, [pc, #20]	@ (8003ef8 <HAL_ADC_ConvCpltCallback+0x40>)
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f001 fe63 	bl	8005bb0 <HAL_ADC_Start_DMA>
}
 8003eea:	bd10      	pop	{r4, pc}
 8003eec:	20000398 	.word	0x20000398
 8003ef0:	200003a4 	.word	0x200003a4
 8003ef4:	200003a0 	.word	0x200003a0
 8003ef8:	20000424 	.word	0x20000424

08003efc <joystick_init>:

void joystick_init(void) {
 8003efc:	b510      	push	{r4, lr}
	HAL_ADCEx_Calibration_Start(&hadc1);
 8003efe:	4c05      	ldr	r4, [pc, #20]	@ (8003f14 <joystick_init+0x18>)
 8003f00:	0020      	movs	r0, r4
 8003f02:	f001 ff3f 	bl	8005d84 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) s_adc_collect_buf, ADC_CHANNEL_NUMS);
 8003f06:	4904      	ldr	r1, [pc, #16]	@ (8003f18 <joystick_init+0x1c>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f001 fe50 	bl	8005bb0 <HAL_ADC_Start_DMA>
}
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	20000424 	.word	0x20000424
 8003f18:	20000398 	.word	0x20000398

08003f1c <chain_joystick_get_12adc>:

void chain_joystick_get_12adc(void) {
 8003f1c:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_JOYSTICK_GET_12ADC,
 8003f1e:	4903      	ldr	r1, [pc, #12]	@ (8003f2c <chain_joystick_get_12adc+0x10>)
 8003f20:	2204      	movs	r2, #4
 8003f22:	2030      	movs	r0, #48	@ 0x30
 8003f24:	f7ff ff12 	bl	8003d4c <chain_command_complete_return>
									  (uint8_t *)s_adc_12value_buf, 4);
}
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	200003a4 	.word	0x200003a4

08003f30 <chain_joystick_get_8adc>:

void chain_joystick_get_8adc(void) {
 8003f30:	b510      	push	{r4, lr}
	chain_command_complete_return(CHAIN_JOYSTICK_GET_8ADC,
 8003f32:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <chain_joystick_get_8adc+0x10>)
 8003f34:	2202      	movs	r2, #2
 8003f36:	2031      	movs	r0, #49	@ 0x31
 8003f38:	f7ff ff08 	bl	8003d4c <chain_command_complete_return>
										  (uint8_t *)s_adc_8value_buf, 2);
}
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	200003a0 	.word	0x200003a0

08003f44 <chain_joystick_get_adc_xy_mapped_range>:

void chain_joystick_get_adc_xy_mapped_range(void) {

}
 8003f44:	4770      	bx	lr

08003f46 <chain_joystick_set_adc_xy_mapped_range>:

void chain_joystick_set_adc_xy_mapped_range(uint8_t *buffer, uint16_t size) {

}
 8003f46:	4770      	bx	lr

08003f48 <chain_joystick_get_adc_xy_mapped_int12_value>:

void chain_joystick_get_adc_xy_mapped_int12_value(void) {

}
 8003f48:	4770      	bx	lr

08003f4a <chain_joystick_get_adc_xy_mapped_int8_value>:

void chain_joystick_get_adc_xy_mapped_int8_value(void) {

}
 8003f4a:	4770      	bx	lr

08003f4c <chain_joystick_button_press>:

void chain_joystick_button_press(void) {
 8003f4c:	b510      	push	{r4, lr}
	s_key_status = 0x11; // Sets s_key_status to 0x11, indicating the key press down state
 8003f4e:	4904      	ldr	r1, [pc, #16]	@ (8003f60 <chain_joystick_button_press+0x14>)
 8003f50:	2311      	movs	r3, #17
 8003f52:	700b      	strb	r3, [r1, #0]
	chain_command_complete_return(CHAIN_JOYSTICK_BUTTON_PRESS, &s_key_status,
 8003f54:	2201      	movs	r2, #1
 8003f56:	2040      	movs	r0, #64	@ 0x40
 8003f58:	f7ff fef8 	bl	8003d4c <chain_command_complete_return>
			1); // Sends the command with the current key status
}
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	20000394 	.word	0x20000394

08003f64 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8003f64:	b510      	push	{r4, lr}
	if (GPIO_Pin == BTN1_Pin) {
 8003f66:	2801      	cmp	r0, #1
 8003f68:	d000      	beq.n	8003f6c <HAL_GPIO_EXTI_Falling_Callback+0x8>
		chain_joystick_button_press();
	}
}
 8003f6a:	bd10      	pop	{r4, pc}
		chain_joystick_button_press();
 8003f6c:	f7ff ffee 	bl	8003f4c <chain_joystick_button_press>
}
 8003f70:	e7fb      	b.n	8003f6a <HAL_GPIO_EXTI_Falling_Callback+0x6>

08003f72 <GPIO_init>:
 * 
 * @param None
 * @retval None
 */
void GPIO_init(void)
{
 8003f72:	b500      	push	{lr}
 8003f74:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Structure to hold GPIO initialization parameters
 8003f76:	2214      	movs	r2, #20
 8003f78:	2100      	movs	r1, #0
 8003f7a:	a801      	add	r0, sp, #4
 8003f7c:	f003 fb8a 	bl	8007694 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_8; // Specify the GPIO pin to configure
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Set pin mode to output push-pull
 8003f86:	3bff      	subs	r3, #255	@ 0xff
 8003f88:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No internal pull-up or pull-down
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Set speed to medium frequency
 8003f8a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Initialize GPIO with the specified settings
 8003f8c:	20a0      	movs	r0, #160	@ 0xa0
 8003f8e:	a901      	add	r1, sp, #4
 8003f90:	05c0      	lsls	r0, r0, #23
 8003f92:	f002 fb15 	bl	80065c0 <HAL_GPIO_Init>
}
 8003f96:	b007      	add	sp, #28
 8003f98:	bd00      	pop	{pc}

08003f9a <rgb_send_data>:
 * @param color 32-bit integer representing the RGB color value
 * @retval None
 */
void rgb_send_data(uint32_t color)
{
	for (uint8_t i = 0; i < 24; i++) // Loop through each bit of the 24-bit color value
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e04d      	b.n	800403a <rgb_send_data+0xa0>
		{
			out_bit_high(); // Set the output high if the bit is 1
		}
		else
		{
			out_bit_low(); // Set the output low if the bit is 0
 8003f9e:	22a0      	movs	r2, #160	@ 0xa0
 8003fa0:	05d2      	lsls	r2, r2, #23
 8003fa2:	2180      	movs	r1, #128	@ 0x80
 8003fa4:	0049      	lsls	r1, r1, #1
 8003fa6:	6191      	str	r1, [r2, #24]
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	46c0      	nop			@ (mov r8, r8)
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46c0      	nop			@ (mov r8, r8)
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	46c0      	nop			@ (mov r8, r8)
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46c0      	nop			@ (mov r8, r8)
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	6291      	str	r1, [r2, #40]	@ 0x28
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t i = 0; i < 24; i++) // Loop through each bit of the 24-bit color value
 8004036:	3301      	adds	r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b17      	cmp	r3, #23
 800403c:	d900      	bls.n	8004040 <rgb_send_data+0xa6>
 800403e:	e055      	b.n	80040ec <rgb_send_data+0x152>
		if (color & (1 << (23 - i))) // Check if the current bit is set
 8004040:	2117      	movs	r1, #23
 8004042:	1ac9      	subs	r1, r1, r3
 8004044:	2201      	movs	r2, #1
 8004046:	408a      	lsls	r2, r1
 8004048:	4210      	tst	r0, r2
 800404a:	d100      	bne.n	800404e <rgb_send_data+0xb4>
 800404c:	e7a7      	b.n	8003f9e <rgb_send_data+0x4>
			out_bit_high(); // Set the output high if the bit is 1
 800404e:	22a0      	movs	r2, #160	@ 0xa0
 8004050:	05d2      	lsls	r2, r2, #23
 8004052:	2180      	movs	r1, #128	@ 0x80
 8004054:	0049      	lsls	r1, r1, #1
 8004056:	6191      	str	r1, [r2, #24]
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46c0      	nop			@ (mov r8, r8)
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46c0      	nop			@ (mov r8, r8)
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	46c0      	nop			@ (mov r8, r8)
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	46c0      	nop			@ (mov r8, r8)
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	46c0      	nop			@ (mov r8, r8)
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	6291      	str	r1, [r2, #40]	@ 0x28
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	46c0      	nop			@ (mov r8, r8)
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	46c0      	nop			@ (mov r8, r8)
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46c0      	nop			@ (mov r8, r8)
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	46c0      	nop			@ (mov r8, r8)
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	46c0      	nop			@ (mov r8, r8)
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46c0      	nop			@ (mov r8, r8)
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46c0      	nop			@ (mov r8, r8)
 80040ea:	e7a4      	b.n	8004036 <rgb_send_data+0x9c>
		}
	}
}
 80040ec:	4770      	bx	lr
	...

080040f0 <set_color>:
 * @param color 32-bit integer representing the RGB color value to set
 * @retval None
 */
void set_color(uint8_t num, uint32_t color)
{
	s_color_buf[num] = color; // Update the color buffer at the specified index
 80040f0:	4b02      	ldr	r3, [pc, #8]	@ (80040fc <set_color+0xc>)
 80040f2:	0080      	lsls	r0, r0, #2
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	5019      	str	r1, [r3, r0]
}
 80040f8:	4770      	bx	lr
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	200003c0 	.word	0x200003c0

08004100 <rgb_show>:
 * 
 * @param None
 * @retval None
 */
void rgb_show(void)
{
 8004100:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004102:	b672      	cpsid	i
	__disable_irq(); // Disable interrupts for safe operation
	for (uint8_t i = 0; i < s_led_num; i++)
 8004104:	2400      	movs	r4, #0
 8004106:	e007      	b.n	8004118 <rgb_show+0x18>
	{
		rgb_send_data(s_color_buf[i]); // Send RGB data to each LED
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <rgb_show+0x78>)
 800410a:	00a2      	lsls	r2, r4, #2
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	5898      	ldr	r0, [r3, r2]
 8004110:	f7ff ff43 	bl	8003f9a <rgb_send_data>
	for (uint8_t i = 0; i < s_led_num; i++)
 8004114:	3401      	adds	r4, #1
 8004116:	b2e4      	uxtb	r4, r4
 8004118:	4b18      	ldr	r3, [pc, #96]	@ (800417c <rgb_show+0x7c>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	42a3      	cmp	r3, r4
 800411e:	d8f3      	bhi.n	8004108 <rgb_show+0x8>
  __ASM volatile ("cpsie i" : : : "memory");
 8004120:	b662      	cpsie	i
	}
	__enable_irq(); // Re-enable interrupts after sending data
	restart(); // Refresh the LED display
 8004122:	2300      	movs	r3, #0
 8004124:	e025      	b.n	8004172 <rgb_show+0x72>
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46c0      	nop			@ (mov r8, r8)
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	46c0      	nop			@ (mov r8, r8)
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	46c0      	nop			@ (mov r8, r8)
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	46c0      	nop			@ (mov r8, r8)
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	46c0      	nop			@ (mov r8, r8)
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	3301      	adds	r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b84      	cmp	r3, #132	@ 0x84
 8004174:	d9d7      	bls.n	8004126 <rgb_show+0x26>
}
 8004176:	bd10      	pop	{r4, pc}
 8004178:	200003c0 	.word	0x200003c0
 800417c:	200003c4 	.word	0x200003c4

08004180 <rgb_value_convert>:
 * 
 * @param None
 * @retval uint32_t Combined RGB value as a single 32-bit integer
 */
uint32_t rgb_value_convert(void)
{
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b083      	sub	sp, #12
	uint8_t buf[3] = {0}; // Buffer to hold adjusted RGB values
 8004184:	ab01      	add	r3, sp, #4
 8004186:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <rgb_value_convert+0x60>)
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 3; i++)
 8004190:	2600      	movs	r6, #0
 8004192:	e019      	b.n	80041c8 <rgb_value_convert+0x48>
	{
		buf[i] = s_rgb_color[i] * (g_light / 100.0); // Adjust RGB values based on brightness
 8004194:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <rgb_value_convert+0x64>)
 8004196:	5d9f      	ldrb	r7, [r3, r6]
 8004198:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <rgb_value_convert+0x68>)
 800419a:	7818      	ldrb	r0, [r3, #0]
 800419c:	b2c0      	uxtb	r0, r0
 800419e:	f7ff fb01 	bl	80037a4 <__aeabi_i2d>
 80041a2:	2200      	movs	r2, #0
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <rgb_value_convert+0x6c>)
 80041a6:	f7fe f943 	bl	8002430 <__aeabi_ddiv>
 80041aa:	0004      	movs	r4, r0
 80041ac:	000d      	movs	r5, r1
 80041ae:	0038      	movs	r0, r7
 80041b0:	f7ff faf8 	bl	80037a4 <__aeabi_i2d>
 80041b4:	0022      	movs	r2, r4
 80041b6:	002b      	movs	r3, r5
 80041b8:	f7fe fc54 	bl	8002a64 <__aeabi_dmul>
 80041bc:	f7fe f91a 	bl	80023f4 <__aeabi_d2uiz>
 80041c0:	ab01      	add	r3, sp, #4
 80041c2:	5598      	strb	r0, [r3, r6]
	for (uint8_t i = 0; i < 3; i++)
 80041c4:	3601      	adds	r6, #1
 80041c6:	b2f6      	uxtb	r6, r6
 80041c8:	2e02      	cmp	r6, #2
 80041ca:	d9e3      	bls.n	8004194 <rgb_value_convert+0x14>
	}

	return (uint32_t)buf[2] | ((uint32_t)buf[0] << 8) | ((uint32_t)buf[1] << 16); // Combine RGB values
 80041cc:	ab01      	add	r3, sp, #4
 80041ce:	7898      	ldrb	r0, [r3, #2]
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	0212      	lsls	r2, r2, #8
 80041d4:	4310      	orrs	r0, r2
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	4318      	orrs	r0, r3
}
 80041dc:	b003      	add	sp, #12
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e0:	08007748 	.word	0x08007748
 80041e4:	200003a8 	.word	0x200003a8
 80041e8:	20000488 	.word	0x20000488
 80041ec:	40590000 	.word	0x40590000

080041f0 <rgb_init>:
 * 
 * @param None
 * @retval None
 */
void rgb_init(void)
{
 80041f0:	b510      	push	{r4, lr}
	GPIO_init(); // Initialize GPIO settings
 80041f2:	f7ff febe 	bl	8003f72 <GPIO_init>
	restart(); // Restart the LED display
 80041f6:	2300      	movs	r3, #0
 80041f8:	e025      	b.n	8004246 <rgb_init+0x56>
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	46c0      	nop			@ (mov r8, r8)
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	46c0      	nop			@ (mov r8, r8)
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	46c0      	nop			@ (mov r8, r8)
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	46c0      	nop			@ (mov r8, r8)
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	3301      	adds	r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b84      	cmp	r3, #132	@ 0x84
 8004248:	d9d7      	bls.n	80041fa <rgb_init+0xa>
	s_color_buf = (uint32_t *)calloc(RGB_NUM, sizeof(uint32_t)); // Allocate memory for color buffer
 800424a:	2104      	movs	r1, #4
 800424c:	2001      	movs	r0, #1
 800424e:	f003 f937 	bl	80074c0 <calloc>
 8004252:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <rgb_init+0x70>)
 8004254:	6018      	str	r0, [r3, #0]
	s_led_num = RGB_NUM; // Set the number of LEDs
 8004256:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <rgb_init+0x74>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
}
 800425c:	bd10      	pop	{r4, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	200003c0 	.word	0x200003c0
 8004264:	200003c4 	.word	0x200003c4

08004268 <chain_set_rgb_value>:
 * @param buffer Pointer to the input buffer containing RGB values
 * @param size Length of the input RGB data
 * @retval None
 */
void chain_set_rgb_value(uint8_t *buffer, uint16_t size)
{
 8004268:	b510      	push	{r4, lr}
	if (size == 3) // Check if the size of the buffer is 3
 800426a:	2903      	cmp	r1, #3
 800426c:	d00b      	beq.n	8004286 <chain_set_rgb_value+0x1e>
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
									  s_ret_buf_size); // Return success response
	}
	else
	{
		s_ret_buf_size = 0; // Reset response buffer size for failure
 800426e:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <chain_set_rgb_value+0x54>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
 8004274:	2101      	movs	r1, #1
 8004276:	7019      	strb	r1, [r3, #0]
 8004278:	4911      	ldr	r1, [pc, #68]	@ (80042c0 <chain_set_rgb_value+0x58>)
 800427a:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 800427c:	3201      	adds	r2, #1
 800427e:	2020      	movs	r0, #32
 8004280:	f7ff fd64 	bl	8003d4c <chain_command_complete_return>
									  s_ret_buf_size); // Return failure response
	}
}
 8004284:	bd10      	pop	{r4, pc}
		s_rgb_color[0] = buffer[0]; // Set red value
 8004286:	7802      	ldrb	r2, [r0, #0]
 8004288:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <chain_set_rgb_value+0x5c>)
 800428a:	701a      	strb	r2, [r3, #0]
		s_rgb_color[1] = buffer[1]; // Set green value
 800428c:	7842      	ldrb	r2, [r0, #1]
 800428e:	705a      	strb	r2, [r3, #1]
		s_rgb_color[2] = buffer[2]; // Set blue value
 8004290:	7882      	ldrb	r2, [r0, #2]
 8004292:	709a      	strb	r2, [r3, #2]
		set_color(0, rgb_value_convert()); // Set the color based on converted RGB values
 8004294:	f7ff ff74 	bl	8004180 <rgb_value_convert>
 8004298:	0001      	movs	r1, r0
 800429a:	2000      	movs	r0, #0
 800429c:	f7ff ff28 	bl	80040f0 <set_color>
		rgb_show(); // Display the updated RGB values
 80042a0:	f7ff ff2e 	bl	8004100 <rgb_show>
		s_ret_buf_size = 0; // Reset response buffer size
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <chain_set_rgb_value+0x54>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
		s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS; // Indicate success
 80042aa:	3201      	adds	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	4904      	ldr	r1, [pc, #16]	@ (80042c0 <chain_set_rgb_value+0x58>)
 80042b0:	700a      	strb	r2, [r1, #0]
		chain_command_complete_return(CHAIN_SET_RGB_VALUE, s_ret_buf,
 80042b2:	2020      	movs	r0, #32
 80042b4:	f7ff fd4a 	bl	8003d4c <chain_command_complete_return>
 80042b8:	e7e4      	b.n	8004284 <chain_set_rgb_value+0x1c>
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	200003ab 	.word	0x200003ab
 80042c0:	200003ac 	.word	0x200003ac
 80042c4:	200003a8 	.word	0x200003a8

080042c8 <chain_get_rgb_value>:
 * 
 * @param None
 * @retval None
 */
void chain_get_rgb_value(void)
{
 80042c8:	b510      	push	{r4, lr}
    // Call the command complete function to return the current RGB color
    chain_command_complete_return(CHAIN_GET_RGB_VALUE, s_rgb_color,
 80042ca:	4903      	ldr	r1, [pc, #12]	@ (80042d8 <chain_get_rgb_value+0x10>)
 80042cc:	2203      	movs	r2, #3
 80042ce:	2021      	movs	r0, #33	@ 0x21
 80042d0:	f7ff fd3c 	bl	8003d4c <chain_command_complete_return>
                                  sizeof(s_rgb_color));
}
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	200003a8 	.word	0x200003a8

080042dc <chain_set_light_value>:
 * 
 * @param value The desired brightness level (0-100).
 * @retval None
 */
void chain_set_light_value(uint8_t value)
{
 80042dc:	b510      	push	{r4, lr}
    // Check if the brightness value is within valid range
    if (g_light <= 100)
 80042de:	4b15      	ldr	r3, [pc, #84]	@ (8004334 <chain_set_light_value+0x58>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b64      	cmp	r3, #100	@ 0x64
 80042e6:	d818      	bhi.n	800431a <chain_set_light_value+0x3e>
    {
        g_light = value; // Set the global brightness value
 80042e8:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <chain_set_light_value+0x58>)
 80042ea:	7018      	strb	r0, [r3, #0]
        set_rgb_light(g_light); // Update the RGB light
 80042ec:	7818      	ldrb	r0, [r3, #0]
 80042ee:	b2c0      	uxtb	r0, r0
 80042f0:	f001 f876 	bl	80053e0 <set_rgb_light>
        set_color(0, rgb_value_convert()); // Set the RGB color based on the current value
 80042f4:	f7ff ff44 	bl	8004180 <rgb_value_convert>
 80042f8:	0001      	movs	r1, r0
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7ff fef8 	bl	80040f0 <set_color>
        rgb_show(); // Display the RGB light with updated settings
 8004300:	f7ff fefe 	bl	8004100 <rgb_show>
        s_ret_buf_size = 0; // Reset response buffer size
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <chain_set_light_value+0x5c>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_SUCCESS; // Indicate success
 800430a:	3201      	adds	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	490b      	ldr	r1, [pc, #44]	@ (800433c <chain_set_light_value+0x60>)
 8004310:	700a      	strb	r2, [r1, #0]
        // Return the command completion response
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
 8004312:	2022      	movs	r0, #34	@ 0x22
 8004314:	f7ff fd1a 	bl	8003d4c <chain_command_complete_return>
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
        // Return the command completion response
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
                                      s_ret_buf_size);
    }
}
 8004318:	bd10      	pop	{r4, pc}
        s_ret_buf_size = 0; // Reset response buffer size for failure
 800431a:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <chain_set_light_value+0x5c>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
        s_ret_buf[s_ret_buf_size++] = RGB_OPERATION_FAIL; // Indicate failure
 8004320:	2101      	movs	r1, #1
 8004322:	7019      	strb	r1, [r3, #0]
 8004324:	4905      	ldr	r1, [pc, #20]	@ (800433c <chain_set_light_value+0x60>)
 8004326:	700a      	strb	r2, [r1, #0]
        chain_command_complete_return(CHAIN_SET_RGB_LIGHT, s_ret_buf,
 8004328:	3201      	adds	r2, #1
 800432a:	2022      	movs	r0, #34	@ 0x22
 800432c:	f7ff fd0e 	bl	8003d4c <chain_command_complete_return>
}
 8004330:	e7f2      	b.n	8004318 <chain_set_light_value+0x3c>
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	20000488 	.word	0x20000488
 8004338:	200003ab 	.word	0x200003ab
 800433c:	200003ac 	.word	0x200003ac

08004340 <chain_get_light_value>:
 * 
 * @param None
 * @retval None
 */
void chain_get_light_value(void)
{
 8004340:	b510      	push	{r4, lr}
    s_ret_buf_size = 0; // Reset response buffer size
 8004342:	4b06      	ldr	r3, [pc, #24]	@ (800435c <chain_get_light_value+0x1c>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
    s_ret_buf[s_ret_buf_size++] = g_light; // Add the current brightness value
 8004348:	3201      	adds	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <chain_get_light_value+0x20>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4904      	ldr	r1, [pc, #16]	@ (8004364 <chain_get_light_value+0x24>)
 8004352:	700b      	strb	r3, [r1, #0]
    // Return the command completion response
    chain_command_complete_return(CHAIN_GET_RGB_LIGHT, s_ret_buf,
 8004354:	2023      	movs	r0, #35	@ 0x23
 8004356:	f7ff fcf9 	bl	8003d4c <chain_command_complete_return>
                                  s_ret_buf_size);
}
 800435a:	bd10      	pop	{r4, pc}
 800435c:	200003ab 	.word	0x200003ab
 8004360:	20000488 	.word	0x20000488
 8004364:	200003ac 	.word	0x200003ac

08004368 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004368:	b500      	push	{lr}
 800436a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800436c:	220c      	movs	r2, #12
 800436e:	2100      	movs	r1, #0
 8004370:	a801      	add	r0, sp, #4
 8004372:	f003 f98f 	bl	8007694 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004376:	481f      	ldr	r0, [pc, #124]	@ (80043f4 <MX_ADC1_Init+0x8c>)
 8004378:	4b1f      	ldr	r3, [pc, #124]	@ (80043f8 <MX_ADC1_Init+0x90>)
 800437a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	05db      	lsls	r3, r3, #23
 8004380:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004382:	2300      	movs	r3, #0
 8004384:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004386:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8004388:	2280      	movs	r2, #128	@ 0x80
 800438a:	0612      	lsls	r2, r2, #24
 800438c:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800438e:	2204      	movs	r2, #4
 8004390:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004392:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004394:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004396:	3a03      	subs	r2, #3
 8004398:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 800439a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800439c:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800439e:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043a0:	212c      	movs	r1, #44	@ 0x2c
 80043a2:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043a4:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80043a6:	3206      	adds	r2, #6
 80043a8:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80043aa:	3235      	adds	r2, #53	@ 0x35
 80043ac:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80043ae:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043b0:	f001 f8a2 	bl	80054f8 <HAL_ADC_Init>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d113      	bne.n	80043e0 <MX_ADC1_Init+0x78>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80043b8:	4b10      	ldr	r3, [pc, #64]	@ (80043fc <MX_ADC1_Init+0x94>)
 80043ba:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80043bc:	2301      	movs	r3, #1
 80043be:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043c0:	480c      	ldr	r0, [pc, #48]	@ (80043f4 <MX_ADC1_Init+0x8c>)
 80043c2:	a901      	add	r1, sp, #4
 80043c4:	f001 fa0e 	bl	80057e4 <HAL_ADC_ConfigChannel>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d10c      	bne.n	80043e6 <MX_ADC1_Init+0x7e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <MX_ADC1_Init+0x98>)
 80043ce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043d0:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <MX_ADC1_Init+0x8c>)
 80043d2:	a901      	add	r1, sp, #4
 80043d4:	f001 fa06 	bl	80057e4 <HAL_ADC_ConfigChannel>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d107      	bne.n	80043ec <MX_ADC1_Init+0x84>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043dc:	b005      	add	sp, #20
 80043de:	bd00      	pop	{pc}
    Error_Handler();
 80043e0:	f000 f928 	bl	8004634 <Error_Handler>
 80043e4:	e7e8      	b.n	80043b8 <MX_ADC1_Init+0x50>
    Error_Handler();
 80043e6:	f000 f925 	bl	8004634 <Error_Handler>
 80043ea:	e7ef      	b.n	80043cc <MX_ADC1_Init+0x64>
    Error_Handler();
 80043ec:	f000 f922 	bl	8004634 <Error_Handler>
}
 80043f0:	e7f4      	b.n	80043dc <MX_ADC1_Init+0x74>
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	20000424 	.word	0x20000424
 80043f8:	40012400 	.word	0x40012400
 80043fc:	18000040 	.word	0x18000040
 8004400:	1c000080 	.word	0x1c000080

08004404 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004404:	b510      	push	{r4, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440a:	2214      	movs	r2, #20
 800440c:	2100      	movs	r1, #0
 800440e:	a803      	add	r0, sp, #12
 8004410:	f003 f940 	bl	8007694 <memset>
  if(adcHandle->Instance==ADC1)
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_ADC_MspInit+0x94>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800441c:	b008      	add	sp, #32
 800441e:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8004420:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <HAL_ADC_MspInit+0x98>)
 8004422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004424:	2180      	movs	r1, #128	@ 0x80
 8004426:	0349      	lsls	r1, r1, #13
 8004428:	430a      	orrs	r2, r1
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40
 800442c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442e:	400a      	ands	r2, r1
 8004430:	9201      	str	r2, [sp, #4]
 8004432:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004434:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004436:	2201      	movs	r2, #1
 8004438:	4311      	orrs	r1, r2
 800443a:	6359      	str	r1, [r3, #52]	@ 0x34
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	401a      	ands	r2, r3
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VR1_YOUT_Pin|VR2_XOUT_Pin;
 8004444:	23c0      	movs	r3, #192	@ 0xc0
 8004446:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004448:	3bbd      	subs	r3, #189	@ 0xbd
 800444a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	20a0      	movs	r0, #160	@ 0xa0
 800444e:	a903      	add	r1, sp, #12
 8004450:	05c0      	lsls	r0, r0, #23
 8004452:	f002 f8b5 	bl	80065c0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8004456:	4812      	ldr	r0, [pc, #72]	@ (80044a0 <HAL_ADC_MspInit+0x9c>)
 8004458:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <HAL_ADC_MspInit+0xa0>)
 800445a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800445c:	2305      	movs	r3, #5
 800445e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004460:	2300      	movs	r3, #0
 8004462:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004464:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004466:	3380      	adds	r3, #128	@ 0x80
 8004468:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800446a:	3381      	adds	r3, #129	@ 0x81
 800446c:	33ff      	adds	r3, #255	@ 0xff
 800446e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004476:	2320      	movs	r3, #32
 8004478:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	015b      	lsls	r3, r3, #5
 800447e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004480:	f001 fdf0 	bl	8006064 <HAL_DMA_Init>
 8004484:	2800      	cmp	r0, #0
 8004486:	d103      	bne.n	8004490 <HAL_ADC_MspInit+0x8c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_ADC_MspInit+0x9c>)
 800448a:	6523      	str	r3, [r4, #80]	@ 0x50
 800448c:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800448e:	e7c5      	b.n	800441c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8004490:	f000 f8d0 	bl	8004634 <Error_Handler>
 8004494:	e7f8      	b.n	8004488 <HAL_ADC_MspInit+0x84>
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	40012400 	.word	0x40012400
 800449c:	40021000 	.word	0x40021000
 80044a0:	200003c8 	.word	0x200003c8
 80044a4:	40020058 	.word	0x40020058

080044a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80044a8:	b500      	push	{lr}
 80044aa:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044ac:	4a14      	ldr	r2, [pc, #80]	@ (8004500 <MX_DMA_Init+0x58>)
 80044ae:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80044b0:	2301      	movs	r3, #1
 80044b2:	4319      	orrs	r1, r3
 80044b4:	6391      	str	r1, [r2, #56]	@ 0x38
 80044b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044b8:	4013      	ands	r3, r2
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044be:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <MX_DMA_Init+0x5c>)
 80044c0:	22c2      	movs	r2, #194	@ 0xc2
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	5898      	ldr	r0, [r3, r2]
 80044c6:	4910      	ldr	r1, [pc, #64]	@ (8004508 <MX_DMA_Init+0x60>)
 80044c8:	4008      	ands	r0, r1
 80044ca:	2180      	movs	r1, #128	@ 0x80
 80044cc:	01c9      	lsls	r1, r1, #7
 80044ce:	4301      	orrs	r1, r0
 80044d0:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	2180      	movs	r1, #128	@ 0x80
 80044d4:	0089      	lsls	r1, r1, #2
 80044d6:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d8:	5898      	ldr	r0, [r3, r2]
 80044da:	490c      	ldr	r1, [pc, #48]	@ (800450c <MX_DMA_Init+0x64>)
 80044dc:	4008      	ands	r0, r1
 80044de:	2180      	movs	r1, #128	@ 0x80
 80044e0:	03c9      	lsls	r1, r1, #15
 80044e2:	4301      	orrs	r1, r0
 80044e4:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	32f8      	adds	r2, #248	@ 0xf8
 80044e8:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1);
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 1, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2101      	movs	r1, #1
 80044ee:	200b      	movs	r0, #11
 80044f0:	f001 fd50 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80044f4:	200b      	movs	r0, #11
 80044f6:	f001 fd51 	bl	8005f9c <HAL_NVIC_EnableIRQ>

}
 80044fa:	b003      	add	sp, #12
 80044fc:	bd00      	pop	{pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	40021000 	.word	0x40021000
 8004504:	e000e100 	.word	0xe000e100
 8004508:	ffff00ff 	.word	0xffff00ff
 800450c:	ff00ffff 	.word	0xff00ffff

08004510 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004510:	b500      	push	{lr}
 8004512:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004514:	2214      	movs	r2, #20
 8004516:	2100      	movs	r1, #0
 8004518:	a803      	add	r0, sp, #12
 800451a:	f003 f8bb 	bl	8007694 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <MX_GPIO_Init+0x58>)
 8004520:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004522:	2201      	movs	r2, #1
 8004524:	4311      	orrs	r1, r2
 8004526:	6359      	str	r1, [r3, #52]	@ 0x34
 8004528:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800452a:	4011      	ands	r1, r2
 800452c:	9101      	str	r1, [sp, #4]
 800452e:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004530:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004532:	2102      	movs	r1, #2
 8004534:	4308      	orrs	r0, r1
 8004536:	6358      	str	r0, [r3, #52]	@ 0x34
 8004538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453a:	4019      	ands	r1, r3
 800453c:	9102      	str	r1, [sp, #8]
 800453e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8004540:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004542:	2384      	movs	r3, #132	@ 0x84
 8004544:	039b      	lsls	r3, r3, #14
 8004546:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004548:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800454a:	a903      	add	r1, sp, #12
 800454c:	4807      	ldr	r0, [pc, #28]	@ (800456c <MX_GPIO_Init+0x5c>)
 800454e:	f002 f837 	bl	80065c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8004552:	2200      	movs	r2, #0
 8004554:	2101      	movs	r1, #1
 8004556:	2005      	movs	r0, #5
 8004558:	f001 fd1c 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800455c:	2005      	movs	r0, #5
 800455e:	f001 fd1d 	bl	8005f9c <HAL_NVIC_EnableIRQ>

}
 8004562:	b009      	add	sp, #36	@ 0x24
 8004564:	bd00      	pop	{pc}
 8004566:	46c0      	nop			@ (mov r8, r8)
 8004568:	40021000 	.word	0x40021000
 800456c:	50000400 	.word	0x50000400

08004570 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <MX_IWDG_Init+0x30>)
 8004572:	4a0c      	ldr	r2, [pc, #48]	@ (80045a4 <MX_IWDG_Init+0x34>)
 8004574:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8004576:	4a0c      	ldr	r2, [pc, #48]	@ (80045a8 <MX_IWDG_Init+0x38>)
 8004578:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800457a:	2202      	movs	r2, #2
 800457c:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 800457e:	4a0b      	ldr	r2, [pc, #44]	@ (80045ac <MX_IWDG_Init+0x3c>)
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	e002      	b.n	800458a <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8004584:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_16);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 8004586:	2b01      	cmp	r3, #1
 8004588:	d005      	beq.n	8004596 <MX_IWDG_Init+0x26>
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <MX_IWDG_Init+0x30>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	075b      	lsls	r3, r3, #29
 8004590:	d1f8      	bne.n	8004584 <MX_IWDG_Init+0x14>
 8004592:	2301      	movs	r3, #1
 8004594:	e7f7      	b.n	8004586 <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8004596:	4b02      	ldr	r3, [pc, #8]	@ (80045a0 <MX_IWDG_Init+0x30>)
 8004598:	4a05      	ldr	r2, [pc, #20]	@ (80045b0 <MX_IWDG_Init+0x40>)
 800459a:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800459c:	4770      	bx	lr
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	40003000 	.word	0x40003000
 80045a4:	0000cccc 	.word	0x0000cccc
 80045a8:	00005555 	.word	0x00005555
 80045ac:	00000fff 	.word	0x00000fff
 80045b0:	0000aaaa 	.word	0x0000aaaa

080045b4 <iap_set>:
/**
 * @brief Set the Interrupt Vector Table for the application in SRAM.
 * @param None
 * @retval None
 */
void iap_set(void) {
 80045b4:	b082      	sub	sp, #8
  uint8_t i; // Loop index
  uint32_t *pVecTab =
 80045b6:	2280      	movs	r2, #128	@ 0x80
 80045b8:	0592      	lsls	r2, r2, #22
      (uint32_t *)(0x20000000); // Pointer to the vector table in SRAM

  // Copy the interrupt vector table from the application address to SRAM
  for (i = 0; i < 48; i++) {
 80045ba:	2300      	movs	r3, #0
 80045bc:	e007      	b.n	80045ce <iap_set+0x1a>
    // Copy each vector entry to the SRAM vector table
    *(pVecTab++) = *(__IO uint32_t *)(APPLICATION_ADDRESS + (i << 2));
 80045be:	0099      	lsls	r1, r3, #2
 80045c0:	480c      	ldr	r0, [pc, #48]	@ (80045f4 <iap_set+0x40>)
 80045c2:	4684      	mov	ip, r0
 80045c4:	4461      	add	r1, ip
 80045c6:	6809      	ldr	r1, [r1, #0]
 80045c8:	c202      	stmia	r2!, {r1}
  for (i = 0; i < 48; i++) {
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80045d0:	d9f5      	bls.n	80045be <iap_set+0xa>
  }

  // Enable the SYSCFG peripheral clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d2:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <iap_set+0x44>)
 80045d4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80045d6:	2301      	movs	r3, #1
 80045d8:	4319      	orrs	r1, r3
 80045da:	6411      	str	r1, [r2, #64]	@ 0x40
 80045dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045de:	4013      	ands	r3, r2
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	9b01      	ldr	r3, [sp, #4]

  // Remap the memory to use SRAM for the vector table
  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 80045e4:	4a05      	ldr	r2, [pc, #20]	@ (80045fc <iap_set+0x48>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	2103      	movs	r1, #3
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6013      	str	r3, [r2, #0]
}
 80045ee:	b002      	add	sp, #8
 80045f0:	4770      	bx	lr
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	08002000 	.word	0x08002000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010000 	.word	0x40010000

08004600 <chain_init>:
/**
 * @brief Initialize the chain device settings.
 * @param None
 * @retval None
 */
void chain_init(void) {
 8004600:	b510      	push	{r4, lr}
  // Get the version of the bootloader
  g_bootloader_version = get_bootloader_version();
 8004602:	f000 ff0f 	bl	8005424 <get_bootloader_version>
 8004606:	4b09      	ldr	r3, [pc, #36]	@ (800462c <chain_init+0x2c>)
 8004608:	7018      	strb	r0, [r3, #0]

  // Check if the RGB light setting is set to maximum (0xFF)
  if (get_rgb_light() == 0xFF) {
 800460a:	f000 fee3 	bl	80053d4 <get_rgb_light>
 800460e:	28ff      	cmp	r0, #255	@ 0xff
 8004610:	d004      	beq.n	800461c <chain_init+0x1c>
    // Set the light to a base color if it is maximum
    g_light = RGB_LIGHT_BASE;
    set_rgb_light(g_light);
  } else {
    // Otherwise, get the current RGB light setting
    g_light = get_rgb_light();
 8004612:	f000 fedf 	bl	80053d4 <get_rgb_light>
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <chain_init+0x30>)
 8004618:	7018      	strb	r0, [r3, #0]
  }
}
 800461a:	bd10      	pop	{r4, pc}
    g_light = RGB_LIGHT_BASE;
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <chain_init+0x30>)
 800461e:	220a      	movs	r2, #10
 8004620:	701a      	strb	r2, [r3, #0]
    set_rgb_light(g_light);
 8004622:	7818      	ldrb	r0, [r3, #0]
 8004624:	b2c0      	uxtb	r0, r0
 8004626:	f000 fedb 	bl	80053e0 <set_rgb_light>
 800462a:	e7f6      	b.n	800461a <chain_init+0x1a>
 800462c:	20000489 	.word	0x20000489
 8004630:	20000488 	.word	0x20000488

08004634 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004634:	b672      	cpsid	i
  */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8004636:	e7fe      	b.n	8004636 <Error_Handler+0x2>

08004638 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004638:	b500      	push	{lr}
 800463a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800463c:	2238      	movs	r2, #56	@ 0x38
 800463e:	2100      	movs	r1, #0
 8004640:	a804      	add	r0, sp, #16
 8004642:	f003 f827 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004646:	2210      	movs	r2, #16
 8004648:	2100      	movs	r1, #0
 800464a:	4668      	mov	r0, sp
 800464c:	f003 f822 	bl	8007694 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004650:	2080      	movs	r0, #128	@ 0x80
 8004652:	0080      	lsls	r0, r0, #2
 8004654:	f002 f88e 	bl	8006774 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType =
 8004658:	230a      	movs	r3, #10
 800465a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800465c:	33f6      	adds	r3, #246	@ 0xf6
 800465e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004660:	2300      	movs	r3, #0
 8004662:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004664:	2240      	movs	r2, #64	@ 0x40
 8004666:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004668:	3a3f      	subs	r2, #63	@ 0x3f
 800466a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800466c:	3201      	adds	r2, #1
 800466e:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004670:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004672:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004674:	3308      	adds	r3, #8
 8004676:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800467e:	23c0      	movs	r3, #192	@ 0xc0
 8004680:	04db      	lsls	r3, r3, #19
 8004682:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	059b      	lsls	r3, r3, #22
 8004688:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800468a:	a804      	add	r0, sp, #16
 800468c:	f002 f89c 	bl	80067c8 <HAL_RCC_OscConfig>
 8004690:	2800      	cmp	r0, #0
 8004692:	d10e      	bne.n	80046b2 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType =
 8004694:	2307      	movs	r3, #7
 8004696:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004698:	3b05      	subs	r3, #5
 800469a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800469c:	2300      	movs	r3, #0
 800469e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046a0:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80046a2:	2102      	movs	r1, #2
 80046a4:	4668      	mov	r0, sp
 80046a6:	f002 fb47 	bl	8006d38 <HAL_RCC_ClockConfig>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d103      	bne.n	80046b6 <SystemClock_Config+0x7e>
}
 80046ae:	b013      	add	sp, #76	@ 0x4c
 80046b0:	bd00      	pop	{pc}
    Error_Handler();
 80046b2:	f7ff ffbf 	bl	8004634 <Error_Handler>
    Error_Handler();
 80046b6:	f7ff ffbd 	bl	8004634 <Error_Handler>
	...

080046bc <main>:
int main(void) {
 80046bc:	b510      	push	{r4, lr}
  iap_set();
 80046be:	f7ff ff79 	bl	80045b4 <iap_set>
  chain_init();
 80046c2:	f7ff ff9d 	bl	8004600 <chain_init>
  HAL_Init();
 80046c6:	f000 fedf 	bl	8005488 <HAL_Init>
  SystemClock_Config();
 80046ca:	f7ff ffb5 	bl	8004638 <SystemClock_Config>
  MX_GPIO_Init();
 80046ce:	f7ff ff1f 	bl	8004510 <MX_GPIO_Init>
  MX_DMA_Init();
 80046d2:	f7ff fee9 	bl	80044a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80046d6:	f000 fb8d 	bl	8004df4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80046da:	f000 fcef 	bl	80050bc <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80046de:	f7ff ff47 	bl	8004570 <MX_IWDG_Init>
  MX_TIM14_Init();
 80046e2:	f000 faaf 	bl	8004c44 <MX_TIM14_Init>
  MX_TIM16_Init();
 80046e6:	f000 fae9 	bl	8004cbc <MX_TIM16_Init>
  MX_ADC1_Init();
 80046ea:	f7ff fe3d 	bl	8004368 <MX_ADC1_Init>
  rgb_init();
 80046ee:	f7ff fd7f 	bl	80041f0 <rgb_init>
  joystick_init();
 80046f2:	f7ff fc03 	bl	8003efc <joystick_init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80046f6:	4b32      	ldr	r3, [pc, #200]	@ (80047c0 <main+0x104>)
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	e019      	b.n	800473c <main+0x80>
      switch (g_cmd_buf[0]) {
 8004708:	2bfb      	cmp	r3, #251	@ 0xfb
 800470a:	d055      	beq.n	80047b8 <main+0xfc>
 800470c:	d907      	bls.n	800471e <main+0x62>
 800470e:	2bff      	cmp	r3, #255	@ 0xff
 8004710:	d10e      	bne.n	8004730 <main+0x74>
        chain_iap_update_handle(g_cmd_buf[1]);
 8004712:	4b2c      	ldr	r3, [pc, #176]	@ (80047c4 <main+0x108>)
 8004714:	7858      	ldrb	r0, [r3, #1]
 8004716:	b2c0      	uxtb	r0, r0
 8004718:	f7ff fb80 	bl	8003e1c <chain_iap_update_handle>
        break;
 800471c:	e008      	b.n	8004730 <main+0x74>
      switch (g_cmd_buf[0]) {
 800471e:	2bf9      	cmp	r3, #249	@ 0xf9
 8004720:	d047      	beq.n	80047b2 <main+0xf6>
 8004722:	2bfa      	cmp	r3, #250	@ 0xfa
 8004724:	d104      	bne.n	8004730 <main+0x74>
        chain_get_firmware_version_handle();
 8004726:	f7ff fb65 	bl	8003df4 <chain_get_firmware_version_handle>
        break;
 800472a:	e001      	b.n	8004730 <main+0x74>
        chain_joystick_get_12adc();
 800472c:	f7ff fbf6 	bl	8003f1c <chain_joystick_get_12adc>
      g_cmd_status = CMD_SPACE_IDLE_STATUS;
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <main+0x10c>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	4b25      	ldr	r3, [pc, #148]	@ (80047cc <main+0x110>)
 8004738:	4a25      	ldr	r2, [pc, #148]	@ (80047d0 <main+0x114>)
 800473a:	601a      	str	r2, [r3, #0]
    if (g_cmd_status == CMD_SPACE_BUSY_STATUS) {
 800473c:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <main+0x10c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d1f8      	bne.n	8004736 <main+0x7a>
      switch (g_cmd_buf[0]) {
 8004744:	4b1f      	ldr	r3, [pc, #124]	@ (80047c4 <main+0x108>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b35      	cmp	r3, #53	@ 0x35
 800474c:	d8dc      	bhi.n	8004708 <main+0x4c>
 800474e:	2b20      	cmp	r3, #32
 8004750:	d3ee      	bcc.n	8004730 <main+0x74>
 8004752:	3b20      	subs	r3, #32
 8004754:	b2da      	uxtb	r2, r3
 8004756:	2a15      	cmp	r2, #21
 8004758:	d8ea      	bhi.n	8004730 <main+0x74>
 800475a:	0093      	lsls	r3, r2, #2
 800475c:	4a1d      	ldr	r2, [pc, #116]	@ (80047d4 <main+0x118>)
 800475e:	58d3      	ldr	r3, [r2, r3]
 8004760:	469f      	mov	pc, r3
        chain_joystick_get_8adc();
 8004762:	f7ff fbe5 	bl	8003f30 <chain_joystick_get_8adc>
        break;
 8004766:	e7e3      	b.n	8004730 <main+0x74>
        chain_joystick_get_adc_xy_mapped_range();
 8004768:	f7ff fbec 	bl	8003f44 <chain_joystick_get_adc_xy_mapped_range>
        break;
 800476c:	e7e0      	b.n	8004730 <main+0x74>
        chain_joystick_set_adc_xy_mapped_range((uint8_t *)(g_cmd_buf + 1),
 800476e:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <main+0x11c>)
 8004770:	7819      	ldrb	r1, [r3, #0]
 8004772:	3901      	subs	r1, #1
 8004774:	b289      	uxth	r1, r1
 8004776:	4819      	ldr	r0, [pc, #100]	@ (80047dc <main+0x120>)
 8004778:	f7ff fbe5 	bl	8003f46 <chain_joystick_set_adc_xy_mapped_range>
        break;
 800477c:	e7d8      	b.n	8004730 <main+0x74>
        chain_joystick_get_adc_xy_mapped_int12_value();
 800477e:	f7ff fbe3 	bl	8003f48 <chain_joystick_get_adc_xy_mapped_int12_value>
        break;
 8004782:	e7d5      	b.n	8004730 <main+0x74>
        chain_joystick_get_adc_xy_mapped_int8_value();
 8004784:	f7ff fbe1 	bl	8003f4a <chain_joystick_get_adc_xy_mapped_int8_value>
        break;
 8004788:	e7d2      	b.n	8004730 <main+0x74>
        chain_set_rgb_value((uint8_t *)(g_cmd_buf + 1), (g_cmd_size - 1));
 800478a:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <main+0x11c>)
 800478c:	7819      	ldrb	r1, [r3, #0]
 800478e:	3901      	subs	r1, #1
 8004790:	b289      	uxth	r1, r1
 8004792:	4812      	ldr	r0, [pc, #72]	@ (80047dc <main+0x120>)
 8004794:	f7ff fd68 	bl	8004268 <chain_set_rgb_value>
        break;
 8004798:	e7ca      	b.n	8004730 <main+0x74>
        chain_get_rgb_value();
 800479a:	f7ff fd95 	bl	80042c8 <chain_get_rgb_value>
        break;
 800479e:	e7c7      	b.n	8004730 <main+0x74>
        chain_set_light_value(g_cmd_buf[1]);
 80047a0:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <main+0x108>)
 80047a2:	7858      	ldrb	r0, [r3, #1]
 80047a4:	b2c0      	uxtb	r0, r0
 80047a6:	f7ff fd99 	bl	80042dc <chain_set_light_value>
        break;
 80047aa:	e7c1      	b.n	8004730 <main+0x74>
        chain_get_light_value();
 80047ac:	f7ff fdc8 	bl	8004340 <chain_get_light_value>
        break;
 80047b0:	e7be      	b.n	8004730 <main+0x74>
        chain_get_bootloader_version_handle();
 80047b2:	f7ff fb15 	bl	8003de0 <chain_get_bootloader_version_handle>
        break;
 80047b6:	e7bb      	b.n	8004730 <main+0x74>
        chain_get_device_type_handle();
 80047b8:	f7ff fb26 	bl	8003e08 <chain_get_device_type_handle>
        break;
 80047bc:	e7b8      	b.n	8004730 <main+0x74>
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	40002000 	.word	0x40002000
 80047c4:	2000048c 	.word	0x2000048c
 80047c8:	2000048a 	.word	0x2000048a
 80047cc:	40003000 	.word	0x40003000
 80047d0:	0000aaaa 	.word	0x0000aaaa
 80047d4:	0800778c 	.word	0x0800778c
 80047d8:	2000048b 	.word	0x2000048b
 80047dc:	2000048d 	.word	0x2000048d

080047e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e0:	b500      	push	{lr}
 80047e2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e4:	4b0d      	ldr	r3, [pc, #52]	@ (800481c <HAL_MspInit+0x3c>)
 80047e6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80047e8:	2201      	movs	r2, #1
 80047ea:	4311      	orrs	r1, r2
 80047ec:	6419      	str	r1, [r3, #64]	@ 0x40
 80047ee:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80047f0:	400a      	ands	r2, r1
 80047f2:	9200      	str	r2, [sp, #0]
 80047f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f8:	2180      	movs	r1, #128	@ 0x80
 80047fa:	0549      	lsls	r1, r1, #21
 80047fc:	430a      	orrs	r2, r1
 80047fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004802:	400b      	ands	r3, r1
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2101      	movs	r1, #1
 800480c:	2003      	movs	r0, #3
 800480e:	f001 fbc1 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004812:	2003      	movs	r0, #3
 8004814:	f001 fbc2 	bl	8005f9c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004818:	b003      	add	sp, #12
 800481a:	bd00      	pop	{pc}
 800481c:	40021000 	.word	0x40021000

08004820 <uart_in_data_pack_type>:
 * @param size Length of the data in the buffer.
 * @retval The type of data packet as defined by various enumeration constants,
 *         or an error code if the packet check fails.
 */
uint8_t uart_in_data_pack_type(uint8_t *buffer, uint16_t size)
{
 8004820:	b510      	push	{r4, lr}
 8004822:	0004      	movs	r4, r0
	// Check if the packet is valid
	if (pack_check(buffer, size) == CHECK_PASS)
 8004824:	f7ff f9f5 	bl	8003c12 <pack_check>
 8004828:	2801      	cmp	r0, #1
 800482a:	d001      	beq.n	8004830 <uart_in_data_pack_type+0x10>
		else if (buffer[4] == 1)
		{
			return CHAIN_HANDLE_DATA_PACK; // Packet type: Chain Handle
		}
	}
	return ERROR_DATA_PACK; // Return error code for invalid packet
 800482c:	2000      	movs	r0, #0
}
 800482e:	bd10      	pop	{r4, pc}
		if (buffer[5] == CHAIN_ENUM)
 8004830:	7963      	ldrb	r3, [r4, #5]
 8004832:	2bfe      	cmp	r3, #254	@ 0xfe
 8004834:	d006      	beq.n	8004844 <uart_in_data_pack_type+0x24>
		else if (buffer[5] == CHAIN_HEARTBEAT)
 8004836:	2bfd      	cmp	r3, #253	@ 0xfd
 8004838:	d0f9      	beq.n	800482e <uart_in_data_pack_type+0xe>
		else if (buffer[4] != 1)
 800483a:	7923      	ldrb	r3, [r4, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d003      	beq.n	8004848 <uart_in_data_pack_type+0x28>
			return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
 8004840:	3003      	adds	r0, #3
 8004842:	e7f4      	b.n	800482e <uart_in_data_pack_type+0xe>
			return CHAIN_ENUM_DATA_PACK; // Packet type: Chain Enum
 8004844:	2002      	movs	r0, #2
 8004846:	e7f2      	b.n	800482e <uart_in_data_pack_type+0xe>
			return CHAIN_HANDLE_DATA_PACK; // Packet type: Chain Handle
 8004848:	2005      	movs	r0, #5
 800484a:	e7f0      	b.n	800482e <uart_in_data_pack_type+0xe>

0800484c <uart_out_data_pack_type>:
 * @param size Length of the data in the buffer.
 * @retval The type of data packet as defined by various enumeration constants,
 *         or an error code if the packet check fails.
 */
uint8_t uart_out_data_pack_type(uint8_t *buffer, uint16_t size)
{
 800484c:	b510      	push	{r4, lr}
 800484e:	0004      	movs	r4, r0
	// Check if the packet is valid
	if (pack_check(buffer, size) == CHECK_PASS)
 8004850:	f7ff f9df 	bl	8003c12 <pack_check>
 8004854:	2801      	cmp	r0, #1
 8004856:	d001      	beq.n	800485c <uart_out_data_pack_type+0x10>
		else
		{
			return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
		}
	}
	return ERROR_DATA_PACK; // Return error code for invalid packet
 8004858:	2000      	movs	r0, #0
}
 800485a:	bd10      	pop	{r4, pc}
		if (buffer[5] == CHAIN_HEARTBEAT)
 800485c:	7963      	ldrb	r3, [r4, #5]
 800485e:	2bfd      	cmp	r3, #253	@ 0xfd
 8004860:	d0fb      	beq.n	800485a <uart_out_data_pack_type+0xe>
		else if (buffer[5] == CHAIN_ENUM)
 8004862:	2bfe      	cmp	r3, #254	@ 0xfe
 8004864:	d005      	beq.n	8004872 <uart_out_data_pack_type+0x26>
		else if (buffer[5] == CHAIN_ENUM_PLEASE)
 8004866:	2bfc      	cmp	r3, #252	@ 0xfc
 8004868:	d001      	beq.n	800486e <uart_out_data_pack_type+0x22>
			return CHAIN_TRANSMIT_DATA_PACK; // Packet type: Chain Transmit
 800486a:	2004      	movs	r0, #4
 800486c:	e7f5      	b.n	800485a <uart_out_data_pack_type+0xe>
			return CHAIN_ENUM_PLEASE_DATA_PACK; // Packet type: Chain Enum Please
 800486e:	3005      	adds	r0, #5
 8004870:	e7f3      	b.n	800485a <uart_out_data_pack_type+0xe>
			return CHAIN_ENUM_RETURN_DATA_PACK; // Packet type: Chain Enum Return
 8004872:	2003      	movs	r0, #3
 8004874:	e7f1      	b.n	800485a <uart_out_data_pack_type+0xe>

08004876 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004876:	e7fe      	b.n	8004876 <NMI_Handler>

08004878 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <HardFault_Handler>

0800487a <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800487a:	4770      	bx	lr

0800487c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800487c:	4770      	bx	lr

0800487e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800487e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004880:	f000 fe16 	bl	80054b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004884:	bd10      	pop	{r4, pc}

08004886 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004886:	b510      	push	{r4, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004888:	f001 fd48 	bl	800631c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800488c:	bd10      	pop	{r4, pc}

0800488e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800488e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8004890:	2001      	movs	r0, #1
 8004892:	f001 ff57 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004896:	bd10      	pop	{r4, pc}

08004898 <DMA1_Channel1_IRQHandler>:
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004898:	4770      	bx	lr
	...

0800489c <DMA1_Channel2_3_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(const DMA_TypeDef *DMAx)
{
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800489c:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <DMA1_Channel2_3_IRQHandler+0x20>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	069b      	lsls	r3, r3, #26
 80048a2:	d509      	bpl.n	80048b8 <DMA1_Channel2_3_IRQHandler+0x1c>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <DMA1_Channel2_3_IRQHandler+0x20>)
 80048a6:	2220      	movs	r2, #32
 80048a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80048aa:	4905      	ldr	r1, [pc, #20]	@ (80048c0 <DMA1_Channel2_3_IRQHandler+0x24>)
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	3a1f      	subs	r2, #31
 80048b0:	4393      	bics	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC2(DMA1))
	{
		LL_DMA_ClearFlag_TC2(DMA1);
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
		g_uart_in_transmit_commplete = 1;
 80048b4:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <DMA1_Channel2_3_IRQHandler+0x28>)
 80048b6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80048b8:	4770      	bx	lr
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	40020000 	.word	0x40020000
 80048c0:	4002001c 	.word	0x4002001c
 80048c4:	200000c5 	.word	0x200000c5

080048c8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 80048c8:	b510      	push	{r4, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x28>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	049b      	lsls	r3, r3, #18
 80048d0:	d50a      	bpl.n	80048e8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x20>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 80048d2:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x28>)
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	0192      	lsls	r2, r2, #6
 80048d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80048da:	4906      	ldr	r1, [pc, #24]	@ (80048f4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x2c>)
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4393      	bics	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC4(DMA1))
	{
		LL_DMA_ClearFlag_TC4(DMA1);
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
		g_uart_out_transmit_commplete = 1;
 80048e4:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x30>)
 80048e6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048e8:	4804      	ldr	r0, [pc, #16]	@ (80048fc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x34>)
 80048ea:	f001 fca1 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020044 	.word	0x40020044
 80048f8:	200000c4 	.word	0x200000c4
 80048fc:	200003c8 	.word	0x200003c8

08004900 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004900:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <TIM14_IRQHandler+0x50>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	07db      	lsls	r3, r3, #31
 8004908:	d520      	bpl.n	800494c <TIM14_IRQHandler+0x4c>
  /* USER CODE BEGIN TIM14_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM14) == SET)
	{
		s_enum_please_nums--;
 800490a:	4c12      	ldr	r4, [pc, #72]	@ (8004954 <TIM14_IRQHandler+0x54>)
 800490c:	7823      	ldrb	r3, [r4, #0]
 800490e:	3b01      	subs	r3, #1
 8004910:	7023      	strb	r3, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004912:	4b0f      	ldr	r3, [pc, #60]	@ (8004950 <TIM14_IRQHandler+0x50>)
 8004914:	2202      	movs	r2, #2
 8004916:	4252      	negs	r2, r2
 8004918:	611a      	str	r2, [r3, #16]
		LL_TIM_ClearFlag_UPDATE(TIM14); // Clear the timer update flag
		usart1_transmit_dma(s_enum_please_data_packet_buf,
 800491a:	480f      	ldr	r0, [pc, #60]	@ (8004958 <TIM14_IRQHandler+0x58>)
 800491c:	2109      	movs	r1, #9
 800491e:	f000 fca5 	bl	800526c <usart1_transmit_dma>
							sizeof(s_enum_please_data_packet_buf));
		if (s_enum_please_nums == 0)
 8004922:	7823      	ldrb	r3, [r4, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d111      	bne.n	800494c <TIM14_IRQHandler+0x4c>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004928:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <TIM14_IRQHandler+0x50>)
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	4391      	bics	r1, r2
 8004930:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	4391      	bics	r1, r2
 8004936:	6019      	str	r1, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <TIM14_IRQHandler+0x5c>)
 800493a:	2102      	movs	r1, #2
 800493c:	4249      	negs	r1, r1
 800493e:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	4311      	orrs	r1, r2
 8004944:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004946:	6819      	ldr	r1, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800494c:	bd10      	pop	{r4, pc}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	40002000 	.word	0x40002000
 8004954:	200000dd 	.word	0x200000dd
 8004958:	200000d4 	.word	0x200000d4
 800495c:	40014400 	.word	0x40014400

08004960 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004960:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004962:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <TIM16_IRQHandler+0x74>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	07db      	lsls	r3, r3, #31
 8004968:	d532      	bpl.n	80049d0 <TIM16_IRQHandler+0x70>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800496a:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <TIM16_IRQHandler+0x74>)
 800496c:	2202      	movs	r2, #2
 800496e:	4252      	negs	r2, r2
 8004970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN TIM16_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM16) == SET)
	{
		LL_TIM_ClearFlag_UPDATE(TIM16);
		usart2_transmit_dma(g_heartbeat_data_pack_buf, sizeof(g_heartbeat_data_pack_buf));
 8004972:	4819      	ldr	r0, [pc, #100]	@ (80049d8 <TIM16_IRQHandler+0x78>)
 8004974:	2109      	movs	r1, #9
 8004976:	f000 fc91 	bl	800529c <usart2_transmit_dma>
		g_heartbeat_reply_status_buf[g_reply_index] = 0;
 800497a:	4d18      	ldr	r5, [pc, #96]	@ (80049dc <TIM16_IRQHandler+0x7c>)
 800497c:	7828      	ldrb	r0, [r5, #0]
 800497e:	4c18      	ldr	r4, [pc, #96]	@ (80049e0 <TIM16_IRQHandler+0x80>)
 8004980:	2300      	movs	r3, #0
 8004982:	5423      	strb	r3, [r4, r0]
		g_reply_index++;				   // Increment the reply index
 8004984:	3001      	adds	r0, #1
 8004986:	b2c0      	uxtb	r0, r0
 8004988:	7028      	strb	r0, [r5, #0]
		g_reply_index = g_reply_index % 3; // Wrap around if index exceeds 2
 800498a:	2103      	movs	r1, #3
 800498c:	f7fd fc42 	bl	8002214 <__aeabi_uidivmod>
 8004990:	7029      	strb	r1, [r5, #0]

		if (g_heartbeat_reply_status_buf[0] == 0 && g_heartbeat_reply_status_buf[1] == 0 && g_heartbeat_reply_status_buf[2] == 0)
 8004992:	7823      	ldrb	r3, [r4, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d118      	bne.n	80049ca <TIM16_IRQHandler+0x6a>
 8004998:	7863      	ldrb	r3, [r4, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d115      	bne.n	80049ca <TIM16_IRQHandler+0x6a>
 800499e:	78a3      	ldrb	r3, [r4, #2]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d112      	bne.n	80049ca <TIM16_IRQHandler+0x6a>
		{
			if (g_tail_status == CHAIN_NON_TAIL_DEVICE)
 80049a4:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <TIM16_IRQHandler+0x84>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <TIM16_IRQHandler+0x62>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80049ac:	4b0e      	ldr	r3, [pc, #56]	@ (80049e8 <TIM16_IRQHandler+0x88>)
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	2101      	movs	r1, #1
 80049b2:	430a      	orrs	r2, r1
 80049b4:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
			{
				LL_TIM_EnableIT_UPDATE(TIM14); // ENABLE TIM14
				LL_TIM_EnableCounter(TIM14);   // ENABLE TIM14
				s_enum_please_nums = ENUM_PLEASE_NUM;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <TIM16_IRQHandler+0x8c>)
 80049be:	2203      	movs	r2, #3
 80049c0:	701a      	strb	r2, [r3, #0]
			}
			g_tail_status = CHAIN_TAIL_DEVICE;
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <TIM16_IRQHandler+0x84>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e002      	b.n	80049d0 <TIM16_IRQHandler+0x70>
		}
		else
		{
			g_tail_status = CHAIN_NON_TAIL_DEVICE;
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <TIM16_IRQHandler+0x84>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM16_IRQn 0 */
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80049d0:	bd70      	pop	{r4, r5, r6, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	40014400 	.word	0x40014400
 80049d8:	200000c8 	.word	0x200000c8
 80049dc:	20000e90 	.word	0x20000e90
 80049e0:	20000e94 	.word	0x20000e94
 80049e4:	200000c3 	.word	0x200000c3
 80049e8:	40002000 	.word	0x40002000
 80049ec:	200000dd 	.word	0x200000dd

080049f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80049f2:	4b3a      	ldr	r3, [pc, #232]	@ (8004adc <USART1_IRQHandler+0xec>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	06db      	lsls	r3, r3, #27
 80049f8:	d533      	bpl.n	8004a62 <USART1_IRQHandler+0x72>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80049fa:	4b38      	ldr	r3, [pc, #224]	@ (8004adc <USART1_IRQHandler+0xec>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	06db      	lsls	r3, r3, #27
 8004a00:	d52f      	bpl.n	8004a62 <USART1_IRQHandler+0x72>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004a02:	4936      	ldr	r1, [pc, #216]	@ (8004adc <USART1_IRQHandler+0xec>)
 8004a04:	2310      	movs	r3, #16
 8004a06:	620b      	str	r3, [r1, #32]
 8004a08:	4b35      	ldr	r3, [pc, #212]	@ (8004ae0 <USART1_IRQHandler+0xf0>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	4382      	bics	r2, r0
 8004a10:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	0412      	lsls	r2, r2, #16
 8004a16:	0c12      	lsrs	r2, r2, #16
	if (LL_USART_IsActiveFlag_IDLE(USART1) && LL_USART_IsEnabledIT_IDLE(USART1))
	{
		// Clear the idle interrupt flag
		LL_USART_ClearFlag_IDLE(USART1);
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
		s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);
 8004a18:	4252      	negs	r2, r2
 8004a1a:	4c32      	ldr	r4, [pc, #200]	@ (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a1c:	7022      	strb	r2, [r4, #0]
		// Switch buffer and enable DMA reception
		g_uart_in_tx_status = 1 - g_uart_in_tx_status;
 8004a1e:	4d32      	ldr	r5, [pc, #200]	@ (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a20:	782e      	ldrb	r6, [r5, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	1b92      	subs	r2, r2, r6
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	702a      	strb	r2, [r5, #0]
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
								(uint32_t)g_uart_in_rx_buf[g_uart_in_tx_status]);
 8004a2a:	782a      	ldrb	r2, [r5, #0]
 8004a2c:	0252      	lsls	r2, r2, #9
 8004a2e:	4d2f      	ldr	r5, [pc, #188]	@ (8004aec <USART1_IRQHandler+0xfc>)
 8004a30:	1952      	adds	r2, r2, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004a32:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	0c12      	lsrs	r2, r2, #16
 8004a38:	0412      	lsls	r2, r2, #16
 8004a3a:	2580      	movs	r5, #128	@ 0x80
 8004a3c:	00ad      	lsls	r5, r5, #2
 8004a3e:	432a      	orrs	r2, r5
 8004a40:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4302      	orrs	r2, r0
 8004a46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a48:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	f380 8810 	msr	PRIMASK, r0
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004a50:	688b      	ldr	r3, [r1, #8]
 8004a52:	303f      	adds	r0, #63	@ 0x3f
 8004a54:	4303      	orrs	r3, r0
 8004a56:	608b      	str	r3, [r1, #8]
 8004a58:	f382 8810 	msr	PRIMASK, r2
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, BUFFER_SIZE);
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
		LL_USART_EnableDMAReq_RX(USART1);
		if (s_len > 0)
 8004a5c:	7821      	ldrb	r1, [r4, #0]
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	d100      	bne.n	8004a64 <USART1_IRQHandler+0x74>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
				(uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_tx_status], s_len);
 8004a64:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	383f      	subs	r0, #63	@ 0x3f
 8004a6a:	1ac0      	subs	r0, r0, r3
 8004a6c:	0240      	lsls	r0, r0, #9
 8004a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <USART1_IRQHandler+0xfc>)
 8004a70:	18c0      	adds	r0, r0, r3
			s_data_pack_type = uart_in_data_pack_type(
 8004a72:	f7ff fed5 	bl	8004820 <uart_in_data_pack_type>
 8004a76:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <USART1_IRQHandler+0x100>)
 8004a78:	7010      	strb	r0, [r2, #0]
			switch (s_data_pack_type)
 8004a7a:	2804      	cmp	r0, #4
 8004a7c:	d021      	beq.n	8004ac2 <USART1_IRQHandler+0xd2>
 8004a7e:	d80f      	bhi.n	8004aa0 <USART1_IRQHandler+0xb0>
 8004a80:	2801      	cmp	r0, #1
 8004a82:	d01b      	beq.n	8004abc <USART1_IRQHandler+0xcc>
 8004a84:	2802      	cmp	r0, #2
 8004a86:	d1ec      	bne.n	8004a62 <USART1_IRQHandler+0x72>
				chain_enum_handle((uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_tx_status],
 8004a88:	4b17      	ldr	r3, [pc, #92]	@ (8004ae8 <USART1_IRQHandler+0xf8>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	1ac0      	subs	r0, r0, r3
 8004a90:	0240      	lsls	r0, r0, #9
 8004a92:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <USART1_IRQHandler+0xfc>)
 8004a94:	18c0      	adds	r0, r0, r3
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <USART1_IRQHandler+0xf4>)
 8004a98:	7819      	ldrb	r1, [r3, #0]
 8004a9a:	f7ff f8e5 	bl	8003c68 <chain_enum_handle>
				break;
 8004a9e:	e7e0      	b.n	8004a62 <USART1_IRQHandler+0x72>
			switch (s_data_pack_type)
 8004aa0:	2805      	cmp	r0, #5
 8004aa2:	d1de      	bne.n	8004a62 <USART1_IRQHandler+0x72>
					(uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_tx_status], s_len);
 8004aa4:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <USART1_IRQHandler+0xf8>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	1ac0      	subs	r0, r0, r3
 8004aac:	0240      	lsls	r0, r0, #9
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <USART1_IRQHandler+0xfc>)
 8004ab0:	18c0      	adds	r0, r0, r3
				chain_deal_data_packet_handle(
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <USART1_IRQHandler+0xf4>)
 8004ab4:	7819      	ldrb	r1, [r3, #0]
 8004ab6:	f7ff f90b 	bl	8003cd0 <chain_deal_data_packet_handle>
}
 8004aba:	e7d2      	b.n	8004a62 <USART1_IRQHandler+0x72>
				chain_heartbeat_in_receive_handle();
 8004abc:	f7ff f8f0 	bl	8003ca0 <chain_heartbeat_in_receive_handle>
				break;
 8004ac0:	e7cf      	b.n	8004a62 <USART1_IRQHandler+0x72>
					(uint8_t *)g_uart_in_rx_buf[1 - g_uart_in_tx_status], s_len);
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <USART1_IRQHandler+0xf8>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	1ac0      	subs	r0, r0, r3
 8004aca:	0240      	lsls	r0, r0, #9
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <USART1_IRQHandler+0xfc>)
 8004ace:	18c0      	adds	r0, r0, r3
				chain_out_relay_handle(
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <USART1_IRQHandler+0xf4>)
 8004ad2:	7819      	ldrb	r1, [r3, #0]
 8004ad4:	f7ff f924 	bl	8003d20 <chain_out_relay_handle>
				break;
 8004ad8:	e7c3      	b.n	8004a62 <USART1_IRQHandler+0x72>
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40020008 	.word	0x40020008
 8004ae4:	20000e98 	.word	0x20000e98
 8004ae8:	2000068d 	.word	0x2000068d
 8004aec:	20000a90 	.word	0x20000a90
 8004af0:	20000e97 	.word	0x20000e97

08004af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004af6:	4b3a      	ldr	r3, [pc, #232]	@ (8004be0 <USART2_IRQHandler+0xec>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	06db      	lsls	r3, r3, #27
 8004afc:	d533      	bpl.n	8004b66 <USART2_IRQHandler+0x72>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004afe:	4b38      	ldr	r3, [pc, #224]	@ (8004be0 <USART2_IRQHandler+0xec>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	06db      	lsls	r3, r3, #27
 8004b04:	d52f      	bpl.n	8004b66 <USART2_IRQHandler+0x72>
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004b06:	4936      	ldr	r1, [pc, #216]	@ (8004be0 <USART2_IRQHandler+0xec>)
 8004b08:	2310      	movs	r3, #16
 8004b0a:	620b      	str	r3, [r1, #32]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004b0c:	4b35      	ldr	r3, [pc, #212]	@ (8004be4 <USART2_IRQHandler+0xf0>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2001      	movs	r0, #1
 8004b12:	4382      	bics	r2, r0
 8004b14:	601a      	str	r2, [r3, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	0412      	lsls	r2, r2, #16
 8004b1a:	0c12      	lsrs	r2, r2, #16
	if (LL_USART_IsActiveFlag_IDLE(USART2) && LL_USART_IsEnabledIT_IDLE(USART2))
	{
		// Clear the idle interrupt flag
		LL_USART_ClearFlag_IDLE(USART2);
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
		s_len = BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 8004b1c:	4252      	negs	r2, r2
 8004b1e:	4c32      	ldr	r4, [pc, #200]	@ (8004be8 <USART2_IRQHandler+0xf4>)
 8004b20:	7022      	strb	r2, [r4, #0]
		// Switch buffer and enable DMA reception
		g_uart_out_tx_status = 1 - g_uart_out_tx_status;
 8004b22:	4d32      	ldr	r5, [pc, #200]	@ (8004bec <USART2_IRQHandler+0xf8>)
 8004b24:	782e      	ldrb	r6, [r5, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	1b92      	subs	r2, r2, r6
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	702a      	strb	r2, [r5, #0]
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
								(uint32_t)g_uart_out_rx_buf[g_uart_out_tx_status]);
 8004b2e:	782a      	ldrb	r2, [r5, #0]
 8004b30:	0252      	lsls	r2, r2, #9
 8004b32:	4d2f      	ldr	r5, [pc, #188]	@ (8004bf0 <USART2_IRQHandler+0xfc>)
 8004b34:	1952      	adds	r2, r2, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004b36:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	0c12      	lsrs	r2, r2, #16
 8004b3c:	0412      	lsls	r2, r2, #16
 8004b3e:	2580      	movs	r5, #128	@ 0x80
 8004b40:	00ad      	lsls	r5, r5, #2
 8004b42:	432a      	orrs	r2, r5
 8004b44:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4302      	orrs	r2, r0
 8004b4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b4c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004b54:	688b      	ldr	r3, [r1, #8]
 8004b56:	303f      	adds	r0, #63	@ 0x3f
 8004b58:	4303      	orrs	r3, r0
 8004b5a:	608b      	str	r3, [r1, #8]
 8004b5c:	f382 8810 	msr	PRIMASK, r2
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, BUFFER_SIZE);
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
		LL_USART_EnableDMAReq_RX(USART2);
		if (s_len > 0)
 8004b60:	7821      	ldrb	r1, [r4, #0]
 8004b62:	2900      	cmp	r1, #0
 8004b64:	d100      	bne.n	8004b68 <USART2_IRQHandler+0x74>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
				(uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_tx_status], s_len);
 8004b68:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <USART2_IRQHandler+0xf8>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	383f      	subs	r0, #63	@ 0x3f
 8004b6e:	1ac0      	subs	r0, r0, r3
 8004b70:	0240      	lsls	r0, r0, #9
 8004b72:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <USART2_IRQHandler+0xfc>)
 8004b74:	18c0      	adds	r0, r0, r3
			s_data_pack_type = uart_out_data_pack_type(
 8004b76:	f7ff fe69 	bl	800484c <uart_out_data_pack_type>
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <USART2_IRQHandler+0x100>)
 8004b7c:	7010      	strb	r0, [r2, #0]
			switch (s_data_pack_type)
 8004b7e:	2804      	cmp	r0, #4
 8004b80:	d021      	beq.n	8004bc6 <USART2_IRQHandler+0xd2>
 8004b82:	d80f      	bhi.n	8004ba4 <USART2_IRQHandler+0xb0>
 8004b84:	2801      	cmp	r0, #1
 8004b86:	d01b      	beq.n	8004bc0 <USART2_IRQHandler+0xcc>
 8004b88:	2803      	cmp	r0, #3
 8004b8a:	d1ec      	bne.n	8004b66 <USART2_IRQHandler+0x72>
					(uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_tx_status], s_len);
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <USART2_IRQHandler+0xf8>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2001      	movs	r0, #1
 8004b92:	1ac0      	subs	r0, r0, r3
 8004b94:	0240      	lsls	r0, r0, #9
 8004b96:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <USART2_IRQHandler+0xfc>)
 8004b98:	18c0      	adds	r0, r0, r3
				chain_enum_return_handle(
 8004b9a:	4b13      	ldr	r3, [pc, #76]	@ (8004be8 <USART2_IRQHandler+0xf4>)
 8004b9c:	7819      	ldrb	r1, [r3, #0]
 8004b9e:	f7ff f877 	bl	8003c90 <chain_enum_return_handle>
				break;
 8004ba2:	e7e0      	b.n	8004b66 <USART2_IRQHandler+0x72>
			switch (s_data_pack_type)
 8004ba4:	2806      	cmp	r0, #6
 8004ba6:	d1de      	bne.n	8004b66 <USART2_IRQHandler+0x72>
					(uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_tx_status], s_len);
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <USART2_IRQHandler+0xf8>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2001      	movs	r0, #1
 8004bae:	1ac0      	subs	r0, r0, r3
 8004bb0:	0240      	lsls	r0, r0, #9
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <USART2_IRQHandler+0xfc>)
 8004bb4:	18c0      	adds	r0, r0, r3
				chain_enum_please_handle(
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <USART2_IRQHandler+0xf4>)
 8004bb8:	7819      	ldrb	r1, [r3, #0]
 8004bba:	f7ff f86d 	bl	8003c98 <chain_enum_please_handle>
				break;
 8004bbe:	e7d2      	b.n	8004b66 <USART2_IRQHandler+0x72>
				chain_heartbeat_out_receive_handle();
 8004bc0:	f7ff f876 	bl	8003cb0 <chain_heartbeat_out_receive_handle>
				break;
 8004bc4:	e7cf      	b.n	8004b66 <USART2_IRQHandler+0x72>
					(uint8_t *)g_uart_out_rx_buf[1 - g_uart_out_tx_status], s_len);
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <USART2_IRQHandler+0xf8>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2001      	movs	r0, #1
 8004bcc:	1ac0      	subs	r0, r0, r3
 8004bce:	0240      	lsls	r0, r0, #9
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <USART2_IRQHandler+0xfc>)
 8004bd2:	18c0      	adds	r0, r0, r3
				chain_in_relay_handle(
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <USART2_IRQHandler+0xf4>)
 8004bd6:	7819      	ldrb	r1, [r3, #0]
 8004bd8:	f7ff f8ad 	bl	8003d36 <chain_in_relay_handle>
}
 8004bdc:	e7c3      	b.n	8004b66 <USART2_IRQHandler+0x72>
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	40004400 	.word	0x40004400
 8004be4:	40020030 	.word	0x40020030
 8004be8:	20000e98 	.word	0x20000e98
 8004bec:	2000068c 	.word	0x2000068c
 8004bf0:	20000690 	.word	0x20000690
 8004bf4:	20000e97 	.word	0x20000e97

08004bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <_sbrk+0x38>)
 8004bfe:	490d      	ldr	r1, [pc, #52]	@ (8004c34 <_sbrk+0x3c>)
 8004c00:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c02:	490d      	ldr	r1, [pc, #52]	@ (8004c38 <_sbrk+0x40>)
 8004c04:	6809      	ldr	r1, [r1, #0]
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d007      	beq.n	8004c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c0a:	490b      	ldr	r1, [pc, #44]	@ (8004c38 <_sbrk+0x40>)
 8004c0c:	6808      	ldr	r0, [r1, #0]
 8004c0e:	18c3      	adds	r3, r0, r3
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d806      	bhi.n	8004c22 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004c14:	4a08      	ldr	r2, [pc, #32]	@ (8004c38 <_sbrk+0x40>)
 8004c16:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004c18:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004c1a:	4907      	ldr	r1, [pc, #28]	@ (8004c38 <_sbrk+0x40>)
 8004c1c:	4807      	ldr	r0, [pc, #28]	@ (8004c3c <_sbrk+0x44>)
 8004c1e:	6008      	str	r0, [r1, #0]
 8004c20:	e7f3      	b.n	8004c0a <_sbrk+0x12>
    errno = ENOMEM;
 8004c22:	f002 fd51 	bl	80076c8 <__errno>
 8004c26:	230c      	movs	r3, #12
 8004c28:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	4240      	negs	r0, r0
 8004c2e:	e7f3      	b.n	8004c18 <_sbrk+0x20>
 8004c30:	20002000 	.word	0x20002000
 8004c34:	00000400 	.word	0x00000400
 8004c38:	20000e9c 	.word	0x20000e9c
 8004c3c:	20001008 	.word	0x20001008

08004c40 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c40:	4770      	bx	lr
	...

08004c44 <MX_TIM14_Init>:

/* USER CODE END 0 */

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004c44:	b530      	push	{r4, r5, lr}
 8004c46:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c48:	ac01      	add	r4, sp, #4
 8004c4a:	2214      	movs	r2, #20
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f002 fd20 	bl	8007694 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <MX_TIM14_Init+0x64>)
 8004c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c58:	2180      	movs	r1, #128	@ 0x80
 8004c5a:	0209      	lsls	r1, r1, #8
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	400b      	ands	r3, r1
 8004c64:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004c66:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c68:	4a10      	ldr	r2, [pc, #64]	@ (8004cac <MX_TIM14_Init+0x68>)
 8004c6a:	20c4      	movs	r0, #196	@ 0xc4
 8004c6c:	0080      	lsls	r0, r0, #2
 8004c6e:	5813      	ldr	r3, [r2, r0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	05c9      	lsls	r1, r1, #23
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	5013      	str	r3, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	031b      	lsls	r3, r3, #12
 8004c80:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(TIM14_IRQn);

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <MX_TIM14_Init+0x6c>)
 8004c84:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c86:	2300      	movs	r3, #0
 8004c88:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 1699;
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <MX_TIM14_Init+0x70>)
 8004c8c:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004c8e:	60e3      	str	r3, [r4, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004c90:	4d09      	ldr	r5, [pc, #36]	@ (8004cb8 <MX_TIM14_Init+0x74>)
 8004c92:	0021      	movs	r1, r4
 8004c94:	0028      	movs	r0, r5
 8004c96:	f002 fb13 	bl	80072c0 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	2280      	movs	r2, #128	@ 0x80
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	602b      	str	r3, [r5, #0]
  LL_TIM_EnableARRPreload(TIM14);
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004ca2:	b007      	add	sp, #28
 8004ca4:	bd30      	pop	{r4, r5, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	e000e100 	.word	0xe000e100
 8004cb0:	000018ff 	.word	0x000018ff
 8004cb4:	000006a3 	.word	0x000006a3
 8004cb8:	40002000 	.word	0x40002000

08004cbc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004cbc:	b530      	push	{r4, r5, lr}
 8004cbe:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004cc0:	ac01      	add	r4, sp, #4
 8004cc2:	2214      	movs	r2, #20
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	0020      	movs	r0, r4
 8004cc8:	f002 fce4 	bl	8007694 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8004ccc:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <MX_TIM16_Init+0x64>)
 8004cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd0:	2180      	movs	r1, #128	@ 0x80
 8004cd2:	0289      	lsls	r1, r1, #10
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	400b      	ands	r3, r1
 8004cdc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004cde:	9b00      	ldr	r3, [sp, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce0:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <MX_TIM16_Init+0x68>)
 8004ce2:	20c5      	movs	r0, #197	@ 0xc5
 8004ce4:	0080      	lsls	r0, r0, #2
 8004ce6:	5819      	ldr	r1, [r3, r0]
 8004ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8004d28 <MX_TIM16_Init+0x6c>)
 8004cea:	4011      	ands	r1, r2
 8004cec:	2280      	movs	r2, #128	@ 0x80
 8004cee:	01d2      	lsls	r2, r2, #7
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf4:	2280      	movs	r2, #128	@ 0x80
 8004cf6:	0392      	lsls	r2, r2, #14
 8004cf8:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM16_IRQn);

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <MX_TIM16_Init+0x70>)
 8004cfc:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 9999;
 8004d02:	4a0b      	ldr	r2, [pc, #44]	@ (8004d30 <MX_TIM16_Init+0x74>)
 8004d04:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004d06:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8004d08:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8004d0a:	4d0a      	ldr	r5, [pc, #40]	@ (8004d34 <MX_TIM16_Init+0x78>)
 8004d0c:	0021      	movs	r1, r4
 8004d0e:	0028      	movs	r0, r5
 8004d10:	f002 fad6 	bl	80072c0 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	2280      	movs	r2, #128	@ 0x80
 8004d18:	4393      	bics	r3, r2
 8004d1a:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM16);
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004d1c:	b007      	add	sp, #28
 8004d1e:	bd30      	pop	{r4, r5, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	e000e100 	.word	0xe000e100
 8004d28:	ffff00ff 	.word	0xffff00ff
 8004d2c:	000018ff 	.word	0x000018ff
 8004d30:	0000270f 	.word	0x0000270f
 8004d34:	40014400 	.word	0x40014400

08004d38 <usart1_hart_init>:
 *       and configures necessary settings for efficient data transmission and reception.
 * 
 * @param  None
 * @retval None
 */
void usart1_hart_init(void) {
 8004d38:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	2101      	movs	r1, #1
 8004d40:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004d44:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <usart1_hart_init+0xa0>)
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	200c      	movs	r0, #12
 8004d4a:	4383      	bics	r3, r0
 8004d4c:	4303      	orrs	r3, r0
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	2410      	movs	r4, #16
 8004d60:	4323      	orrs	r3, r4
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8004d68:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <usart1_hart_init+0xa4>)
 8004d6a:	481d      	ldr	r0, [pc, #116]	@ (8004de0 <usart1_hart_init+0xa8>)
 8004d6c:	6098      	str	r0, [r3, #8]
	LL_DMA_SetPeriphAddress(
		DMA1, LL_DMA_CHANNEL_1,
		LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
	// Set the memory address where received data will be stored
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
		(uint32_t) g_uart_in_rx_buf[g_uart_in_tx_status]);
 8004d6e:	481d      	ldr	r0, [pc, #116]	@ (8004de4 <usart1_hart_init+0xac>)
 8004d70:	7800      	ldrb	r0, [r0, #0]
 8004d72:	0240      	lsls	r0, r0, #9
 8004d74:	4d1c      	ldr	r5, [pc, #112]	@ (8004de8 <usart1_hart_init+0xb0>)
 8004d76:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8004d78:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8004d7a:	6858      	ldr	r0, [r3, #4]
 8004d7c:	0c00      	lsrs	r0, r0, #16
 8004d7e:	0400      	lsls	r0, r0, #16
 8004d80:	2580      	movs	r5, #128	@ 0x80
 8004d82:	00ad      	lsls	r5, r5, #2
 8004d84:	4328      	orrs	r0, r5
 8004d86:	6058      	str	r0, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	3dff      	subs	r5, #255	@ 0xff
 8004d8c:	3dff      	subs	r5, #255	@ 0xff
 8004d8e:	4328      	orrs	r0, r5
 8004d90:	6018      	str	r0, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	2608      	movs	r6, #8
 8004d96:	4330      	orrs	r0, r6
 8004d98:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4308      	orrs	r0, r1
 8004d9e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004da8:	6893      	ldr	r3, [r2, #8]
 8004daa:	3638      	adds	r6, #56	@ 0x38
 8004dac:	4333      	orrs	r3, r6
 8004dae:	6093      	str	r3, [r2, #8]
 8004db0:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004db4:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <usart1_hart_init+0xb4>)
 8004db8:	480d      	ldr	r0, [pc, #52]	@ (8004df0 <usart1_hart_init+0xb8>)
 8004dba:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dbc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004dc4:	6891      	ldr	r1, [r2, #8]
 8004dc6:	3470      	adds	r4, #112	@ 0x70
 8004dc8:	4321      	orrs	r1, r4
 8004dca:	6091      	str	r1, [r2, #8]
 8004dcc:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	432a      	orrs	r2, r5
 8004dd4:	601a      	str	r2, [r3, #0]
		LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
	// Enable USART1 TX DMA request for data transmission
	LL_USART_EnableDMAReq_TX(USART1);
	// Enable DMA transfer complete interrupt for USART1 TX
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
}
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	40013800 	.word	0x40013800
 8004ddc:	40020008 	.word	0x40020008
 8004de0:	40013824 	.word	0x40013824
 8004de4:	2000068d 	.word	0x2000068d
 8004de8:	20000a90 	.word	0x20000a90
 8004dec:	4002001c 	.word	0x4002001c
 8004df0:	40013828 	.word	0x40013828

08004df4 <MX_USART1_UART_Init>:
{
 8004df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df6:	46de      	mov	lr, fp
 8004df8:	4657      	mov	r7, sl
 8004dfa:	464e      	mov	r6, r9
 8004dfc:	4645      	mov	r5, r8
 8004dfe:	b5e0      	push	{r5, r6, r7, lr}
 8004e00:	b09b      	sub	sp, #108	@ 0x6c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004e02:	2220      	movs	r2, #32
 8004e04:	2100      	movs	r1, #0
 8004e06:	a812      	add	r0, sp, #72	@ 0x48
 8004e08:	f002 fc44 	bl	8007694 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	2218      	movs	r2, #24
 8004e0e:	2100      	movs	r1, #0
 8004e10:	a80c      	add	r0, sp, #48	@ 0x30
 8004e12:	f002 fc3f 	bl	8007694 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e16:	2228      	movs	r2, #40	@ 0x28
 8004e18:	2100      	movs	r1, #0
 8004e1a:	a802      	add	r0, sp, #8
 8004e1c:	f002 fc3a 	bl	8007694 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e24:	a802      	add	r0, sp, #8
 8004e26:	f002 f84d 	bl	8006ec4 <HAL_RCCEx_PeriphCLKConfig>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d000      	beq.n	8004e30 <MX_USART1_UART_Init+0x3c>
 8004e2e:	e0c6      	b.n	8004fbe <MX_USART1_UART_Init+0x1ca>
  SET_BIT(RCC->APBENR2, Periphs);
 8004e30:	4b64      	ldr	r3, [pc, #400]	@ (8004fc4 <MX_USART1_UART_Init+0x1d0>)
 8004e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	01c9      	lsls	r1, r1, #7
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e3e:	400a      	ands	r2, r1
 8004e40:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004e42:	9a01      	ldr	r2, [sp, #4]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8004e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e46:	2502      	movs	r5, #2
 8004e48:	432a      	orrs	r2, r5
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	402b      	ands	r3, r5
 8004e50:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004e52:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004e54:	2340      	movs	r3, #64	@ 0x40
 8004e56:	4698      	mov	r8, r3
 8004e58:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e5a:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004e5c:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e5e:	2400      	movs	r4, #0
 8004e60:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004e62:	2601      	movs	r6, #1
 8004e64:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8004e66:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e68:	4b57      	ldr	r3, [pc, #348]	@ (8004fc8 <MX_USART1_UART_Init+0x1d4>)
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	a90c      	add	r1, sp, #48	@ 0x30
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f002 f922 	bl	80070b8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8004e74:	2780      	movs	r7, #128	@ 0x80
 8004e76:	970c      	str	r7, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e78:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004e7a:	950e      	str	r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e7c:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004e7e:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8004e80:	9411      	str	r4, [sp, #68]	@ 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e82:	a90c      	add	r1, sp, #48	@ 0x30
 8004e84:	4648      	mov	r0, r9
 8004e86:	f002 f917 	bl	80070b8 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004e8a:	4a50      	ldr	r2, [pc, #320]	@ (8004fcc <MX_USART1_UART_Init+0x1d8>)
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	213f      	movs	r1, #63	@ 0x3f
 8004e90:	468a      	mov	sl, r1
 8004e92:	438b      	bics	r3, r1
 8004e94:	390d      	subs	r1, #13
 8004e96:	430b      	orrs	r3, r1
 8004e98:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd0 <MX_USART1_UART_Init+0x1dc>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	494d      	ldr	r1, [pc, #308]	@ (8004fd4 <MX_USART1_UART_Init+0x1e0>)
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	494b      	ldr	r1, [pc, #300]	@ (8004fd8 <MX_USART1_UART_Init+0x1e4>)
 8004eaa:	468c      	mov	ip, r1
 8004eac:	400a      	ands	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	351e      	adds	r5, #30
 8004eb4:	43aa      	bics	r2, r5
 8004eb6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4641      	mov	r1, r8
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	43ba      	bics	r2, r7
 8004ec4:	433a      	orrs	r2, r7
 8004ec6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4844      	ldr	r0, [pc, #272]	@ (8004fdc <MX_USART1_UART_Init+0x1e8>)
 8004ecc:	4002      	ands	r2, r0
 8004ece:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4943      	ldr	r1, [pc, #268]	@ (8004fe0 <MX_USART1_UART_Init+0x1ec>)
 8004ed4:	468b      	mov	fp, r1
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004eda:	4a42      	ldr	r2, [pc, #264]	@ (8004fe4 <MX_USART1_UART_Init+0x1f0>)
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	4651      	mov	r1, sl
 8004ee0:	438b      	bics	r3, r1
 8004ee2:	390c      	subs	r1, #12
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe8 <MX_USART1_UART_Init+0x1f4>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4649      	mov	r1, r9
 8004eee:	400a      	ands	r2, r1
 8004ef0:	2110      	movs	r1, #16
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4661      	mov	r1, ip
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	43aa      	bics	r2, r5
 8004f02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4641      	mov	r1, r8
 8004f08:	438a      	bics	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	43ba      	bics	r2, r7
 8004f10:	433a      	orrs	r2, r7
 8004f12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4002      	ands	r2, r0
 8004f18:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f22:	4a32      	ldr	r2, [pc, #200]	@ (8004fec <MX_USART1_UART_Init+0x1f8>)
 8004f24:	21c6      	movs	r1, #198	@ 0xc6
 8004f26:	0089      	lsls	r1, r1, #2
 8004f28:	5853      	ldr	r3, [r2, r1]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	051b      	lsls	r3, r3, #20
 8004f34:	6013      	str	r3, [r2, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8004f36:	9412      	str	r4, [sp, #72]	@ 0x48
  USART_InitStruct.BaudRate = 115200;
 8004f38:	23e1      	movs	r3, #225	@ 0xe1
 8004f3a:	025b      	lsls	r3, r3, #9
 8004f3c:	9313      	str	r3, [sp, #76]	@ 0x4c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004f3e:	9414      	str	r4, [sp, #80]	@ 0x50
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004f40:	9415      	str	r4, [sp, #84]	@ 0x54
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004f42:	9416      	str	r4, [sp, #88]	@ 0x58
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004f44:	230c      	movs	r3, #12
 8004f46:	9317      	str	r3, [sp, #92]	@ 0x5c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004f48:	9418      	str	r4, [sp, #96]	@ 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004f4a:	9419      	str	r4, [sp, #100]	@ 0x64
  LL_USART_Init(USART1, &USART_InitStruct);
 8004f4c:	4c28      	ldr	r4, [pc, #160]	@ (8004ff0 <MX_USART1_UART_Init+0x1fc>)
 8004f4e:	a912      	add	r1, sp, #72	@ 0x48
 8004f50:	0020      	movs	r0, r4
 8004f52:	f002 fa5f 	bl	8007414 <LL_USART_Init>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5a:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	08db      	lsrs	r3, r3, #3
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8004f72:	68a3      	ldr	r3, [r4, #8]
 8004f74:	491f      	ldr	r1, [pc, #124]	@ (8004ff4 <MX_USART1_UART_Init+0x200>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	60a3      	str	r3, [r4, #8]
 8004f7a:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <MX_USART1_UART_Init+0x204>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f86:	6863      	ldr	r3, [r4, #4]
 8004f88:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <MX_USART1_UART_Init+0x208>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	222a      	movs	r2, #42	@ 0x2a
 8004f92:	4393      	bics	r3, r2
 8004f94:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4333      	orrs	r3, r6
 8004f9a:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <MX_USART1_UART_Init+0x1fc>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	d5fb      	bpl.n	8004f9c <MX_USART1_UART_Init+0x1a8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004fa4:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <MX_USART1_UART_Init+0x1fc>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	d5f7      	bpl.n	8004f9c <MX_USART1_UART_Init+0x1a8>
	usart1_hart_init();
 8004fac:	f7ff fec4 	bl	8004d38 <usart1_hart_init>
}
 8004fb0:	b01b      	add	sp, #108	@ 0x6c
 8004fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8004fb4:	46bb      	mov	fp, r7
 8004fb6:	46b2      	mov	sl, r6
 8004fb8:	46a9      	mov	r9, r5
 8004fba:	46a0      	mov	r8, r4
 8004fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004fbe:	f7ff fb39 	bl	8004634 <Error_Handler>
 8004fc2:	e735      	b.n	8004e30 <MX_USART1_UART_Init+0x3c>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	50000400 	.word	0x50000400
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020008 	.word	0x40020008
 8004fd4:	ffffbfef 	.word	0xffffbfef
 8004fd8:	ffffcfff 	.word	0xffffcfff
 8004fdc:	fffffcff 	.word	0xfffffcff
 8004fe0:	fffff3ff 	.word	0xfffff3ff
 8004fe4:	40020804 	.word	0x40020804
 8004fe8:	4002001c 	.word	0x4002001c
 8004fec:	e000e100 	.word	0xe000e100
 8004ff0:	40013800 	.word	0x40013800
 8004ff4:	f1ffffff 	.word	0xf1ffffff
 8004ff8:	dfffffff 	.word	0xdfffffff
 8004ffc:	ffffb7ff 	.word	0xffffb7ff

08005000 <usart2_hart_init>:
 *       and configures necessary settings for effective data transmission and reception.
 * 
 * @param  None
 * @retval None
 */
void usart2_hart_init(void) {
 8005000:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005006:	2101      	movs	r1, #1
 8005008:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800500c:	4a24      	ldr	r2, [pc, #144]	@ (80050a0 <usart2_hart_init+0xa0>)
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	200c      	movs	r0, #12
 8005012:	4383      	bics	r3, r0
 8005014:	4303      	orrs	r3, r0
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005020:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	2410      	movs	r4, #16
 8005028:	4323      	orrs	r3, r4
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005030:	4b1c      	ldr	r3, [pc, #112]	@ (80050a4 <usart2_hart_init+0xa4>)
 8005032:	481d      	ldr	r0, [pc, #116]	@ (80050a8 <usart2_hart_init+0xa8>)
 8005034:	6098      	str	r0, [r3, #8]
	LL_DMA_SetPeriphAddress(
		DMA1, LL_DMA_CHANNEL_3,
		LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
	// Set the memory address for storing the received data
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3,
		(uint32_t) g_uart_out_rx_buf[g_uart_out_tx_status]);
 8005036:	481d      	ldr	r0, [pc, #116]	@ (80050ac <usart2_hart_init+0xac>)
 8005038:	7800      	ldrb	r0, [r0, #0]
 800503a:	0240      	lsls	r0, r0, #9
 800503c:	4d1c      	ldr	r5, [pc, #112]	@ (80050b0 <usart2_hart_init+0xb0>)
 800503e:	1940      	adds	r0, r0, r5
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005040:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005042:	6858      	ldr	r0, [r3, #4]
 8005044:	0c00      	lsrs	r0, r0, #16
 8005046:	0400      	lsls	r0, r0, #16
 8005048:	2580      	movs	r5, #128	@ 0x80
 800504a:	00ad      	lsls	r5, r5, #2
 800504c:	4328      	orrs	r0, r5
 800504e:	6058      	str	r0, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	3dff      	subs	r5, #255	@ 0xff
 8005054:	3dff      	subs	r5, #255	@ 0xff
 8005056:	4328      	orrs	r0, r5
 8005058:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	2608      	movs	r6, #8
 800505e:	4330      	orrs	r0, r6
 8005060:	6018      	str	r0, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	4308      	orrs	r0, r1
 8005066:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005070:	6893      	ldr	r3, [r2, #8]
 8005072:	3638      	adds	r6, #56	@ 0x38
 8005074:	4333      	orrs	r3, r6
 8005076:	6093      	str	r3, [r2, #8]
 8005078:	f380 8810 	msr	PRIMASK, r0
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800507c:	6214      	str	r4, [r2, #32]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <usart2_hart_init+0xb4>)
 8005080:	480d      	ldr	r0, [pc, #52]	@ (80050b8 <usart2_hart_init+0xb8>)
 8005082:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005084:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800508c:	6891      	ldr	r1, [r2, #8]
 800508e:	3470      	adds	r4, #112	@ 0x70
 8005090:	4321      	orrs	r1, r4
 8005092:	6091      	str	r1, [r2, #8]
 8005094:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	432a      	orrs	r2, r5
 800509c:	601a      	str	r2, [r3, #0]
		LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
	// Enable USART2 TX DMA request for data transmission
	LL_USART_EnableDMAReq_TX(USART2);
	// Enable DMA transfer complete interrupt for USART2 TX
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
}
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40020030 	.word	0x40020030
 80050a8:	40004424 	.word	0x40004424
 80050ac:	2000068c 	.word	0x2000068c
 80050b0:	20000690 	.word	0x20000690
 80050b4:	40020044 	.word	0x40020044
 80050b8:	40004428 	.word	0x40004428

080050bc <MX_USART2_UART_Init>:
{
 80050bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050be:	46de      	mov	lr, fp
 80050c0:	4657      	mov	r7, sl
 80050c2:	464e      	mov	r6, r9
 80050c4:	4645      	mov	r5, r8
 80050c6:	b5e0      	push	{r5, r6, r7, lr}
 80050c8:	b091      	sub	sp, #68	@ 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80050ca:	2620      	movs	r6, #32
 80050cc:	2220      	movs	r2, #32
 80050ce:	2100      	movs	r1, #0
 80050d0:	a808      	add	r0, sp, #32
 80050d2:	f002 fadf 	bl	8007694 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d6:	2218      	movs	r2, #24
 80050d8:	2100      	movs	r1, #0
 80050da:	a802      	add	r0, sp, #8
 80050dc:	f002 fada 	bl	8007694 <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 80050e0:	4b56      	ldr	r3, [pc, #344]	@ (800523c <MX_USART2_UART_Init+0x180>)
 80050e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e4:	2180      	movs	r1, #128	@ 0x80
 80050e6:	0289      	lsls	r1, r1, #10
 80050e8:	430a      	orrs	r2, r1
 80050ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80050ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ee:	400a      	ands	r2, r1
 80050f0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80050f2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80050f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f6:	2501      	movs	r5, #1
 80050f8:	432a      	orrs	r2, r5
 80050fa:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80050fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fe:	402b      	ands	r3, r5
 8005100:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005102:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005104:	2304      	movs	r3, #4
 8005106:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005108:	2402      	movs	r4, #2
 800510a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800510c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800510e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8005110:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005112:	27a0      	movs	r7, #160	@ 0xa0
 8005114:	05ff      	lsls	r7, r7, #23
 8005116:	a902      	add	r1, sp, #8
 8005118:	0038      	movs	r0, r7
 800511a:	f001 ffcd 	bl	80070b8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800511e:	2308      	movs	r3, #8
 8005120:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005122:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005124:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005126:	2400      	movs	r4, #0
 8005128:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800512a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800512c:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	a902      	add	r1, sp, #8
 8005130:	0038      	movs	r0, r7
 8005132:	f001 ffc1 	bl	80070b8 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005136:	4a42      	ldr	r2, [pc, #264]	@ (8005240 <MX_USART2_UART_Init+0x184>)
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	213f      	movs	r1, #63	@ 0x3f
 800513c:	468a      	mov	sl, r1
 800513e:	438b      	bics	r3, r1
 8005140:	390b      	subs	r1, #11
 8005142:	430b      	orrs	r3, r1
 8005144:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005146:	4b3f      	ldr	r3, [pc, #252]	@ (8005244 <MX_USART2_UART_Init+0x188>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	493f      	ldr	r1, [pc, #252]	@ (8005248 <MX_USART2_UART_Init+0x18c>)
 800514c:	4689      	mov	r9, r1
 800514e:	400a      	ands	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	493d      	ldr	r1, [pc, #244]	@ (800524c <MX_USART2_UART_Init+0x190>)
 8005156:	4688      	mov	r8, r1
 8005158:	400a      	ands	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	43b2      	bics	r2, r6
 8005160:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2140      	movs	r1, #64	@ 0x40
 8005166:	468c      	mov	ip, r1
 8005168:	438a      	bics	r2, r1
 800516a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2780      	movs	r7, #128	@ 0x80
 8005170:	43ba      	bics	r2, r7
 8005172:	433a      	orrs	r2, r7
 8005174:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4835      	ldr	r0, [pc, #212]	@ (8005250 <MX_USART2_UART_Init+0x194>)
 800517a:	4002      	ands	r2, r0
 800517c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4934      	ldr	r1, [pc, #208]	@ (8005254 <MX_USART2_UART_Init+0x198>)
 8005182:	468b      	mov	fp, r1
 8005184:	400a      	ands	r2, r1
 8005186:	601a      	str	r2, [r3, #0]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8005188:	4a33      	ldr	r2, [pc, #204]	@ (8005258 <MX_USART2_UART_Init+0x19c>)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	4651      	mov	r1, sl
 800518e:	438b      	bics	r3, r1
 8005190:	390a      	subs	r1, #10
 8005192:	430b      	orrs	r3, r1
 8005194:	6013      	str	r3, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <MX_USART2_UART_Init+0x1a0>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4649      	mov	r1, r9
 800519c:	400a      	ands	r2, r1
 800519e:	2110      	movs	r1, #16
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4641      	mov	r1, r8
 80051a8:	400a      	ands	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	43b2      	bics	r2, r6
 80051b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4661      	mov	r1, ip
 80051b6:	438a      	bics	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	43ba      	bics	r2, r7
 80051be:	433a      	orrs	r2, r7
 80051c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4002      	ands	r2, r0
 80051c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4659      	mov	r1, fp
 80051cc:	400a      	ands	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051d0:	4b23      	ldr	r3, [pc, #140]	@ (8005260 <MX_USART2_UART_Init+0x1a4>)
 80051d2:	21c7      	movs	r1, #199	@ 0xc7
 80051d4:	0089      	lsls	r1, r1, #2
 80051d6:	585a      	ldr	r2, [r3, r1]
 80051d8:	20ff      	movs	r0, #255	@ 0xff
 80051da:	4382      	bics	r2, r0
 80051dc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	0552      	lsls	r2, r2, #21
 80051e2:	601a      	str	r2, [r3, #0]
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80051e4:	9408      	str	r4, [sp, #32]
  USART_InitStruct.BaudRate = 115200;
 80051e6:	23e1      	movs	r3, #225	@ 0xe1
 80051e8:	025b      	lsls	r3, r3, #9
 80051ea:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80051ec:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80051ee:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80051f0:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80051f2:	230c      	movs	r3, #12
 80051f4:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80051f6:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80051f8:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80051fa:	4c1a      	ldr	r4, [pc, #104]	@ (8005264 <MX_USART2_UART_Init+0x1a8>)
 80051fc:	a908      	add	r1, sp, #32
 80051fe:	0020      	movs	r0, r4
 8005200:	f002 f908 	bl	8007414 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <MX_USART2_UART_Init+0x1ac>)
 8005208:	4013      	ands	r3, r2
 800520a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800520c:	68a3      	ldr	r3, [r4, #8]
 800520e:	222a      	movs	r2, #42	@ 0x2a
 8005210:	4393      	bics	r3, r2
 8005212:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	432b      	orrs	r3, r5
 8005218:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <MX_USART2_UART_Init+0x1a8>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	d5fb      	bpl.n	800521a <MX_USART2_UART_Init+0x15e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <MX_USART2_UART_Init+0x1a8>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	025b      	lsls	r3, r3, #9
 8005228:	d5f7      	bpl.n	800521a <MX_USART2_UART_Init+0x15e>
	usart2_hart_init();
 800522a:	f7ff fee9 	bl	8005000 <usart2_hart_init>
}
 800522e:	b011      	add	sp, #68	@ 0x44
 8005230:	bcf0      	pop	{r4, r5, r6, r7}
 8005232:	46bb      	mov	fp, r7
 8005234:	46b2      	mov	sl, r6
 8005236:	46a9      	mov	r9, r5
 8005238:	46a0      	mov	r8, r4
 800523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	40020808 	.word	0x40020808
 8005244:	40020030 	.word	0x40020030
 8005248:	ffffbfef 	.word	0xffffbfef
 800524c:	ffffcfff 	.word	0xffffcfff
 8005250:	fffffcff 	.word	0xfffffcff
 8005254:	fffff3ff 	.word	0xfffff3ff
 8005258:	4002080c 	.word	0x4002080c
 800525c:	40020044 	.word	0x40020044
 8005260:	e000e100 	.word	0xe000e100
 8005264:	40004400 	.word	0x40004400
 8005268:	ffffb7ff 	.word	0xffffb7ff

0800526c <usart1_transmit_dma>:
 * @param size Size of the data to be transmitted, specifying the number of bytes
 *             in the buffer to send.
 * @retval None
 */
void usart1_transmit_dma(uint8_t *buf, uint16_t size) {
	if (g_uart_in_transmit_commplete == 1) {
 800526c:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <usart1_transmit_dma+0x28>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d000      	beq.n	8005276 <usart1_transmit_dma+0xa>
		// Set the DMA transmission size
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, size);
		// Start the DMA transmission
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
	}
}
 8005274:	4770      	bx	lr
		g_uart_in_transmit_commplete = 0; // Mark transmission as ongoing
 8005276:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <usart1_transmit_dma+0x28>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <usart1_transmit_dma+0x2c>)
 800527e:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	0c12      	lsrs	r2, r2, #16
 8005284:	0412      	lsls	r2, r2, #16
 8005286:	4311      	orrs	r1, r2
 8005288:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	2101      	movs	r1, #1
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	e7ef      	b.n	8005274 <usart1_transmit_dma+0x8>
 8005294:	200000c5 	.word	0x200000c5
 8005298:	4002001c 	.word	0x4002001c

0800529c <usart2_transmit_dma>:
 * @param size Size of the data to be transmitted, specifying the number of bytes
 *             in the buffer to send.
 * @retval None
 */
void usart2_transmit_dma(uint8_t *buf, uint16_t size) {
	if (g_uart_out_transmit_commplete == 1) {
 800529c:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <usart2_transmit_dma+0x28>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d000      	beq.n	80052a6 <usart2_transmit_dma+0xa>
		// Set the DMA transmission size
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, size);
		// Start the DMA transmission
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
	}
}
 80052a4:	4770      	bx	lr
		g_uart_out_transmit_commplete = 0; // Mark transmission as ongoing
 80052a6:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <usart2_transmit_dma+0x28>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <usart2_transmit_dma+0x2c>)
 80052ae:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	0c12      	lsrs	r2, r2, #16
 80052b4:	0412      	lsls	r2, r2, #16
 80052b6:	4311      	orrs	r1, r2
 80052b8:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2101      	movs	r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	e7ef      	b.n	80052a4 <usart2_transmit_dma+0x8>
 80052c4:	200000c4 	.word	0x200000c4
 80052c8:	40020044 	.word	0x40020044

080052cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052cc:	480d      	ldr	r0, [pc, #52]	@ (8005304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80052d0:	f7ff fcb6 	bl	8004c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052d4:	480c      	ldr	r0, [pc, #48]	@ (8005308 <LoopForever+0x6>)
  ldr r1, =_edata
 80052d6:	490d      	ldr	r1, [pc, #52]	@ (800530c <LoopForever+0xa>)
  ldr r2, =_sidata
 80052d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005310 <LoopForever+0xe>)
  movs r3, #0
 80052da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052dc:	e002      	b.n	80052e4 <LoopCopyDataInit>

080052de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052e2:	3304      	adds	r3, #4

080052e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e8:	d3f9      	bcc.n	80052de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052ec:	4c0a      	ldr	r4, [pc, #40]	@ (8005318 <LoopForever+0x16>)
  movs r3, #0
 80052ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052f0:	e001      	b.n	80052f6 <LoopFillZerobss>

080052f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f4:	3204      	adds	r2, #4

080052f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f8:	d3fb      	bcc.n	80052f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052fa:	f002 f9eb 	bl	80076d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80052fe:	f7ff f9dd 	bl	80046bc <main>

08005302 <LoopForever>:

LoopForever:
  b LoopForever
 8005302:	e7fe      	b.n	8005302 <LoopForever>
  ldr   r0, =_estack
 8005304:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005308:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800530c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8005310:	0800787c 	.word	0x0800787c
  ldr r2, =_sbss
 8005314:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8005318:	20001008 	.word	0x20001008

0800531c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800531c:	e7fe      	b.n	800531c <ADC1_IRQHandler>

0800531e <get_page>:
 * @param addr The memory address to check.
 * @retval The page number corresponding to the provided address.
 */
static uint32_t get_page(uint32_t addr)
{
    return (addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / STM32G0xx_PAGE_SIZE; // Return the page number
 800531e:	23f8      	movs	r3, #248	@ 0xf8
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	469c      	mov	ip, r3
 8005324:	4460      	add	r0, ip
 8005326:	0ac0      	lsrs	r0, r0, #11
}
 8005328:	4770      	bx	lr

0800532a <set_byte_in_uint64>:
 * @param byte_index The index of the byte to modify (0-7).
 * @param new_value The new byte value to set (0-255).
 * @retval None
 */
static void set_byte_in_uint64(uint64_t *data, uint8_t byte_index, uint8_t new_value)
{
 800532a:	b570      	push	{r4, r5, r6, lr}
    // Clear the byte at the specified index
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 800532c:	6804      	ldr	r4, [r0, #0]
 800532e:	6843      	ldr	r3, [r0, #4]
 8005330:	00c9      	lsls	r1, r1, #3
 8005332:	000e      	movs	r6, r1
 8005334:	3e20      	subs	r6, #32
 8005336:	d413      	bmi.n	8005360 <set_byte_in_uint64+0x36>
 8005338:	25ff      	movs	r5, #255	@ 0xff
 800533a:	40b5      	lsls	r5, r6
 800533c:	26ff      	movs	r6, #255	@ 0xff
 800533e:	408e      	lsls	r6, r1
 8005340:	43b4      	bics	r4, r6
 8005342:	43ab      	bics	r3, r5
 8005344:	6004      	str	r4, [r0, #0]
 8005346:	6043      	str	r3, [r0, #4]
    // Set the new byte value
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 8005348:	000d      	movs	r5, r1
 800534a:	3d20      	subs	r5, #32
 800534c:	d40d      	bmi.n	800536a <set_byte_in_uint64+0x40>
 800534e:	0016      	movs	r6, r2
 8005350:	40ae      	lsls	r6, r5
 8005352:	0035      	movs	r5, r6
 8005354:	408a      	lsls	r2, r1
 8005356:	4314      	orrs	r4, r2
 8005358:	6004      	str	r4, [r0, #0]
 800535a:	432b      	orrs	r3, r5
 800535c:	6043      	str	r3, [r0, #4]
}
 800535e:	bd70      	pop	{r4, r5, r6, pc}
    *data &= ~((uint64_t)(0xFF) << (byte_index * 8)); // Clear the byte
 8005360:	2620      	movs	r6, #32
 8005362:	1a76      	subs	r6, r6, r1
 8005364:	25ff      	movs	r5, #255	@ 0xff
 8005366:	40f5      	lsrs	r5, r6
 8005368:	e7e8      	b.n	800533c <set_byte_in_uint64+0x12>
    *data |= (uint64_t)new_value << (byte_index * 8); // Update the byte
 800536a:	2520      	movs	r5, #32
 800536c:	1a6d      	subs	r5, r5, r1
 800536e:	0016      	movs	r6, r2
 8005370:	40ee      	lsrs	r6, r5
 8005372:	0035      	movs	r5, r6
 8005374:	e7ee      	b.n	8005354 <set_byte_in_uint64+0x2a>

08005376 <my_flash_read_double_word>:
 * @param address The memory address from which to read.
 * @retval The 64-bit value read from the memory address.
 */
static uint64_t my_flash_read_double_word(uint32_t address)
{
    return *((__IO uint64_t *)(address)); // Read and return the 64-bit value
 8005376:	6841      	ldr	r1, [r0, #4]
 8005378:	6800      	ldr	r0, [r0, #0]
}
 800537a:	4770      	bx	lr

0800537c <my_flash_earse_pages>:
 * 
 * @param page_address The address of the page to be erased.
 * @retval Success status (true if successful, false otherwise).
 */
static bool my_flash_earse_pages(uint32_t page_address)
{
 800537c:	b510      	push	{r4, lr}
 800537e:	b086      	sub	sp, #24
    uint32_t page_error = 0; // Variable to hold error information if the erase fails
 8005380:	2300      	movs	r3, #0
 8005382:	9305      	str	r3, [sp, #20]
    FLASH_EraseInitTypeDef my_flash; // Structure for flash erase initialization
    
    my_flash.TypeErase = FLASH_TYPEERASE_PAGES; // Specify that we are erasing pages
 8005384:	3302      	adds	r3, #2
 8005386:	9301      	str	r3, [sp, #4]
    my_flash.Page = get_page(page_address); // Get the page number based on the address
 8005388:	f7ff ffc9 	bl	800531e <get_page>
 800538c:	9003      	str	r0, [sp, #12]
    my_flash.NbPages = 1; // Specify that we want to erase one page
 800538e:	2301      	movs	r3, #1
 8005390:	9304      	str	r3, [sp, #16]
    
    HAL_FLASH_Unlock(); // Unlock the flash memory for write access
 8005392:	f001 f823 	bl	80063dc <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&my_flash, &page_error); // Perform the erase operation
 8005396:	a905      	add	r1, sp, #20
 8005398:	a801      	add	r0, sp, #4
 800539a:	f001 f8cd 	bl	8006538 <HAL_FLASHEx_Erase>
 800539e:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 80053a0:	f001 f89c 	bl	80064dc <HAL_FLASH_Lock>
    
    // Return true if the erase was successful, false otherwise
    return (status == HAL_OK) ? true : false;
 80053a4:	4263      	negs	r3, r4
 80053a6:	415c      	adcs	r4, r3
 80053a8:	b2e0      	uxtb	r0, r4
}
 80053aa:	b006      	add	sp, #24
 80053ac:	bd10      	pop	{r4, pc}

080053ae <my_flash_write_double_word>:
 * @param address The memory address to which the data will be written.
 * @param data The 64-bit data to be written.
 * @retval true if the write operation is successful, false otherwise.
 */
static bool my_flash_write_double_word(uint32_t address, uint64_t data)
{
 80053ae:	b570      	push	{r4, r5, r6, lr}
 80053b0:	0004      	movs	r4, r0
 80053b2:	0016      	movs	r6, r2
 80053b4:	001d      	movs	r5, r3
    HAL_FLASH_Unlock(); // Unlock the flash memory for writing
 80053b6:	f001 f811 	bl	80063dc <HAL_FLASH_Unlock>
    HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data); // Program the double word
 80053ba:	0032      	movs	r2, r6
 80053bc:	002b      	movs	r3, r5
 80053be:	0021      	movs	r1, r4
 80053c0:	2001      	movs	r0, #1
 80053c2:	f001 f859 	bl	8006478 <HAL_FLASH_Program>
 80053c6:	0004      	movs	r4, r0
    HAL_FLASH_Lock(); // Lock the flash memory again
 80053c8:	f001 f888 	bl	80064dc <HAL_FLASH_Lock>

    return (status == HAL_OK); // Return success status
 80053cc:	4263      	negs	r3, r4
 80053ce:	415c      	adcs	r4, r3
 80053d0:	b2e0      	uxtb	r0, r4
}
 80053d2:	bd70      	pop	{r4, r5, r6, pc}

080053d4 <get_rgb_light>:
 * @param None
 * @retval The current RGB brightness value.
 */
uint8_t get_rgb_light(void)
{
    return *((__IO uint8_t *)(RGB_LIGHT_ADDR)); // Read and return the current RGB brightness value
 80053d4:	4b01      	ldr	r3, [pc, #4]	@ (80053dc <get_rgb_light+0x8>)
 80053d6:	7818      	ldrb	r0, [r3, #0]
 80053d8:	b2c0      	uxtb	r0, r0
}
 80053da:	4770      	bx	lr
 80053dc:	0800c001 	.word	0x0800c001

080053e0 <set_rgb_light>:
{
 80053e0:	b530      	push	{r4, r5, lr}
 80053e2:	b083      	sub	sp, #12
 80053e4:	0004      	movs	r4, r0
    uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR); // Read current RGB light data
 80053e6:	4d0e      	ldr	r5, [pc, #56]	@ (8005420 <set_rgb_light+0x40>)
 80053e8:	0028      	movs	r0, r5
 80053ea:	f7ff ffc4 	bl	8005376 <my_flash_read_double_word>
 80053ee:	9000      	str	r0, [sp, #0]
 80053f0:	9101      	str	r1, [sp, #4]
    set_byte_in_uint64(&temp, 1, data); // Modify the brightness byte
 80053f2:	0022      	movs	r2, r4
 80053f4:	2101      	movs	r1, #1
 80053f6:	4668      	mov	r0, sp
 80053f8:	f7ff ff97 	bl	800532a <set_byte_in_uint64>
    my_flash_earse_pages(STM32G0xx_FLASH_PAGE24_STARTADDR); // Erase the flash page
 80053fc:	0028      	movs	r0, r5
 80053fe:	f7ff ffbd 	bl	800537c <my_flash_earse_pages>
    while (!my_flash_write_double_word(STM32G0xx_FLASH_PAGE24_STARTADDR, temp))
 8005402:	9a00      	ldr	r2, [sp, #0]
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	4806      	ldr	r0, [pc, #24]	@ (8005420 <set_rgb_light+0x40>)
 8005408:	f7ff ffd1 	bl	80053ae <my_flash_write_double_word>
 800540c:	2800      	cmp	r0, #0
 800540e:	d0f8      	beq.n	8005402 <set_rgb_light+0x22>
    return (get_rgb_light() == data);
 8005410:	f7ff ffe0 	bl	80053d4 <get_rgb_light>
 8005414:	1b00      	subs	r0, r0, r4
 8005416:	4243      	negs	r3, r0
 8005418:	4158      	adcs	r0, r3
 800541a:	b2c0      	uxtb	r0, r0
}
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	0800c000 	.word	0x0800c000

08005424 <get_bootloader_version>:
 * @param None
 * @retval The bootloader version number.
 */
uint8_t get_bootloader_version(void)
{
    return *((__IO uint8_t *)(BOOTLOADER_VERSION_ADDR)); // Read and return the bootloader version number
 8005424:	4b01      	ldr	r3, [pc, #4]	@ (800542c <get_bootloader_version+0x8>)
 8005426:	7818      	ldrb	r0, [r3, #0]
 8005428:	b2c0      	uxtb	r0, r0
}
 800542a:	4770      	bx	lr
 800542c:	08001fff 	.word	0x08001fff

08005430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005430:	b510      	push	{r4, lr}
 8005432:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_InitTick+0x4c>)
 8005436:	7819      	ldrb	r1, [r3, #0]
 8005438:	2900      	cmp	r1, #0
 800543a:	d101      	bne.n	8005440 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800543c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800543e:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005440:	20fa      	movs	r0, #250	@ 0xfa
 8005442:	0080      	lsls	r0, r0, #2
 8005444:	f7fc fe60 	bl	8002108 <__udivsi3>
 8005448:	0001      	movs	r1, r0
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <HAL_InitTick+0x50>)
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	f7fc fe5b 	bl	8002108 <__udivsi3>
 8005452:	f000 fdaf 	bl	8005fb4 <HAL_SYSTICK_Config>
 8005456:	2800      	cmp	r0, #0
 8005458:	d10d      	bne.n	8005476 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800545a:	2c03      	cmp	r4, #3
 800545c:	d901      	bls.n	8005462 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 800545e:	2001      	movs	r0, #1
 8005460:	e7ed      	b.n	800543e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005462:	3001      	adds	r0, #1
 8005464:	2200      	movs	r2, #0
 8005466:	0021      	movs	r1, r4
 8005468:	4240      	negs	r0, r0
 800546a:	f000 fd93 	bl	8005f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800546e:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_InitTick+0x54>)
 8005470:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8005472:	2000      	movs	r0, #0
 8005474:	e7e3      	b.n	800543e <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8005476:	2001      	movs	r0, #1
 8005478:	e7e1      	b.n	800543e <HAL_InitTick+0xe>
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	200000e4 	.word	0x200000e4
 8005480:	200000e0 	.word	0x200000e0
 8005484:	200000e8 	.word	0x200000e8

08005488 <HAL_Init>:
{
 8005488:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800548a:	4a08      	ldr	r2, [pc, #32]	@ (80054ac <HAL_Init+0x24>)
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	2380      	movs	r3, #128	@ 0x80
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	430b      	orrs	r3, r1
 8005494:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005496:	2003      	movs	r0, #3
 8005498:	f7ff ffca 	bl	8005430 <HAL_InitTick>
 800549c:	1e04      	subs	r4, r0, #0
 800549e:	d002      	beq.n	80054a6 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80054a0:	2401      	movs	r4, #1
}
 80054a2:	0020      	movs	r0, r4
 80054a4:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80054a6:	f7ff f99b 	bl	80047e0 <HAL_MspInit>
 80054aa:	e7fa      	b.n	80054a2 <HAL_Init+0x1a>
 80054ac:	40022000 	.word	0x40022000

080054b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80054b0:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <HAL_IncTick+0x10>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4a03      	ldr	r2, [pc, #12]	@ (80054c4 <HAL_IncTick+0x14>)
 80054b6:	6811      	ldr	r1, [r2, #0]
 80054b8:	185b      	adds	r3, r3, r1
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	4770      	bx	lr
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	200000e4 	.word	0x200000e4
 80054c4:	20000ea0 	.word	0x20000ea0

080054c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80054c8:	4b01      	ldr	r3, [pc, #4]	@ (80054d0 <HAL_GetTick+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
}
 80054cc:	4770      	bx	lr
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	20000ea0 	.word	0x20000ea0

080054d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80054d8:	f7ff fff6 	bl	80054c8 <HAL_GetTick>
 80054dc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054de:	1c63      	adds	r3, r4, #1
 80054e0:	d002      	beq.n	80054e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80054e2:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <HAL_Delay+0x20>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054e8:	f7ff ffee 	bl	80054c8 <HAL_GetTick>
 80054ec:	1b40      	subs	r0, r0, r5
 80054ee:	42a0      	cmp	r0, r4
 80054f0:	d3fa      	bcc.n	80054e8 <HAL_Delay+0x14>
  {
  }
}
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	200000e4 	.word	0x200000e4

080054f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054f8:	b530      	push	{r4, r5, lr}
 80054fa:	b083      	sub	sp, #12
 80054fc:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054fe:	2300      	movs	r3, #0
 8005500:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005502:	2800      	cmp	r0, #0
 8005504:	d100      	bne.n	8005508 <HAL_ADC_Init+0x10>
 8005506:	e106      	b.n	8005716 <HAL_ADC_Init+0x21e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005508:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <HAL_ADC_Init+0x3e>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800550e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	d41c      	bmi.n	8005550 <HAL_ADC_Init+0x58>
  MODIFY_REG(ADCx->CR,
 8005516:	6899      	ldr	r1, [r3, #8]
 8005518:	4a80      	ldr	r2, [pc, #512]	@ (800571c <HAL_ADC_Init+0x224>)
 800551a:	4011      	ands	r1, r2
 800551c:	2280      	movs	r2, #128	@ 0x80
 800551e:	0552      	lsls	r2, r2, #21
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005524:	4b7e      	ldr	r3, [pc, #504]	@ (8005720 <HAL_ADC_Init+0x228>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	497e      	ldr	r1, [pc, #504]	@ (8005724 <HAL_ADC_Init+0x22c>)
 800552a:	f7fc fded 	bl	8002108 <__udivsi3>
 800552e:	3001      	adds	r0, #1
 8005530:	0040      	lsls	r0, r0, #1
 8005532:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8005534:	e009      	b.n	800554a <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 8005536:	f7fe ff65 	bl	8004404 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800553a:	2300      	movs	r3, #0
 800553c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800553e:	2254      	movs	r2, #84	@ 0x54
 8005540:	54a3      	strb	r3, [r4, r2]
 8005542:	e7e4      	b.n	800550e <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8005544:	9b01      	ldr	r3, [sp, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800554a:	9b01      	ldr	r3, [sp, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f9      	bne.n	8005544 <HAL_ADC_Init+0x4c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005550:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	00d2      	lsls	r2, r2, #3
 8005556:	d500      	bpl.n	800555a <HAL_ADC_Init+0x62>
 8005558:	e09d      	b.n	8005696 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800555c:	2110      	movs	r1, #16
 800555e:	430a      	orrs	r2, r1
 8005560:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005562:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005564:	390f      	subs	r1, #15
 8005566:	430a      	orrs	r2, r1
 8005568:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800556a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	2104      	movs	r1, #4
 8005570:	000d      	movs	r5, r1
 8005572:	4015      	ands	r5, r2
 8005574:	4211      	tst	r1, r2
 8005576:	d000      	beq.n	800557a <HAL_ADC_Init+0x82>
 8005578:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800557a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800557c:	06d2      	lsls	r2, r2, #27
 800557e:	d500      	bpl.n	8005582 <HAL_ADC_Init+0x8a>
 8005580:	e0c2      	b.n	8005708 <HAL_ADC_Init+0x210>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005582:	2d00      	cmp	r5, #0
 8005584:	d000      	beq.n	8005588 <HAL_ADC_Init+0x90>
 8005586:	e0bf      	b.n	8005708 <HAL_ADC_Init+0x210>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005588:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800558a:	4967      	ldr	r1, [pc, #412]	@ (8005728 <HAL_ADC_Init+0x230>)
 800558c:	400a      	ands	r2, r1
 800558e:	3106      	adds	r1, #6
 8005590:	31ff      	adds	r1, #255	@ 0xff
 8005592:	430a      	orrs	r2, r1
 8005594:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	07d2      	lsls	r2, r2, #31
 800559a:	d452      	bmi.n	8005642 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800559c:	68a2      	ldr	r2, [r4, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800559e:	7e21      	ldrb	r1, [r4, #24]
 80055a0:	0389      	lsls	r1, r1, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80055a2:	430a      	orrs	r2, r1
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80055a4:	7e61      	ldrb	r1, [r4, #25]
 80055a6:	03c9      	lsls	r1, r1, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80055a8:	430a      	orrs	r2, r1
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80055aa:	7ea5      	ldrb	r5, [r4, #26]
 80055ac:	0369      	lsls	r1, r5, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80055ae:	430a      	orrs	r2, r1
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80055b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80055b2:	2900      	cmp	r1, #0
 80055b4:	d001      	beq.n	80055ba <HAL_ADC_Init+0xc2>
 80055b6:	2180      	movs	r1, #128	@ 0x80
 80055b8:	0149      	lsls	r1, r1, #5
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80055ba:	430a      	orrs	r2, r1
                    hadc->Init.DataAlign                                           |
 80055bc:	68e1      	ldr	r1, [r4, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80055be:	430a      	orrs	r2, r1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80055c0:	6921      	ldr	r1, [r4, #16]
 80055c2:	2900      	cmp	r1, #0
 80055c4:	db69      	blt.n	800569a <HAL_ADC_Init+0x1a2>
 80055c6:	2180      	movs	r1, #128	@ 0x80
 80055c8:	0389      	lsls	r1, r1, #14
                    hadc->Init.DataAlign                                           |
 80055ca:	430a      	orrs	r2, r1
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80055cc:	212c      	movs	r1, #44	@ 0x2c
 80055ce:	5c61      	ldrb	r1, [r4, r1]
 80055d0:	0049      	lsls	r1, r1, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80055d2:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055d4:	2120      	movs	r1, #32
 80055d6:	5c61      	ldrb	r1, [r4, r1]
 80055d8:	2901      	cmp	r1, #1
 80055da:	d061      	beq.n	80056a0 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055de:	2900      	cmp	r1, #0
 80055e0:	d005      	beq.n	80055ee <HAL_ADC_Init+0xf6>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80055e2:	25e0      	movs	r5, #224	@ 0xe0
 80055e4:	006d      	lsls	r5, r5, #1
 80055e6:	4029      	ands	r1, r5
                      hadc->Init.ExternalTrigConvEdge);
 80055e8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80055ea:	4329      	orrs	r1, r5
 80055ec:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80055ee:	68d9      	ldr	r1, [r3, #12]
 80055f0:	4d4e      	ldr	r5, [pc, #312]	@ (800572c <HAL_ADC_Init+0x234>)
 80055f2:	4029      	ands	r1, r5
 80055f4:	430a      	orrs	r2, r1
 80055f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	0f9b      	lsrs	r3, r3, #30
 80055fc:	079b      	lsls	r3, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80055fe:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005600:	431a      	orrs	r2, r3
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005602:	213c      	movs	r1, #60	@ 0x3c
 8005604:	5c61      	ldrb	r1, [r4, r1]
 8005606:	2901      	cmp	r1, #1
 8005608:	d059      	beq.n	80056be <HAL_ADC_Init+0x1c6>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800560a:	6821      	ldr	r1, [r4, #0]
 800560c:	690b      	ldr	r3, [r1, #16]
 800560e:	4d48      	ldr	r5, [pc, #288]	@ (8005730 <HAL_ADC_Init+0x238>)
 8005610:	402b      	ands	r3, r5
 8005612:	4313      	orrs	r3, r2
 8005614:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	22c0      	movs	r2, #192	@ 0xc0
 800561a:	0612      	lsls	r2, r2, #24
 800561c:	4293      	cmp	r3, r2
 800561e:	d010      	beq.n	8005642 <HAL_ADC_Init+0x14a>
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	05d2      	lsls	r2, r2, #23
 8005624:	4293      	cmp	r3, r2
 8005626:	d00c      	beq.n	8005642 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005628:	2280      	movs	r2, #128	@ 0x80
 800562a:	0612      	lsls	r2, r2, #24
 800562c:	4293      	cmp	r3, r2
 800562e:	d008      	beq.n	8005642 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005630:	4940      	ldr	r1, [pc, #256]	@ (8005734 <HAL_ADC_Init+0x23c>)
 8005632:	680a      	ldr	r2, [r1, #0]
 8005634:	4d40      	ldr	r5, [pc, #256]	@ (8005738 <HAL_ADC_Init+0x240>)
 8005636:	402a      	ands	r2, r5
 8005638:	25f0      	movs	r5, #240	@ 0xf0
 800563a:	03ad      	lsls	r5, r5, #14
 800563c:	402b      	ands	r3, r5
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8005646:	694a      	ldr	r2, [r1, #20]
 8005648:	2507      	movs	r5, #7
 800564a:	43aa      	bics	r2, r5
 800564c:	4313      	orrs	r3, r2
 800564e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005654:	694b      	ldr	r3, [r1, #20]
 8005656:	3569      	adds	r5, #105	@ 0x69
 8005658:	43ab      	bics	r3, r5
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	4313      	orrs	r3, r2
 800565e:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d135      	bne.n	80056d2 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800566a:	3b10      	subs	r3, #16
 800566c:	430b      	orrs	r3, r1
 800566e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005670:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	2307      	movs	r3, #7
 8005676:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 8005678:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800567a:	429a      	cmp	r2, r3
 800567c:	d03b      	beq.n	80056f6 <HAL_ADC_Init+0x1fe>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800567e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005680:	2212      	movs	r2, #18
 8005682:	4393      	bics	r3, r2
 8005684:	3a02      	subs	r2, #2
 8005686:	4313      	orrs	r3, r2
 8005688:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800568c:	3a0f      	subs	r2, #15
 800568e:	4313      	orrs	r3, r2
 8005690:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005692:	2001      	movs	r0, #1
 8005694:	e03d      	b.n	8005712 <HAL_ADC_Init+0x21a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005696:	2000      	movs	r0, #0
 8005698:	e768      	b.n	800556c <HAL_ADC_Init+0x74>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800569a:	0049      	lsls	r1, r1, #1
 800569c:	0849      	lsrs	r1, r1, #1
 800569e:	e794      	b.n	80055ca <HAL_ADC_Init+0xd2>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80056a0:	2d00      	cmp	r5, #0
 80056a2:	d103      	bne.n	80056ac <HAL_ADC_Init+0x1b4>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80056a4:	2180      	movs	r1, #128	@ 0x80
 80056a6:	0249      	lsls	r1, r1, #9
 80056a8:	430a      	orrs	r2, r1
 80056aa:	e797      	b.n	80055dc <HAL_ADC_Init+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ac:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80056ae:	2520      	movs	r5, #32
 80056b0:	4329      	orrs	r1, r5
 80056b2:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056b4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80056b6:	3d1f      	subs	r5, #31
 80056b8:	4329      	orrs	r1, r5
 80056ba:	65e1      	str	r1, [r4, #92]	@ 0x5c
 80056bc:	e78e      	b.n	80055dc <HAL_ADC_Init+0xe4>
                      hadc->Init.Oversampling.Ratio         |
 80056be:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056c0:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.RightBitShift |
 80056c2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80056c4:	430b      	orrs	r3, r1
                      hadc->Init.Oversampling.TriggeredMode
 80056c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80056c8:	430b      	orrs	r3, r1
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80056ca:	4313      	orrs	r3, r2
 80056cc:	2201      	movs	r2, #1
 80056ce:	431a      	orrs	r2, r3
 80056d0:	e79b      	b.n	800560a <HAL_ADC_Init+0x112>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056d2:	2280      	movs	r2, #128	@ 0x80
 80056d4:	0392      	lsls	r2, r2, #14
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d1ca      	bne.n	8005670 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	221c      	movs	r2, #28
 80056e6:	401a      	ands	r2, r3
 80056e8:	2310      	movs	r3, #16
 80056ea:	425b      	negs	r3, r3
 80056ec:	4093      	lsls	r3, r2
 80056ee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80056f0:	4313      	orrs	r3, r2
 80056f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80056f4:	e7bc      	b.n	8005670 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80056f6:	2300      	movs	r3, #0
 80056f8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80056fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056fc:	2203      	movs	r2, #3
 80056fe:	4393      	bics	r3, r2
 8005700:	3a02      	subs	r2, #2
 8005702:	4313      	orrs	r3, r2
 8005704:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005706:	e004      	b.n	8005712 <HAL_ADC_Init+0x21a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005708:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800570a:	2210      	movs	r2, #16
 800570c:	4313      	orrs	r3, r2
 800570e:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005710:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8005712:	b003      	add	sp, #12
 8005714:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005716:	2001      	movs	r0, #1
 8005718:	e7fb      	b.n	8005712 <HAL_ADC_Init+0x21a>
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	6fffffe8 	.word	0x6fffffe8
 8005720:	200000e0 	.word	0x200000e0
 8005724:	00030d40 	.word	0x00030d40
 8005728:	fffffefd 	.word	0xfffffefd
 800572c:	ffde0201 	.word	0xffde0201
 8005730:	1ffffc02 	.word	0x1ffffc02
 8005734:	40012708 	.word	0x40012708
 8005738:	ffc3ffff 	.word	0xffc3ffff

0800573c <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800573c:	4770      	bx	lr

0800573e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800573e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005740:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005742:	f7ff fffb 	bl	800573c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005746:	bd10      	pop	{r4, pc}

08005748 <HAL_ADC_ErrorCallback>:
}
 8005748:	4770      	bx	lr

0800574a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800574a:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800574e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005750:	2240      	movs	r2, #64	@ 0x40
 8005752:	4313      	orrs	r3, r2
 8005754:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005756:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005758:	3a3c      	subs	r2, #60	@ 0x3c
 800575a:	4313      	orrs	r3, r2
 800575c:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800575e:	f7ff fff3 	bl	8005748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005762:	bd10      	pop	{r4, pc}

08005764 <ADC_DMAConvCplt>:
{
 8005764:	b510      	push	{r4, lr}
 8005766:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005768:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800576a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800576c:	2150      	movs	r1, #80	@ 0x50
 800576e:	4211      	tst	r1, r2
 8005770:	d12a      	bne.n	80057c8 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005772:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4313      	orrs	r3, r2
 800577a:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800577c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	22c0      	movs	r2, #192	@ 0xc0
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	4211      	tst	r1, r2
 8005786:	d113      	bne.n	80057b0 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005788:	7e82      	ldrb	r2, [r0, #26]
 800578a:	2a00      	cmp	r2, #0
 800578c:	d110      	bne.n	80057b0 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	0712      	lsls	r2, r2, #28
 8005792:	d50d      	bpl.n	80057b0 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	0752      	lsls	r2, r2, #29
 8005798:	d40d      	bmi.n	80057b6 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	210c      	movs	r1, #12
 800579e:	438a      	bics	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80057a2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80057a4:	4a0e      	ldr	r2, [pc, #56]	@ (80057e0 <ADC_DMAConvCplt+0x7c>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	3204      	adds	r2, #4
 80057aa:	32ff      	adds	r2, #255	@ 0xff
 80057ac:	4313      	orrs	r3, r2
 80057ae:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80057b0:	f7fe fb82 	bl	8003eb8 <HAL_ADC_ConvCpltCallback>
}
 80057b4:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80057b8:	2220      	movs	r2, #32
 80057ba:	4313      	orrs	r3, r2
 80057bc:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057be:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80057c0:	3a1f      	subs	r2, #31
 80057c2:	4313      	orrs	r3, r2
 80057c4:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80057c6:	e7f3      	b.n	80057b0 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057c8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80057ca:	06d2      	lsls	r2, r2, #27
 80057cc:	d404      	bmi.n	80057d8 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057ce:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80057d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057d2:	0018      	movs	r0, r3
 80057d4:	4790      	blx	r2
}
 80057d6:	e7ed      	b.n	80057b4 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 80057d8:	f7ff ffb6 	bl	8005748 <HAL_ADC_ErrorCallback>
 80057dc:	e7ea      	b.n	80057b4 <ADC_DMAConvCplt+0x50>
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	fffffefe 	.word	0xfffffefe

080057e4 <HAL_ADC_ConfigChannel>:
{
 80057e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e6:	b083      	sub	sp, #12
 80057e8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80057ee:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 80057f0:	3354      	adds	r3, #84	@ 0x54
 80057f2:	5cc3      	ldrb	r3, [r0, r3]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d100      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x16>
 80057f8:	e12f      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x276>
 80057fa:	2354      	movs	r3, #84	@ 0x54
 80057fc:	2201      	movs	r2, #1
 80057fe:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005800:	6800      	ldr	r0, [r0, #0]
 8005802:	6883      	ldr	r3, [r0, #8]
 8005804:	3203      	adds	r2, #3
 8005806:	0016      	movs	r6, r2
 8005808:	401e      	ands	r6, r3
 800580a:	421a      	tst	r2, r3
 800580c:	d009      	beq.n	8005822 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800580e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005810:	321c      	adds	r2, #28
 8005812:	4313      	orrs	r3, r2
 8005814:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8005816:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005818:	2354      	movs	r3, #84	@ 0x54
 800581a:	2200      	movs	r2, #0
 800581c:	54e2      	strb	r2, [r4, r3]
}
 800581e:	b003      	add	sp, #12
 8005820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8005822:	684b      	ldr	r3, [r1, #4]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d100      	bne.n	800582a <HAL_ADC_ConfigChannel+0x46>
 8005828:	e0d5      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	0612      	lsls	r2, r2, #24
 800582e:	4295      	cmp	r5, r2
 8005830:	d025      	beq.n	800587e <HAL_ADC_ConfigChannel+0x9a>
 8005832:	4a8b      	ldr	r2, [pc, #556]	@ (8005a60 <HAL_ADC_ConfigChannel+0x27c>)
 8005834:	4295      	cmp	r5, r2
 8005836:	d022      	beq.n	800587e <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005838:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800583a:	271f      	movs	r7, #31
 800583c:	401f      	ands	r7, r3
 800583e:	250f      	movs	r5, #15
 8005840:	40bd      	lsls	r5, r7
 8005842:	43aa      	bics	r2, r5
 8005844:	680b      	ldr	r3, [r1, #0]
 8005846:	035d      	lsls	r5, r3, #13
 8005848:	d12f      	bne.n	80058aa <HAL_ADC_ConfigChannel+0xc6>
 800584a:	0e9b      	lsrs	r3, r3, #26
 800584c:	261f      	movs	r6, #31
 800584e:	401e      	ands	r6, r3
 8005850:	40be      	lsls	r6, r7
 8005852:	4332      	orrs	r2, r6
 8005854:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005856:	684d      	ldr	r5, [r1, #4]
 8005858:	08ab      	lsrs	r3, r5, #2
 800585a:	3301      	adds	r3, #1
 800585c:	69e2      	ldr	r2, [r4, #28]
 800585e:	4293      	cmp	r3, r2
 8005860:	d813      	bhi.n	800588a <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005862:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8005864:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005866:	231f      	movs	r3, #31
 8005868:	401d      	ands	r5, r3
 800586a:	3b10      	subs	r3, #16
 800586c:	001f      	movs	r7, r3
 800586e:	40af      	lsls	r7, r5
 8005870:	43ba      	bics	r2, r7
 8005872:	0eb6      	lsrs	r6, r6, #26
 8005874:	4033      	ands	r3, r6
 8005876:	40ab      	lsls	r3, r5
 8005878:	4313      	orrs	r3, r2
 800587a:	6283      	str	r3, [r0, #40]	@ 0x28
}
 800587c:	e005      	b.n	800588a <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800587e:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005880:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005882:	035b      	lsls	r3, r3, #13
 8005884:	0b5b      	lsrs	r3, r3, #13
 8005886:	4313      	orrs	r3, r2
 8005888:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	680b      	ldr	r3, [r1, #0]
 800588e:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8005890:	6942      	ldr	r2, [r0, #20]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	439a      	bics	r2, r3
 8005896:	402b      	ands	r3, r5
 8005898:	4d72      	ldr	r5, [pc, #456]	@ (8005a64 <HAL_ADC_ConfigChannel+0x280>)
 800589a:	402b      	ands	r3, r5
 800589c:	4313      	orrs	r3, r2
 800589e:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058a0:	680b      	ldr	r3, [r1, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db4f      	blt.n	8005946 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058a6:	2000      	movs	r0, #0
 80058a8:	e7b6      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80058aa:	07dd      	lsls	r5, r3, #31
 80058ac:	d4d0      	bmi.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 80058ae:	079d      	lsls	r5, r3, #30
 80058b0:	d427      	bmi.n	8005902 <HAL_ADC_ConfigChannel+0x11e>
 80058b2:	075d      	lsls	r5, r3, #29
 80058b4:	d427      	bmi.n	8005906 <HAL_ADC_ConfigChannel+0x122>
 80058b6:	071d      	lsls	r5, r3, #28
 80058b8:	d427      	bmi.n	800590a <HAL_ADC_ConfigChannel+0x126>
 80058ba:	06dd      	lsls	r5, r3, #27
 80058bc:	d427      	bmi.n	800590e <HAL_ADC_ConfigChannel+0x12a>
 80058be:	069d      	lsls	r5, r3, #26
 80058c0:	d427      	bmi.n	8005912 <HAL_ADC_ConfigChannel+0x12e>
 80058c2:	065d      	lsls	r5, r3, #25
 80058c4:	d427      	bmi.n	8005916 <HAL_ADC_ConfigChannel+0x132>
 80058c6:	061d      	lsls	r5, r3, #24
 80058c8:	d427      	bmi.n	800591a <HAL_ADC_ConfigChannel+0x136>
 80058ca:	05dd      	lsls	r5, r3, #23
 80058cc:	d427      	bmi.n	800591e <HAL_ADC_ConfigChannel+0x13a>
 80058ce:	059d      	lsls	r5, r3, #22
 80058d0:	d427      	bmi.n	8005922 <HAL_ADC_ConfigChannel+0x13e>
 80058d2:	055d      	lsls	r5, r3, #21
 80058d4:	d427      	bmi.n	8005926 <HAL_ADC_ConfigChannel+0x142>
 80058d6:	051d      	lsls	r5, r3, #20
 80058d8:	d427      	bmi.n	800592a <HAL_ADC_ConfigChannel+0x146>
 80058da:	04dd      	lsls	r5, r3, #19
 80058dc:	d427      	bmi.n	800592e <HAL_ADC_ConfigChannel+0x14a>
 80058de:	049d      	lsls	r5, r3, #18
 80058e0:	d427      	bmi.n	8005932 <HAL_ADC_ConfigChannel+0x14e>
 80058e2:	045d      	lsls	r5, r3, #17
 80058e4:	d427      	bmi.n	8005936 <HAL_ADC_ConfigChannel+0x152>
 80058e6:	041d      	lsls	r5, r3, #16
 80058e8:	d427      	bmi.n	800593a <HAL_ADC_ConfigChannel+0x156>
 80058ea:	03dd      	lsls	r5, r3, #15
 80058ec:	d427      	bmi.n	800593e <HAL_ADC_ConfigChannel+0x15a>
 80058ee:	039d      	lsls	r5, r3, #14
 80058f0:	d427      	bmi.n	8005942 <HAL_ADC_ConfigChannel+0x15e>
 80058f2:	2580      	movs	r5, #128	@ 0x80
 80058f4:	02ed      	lsls	r5, r5, #11
 80058f6:	001e      	movs	r6, r3
 80058f8:	402e      	ands	r6, r5
 80058fa:	422b      	tst	r3, r5
 80058fc:	d0a8      	beq.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 80058fe:	2612      	movs	r6, #18
 8005900:	e7a6      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005902:	2601      	movs	r6, #1
 8005904:	e7a4      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005906:	2602      	movs	r6, #2
 8005908:	e7a2      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800590a:	2603      	movs	r6, #3
 800590c:	e7a0      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800590e:	2604      	movs	r6, #4
 8005910:	e79e      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005912:	2605      	movs	r6, #5
 8005914:	e79c      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005916:	2606      	movs	r6, #6
 8005918:	e79a      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800591a:	2607      	movs	r6, #7
 800591c:	e798      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800591e:	2608      	movs	r6, #8
 8005920:	e796      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005922:	2609      	movs	r6, #9
 8005924:	e794      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005926:	260a      	movs	r6, #10
 8005928:	e792      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800592a:	260b      	movs	r6, #11
 800592c:	e790      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800592e:	260c      	movs	r6, #12
 8005930:	e78e      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005932:	260d      	movs	r6, #13
 8005934:	e78c      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005936:	260e      	movs	r6, #14
 8005938:	e78a      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800593a:	260f      	movs	r6, #15
 800593c:	e788      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 800593e:	2610      	movs	r6, #16
 8005940:	e786      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
 8005942:	2611      	movs	r6, #17
 8005944:	e784      	b.n	8005850 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005946:	4a48      	ldr	r2, [pc, #288]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 8005948:	6811      	ldr	r1, [r2, #0]
 800594a:	22e0      	movs	r2, #224	@ 0xe0
 800594c:	0452      	lsls	r2, r2, #17
 800594e:	400a      	ands	r2, r1
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005950:	4846      	ldr	r0, [pc, #280]	@ (8005a6c <HAL_ADC_ConfigChannel+0x288>)
 8005952:	4283      	cmp	r3, r0
 8005954:	d007      	beq.n	8005966 <HAL_ADC_ConfigChannel+0x182>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005956:	4846      	ldr	r0, [pc, #280]	@ (8005a70 <HAL_ADC_ConfigChannel+0x28c>)
 8005958:	4283      	cmp	r3, r0
 800595a:	d022      	beq.n	80059a2 <HAL_ADC_ConfigChannel+0x1be>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800595c:	4845      	ldr	r0, [pc, #276]	@ (8005a74 <HAL_ADC_ConfigChannel+0x290>)
 800595e:	4283      	cmp	r3, r0
 8005960:	d02c      	beq.n	80059bc <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005962:	2000      	movs	r0, #0
 8005964:	e758      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005966:	0208      	lsls	r0, r1, #8
 8005968:	d4f5      	bmi.n	8005956 <HAL_ADC_ConfigChannel+0x172>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005970:	493d      	ldr	r1, [pc, #244]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 8005972:	680a      	ldr	r2, [r1, #0]
 8005974:	4840      	ldr	r0, [pc, #256]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 8005976:	4002      	ands	r2, r0
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800597c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a7c <HAL_ADC_ConfigChannel+0x298>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	493f      	ldr	r1, [pc, #252]	@ (8005a80 <HAL_ADC_ConfigChannel+0x29c>)
 8005982:	f7fc fbc1 	bl	8002108 <__udivsi3>
 8005986:	3001      	adds	r0, #1
 8005988:	0043      	lsls	r3, r0, #1
 800598a:	181b      	adds	r3, r3, r0
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005990:	e002      	b.n	8005998 <HAL_ADC_ConfigChannel+0x1b4>
            wait_loop_index--;
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	3b01      	subs	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f9      	bne.n	8005992 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800599e:	2000      	movs	r0, #0
 80059a0:	e73a      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059a2:	01c8      	lsls	r0, r1, #7
 80059a4:	d4da      	bmi.n	800595c <HAL_ADC_ConfigChannel+0x178>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	045b      	lsls	r3, r3, #17
 80059aa:	4313      	orrs	r3, r2
 80059ac:	492e      	ldr	r1, [pc, #184]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 80059ae:	680a      	ldr	r2, [r1, #0]
 80059b0:	4831      	ldr	r0, [pc, #196]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 80059b2:	4002      	ands	r2, r0
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059b8:	2000      	movs	r0, #0
}
 80059ba:	e72d      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80059bc:	0249      	lsls	r1, r1, #9
 80059be:	d44a      	bmi.n	8005a56 <HAL_ADC_ConfigChannel+0x272>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059c0:	2380      	movs	r3, #128	@ 0x80
 80059c2:	03db      	lsls	r3, r3, #15
 80059c4:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059c6:	4928      	ldr	r1, [pc, #160]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 80059c8:	680a      	ldr	r2, [r1, #0]
 80059ca:	482b      	ldr	r0, [pc, #172]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 80059cc:	4002      	ands	r2, r0
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059d2:	2000      	movs	r0, #0
}
 80059d4:	e720      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80059d6:	2380      	movs	r3, #128	@ 0x80
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	429d      	cmp	r5, r3
 80059dc:	d002      	beq.n	80059e4 <HAL_ADC_ConfigChannel+0x200>
 80059de:	4b20      	ldr	r3, [pc, #128]	@ (8005a60 <HAL_ADC_ConfigChannel+0x27c>)
 80059e0:	429d      	cmp	r5, r3
 80059e2:	d105      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80059e4:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80059e6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80059e8:	035b      	lsls	r3, r3, #13
 80059ea:	0b5b      	lsrs	r3, r3, #13
 80059ec:	439a      	bics	r2, r3
 80059ee:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db01      	blt.n	80059fa <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059f6:	2000      	movs	r0, #0
 80059f8:	e70e      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80059fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 80059fc:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059fe:	491b      	ldr	r1, [pc, #108]	@ (8005a6c <HAL_ADC_ConfigChannel+0x288>)
 8005a00:	428b      	cmp	r3, r1
 8005a02:	d007      	beq.n	8005a14 <HAL_ADC_ConfigChannel+0x230>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a04:	491a      	ldr	r1, [pc, #104]	@ (8005a70 <HAL_ADC_ConfigChannel+0x28c>)
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d00f      	beq.n	8005a2a <HAL_ADC_ConfigChannel+0x246>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a0a:	491a      	ldr	r1, [pc, #104]	@ (8005a74 <HAL_ADC_ConfigChannel+0x290>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d017      	beq.n	8005a40 <HAL_ADC_ConfigChannel+0x25c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a10:	2000      	movs	r0, #0
 8005a12:	e701      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a14:	23a0      	movs	r3, #160	@ 0xa0
 8005a16:	045b      	lsls	r3, r3, #17
 8005a18:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a1a:	4913      	ldr	r1, [pc, #76]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	4816      	ldr	r0, [pc, #88]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 8005a20:	4003      	ands	r3, r0
 8005a22:	431a      	orrs	r2, r3
 8005a24:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a26:	2000      	movs	r0, #0
}
 8005a28:	e6f6      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a2a:	23c0      	movs	r3, #192	@ 0xc0
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a30:	490d      	ldr	r1, [pc, #52]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 8005a32:	680b      	ldr	r3, [r1, #0]
 8005a34:	4810      	ldr	r0, [pc, #64]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 8005a36:	4003      	ands	r3, r0
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a3c:	2000      	movs	r0, #0
}
 8005a3e:	e6eb      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a40:	23c0      	movs	r3, #192	@ 0xc0
 8005a42:	045b      	lsls	r3, r3, #17
 8005a44:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a46:	4908      	ldr	r1, [pc, #32]	@ (8005a68 <HAL_ADC_ConfigChannel+0x284>)
 8005a48:	680b      	ldr	r3, [r1, #0]
 8005a4a:	480b      	ldr	r0, [pc, #44]	@ (8005a78 <HAL_ADC_ConfigChannel+0x294>)
 8005a4c:	4003      	ands	r3, r0
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a52:	2000      	movs	r0, #0
}
 8005a54:	e6e0      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e6de      	b.n	8005818 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	e6df      	b.n	800581e <HAL_ADC_ConfigChannel+0x3a>
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	80000004 	.word	0x80000004
 8005a64:	07ffff00 	.word	0x07ffff00
 8005a68:	40012708 	.word	0x40012708
 8005a6c:	b0001000 	.word	0xb0001000
 8005a70:	b8004000 	.word	0xb8004000
 8005a74:	b4002000 	.word	0xb4002000
 8005a78:	fe3fffff 	.word	0xfe3fffff
 8005a7c:	200000e0 	.word	0x200000e0
 8005a80:	00030d40 	.word	0x00030d40

08005a84 <ADC_ConversionStop>:
{
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a88:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a8a:	6893      	ldr	r3, [r2, #8]
 8005a8c:	075b      	lsls	r3, r3, #29
 8005a8e:	d524      	bpl.n	8005ada <ADC_ConversionStop+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a90:	6893      	ldr	r3, [r2, #8]
 8005a92:	079b      	lsls	r3, r3, #30
 8005a94:	d405      	bmi.n	8005aa2 <ADC_ConversionStop+0x1e>
  MODIFY_REG(ADCx->CR,
 8005a96:	6893      	ldr	r3, [r2, #8]
 8005a98:	4911      	ldr	r1, [pc, #68]	@ (8005ae0 <ADC_ConversionStop+0x5c>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	2110      	movs	r1, #16
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005aa2:	f7ff fd11 	bl	80054c8 <HAL_GetTick>
 8005aa6:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	075b      	lsls	r3, r3, #29
 8005aae:	d512      	bpl.n	8005ad6 <ADC_ConversionStop+0x52>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005ab0:	f7ff fd0a 	bl	80054c8 <HAL_GetTick>
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	2802      	cmp	r0, #2
 8005ab8:	d9f6      	bls.n	8005aa8 <ADC_ConversionStop+0x24>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	075b      	lsls	r3, r3, #29
 8005ac0:	d5f2      	bpl.n	8005aa8 <ADC_ConversionStop+0x24>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005acc:	3a0f      	subs	r2, #15
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e002      	b.n	8005adc <ADC_ConversionStop+0x58>
  return HAL_OK;
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e000      	b.n	8005adc <ADC_ConversionStop+0x58>
 8005ada:	2000      	movs	r0, #0
}
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	7fffffe8 	.word	0x7fffffe8

08005ae4 <ADC_Enable>:
{
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aee:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	07d2      	lsls	r2, r2, #31
 8005af4:	d44f      	bmi.n	8005b96 <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005af6:	6899      	ldr	r1, [r3, #8]
 8005af8:	4a28      	ldr	r2, [pc, #160]	@ (8005b9c <ADC_Enable+0xb8>)
 8005afa:	4211      	tst	r1, r2
 8005afc:	d111      	bne.n	8005b22 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4927      	ldr	r1, [pc, #156]	@ (8005ba0 <ADC_Enable+0xbc>)
 8005b02:	400a      	ands	r2, r1
 8005b04:	2101      	movs	r1, #1
 8005b06:	430a      	orrs	r2, r1
 8005b08:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ba4 <ADC_Enable+0xc0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	d517      	bpl.n	8005b42 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b12:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <ADC_Enable+0xc4>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	4925      	ldr	r1, [pc, #148]	@ (8005bac <ADC_Enable+0xc8>)
 8005b18:	f7fc faf6 	bl	8002108 <__udivsi3>
 8005b1c:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005b1e:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8005b20:	e00c      	b.n	8005b3c <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b22:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005b24:	2210      	movs	r2, #16
 8005b26:	4313      	orrs	r3, r2
 8005b28:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b2a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005b2c:	3a0f      	subs	r2, #15
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8005b32:	2001      	movs	r0, #1
 8005b34:	e030      	b.n	8005b98 <ADC_Enable+0xb4>
        wait_loop_index--;
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f9      	bne.n	8005b36 <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005b42:	7e63      	ldrb	r3, [r4, #25]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <ADC_Enable+0x68>
  return HAL_OK;
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e025      	b.n	8005b98 <ADC_Enable+0xb4>
      tickstart = HAL_GetTick();
 8005b4c:	f7ff fcbc 	bl	80054c8 <HAL_GetTick>
 8005b50:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	07d2      	lsls	r2, r2, #31
 8005b58:	d41b      	bmi.n	8005b92 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	07d2      	lsls	r2, r2, #31
 8005b5e:	d405      	bmi.n	8005b6c <ADC_Enable+0x88>
  MODIFY_REG(ADCx->CR,
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	490f      	ldr	r1, [pc, #60]	@ (8005ba0 <ADC_Enable+0xbc>)
 8005b64:	400a      	ands	r2, r1
 8005b66:	2101      	movs	r1, #1
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b6c:	f7ff fcac 	bl	80054c8 <HAL_GetTick>
 8005b70:	1b40      	subs	r0, r0, r5
 8005b72:	2802      	cmp	r0, #2
 8005b74:	d9ed      	bls.n	8005b52 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	07db      	lsls	r3, r3, #31
 8005b7c:	d4e9      	bmi.n	8005b52 <ADC_Enable+0x6e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b80:	2210      	movs	r2, #16
 8005b82:	4313      	orrs	r3, r2
 8005b84:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b86:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b88:	3a0f      	subs	r2, #15
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8005b8e:	2001      	movs	r0, #1
 8005b90:	e002      	b.n	8005b98 <ADC_Enable+0xb4>
  return HAL_OK;
 8005b92:	2000      	movs	r0, #0
 8005b94:	e000      	b.n	8005b98 <ADC_Enable+0xb4>
 8005b96:	2000      	movs	r0, #0
}
 8005b98:	b003      	add	sp, #12
 8005b9a:	bd30      	pop	{r4, r5, pc}
 8005b9c:	80000017 	.word	0x80000017
 8005ba0:	7fffffe8 	.word	0x7fffffe8
 8005ba4:	40012708 	.word	0x40012708
 8005ba8:	200000e0 	.word	0x200000e0
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <HAL_ADC_Start_DMA>:
{
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	0004      	movs	r4, r0
 8005bb4:	000d      	movs	r5, r1
 8005bb6:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bb8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bba:	6893      	ldr	r3, [r2, #8]
 8005bbc:	075b      	lsls	r3, r3, #29
 8005bbe:	d447      	bmi.n	8005c50 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8005bc0:	2354      	movs	r3, #84	@ 0x54
 8005bc2:	5cc3      	ldrb	r3, [r0, r3]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d045      	beq.n	8005c54 <HAL_ADC_Start_DMA+0xa4>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	2154      	movs	r1, #84	@ 0x54
 8005bcc:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005bce:	68d1      	ldr	r1, [r2, #12]
 8005bd0:	420b      	tst	r3, r1
 8005bd2:	d10d      	bne.n	8005bf0 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd4:	6893      	ldr	r3, [r2, #8]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d505      	bpl.n	8005be6 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8005bda:	6893      	ldr	r3, [r2, #8]
 8005bdc:	491e      	ldr	r1, [pc, #120]	@ (8005c58 <HAL_ADC_Start_DMA+0xa8>)
 8005bde:	400b      	ands	r3, r1
 8005be0:	2102      	movs	r1, #2
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	68d3      	ldr	r3, [r2, #12]
 8005bea:	2101      	movs	r1, #1
 8005bec:	430b      	orrs	r3, r1
 8005bee:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8005bf0:	0020      	movs	r0, r4
 8005bf2:	f7ff ff77 	bl	8005ae4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d12b      	bne.n	8005c52 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8005bfa:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005bfc:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <HAL_ADC_Start_DMA+0xac>)
 8005bfe:	401a      	ands	r2, r3
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c0c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005c0e:	4914      	ldr	r1, [pc, #80]	@ (8005c60 <HAL_ADC_Start_DMA+0xb0>)
 8005c10:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c12:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005c14:	4913      	ldr	r1, [pc, #76]	@ (8005c64 <HAL_ADC_Start_DMA+0xb4>)
 8005c16:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c18:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005c1a:	4913      	ldr	r1, [pc, #76]	@ (8005c68 <HAL_ADC_Start_DMA+0xb8>)
 8005c1c:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	211c      	movs	r1, #28
 8005c22:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8005c24:	2254      	movs	r2, #84	@ 0x54
 8005c26:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	6853      	ldr	r3, [r2, #4]
 8005c2c:	390c      	subs	r1, #12
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c32:	6821      	ldr	r1, [r4, #0]
 8005c34:	3140      	adds	r1, #64	@ 0x40
 8005c36:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005c38:	0033      	movs	r3, r6
 8005c3a:	002a      	movs	r2, r5
 8005c3c:	f000 fa6a 	bl	8006114 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005c40:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005c42:	6893      	ldr	r3, [r2, #8]
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <HAL_ADC_Start_DMA+0xa8>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	2104      	movs	r1, #4
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	6093      	str	r3, [r2, #8]
}
 8005c4e:	e000      	b.n	8005c52 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8005c50:	2002      	movs	r0, #2
}
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8005c54:	2002      	movs	r0, #2
 8005c56:	e7fc      	b.n	8005c52 <HAL_ADC_Start_DMA+0xa2>
 8005c58:	7fffffe8 	.word	0x7fffffe8
 8005c5c:	fffff0fe 	.word	0xfffff0fe
 8005c60:	08005765 	.word	0x08005765
 8005c64:	0800573f 	.word	0x0800573f
 8005c68:	0800574b 	.word	0x0800574b

08005c6c <ADC_Disable>:
{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c70:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	2102      	movs	r1, #2
 8005c76:	0008      	movs	r0, r1
 8005c78:	4010      	ands	r0, r2
 8005c7a:	4211      	tst	r1, r2
 8005c7c:	d000      	beq.n	8005c80 <ADC_Disable+0x14>
 8005c7e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	07d2      	lsls	r2, r2, #31
 8005c84:	d535      	bpl.n	8005cf2 <ADC_Disable+0x86>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d135      	bne.n	8005cf6 <ADC_Disable+0x8a>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	2205      	movs	r2, #5
 8005c8e:	400a      	ands	r2, r1
 8005c90:	2a01      	cmp	r2, #1
 8005c92:	d009      	beq.n	8005ca8 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c96:	2210      	movs	r2, #16
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c9c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005c9e:	3a0f      	subs	r2, #15
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	e025      	b.n	8005cf4 <ADC_Disable+0x88>
  MODIFY_REG(ADCx->CR,
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	4914      	ldr	r1, [pc, #80]	@ (8005cfc <ADC_Disable+0x90>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	2102      	movs	r1, #2
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005cba:	f7ff fc05 	bl	80054c8 <HAL_GetTick>
 8005cbe:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	07db      	lsls	r3, r3, #31
 8005cc6:	d512      	bpl.n	8005cee <ADC_Disable+0x82>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cc8:	f7ff fbfe 	bl	80054c8 <HAL_GetTick>
 8005ccc:	1b40      	subs	r0, r0, r5
 8005cce:	2802      	cmp	r0, #2
 8005cd0:	d9f6      	bls.n	8005cc0 <ADC_Disable+0x54>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d5f2      	bpl.n	8005cc0 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cdc:	2210      	movs	r2, #16
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ce4:	3a0f      	subs	r2, #15
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8005cea:	2001      	movs	r0, #1
 8005cec:	e002      	b.n	8005cf4 <ADC_Disable+0x88>
  return HAL_OK;
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e000      	b.n	8005cf4 <ADC_Disable+0x88>
 8005cf2:	2000      	movs	r0, #0
}
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e7fc      	b.n	8005cf4 <ADC_Disable+0x88>
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	7fffffe8 	.word	0x7fffffe8

08005d00 <HAL_ADC_Stop_DMA>:
{
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8005d04:	2354      	movs	r3, #84	@ 0x54
 8005d06:	5cc3      	ldrb	r3, [r0, r3]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d036      	beq.n	8005d7a <HAL_ADC_Stop_DMA+0x7a>
 8005d0c:	2354      	movs	r3, #84	@ 0x54
 8005d0e:	2201      	movs	r2, #1
 8005d10:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005d12:	f7ff feb7 	bl	8005a84 <ADC_ConversionStop>
 8005d16:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8005d18:	d11d      	bne.n	8005d56 <HAL_ADC_Stop_DMA+0x56>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005d1a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005d1c:	2325      	movs	r3, #37	@ 0x25
 8005d1e:	5cc3      	ldrb	r3, [r0, r3]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d01d      	beq.n	8005d60 <HAL_ADC_Stop_DMA+0x60>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	6853      	ldr	r3, [r2, #4]
 8005d28:	2110      	movs	r1, #16
 8005d2a:	438b      	bics	r3, r1
 8005d2c:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d11f      	bne.n	8005d72 <HAL_ADC_Stop_DMA+0x72>
      tmp_hal_status = ADC_Disable(hadc);
 8005d32:	0020      	movs	r0, r4
 8005d34:	f7ff ff9a 	bl	8005c6c <ADC_Disable>
 8005d38:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8005d3a:	2d00      	cmp	r5, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_ADC_Stop_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8005d3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d40:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <HAL_ADC_Stop_DMA+0x80>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	3204      	adds	r2, #4
 8005d46:	32ff      	adds	r2, #255	@ 0xff
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	68d3      	ldr	r3, [r2, #12]
 8005d50:	2101      	movs	r1, #1
 8005d52:	438b      	bics	r3, r1
 8005d54:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 8005d56:	2354      	movs	r3, #84	@ 0x54
 8005d58:	2200      	movs	r2, #0
 8005d5a:	54e2      	strb	r2, [r4, r3]
}
 8005d5c:	0028      	movs	r0, r5
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005d60:	f000 fa26 	bl	80061b0 <HAL_DMA_Abort>
 8005d64:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 8005d66:	d0dd      	beq.n	8005d24 <HAL_ADC_Stop_DMA+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d6a:	2240      	movs	r2, #64	@ 0x40
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005d70:	e7d8      	b.n	8005d24 <HAL_ADC_Stop_DMA+0x24>
      (void)ADC_Disable(hadc);
 8005d72:	0020      	movs	r0, r4
 8005d74:	f7ff ff7a 	bl	8005c6c <ADC_Disable>
 8005d78:	e7df      	b.n	8005d3a <HAL_ADC_Stop_DMA+0x3a>
  __HAL_LOCK(hadc);
 8005d7a:	2502      	movs	r5, #2
 8005d7c:	e7ee      	b.n	8005d5c <HAL_ADC_Stop_DMA+0x5c>
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	fffffefe 	.word	0xfffffefe

08005d84 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d86:	b083      	sub	sp, #12
 8005d88:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005d8e:	3354      	adds	r3, #84	@ 0x54
 8005d90:	5cc3      	ldrb	r3, [r0, r3]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d100      	bne.n	8005d98 <HAL_ADCEx_Calibration_Start+0x14>
 8005d96:	e0a2      	b.n	8005ede <HAL_ADCEx_Calibration_Start+0x15a>
 8005d98:	2601      	movs	r6, #1
 8005d9a:	2354      	movs	r3, #84	@ 0x54
 8005d9c:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005d9e:	f7ff ff65 	bl	8005c6c <ADC_Disable>
 8005da2:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005da4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	0031      	movs	r1, r6
 8005daa:	4011      	ands	r1, r2
 8005dac:	4216      	tst	r6, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005db2:	2210      	movs	r2, #16
 8005db4:	4313      	orrs	r3, r2
 8005db6:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005db8:	2354      	movs	r3, #84	@ 0x54
 8005dba:	2200      	movs	r2, #0
 8005dbc:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005dc4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005dc6:	4847      	ldr	r0, [pc, #284]	@ (8005ee4 <HAL_ADCEx_Calibration_Start+0x160>)
 8005dc8:	4002      	ands	r2, r0
 8005dca:	3006      	adds	r0, #6
 8005dcc:	30ff      	adds	r0, #255	@ 0xff
 8005dce:	4302      	orrs	r2, r0
 8005dd0:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005dd2:	68de      	ldr	r6, [r3, #12]
 8005dd4:	4a44      	ldr	r2, [pc, #272]	@ (8005ee8 <HAL_ADCEx_Calibration_Start+0x164>)
 8005dd6:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	4844      	ldr	r0, [pc, #272]	@ (8005eec <HAL_ADCEx_Calibration_Start+0x168>)
 8005ddc:	4002      	ands	r2, r0
 8005dde:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8005de0:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005de2:	e005      	b.n	8005df0 <HAL_ADCEx_Calibration_Start+0x6c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005de4:	22b4      	movs	r2, #180	@ 0xb4
 8005de6:	589a      	ldr	r2, [r3, r2]
 8005de8:	237f      	movs	r3, #127	@ 0x7f
 8005dea:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005dec:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005dee:	3101      	adds	r1, #1
 8005df0:	2907      	cmp	r1, #7
 8005df2:	d81c      	bhi.n	8005e2e <HAL_ADCEx_Calibration_Start+0xaa>
      LL_ADC_StartCalibration(hadc->Instance);
 8005df4:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e02:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	daec      	bge.n	8005de4 <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e10:	9a01      	ldr	r2, [sp, #4]
 8005e12:	4b38      	ldr	r3, [pc, #224]	@ (8005ef4 <HAL_ADCEx_Calibration_Start+0x170>)
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d9f4      	bls.n	8005e02 <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 8005e18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e1a:	2212      	movs	r2, #18
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	3a02      	subs	r2, #2
 8005e20:	4313      	orrs	r3, r2
 8005e22:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8005e24:	2354      	movs	r3, #84	@ 0x54
 8005e26:	2200      	movs	r2, #0
 8005e28:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8005e2a:	2501      	movs	r5, #1
 8005e2c:	e7c7      	b.n	8005dbe <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 8005e2e:	f7fc f96b 	bl	8002108 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8005e32:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005e34:	6893      	ldr	r3, [r2, #8]
 8005e36:	492e      	ldr	r1, [pc, #184]	@ (8005ef0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8005e40:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8005e42:	6911      	ldr	r1, [r2, #16]
 8005e44:	2380      	movs	r3, #128	@ 0x80
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	d217      	bcs.n	8005e7c <HAL_ADCEx_Calibration_Start+0xf8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8005e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef8 <HAL_ADCEx_Calibration_Start+0x174>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	21f0      	movs	r1, #240	@ 0xf0
 8005e52:	0389      	lsls	r1, r1, #14
 8005e54:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8005e56:	21e0      	movs	r1, #224	@ 0xe0
 8005e58:	0349      	lsls	r1, r1, #13
 8005e5a:	428b      	cmp	r3, r1
 8005e5c:	d30e      	bcc.n	8005e7c <HAL_ADCEx_Calibration_Start+0xf8>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8005e5e:	0c9b      	lsrs	r3, r3, #18
 8005e60:	3b03      	subs	r3, #3
 8005e62:	2101      	movs	r1, #1
 8005e64:	4099      	lsls	r1, r3
 8005e66:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8005e68:	9b00      	ldr	r3, [sp, #0]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8005e6e:	e002      	b.n	8005e76 <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 8005e70:	9b00      	ldr	r3, [sp, #0]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f9      	bne.n	8005e70 <HAL_ADCEx_Calibration_Start+0xec>
  MODIFY_REG(ADCx->CALFACT,
 8005e7c:	21b4      	movs	r1, #180	@ 0xb4
 8005e7e:	5853      	ldr	r3, [r2, r1]
 8005e80:	277f      	movs	r7, #127	@ 0x7f
 8005e82:	43bb      	bics	r3, r7
 8005e84:	4318      	orrs	r0, r3
 8005e86:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 8005e88:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005e8a:	6893      	ldr	r3, [r2, #8]
 8005e8c:	4918      	ldr	r1, [pc, #96]	@ (8005ef0 <HAL_ADCEx_Calibration_Start+0x16c>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	2102      	movs	r1, #2
 8005e92:	430b      	orrs	r3, r1
 8005e94:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005e96:	f7ff fb17 	bl	80054c8 <HAL_GetTick>
 8005e9a:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e9c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	d409      	bmi.n	8005eb8 <HAL_ADCEx_Calibration_Start+0x134>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	4332      	orrs	r2, r6
 8005ea8:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005eaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eac:	2203      	movs	r2, #3
 8005eae:	4393      	bics	r3, r2
 8005eb0:	3a02      	subs	r2, #2
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005eb6:	e77f      	b.n	8005db8 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005eb8:	f7ff fb06 	bl	80054c8 <HAL_GetTick>
 8005ebc:	1bc0      	subs	r0, r0, r7
 8005ebe:	2802      	cmp	r0, #2
 8005ec0:	d9ec      	bls.n	8005e9c <HAL_ADCEx_Calibration_Start+0x118>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	07db      	lsls	r3, r3, #31
 8005ec8:	d5e8      	bpl.n	8005e9c <HAL_ADCEx_Calibration_Start+0x118>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ecc:	2210      	movs	r2, #16
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ed4:	3a0f      	subs	r2, #15
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8005eda:	2501      	movs	r5, #1
 8005edc:	e76f      	b.n	8005dbe <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8005ede:	2502      	movs	r5, #2
 8005ee0:	e76d      	b.n	8005dbe <HAL_ADCEx_Calibration_Start+0x3a>
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	fffffefd 	.word	0xfffffefd
 8005ee8:	00008003 	.word	0x00008003
 8005eec:	ffff7ffc 	.word	0xffff7ffc
 8005ef0:	7fffffe8 	.word	0x7fffffe8
 8005ef4:	0002f1ff 	.word	0x0002f1ff
 8005ef8:	40012708 	.word	0x40012708

08005efc <__NVIC_SetPriority>:
{
 8005efc:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8005efe:	2800      	cmp	r0, #0
 8005f00:	db11      	blt.n	8005f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f02:	0883      	lsrs	r3, r0, #2
 8005f04:	4d13      	ldr	r5, [pc, #76]	@ (8005f54 <__NVIC_SetPriority+0x58>)
 8005f06:	33c0      	adds	r3, #192	@ 0xc0
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	595c      	ldr	r4, [r3, r5]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	4010      	ands	r0, r2
 8005f10:	00c0      	lsls	r0, r0, #3
 8005f12:	32fc      	adds	r2, #252	@ 0xfc
 8005f14:	0016      	movs	r6, r2
 8005f16:	4086      	lsls	r6, r0
 8005f18:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005f1a:	0189      	lsls	r1, r1, #6
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f20:	4322      	orrs	r2, r4
 8005f22:	515a      	str	r2, [r3, r5]
}
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f26:	230f      	movs	r3, #15
 8005f28:	4003      	ands	r3, r0
 8005f2a:	3b08      	subs	r3, #8
 8005f2c:	089b      	lsrs	r3, r3, #2
 8005f2e:	3306      	adds	r3, #6
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4a09      	ldr	r2, [pc, #36]	@ (8005f58 <__NVIC_SetPriority+0x5c>)
 8005f34:	4694      	mov	ip, r2
 8005f36:	4463      	add	r3, ip
 8005f38:	685c      	ldr	r4, [r3, #4]
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	4010      	ands	r0, r2
 8005f3e:	00c0      	lsls	r0, r0, #3
 8005f40:	32fc      	adds	r2, #252	@ 0xfc
 8005f42:	0015      	movs	r5, r2
 8005f44:	4085      	lsls	r5, r0
 8005f46:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005f48:	0189      	lsls	r1, r1, #6
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f4e:	4322      	orrs	r2, r4
 8005f50:	605a      	str	r2, [r3, #4]
}
 8005f52:	e7e7      	b.n	8005f24 <__NVIC_SetPriority+0x28>
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f5c:	3801      	subs	r0, #1
 8005f5e:	2380      	movs	r3, #128	@ 0x80
 8005f60:	045b      	lsls	r3, r3, #17
 8005f62:	4298      	cmp	r0, r3
 8005f64:	d20f      	bcs.n	8005f86 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f66:	4a09      	ldr	r2, [pc, #36]	@ (8005f8c <SysTick_Config+0x30>)
 8005f68:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005f6a:	4809      	ldr	r0, [pc, #36]	@ (8005f90 <SysTick_Config+0x34>)
 8005f6c:	6a03      	ldr	r3, [r0, #32]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	21c0      	movs	r1, #192	@ 0xc0
 8005f74:	0609      	lsls	r1, r1, #24
 8005f76:	430b      	orrs	r3, r1
 8005f78:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f7e:	3307      	adds	r3, #7
 8005f80:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f82:	2000      	movs	r0, #0
}
 8005f84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7fc      	b.n	8005f84 <SysTick_Config+0x28>
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	e000e010 	.word	0xe000e010
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f94:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005f96:	f7ff ffb1 	bl	8005efc <__NVIC_SetPriority>
}
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	db05      	blt.n	8005fac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fa0:	221f      	movs	r2, #31
 8005fa2:	4002      	ands	r2, r0
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4093      	lsls	r3, r2
 8005fa8:	4a01      	ldr	r2, [pc, #4]	@ (8005fb0 <HAL_NVIC_EnableIRQ+0x14>)
 8005faa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005fac:	4770      	bx	lr
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fb4:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8005fb6:	f7ff ffd1 	bl	8005f5c <SysTick_Config>
}
 8005fba:	bd10      	pop	{r4, pc}

08005fbc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fbe:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005fc0:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8005fc2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005fc4:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005fc6:	2c00      	cmp	r4, #0
 8005fc8:	d002      	beq.n	8005fd0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fca:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005fcc:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005fce:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fd0:	4f0b      	ldr	r7, [pc, #44]	@ (8006000 <DMA_SetConfig+0x44>)
 8005fd2:	687c      	ldr	r4, [r7, #4]
 8005fd4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005fd6:	261c      	movs	r6, #28
 8005fd8:	402e      	ands	r6, r5
 8005fda:	2501      	movs	r5, #1
 8005fdc:	40b5      	lsls	r5, r6
 8005fde:	432c      	orrs	r4, r5
 8005fe0:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fe2:	6804      	ldr	r4, [r0, #0]
 8005fe4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fe6:	6883      	ldr	r3, [r0, #8]
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d004      	beq.n	8005ff6 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005fec:	6803      	ldr	r3, [r0, #0]
 8005fee:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005ff0:	6803      	ldr	r3, [r0, #0]
 8005ff2:	60da      	str	r2, [r3, #12]
  }
}
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	60d9      	str	r1, [r3, #12]
 8005ffe:	e7f9      	b.n	8005ff4 <DMA_SetConfig+0x38>
 8006000:	40020000 	.word	0x40020000

08006004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006004:	b510      	push	{r4, lr}
 8006006:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006008:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800600e:	4694      	mov	ip, r2
 8006010:	4463      	add	r3, ip
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006016:	6803      	ldr	r3, [r0, #0]
 8006018:	20ff      	movs	r0, #255	@ 0xff
 800601a:	4018      	ands	r0, r3
 800601c:	3808      	subs	r0, #8
 800601e:	2114      	movs	r1, #20
 8006020:	f7fc f872 	bl	8002108 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006024:	4b04      	ldr	r3, [pc, #16]	@ (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8006026:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006028:	231f      	movs	r3, #31
 800602a:	4018      	ands	r0, r3
 800602c:	3b1e      	subs	r3, #30
 800602e:	4083      	lsls	r3, r0
 8006030:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8006032:	bd10      	pop	{r4, pc}
 8006034:	10008200 	.word	0x10008200
 8006038:	40020880 	.word	0x40020880

0800603c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800603c:	6842      	ldr	r2, [r0, #4]
 800603e:	233f      	movs	r3, #63	@ 0x3f
 8006040:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006042:	4a06      	ldr	r2, [pc, #24]	@ (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8006044:	189a      	adds	r2, r3, r2
 8006046:	0092      	lsls	r2, r2, #2
 8006048:	6502      	str	r2, [r0, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800604a:	4a05      	ldr	r2, [pc, #20]	@ (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800604c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800604e:	3b01      	subs	r3, #1
 8006050:	2203      	movs	r2, #3
 8006052:	401a      	ands	r2, r3
 8006054:	2301      	movs	r3, #1
 8006056:	4093      	lsls	r3, r2
 8006058:	6583      	str	r3, [r0, #88]	@ 0x58
}
 800605a:	4770      	bx	lr
 800605c:	1000823f 	.word	0x1000823f
 8006060:	40020940 	.word	0x40020940

08006064 <HAL_DMA_Init>:
{
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8006068:	d04d      	beq.n	8006106 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800606a:	6805      	ldr	r5, [r0, #0]
 800606c:	4b27      	ldr	r3, [pc, #156]	@ (800610c <HAL_DMA_Init+0xa8>)
 800606e:	18e8      	adds	r0, r5, r3
 8006070:	2114      	movs	r1, #20
 8006072:	f7fc f849 	bl	8002108 <__udivsi3>
 8006076:	0080      	lsls	r0, r0, #2
 8006078:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800607a:	2325      	movs	r3, #37	@ 0x25
 800607c:	2202      	movs	r2, #2
 800607e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	4a23      	ldr	r2, [pc, #140]	@ (8006110 <HAL_DMA_Init+0xac>)
 8006084:	4013      	ands	r3, r2
 8006086:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006088:	6821      	ldr	r1, [r4, #0]
 800608a:	680a      	ldr	r2, [r1, #0]
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	68e0      	ldr	r0, [r4, #12]
 8006090:	4303      	orrs	r3, r0
 8006092:	6920      	ldr	r0, [r4, #16]
 8006094:	4303      	orrs	r3, r0
 8006096:	6960      	ldr	r0, [r4, #20]
 8006098:	4303      	orrs	r3, r0
 800609a:	69a0      	ldr	r0, [r4, #24]
 800609c:	4303      	orrs	r3, r0
 800609e:	69e0      	ldr	r0, [r4, #28]
 80060a0:	4303      	orrs	r3, r0
 80060a2:	6a20      	ldr	r0, [r4, #32]
 80060a4:	4303      	orrs	r3, r0
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060aa:	0020      	movs	r0, r4
 80060ac:	f7ff ffaa 	bl	8006004 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060b0:	68a2      	ldr	r2, [r4, #8]
 80060b2:	2380      	movs	r3, #128	@ 0x80
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d018      	beq.n	80060ec <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060ba:	6861      	ldr	r1, [r4, #4]
 80060bc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80060be:	233f      	movs	r3, #63	@ 0x3f
 80060c0:	400b      	ands	r3, r1
 80060c2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80060c6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80060c8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060ca:	6863      	ldr	r3, [r4, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d90f      	bls.n	80060f2 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80060d6:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060d8:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060da:	2300      	movs	r3, #0
 80060dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80060de:	2225      	movs	r2, #37	@ 0x25
 80060e0:	2101      	movs	r1, #1
 80060e2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80060e4:	3a01      	subs	r2, #1
 80060e6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80060e8:	2000      	movs	r0, #0
}
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060ec:	2300      	movs	r3, #0
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	e7e3      	b.n	80060ba <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060f2:	0020      	movs	r0, r4
 80060f4:	f7ff ffa2 	bl	800603c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006100:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e7e9      	b.n	80060da <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8006106:	2001      	movs	r0, #1
 8006108:	e7ef      	b.n	80060ea <HAL_DMA_Init+0x86>
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	bffdfff8 	.word	0xbffdfff8
 8006110:	ffff800f 	.word	0xffff800f

08006114 <HAL_DMA_Start_IT>:
{
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8006118:	2024      	movs	r0, #36	@ 0x24
 800611a:	5c20      	ldrb	r0, [r4, r0]
 800611c:	2801      	cmp	r0, #1
 800611e:	d045      	beq.n	80061ac <HAL_DMA_Start_IT+0x98>
 8006120:	2024      	movs	r0, #36	@ 0x24
 8006122:	2501      	movs	r5, #1
 8006124:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8006126:	3001      	adds	r0, #1
 8006128:	5c20      	ldrb	r0, [r4, r0]
 800612a:	2801      	cmp	r0, #1
 800612c:	d006      	beq.n	800613c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800612e:	2380      	movs	r3, #128	@ 0x80
 8006130:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006132:	3b5c      	subs	r3, #92	@ 0x5c
 8006134:	2200      	movs	r2, #0
 8006136:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8006138:	2001      	movs	r0, #1
}
 800613a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800613c:	3024      	adds	r0, #36	@ 0x24
 800613e:	3501      	adds	r5, #1
 8006140:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006142:	2000      	movs	r0, #0
 8006144:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	6828      	ldr	r0, [r5, #0]
 800614a:	2601      	movs	r6, #1
 800614c:	43b0      	bics	r0, r6
 800614e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006150:	0020      	movs	r0, r4
 8006152:	f7ff ff33 	bl	8005fbc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006156:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01c      	beq.n	8006196 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	210e      	movs	r1, #14
 8006162:	430b      	orrs	r3, r1
 8006164:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006166:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	03db      	lsls	r3, r3, #15
 800616c:	d504      	bpl.n	8006178 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800616e:	6811      	ldr	r1, [r2, #0]
 8006170:	2380      	movs	r3, #128	@ 0x80
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	430b      	orrs	r3, r1
 8006176:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006178:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	2280      	movs	r2, #128	@ 0x80
 8006182:	0052      	lsls	r2, r2, #1
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	430b      	orrs	r3, r1
 8006190:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2000      	movs	r0, #0
 8006194:	e7d1      	b.n	800613a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	2104      	movs	r1, #4
 800619c:	438b      	bics	r3, r1
 800619e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	3106      	adds	r1, #6
 80061a6:	430b      	orrs	r3, r1
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e7dc      	b.n	8006166 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80061ac:	2002      	movs	r0, #2
 80061ae:	e7c4      	b.n	800613a <HAL_DMA_Start_IT+0x26>

080061b0 <HAL_DMA_Abort>:
{
 80061b0:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d036      	beq.n	8006224 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80061b6:	2325      	movs	r3, #37	@ 0x25
 80061b8:	5cc3      	ldrb	r3, [r0, r3]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d006      	beq.n	80061cc <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061be:	2304      	movs	r3, #4
 80061c0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80061c2:	3320      	adds	r3, #32
 80061c4:	2200      	movs	r2, #0
 80061c6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80061c8:	2001      	movs	r0, #1
}
 80061ca:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061cc:	6802      	ldr	r2, [r0, #0]
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	210e      	movs	r1, #14
 80061d2:	438b      	bics	r3, r1
 80061d4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061d6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	4913      	ldr	r1, [pc, #76]	@ (8006228 <HAL_DMA_Abort+0x78>)
 80061dc:	400b      	ands	r3, r1
 80061de:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80061e0:	6801      	ldr	r1, [r0, #0]
 80061e2:	680a      	ldr	r2, [r1, #0]
 80061e4:	2301      	movs	r3, #1
 80061e6:	439a      	bics	r2, r3
 80061e8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80061ea:	4c10      	ldr	r4, [pc, #64]	@ (800622c <HAL_DMA_Abort+0x7c>)
 80061ec:	6862      	ldr	r2, [r4, #4]
 80061ee:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80061f0:	211c      	movs	r1, #28
 80061f2:	4029      	ands	r1, r5
 80061f4:	408b      	lsls	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061fa:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80061fc:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80061fe:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006200:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006202:	2b00      	cmp	r3, #0
 8006204:	d006      	beq.n	8006214 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4907      	ldr	r1, [pc, #28]	@ (8006228 <HAL_DMA_Abort+0x78>)
 800620a:	400a      	ands	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800620e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006210:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006212:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006214:	2325      	movs	r3, #37	@ 0x25
 8006216:	2201      	movs	r2, #1
 8006218:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800621a:	3b01      	subs	r3, #1
 800621c:	2200      	movs	r2, #0
 800621e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8006220:	2000      	movs	r0, #0
 8006222:	e7d2      	b.n	80061ca <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8006224:	2001      	movs	r0, #1
 8006226:	e7d0      	b.n	80061ca <HAL_DMA_Abort+0x1a>
 8006228:	fffffeff 	.word	0xfffffeff
 800622c:	40020000 	.word	0x40020000

08006230 <HAL_DMA_IRQHandler>:
{
 8006230:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8006232:	4b31      	ldr	r3, [pc, #196]	@ (80062f8 <HAL_DMA_IRQHandler+0xc8>)
 8006234:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006236:	6804      	ldr	r4, [r0, #0]
 8006238:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800623a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800623c:	231c      	movs	r3, #28
 800623e:	4013      	ands	r3, r2
 8006240:	2204      	movs	r2, #4
 8006242:	409a      	lsls	r2, r3
 8006244:	4211      	tst	r1, r2
 8006246:	d016      	beq.n	8006276 <HAL_DMA_IRQHandler+0x46>
 8006248:	076a      	lsls	r2, r5, #29
 800624a:	d514      	bpl.n	8006276 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	069b      	lsls	r3, r3, #26
 8006250:	d403      	bmi.n	800625a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	2204      	movs	r2, #4
 8006256:	4393      	bics	r3, r2
 8006258:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800625a:	4c27      	ldr	r4, [pc, #156]	@ (80062f8 <HAL_DMA_IRQHandler+0xc8>)
 800625c:	6863      	ldr	r3, [r4, #4]
 800625e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006260:	211c      	movs	r1, #28
 8006262:	4011      	ands	r1, r2
 8006264:	2204      	movs	r2, #4
 8006266:	408a      	lsls	r2, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800626c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800626e:	2b00      	cmp	r3, #0
 8006270:	d000      	beq.n	8006274 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8006272:	4798      	blx	r3
}
 8006274:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006276:	2202      	movs	r2, #2
 8006278:	409a      	lsls	r2, r3
 800627a:	4211      	tst	r1, r2
 800627c:	d01c      	beq.n	80062b8 <HAL_DMA_IRQHandler+0x88>
 800627e:	07aa      	lsls	r2, r5, #30
 8006280:	d51a      	bpl.n	80062b8 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	069b      	lsls	r3, r3, #26
 8006286:	d406      	bmi.n	8006296 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	220a      	movs	r2, #10
 800628c:	4393      	bics	r3, r2
 800628e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8006290:	2325      	movs	r3, #37	@ 0x25
 8006292:	3a09      	subs	r2, #9
 8006294:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006296:	4c18      	ldr	r4, [pc, #96]	@ (80062f8 <HAL_DMA_IRQHandler+0xc8>)
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800629c:	211c      	movs	r1, #28
 800629e:	4011      	ands	r1, r2
 80062a0:	2202      	movs	r2, #2
 80062a2:	408a      	lsls	r2, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 80062a8:	2324      	movs	r3, #36	@ 0x24
 80062aa:	2200      	movs	r2, #0
 80062ac:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80062ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0df      	beq.n	8006274 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 80062b4:	4798      	blx	r3
 80062b6:	e7dd      	b.n	8006274 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80062b8:	2208      	movs	r2, #8
 80062ba:	409a      	lsls	r2, r3
 80062bc:	4211      	tst	r1, r2
 80062be:	d0d9      	beq.n	8006274 <HAL_DMA_IRQHandler+0x44>
 80062c0:	072d      	lsls	r5, r5, #28
 80062c2:	d5d7      	bpl.n	8006274 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	220e      	movs	r2, #14
 80062c8:	4393      	bics	r3, r2
 80062ca:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80062cc:	4c0a      	ldr	r4, [pc, #40]	@ (80062f8 <HAL_DMA_IRQHandler+0xc8>)
 80062ce:	6862      	ldr	r2, [r4, #4]
 80062d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80062d2:	211c      	movs	r1, #28
 80062d4:	4019      	ands	r1, r3
 80062d6:	2301      	movs	r3, #1
 80062d8:	001d      	movs	r5, r3
 80062da:	408d      	lsls	r5, r1
 80062dc:	432a      	orrs	r2, r5
 80062de:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062e0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80062e2:	2225      	movs	r2, #37	@ 0x25
 80062e4:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80062e6:	3323      	adds	r3, #35	@ 0x23
 80062e8:	2200      	movs	r2, #0
 80062ea:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80062ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0c0      	beq.n	8006274 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80062f2:	4798      	blx	r3
  return;
 80062f4:	e7be      	b.n	8006274 <HAL_DMA_IRQHandler+0x44>
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	40020000 	.word	0x40020000

080062fc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80062fc:	b530      	push	{r4, r5, lr}
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80062fe:	4c05      	ldr	r4, [pc, #20]	@ (8006314 <FLASH_Program_DoubleWord+0x18>)
 8006300:	6961      	ldr	r1, [r4, #20]
 8006302:	2501      	movs	r5, #1
 8006304:	4329      	orrs	r1, r5
 8006306:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006308:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800630a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800630e:	6043      	str	r3, [r0, #4]
}
 8006310:	bd30      	pop	{r4, r5, pc}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	40022000 	.word	0x40022000

08006318 <HAL_FLASH_EndOfOperationCallback>:
}
 8006318:	4770      	bx	lr

0800631a <HAL_FLASH_OperationErrorCallback>:
}
 800631a:	4770      	bx	lr

0800631c <HAL_FLASH_IRQHandler>:
{
 800631c:	b510      	push	{r4, lr}
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800631e:	4b2a      	ldr	r3, [pc, #168]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	4a2a      	ldr	r2, [pc, #168]	@ (80063cc <HAL_FLASH_IRQHandler+0xb0>)
 8006324:	4013      	ands	r3, r2
  if ((pFlash.ProcedureOnGoing & FLASH_TYPEERASE_MASS) != 0x00U)
 8006326:	4a2a      	ldr	r2, [pc, #168]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 8006328:	6892      	ldr	r2, [r2, #8]
 800632a:	0751      	lsls	r1, r2, #29
 800632c:	d521      	bpl.n	8006372 <HAL_FLASH_IRQHandler+0x56>
    param = pFlash.Banks;
 800632e:	4a28      	ldr	r2, [pc, #160]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 8006330:	6914      	ldr	r4, [r2, #16]
  if (error != 0x00U)
 8006332:	2b00      	cmp	r3, #0
 8006334:	d12a      	bne.n	800638c <HAL_FLASH_IRQHandler+0x70>
  if ((FLASH->SR & FLASH_SR_EOP) != 0x00U)
 8006336:	4b24      	ldr	r3, [pc, #144]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	07db      	lsls	r3, r3, #31
 800633c:	d50c      	bpl.n	8006358 <HAL_FLASH_IRQHandler+0x3c>
    FLASH->SR = FLASH_SR_EOP;
 800633e:	4b22      	ldr	r3, [pc, #136]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006340:	2201      	movs	r2, #1
 8006342:	611a      	str	r2, [r3, #16]
    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8006344:	4b22      	ldr	r3, [pc, #136]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d02c      	beq.n	80063a6 <HAL_FLASH_IRQHandler+0x8a>
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800634c:	4b20      	ldr	r3, [pc, #128]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 800634e:	2200      	movs	r2, #0
 8006350:	609a      	str	r2, [r3, #8]
    HAL_FLASH_EndOfOperationCallback(param);
 8006352:	0020      	movs	r0, r4
 8006354:	f7ff ffe0 	bl	8006318 <HAL_FLASH_EndOfOperationCallback>
  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8006358:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_FLASH_IRQHandler+0x54>
    FLASH->CR &= ~(FLASH_CR_EOPIE | FLASH_CR_ERRIE);
 8006360:	4a19      	ldr	r2, [pc, #100]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006362:	6953      	ldr	r3, [r2, #20]
 8006364:	491b      	ldr	r1, [pc, #108]	@ (80063d4 <HAL_FLASH_IRQHandler+0xb8>)
 8006366:	400b      	ands	r3, r1
 8006368:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(&pFlash);
 800636a:	4b19      	ldr	r3, [pc, #100]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
}
 8006370:	bd10      	pop	{r4, pc}
    CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8006372:	4815      	ldr	r0, [pc, #84]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006374:	6941      	ldr	r1, [r0, #20]
 8006376:	4391      	bics	r1, r2
 8006378:	6141      	str	r1, [r0, #20]
    if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0x00U)
 800637a:	4917      	ldr	r1, [pc, #92]	@ (80063d8 <HAL_FLASH_IRQHandler+0xbc>)
 800637c:	420a      	tst	r2, r1
 800637e:	d002      	beq.n	8006386 <HAL_FLASH_IRQHandler+0x6a>
      param = pFlash.Address;
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 8006382:	68d4      	ldr	r4, [r2, #12]
 8006384:	e7d5      	b.n	8006332 <HAL_FLASH_IRQHandler+0x16>
      param = pFlash.Page;
 8006386:	4a12      	ldr	r2, [pc, #72]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 8006388:	6954      	ldr	r4, [r2, #20]
 800638a:	e7d2      	b.n	8006332 <HAL_FLASH_IRQHandler+0x16>
    pFlash.ErrorCode |= error;
 800638c:	4a10      	ldr	r2, [pc, #64]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 800638e:	6851      	ldr	r1, [r2, #4]
 8006390:	430b      	orrs	r3, r1
 8006392:	6053      	str	r3, [r2, #4]
    FLASH->SR = FLASH_SR_ERRORS;
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <HAL_FLASH_IRQHandler+0xac>)
 8006396:	490d      	ldr	r1, [pc, #52]	@ (80063cc <HAL_FLASH_IRQHandler+0xb0>)
 8006398:	6119      	str	r1, [r3, #16]
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800639a:	2300      	movs	r3, #0
 800639c:	6093      	str	r3, [r2, #8]
    HAL_FLASH_OperationErrorCallback(param);
 800639e:	0020      	movs	r0, r4
 80063a0:	f7ff ffbb 	bl	800631a <HAL_FLASH_OperationErrorCallback>
 80063a4:	e7c7      	b.n	8006336 <HAL_FLASH_IRQHandler+0x1a>
      pFlash.NbPagesToErase--;
 80063a6:	4a0a      	ldr	r2, [pc, #40]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 80063a8:	6993      	ldr	r3, [r2, #24]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6193      	str	r3, [r2, #24]
      if (pFlash.NbPagesToErase != 0x00U)
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <HAL_FLASH_IRQHandler+0x9e>
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 80063b2:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <HAL_FLASH_IRQHandler+0xb4>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	e7cb      	b.n	8006352 <HAL_FLASH_IRQHandler+0x36>
        pFlash.Page++;
 80063ba:	6951      	ldr	r1, [r2, #20]
 80063bc:	3101      	adds	r1, #1
 80063be:	6151      	str	r1, [r2, #20]
        FLASH_PageErase(pFlash.Banks, pFlash.Page);
 80063c0:	6910      	ldr	r0, [r2, #16]
 80063c2:	f000 f8a9 	bl	8006518 <FLASH_PageErase>
 80063c6:	e7c4      	b.n	8006352 <HAL_FLASH_IRQHandler+0x36>
 80063c8:	40022000 	.word	0x40022000
 80063cc:	0000c3fa 	.word	0x0000c3fa
 80063d0:	20000ea4 	.word	0x20000ea4
 80063d4:	fcffffff 	.word	0xfcffffff
 80063d8:	00040001 	.word	0x00040001

080063dc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80063dc:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <HAL_FLASH_Unlock+0x24>)
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	db01      	blt.n	80063e8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80063e4:	2000      	movs	r0, #0
}
 80063e6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_FLASH_Unlock+0x24>)
 80063ea:	4a06      	ldr	r2, [pc, #24]	@ (8006404 <HAL_FLASH_Unlock+0x28>)
 80063ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80063ee:	4a06      	ldr	r2, [pc, #24]	@ (8006408 <HAL_FLASH_Unlock+0x2c>)
 80063f0:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	db01      	blt.n	80063fc <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80063f8:	2000      	movs	r0, #0
 80063fa:	e7f4      	b.n	80063e6 <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
 80063fe:	e7f2      	b.n	80063e6 <HAL_FLASH_Unlock+0xa>
 8006400:	40022000 	.word	0x40022000
 8006404:	45670123 	.word	0x45670123
 8006408:	cdef89ab 	.word	0xcdef89ab

0800640c <FLASH_WaitForLastOperation>:
{
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7ff f85a 	bl	80054c8 <HAL_GetTick>
 8006414:	0005      	movs	r5, r0
  while ((FLASH->SR & error) != 0x00U)
 8006416:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <FLASH_WaitForLastOperation+0x5c>)
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	03db      	lsls	r3, r3, #15
 800641c:	d508      	bpl.n	8006430 <FLASH_WaitForLastOperation+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800641e:	1c63      	adds	r3, r4, #1
 8006420:	d0f9      	beq.n	8006416 <FLASH_WaitForLastOperation+0xa>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8006422:	f7ff f851 	bl	80054c8 <HAL_GetTick>
 8006426:	1b40      	subs	r0, r0, r5
 8006428:	42a0      	cmp	r0, r4
 800642a:	d3f4      	bcc.n	8006416 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800642c:	2003      	movs	r0, #3
 800642e:	e01a      	b.n	8006466 <FLASH_WaitForLastOperation+0x5a>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8006430:	490d      	ldr	r1, [pc, #52]	@ (8006468 <FLASH_WaitForLastOperation+0x5c>)
 8006432:	690a      	ldr	r2, [r1, #16]
 8006434:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <FLASH_WaitForLastOperation+0x60>)
 8006436:	0016      	movs	r6, r2
 8006438:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800643a:	480d      	ldr	r0, [pc, #52]	@ (8006470 <FLASH_WaitForLastOperation+0x64>)
 800643c:	6108      	str	r0, [r1, #16]
  if (error != 0x00U)
 800643e:	421a      	tst	r2, r3
 8006440:	d10c      	bne.n	800645c <FLASH_WaitForLastOperation+0x50>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <FLASH_WaitForLastOperation+0x5c>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	035b      	lsls	r3, r3, #13
 8006448:	d50c      	bpl.n	8006464 <FLASH_WaitForLastOperation+0x58>
    if(Timeout != HAL_MAX_DELAY)
 800644a:	1c63      	adds	r3, r4, #1
 800644c:	d0f9      	beq.n	8006442 <FLASH_WaitForLastOperation+0x36>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800644e:	f7ff f83b 	bl	80054c8 <HAL_GetTick>
 8006452:	1b40      	subs	r0, r0, r5
 8006454:	42a0      	cmp	r0, r4
 8006456:	d3f4      	bcc.n	8006442 <FLASH_WaitForLastOperation+0x36>
        return HAL_TIMEOUT;
 8006458:	2003      	movs	r0, #3
 800645a:	e004      	b.n	8006466 <FLASH_WaitForLastOperation+0x5a>
    pFlash.ErrorCode = error;
 800645c:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <FLASH_WaitForLastOperation+0x68>)
 800645e:	605e      	str	r6, [r3, #4]
    return HAL_ERROR;
 8006460:	2001      	movs	r0, #1
 8006462:	e000      	b.n	8006466 <FLASH_WaitForLastOperation+0x5a>
  return HAL_OK;
 8006464:	2000      	movs	r0, #0
}
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	40022000 	.word	0x40022000
 800646c:	0000c3fa 	.word	0x0000c3fa
 8006470:	0000c3fb 	.word	0x0000c3fb
 8006474:	20000ea4 	.word	0x20000ea4

08006478 <HAL_FLASH_Program>:
{
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	0007      	movs	r7, r0
 800647c:	000c      	movs	r4, r1
 800647e:	0015      	movs	r5, r2
 8006480:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8006482:	4b14      	ldr	r3, [pc, #80]	@ (80064d4 <HAL_FLASH_Program+0x5c>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d022      	beq.n	80064d0 <HAL_FLASH_Program+0x58>
 800648a:	4b12      	ldr	r3, [pc, #72]	@ (80064d4 <HAL_FLASH_Program+0x5c>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006494:	20fa      	movs	r0, #250	@ 0xfa
 8006496:	0080      	lsls	r0, r0, #2
 8006498:	f7ff ffb8 	bl	800640c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800649c:	2800      	cmp	r0, #0
 800649e:	d10d      	bne.n	80064bc <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80064a0:	2f01      	cmp	r7, #1
 80064a2:	d00f      	beq.n	80064c4 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80064a4:	0029      	movs	r1, r5
 80064a6:	0020      	movs	r0, r4
 80064a8:	f001 f946 	bl	8007738 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064ac:	20fa      	movs	r0, #250	@ 0xfa
 80064ae:	0080      	lsls	r0, r0, #2
 80064b0:	f7ff ffac 	bl	800640c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80064b4:	4a08      	ldr	r2, [pc, #32]	@ (80064d8 <HAL_FLASH_Program+0x60>)
 80064b6:	6953      	ldr	r3, [r2, #20]
 80064b8:	43bb      	bics	r3, r7
 80064ba:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_FLASH_Program+0x5c>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
}
 80064c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80064c4:	002a      	movs	r2, r5
 80064c6:	0033      	movs	r3, r6
 80064c8:	0020      	movs	r0, r4
 80064ca:	f7ff ff17 	bl	80062fc <FLASH_Program_DoubleWord>
 80064ce:	e7ed      	b.n	80064ac <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 80064d0:	2002      	movs	r0, #2
 80064d2:	e7f6      	b.n	80064c2 <HAL_FLASH_Program+0x4a>
 80064d4:	20000ea4 	.word	0x20000ea4
 80064d8:	40022000 	.word	0x40022000

080064dc <HAL_FLASH_Lock>:
{
 80064dc:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064de:	20fa      	movs	r0, #250	@ 0xfa
 80064e0:	0080      	lsls	r0, r0, #2
 80064e2:	f7ff ff93 	bl	800640c <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80064e6:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <HAL_FLASH_Lock+0x24>)
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	2280      	movs	r2, #128	@ 0x80
 80064ec:	0612      	lsls	r2, r2, #24
 80064ee:	430a      	orrs	r2, r1
 80064f0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	db01      	blt.n	80064fc <HAL_FLASH_Lock+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 80064f8:	2001      	movs	r0, #1
}
 80064fa:	bd10      	pop	{r4, pc}
    status = HAL_OK;
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7fc      	b.n	80064fa <HAL_FLASH_Lock+0x1e>
 8006500:	40022000 	.word	0x40022000

08006504 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8006504:	4a03      	ldr	r2, [pc, #12]	@ (8006514 <FLASH_MassErase+0x10>)
 8006506:	6953      	ldr	r3, [r2, #20]
 8006508:	4303      	orrs	r3, r0
 800650a:	2080      	movs	r0, #128	@ 0x80
 800650c:	0240      	lsls	r0, r0, #9
 800650e:	4318      	orrs	r0, r3
 8006510:	6150      	str	r0, [r2, #20]
}
 8006512:	4770      	bx	lr
 8006514:	40022000 	.word	0x40022000

08006518 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8006518:	4a04      	ldr	r2, [pc, #16]	@ (800652c <FLASH_PageErase+0x14>)
 800651a:	6953      	ldr	r3, [r2, #20]
 800651c:	4804      	ldr	r0, [pc, #16]	@ (8006530 <FLASH_PageErase+0x18>)
 800651e:	4003      	ands	r3, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8006520:	00c9      	lsls	r1, r1, #3
 8006522:	4319      	orrs	r1, r3
 8006524:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <FLASH_PageErase+0x1c>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6153      	str	r3, [r2, #20]
}
 800652a:	4770      	bx	lr
 800652c:	40022000 	.word	0x40022000
 8006530:	ffffe007 	.word	0xffffe007
 8006534:	00010002 	.word	0x00010002

08006538 <HAL_FLASHEx_Erase>:
{
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	0004      	movs	r4, r0
 800653c:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800653e:	4b1e      	ldr	r3, [pc, #120]	@ (80065b8 <HAL_FLASHEx_Erase+0x80>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d036      	beq.n	80065b4 <HAL_FLASHEx_Erase+0x7c>
 8006546:	4b1c      	ldr	r3, [pc, #112]	@ (80065b8 <HAL_FLASHEx_Erase+0x80>)
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800654c:	2200      	movs	r2, #0
 800654e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006550:	20fa      	movs	r0, #250	@ 0xfa
 8006552:	0080      	lsls	r0, r0, #2
 8006554:	f7ff ff5a 	bl	800640c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8006558:	2800      	cmp	r0, #0
 800655a:	d127      	bne.n	80065ac <HAL_FLASHEx_Erase+0x74>
    pEraseInit->Banks = FLASH_BANK_1;
 800655c:	2304      	movs	r3, #4
 800655e:	6063      	str	r3, [r4, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d014      	beq.n	8006590 <HAL_FLASHEx_Erase+0x58>
      *PageError = 0xFFFFFFFFU;
 8006566:	2301      	movs	r3, #1
 8006568:	425b      	negs	r3, r3
 800656a:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800656c:	68a5      	ldr	r5, [r4, #8]
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	68e2      	ldr	r2, [r4, #12]
 8006572:	189b      	adds	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	d914      	bls.n	80065a2 <HAL_FLASHEx_Erase+0x6a>
        FLASH_PageErase(pEraseInit->Banks, index);
 8006578:	6860      	ldr	r0, [r4, #4]
 800657a:	0029      	movs	r1, r5
 800657c:	f7ff ffcc 	bl	8006518 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006580:	20fa      	movs	r0, #250	@ 0xfa
 8006582:	0080      	lsls	r0, r0, #2
 8006584:	f7ff ff42 	bl	800640c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8006588:	2800      	cmp	r0, #0
 800658a:	d109      	bne.n	80065a0 <HAL_FLASHEx_Erase+0x68>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800658c:	3501      	adds	r5, #1
 800658e:	e7ee      	b.n	800656e <HAL_FLASHEx_Erase+0x36>
      FLASH_MassErase(pEraseInit->Banks);
 8006590:	3004      	adds	r0, #4
 8006592:	f7ff ffb7 	bl	8006504 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006596:	20fa      	movs	r0, #250	@ 0xfa
 8006598:	0080      	lsls	r0, r0, #2
 800659a:	f7ff ff37 	bl	800640c <FLASH_WaitForLastOperation>
 800659e:	e005      	b.n	80065ac <HAL_FLASHEx_Erase+0x74>
          *PageError = index;
 80065a0:	6035      	str	r5, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80065a2:	4a06      	ldr	r2, [pc, #24]	@ (80065bc <HAL_FLASHEx_Erase+0x84>)
 80065a4:	6953      	ldr	r3, [r2, #20]
 80065a6:	2102      	movs	r1, #2
 80065a8:	438b      	bics	r3, r1
 80065aa:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <HAL_FLASHEx_Erase+0x80>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
}
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80065b4:	2002      	movs	r0, #2
 80065b6:	e7fc      	b.n	80065b2 <HAL_FLASHEx_Erase+0x7a>
 80065b8:	20000ea4 	.word	0x20000ea4
 80065bc:	40022000 	.word	0x40022000

080065c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80065c2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065c4:	e059      	b.n	800667a <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065c6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80065c8:	005f      	lsls	r7, r3, #1
 80065ca:	2403      	movs	r4, #3
 80065cc:	40bc      	lsls	r4, r7
 80065ce:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065d0:	68cc      	ldr	r4, [r1, #12]
 80065d2:	40bc      	lsls	r4, r7
 80065d4:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80065d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065da:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065dc:	684e      	ldr	r6, [r1, #4]
 80065de:	0936      	lsrs	r6, r6, #4
 80065e0:	2201      	movs	r2, #1
 80065e2:	4032      	ands	r2, r6
 80065e4:	409a      	lsls	r2, r3
 80065e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80065e8:	6042      	str	r2, [r0, #4]
 80065ea:	e056      	b.n	800669a <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065ec:	08de      	lsrs	r6, r3, #3
 80065ee:	3608      	adds	r6, #8
 80065f0:	00b6      	lsls	r6, r6, #2
 80065f2:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065f4:	3205      	adds	r2, #5
 80065f6:	401a      	ands	r2, r3
 80065f8:	0092      	lsls	r2, r2, #2
 80065fa:	240f      	movs	r4, #15
 80065fc:	4094      	lsls	r4, r2
 80065fe:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006600:	690c      	ldr	r4, [r1, #16]
 8006602:	4094      	lsls	r4, r2
 8006604:	0022      	movs	r2, r4
 8006606:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006608:	5032      	str	r2, [r6, r0]
 800660a:	e059      	b.n	80066c0 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800660c:	2603      	movs	r6, #3
 800660e:	e000      	b.n	8006612 <HAL_GPIO_Init+0x52>
 8006610:	2600      	movs	r6, #0
 8006612:	40a6      	lsls	r6, r4
 8006614:	0034      	movs	r4, r6
 8006616:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8006618:	4e42      	ldr	r6, [pc, #264]	@ (8006724 <HAL_GPIO_Init+0x164>)
 800661a:	3218      	adds	r2, #24
 800661c:	0092      	lsls	r2, r2, #2
 800661e:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006620:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 8006622:	43ea      	mvns	r2, r5
 8006624:	003e      	movs	r6, r7
 8006626:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006628:	684c      	ldr	r4, [r1, #4]
 800662a:	02e4      	lsls	r4, r4, #11
 800662c:	d501      	bpl.n	8006632 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800662e:	003e      	movs	r6, r7
 8006630:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 8006632:	4c3c      	ldr	r4, [pc, #240]	@ (8006724 <HAL_GPIO_Init+0x164>)
 8006634:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8006636:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8006638:	003e      	movs	r6, r7
 800663a:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800663c:	684c      	ldr	r4, [r1, #4]
 800663e:	02a4      	lsls	r4, r4, #10
 8006640:	d501      	bpl.n	8006646 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8006642:	003e      	movs	r6, r7
 8006644:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8006646:	4c37      	ldr	r4, [pc, #220]	@ (8006724 <HAL_GPIO_Init+0x164>)
 8006648:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800664a:	2684      	movs	r6, #132	@ 0x84
 800664c:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 800664e:	003e      	movs	r6, r7
 8006650:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006652:	684c      	ldr	r4, [r1, #4]
 8006654:	03a4      	lsls	r4, r4, #14
 8006656:	d501      	bpl.n	800665c <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8006658:	003e      	movs	r6, r7
 800665a:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 800665c:	4c31      	ldr	r4, [pc, #196]	@ (8006724 <HAL_GPIO_Init+0x164>)
 800665e:	2784      	movs	r7, #132	@ 0x84
 8006660:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8006662:	2680      	movs	r6, #128	@ 0x80
 8006664:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8006666:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006668:	684c      	ldr	r4, [r1, #4]
 800666a:	03e4      	lsls	r4, r4, #15
 800666c:	d501      	bpl.n	8006672 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800666e:	002a      	movs	r2, r5
 8006670:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 8006672:	4d2c      	ldr	r5, [pc, #176]	@ (8006724 <HAL_GPIO_Init+0x164>)
 8006674:	2480      	movs	r4, #128	@ 0x80
 8006676:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8006678:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800667a:	680c      	ldr	r4, [r1, #0]
 800667c:	0022      	movs	r2, r4
 800667e:	40da      	lsrs	r2, r3
 8006680:	d04e      	beq.n	8006720 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006682:	2201      	movs	r2, #1
 8006684:	409a      	lsls	r2, r3
 8006686:	0025      	movs	r5, r4
 8006688:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 800668a:	4214      	tst	r4, r2
 800668c:	d0f4      	beq.n	8006678 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800668e:	684e      	ldr	r6, [r1, #4]
 8006690:	2403      	movs	r4, #3
 8006692:	4034      	ands	r4, r6
 8006694:	3c01      	subs	r4, #1
 8006696:	2c01      	cmp	r4, #1
 8006698:	d995      	bls.n	80065c6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800669a:	684c      	ldr	r4, [r1, #4]
 800669c:	2203      	movs	r2, #3
 800669e:	4022      	ands	r2, r4
 80066a0:	2a03      	cmp	r2, #3
 80066a2:	d008      	beq.n	80066b6 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 80066a4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066a6:	005e      	lsls	r6, r3, #1
 80066a8:	2203      	movs	r2, #3
 80066aa:	40b2      	lsls	r2, r6
 80066ac:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80066ae:	688a      	ldr	r2, [r1, #8]
 80066b0:	40b2      	lsls	r2, r6
 80066b2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80066b4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066b6:	684c      	ldr	r4, [r1, #4]
 80066b8:	2203      	movs	r2, #3
 80066ba:	4022      	ands	r2, r4
 80066bc:	2a02      	cmp	r2, #2
 80066be:	d095      	beq.n	80065ec <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 80066c0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80066c2:	005e      	lsls	r6, r3, #1
 80066c4:	2203      	movs	r2, #3
 80066c6:	0017      	movs	r7, r2
 80066c8:	40b7      	lsls	r7, r6
 80066ca:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066cc:	684f      	ldr	r7, [r1, #4]
 80066ce:	403a      	ands	r2, r7
 80066d0:	40b2      	lsls	r2, r6
 80066d2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80066d4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066d6:	684c      	ldr	r4, [r1, #4]
 80066d8:	22c0      	movs	r2, #192	@ 0xc0
 80066da:	0292      	lsls	r2, r2, #10
 80066dc:	4214      	tst	r4, r2
 80066de:	d0cb      	beq.n	8006678 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 80066e0:	089a      	lsrs	r2, r3, #2
 80066e2:	0014      	movs	r4, r2
 80066e4:	3418      	adds	r4, #24
 80066e6:	00a4      	lsls	r4, r4, #2
 80066e8:	4e0e      	ldr	r6, [pc, #56]	@ (8006724 <HAL_GPIO_Init+0x164>)
 80066ea:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80066ec:	2403      	movs	r4, #3
 80066ee:	401c      	ands	r4, r3
 80066f0:	00e4      	lsls	r4, r4, #3
 80066f2:	260f      	movs	r6, #15
 80066f4:	40a6      	lsls	r6, r4
 80066f6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80066f8:	26a0      	movs	r6, #160	@ 0xa0
 80066fa:	05f6      	lsls	r6, r6, #23
 80066fc:	42b0      	cmp	r0, r6
 80066fe:	d087      	beq.n	8006610 <HAL_GPIO_Init+0x50>
 8006700:	4e09      	ldr	r6, [pc, #36]	@ (8006728 <HAL_GPIO_Init+0x168>)
 8006702:	42b0      	cmp	r0, r6
 8006704:	d008      	beq.n	8006718 <HAL_GPIO_Init+0x158>
 8006706:	4e09      	ldr	r6, [pc, #36]	@ (800672c <HAL_GPIO_Init+0x16c>)
 8006708:	42b0      	cmp	r0, r6
 800670a:	d007      	beq.n	800671c <HAL_GPIO_Init+0x15c>
 800670c:	4e08      	ldr	r6, [pc, #32]	@ (8006730 <HAL_GPIO_Init+0x170>)
 800670e:	42b0      	cmp	r0, r6
 8006710:	d100      	bne.n	8006714 <HAL_GPIO_Init+0x154>
 8006712:	e77b      	b.n	800660c <HAL_GPIO_Init+0x4c>
 8006714:	2605      	movs	r6, #5
 8006716:	e77c      	b.n	8006612 <HAL_GPIO_Init+0x52>
 8006718:	2601      	movs	r6, #1
 800671a:	e77a      	b.n	8006612 <HAL_GPIO_Init+0x52>
 800671c:	2602      	movs	r6, #2
 800671e:	e778      	b.n	8006612 <HAL_GPIO_Init+0x52>
  }
}
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	40021800 	.word	0x40021800
 8006728:	50000400 	.word	0x50000400
 800672c:	50000800 	.word	0x50000800
 8006730:	50000c00 	.word	0x50000c00

08006734 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006734:	6903      	ldr	r3, [r0, #16]
 8006736:	420b      	tst	r3, r1
 8006738:	d001      	beq.n	800673e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800673a:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800673c:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 800673e:	2000      	movs	r0, #0
 8006740:	e7fc      	b.n	800673c <HAL_GPIO_ReadPin+0x8>

08006742 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006742:	4770      	bx	lr

08006744 <HAL_GPIO_EXTI_IRQHandler>:
{
 8006744:	b510      	push	{r4, lr}
 8006746:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006748:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4218      	tst	r0, r3
 800674e:	d104      	bne.n	800675a <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	4223      	tst	r3, r4
 8006756:	d105      	bne.n	8006764 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8006758:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800675a:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800675c:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800675e:	f7ff fff0 	bl	8006742 <HAL_GPIO_EXTI_Rising_Callback>
 8006762:	e7f5      	b.n	8006750 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006764:	4b02      	ldr	r3, [pc, #8]	@ (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006766:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006768:	0020      	movs	r0, r4
 800676a:	f7fd fbfb 	bl	8003f64 <HAL_GPIO_EXTI_Falling_Callback>
}
 800676e:	e7f3      	b.n	8006758 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8006770:	40021800 	.word	0x40021800

08006774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006774:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006776:	4a10      	ldr	r2, [pc, #64]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	4910      	ldr	r1, [pc, #64]	@ (80067bc <HAL_PWREx_ControlVoltageScaling+0x48>)
 800677c:	400b      	ands	r3, r1
 800677e:	4303      	orrs	r3, r0
 8006780:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4298      	cmp	r0, r3
 8006788:	d001      	beq.n	800678e <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800678a:	2000      	movs	r0, #0
}
 800678c:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	0058      	lsls	r0, r3, #1
 8006794:	18c0      	adds	r0, r0, r3
 8006796:	0040      	lsls	r0, r0, #1
 8006798:	490a      	ldr	r1, [pc, #40]	@ (80067c4 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800679a:	f7fb fcb5 	bl	8002108 <__udivsi3>
 800679e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	055b      	lsls	r3, r3, #21
 80067a6:	d503      	bpl.n	80067b0 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80067ac:	3801      	subs	r0, #1
 80067ae:	e7f7      	b.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80067b0:	2000      	movs	r0, #0
 80067b2:	e7eb      	b.n	800678c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80067b4:	2003      	movs	r0, #3
 80067b6:	e7e9      	b.n	800678c <HAL_PWREx_ControlVoltageScaling+0x18>
 80067b8:	40007000 	.word	0x40007000
 80067bc:	fffff9ff 	.word	0xfffff9ff
 80067c0:	200000e0 	.word	0x200000e0
 80067c4:	000f4240 	.word	0x000f4240

080067c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067ce:	d100      	bne.n	80067d2 <HAL_RCC_OscConfig+0xa>
 80067d0:	e231      	b.n	8006c36 <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d2:	6803      	ldr	r3, [r0, #0]
 80067d4:	07db      	lsls	r3, r3, #31
 80067d6:	d539      	bpl.n	800684c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d8:	4ac1      	ldr	r2, [pc, #772]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80067da:	6891      	ldr	r1, [r2, #8]
 80067dc:	2338      	movs	r3, #56	@ 0x38
 80067de:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067e0:	68d1      	ldr	r1, [r2, #12]
 80067e2:	2203      	movs	r2, #3
 80067e4:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d026      	beq.n	8006838 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d026      	beq.n	800683c <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	2280      	movs	r2, #128	@ 0x80
 80067f2:	0252      	lsls	r2, r2, #9
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d07f      	beq.n	80068f8 <HAL_RCC_OscConfig+0x130>
 80067f8:	22a0      	movs	r2, #160	@ 0xa0
 80067fa:	02d2      	lsls	r2, r2, #11
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d100      	bne.n	8006802 <HAL_RCC_OscConfig+0x3a>
 8006800:	e081      	b.n	8006906 <HAL_RCC_OscConfig+0x13e>
 8006802:	4bb7      	ldr	r3, [pc, #732]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	49b7      	ldr	r1, [pc, #732]	@ (8006ae4 <HAL_RCC_OscConfig+0x31c>)
 8006808:	400a      	ands	r2, r1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	49b6      	ldr	r1, [pc, #728]	@ (8006ae8 <HAL_RCC_OscConfig+0x320>)
 8006810:	400a      	ands	r2, r1
 8006812:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d100      	bne.n	800681c <HAL_RCC_OscConfig+0x54>
 800681a:	e080      	b.n	800691e <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fe fe54 	bl	80054c8 <HAL_GetTick>
 8006820:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006822:	4baf      	ldr	r3, [pc, #700]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	039b      	lsls	r3, r3, #14
 8006828:	d410      	bmi.n	800684c <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800682a:	f7fe fe4d 	bl	80054c8 <HAL_GetTick>
 800682e:	1b40      	subs	r0, r0, r5
 8006830:	2864      	cmp	r0, #100	@ 0x64
 8006832:	d9f6      	bls.n	8006822 <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8006834:	2003      	movs	r0, #3
 8006836:	e1ff      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006838:	2a03      	cmp	r2, #3
 800683a:	d1d6      	bne.n	80067ea <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	4ba8      	ldr	r3, [pc, #672]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	039b      	lsls	r3, r3, #14
 8006842:	d503      	bpl.n	800684c <HAL_RCC_OscConfig+0x84>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d100      	bne.n	800684c <HAL_RCC_OscConfig+0x84>
 800684a:	e1f7      	b.n	8006c3c <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d531      	bpl.n	80068b6 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006852:	4aa3      	ldr	r2, [pc, #652]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006854:	6891      	ldr	r1, [r2, #8]
 8006856:	2338      	movs	r3, #56	@ 0x38
 8006858:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800685a:	68d1      	ldr	r1, [r2, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006860:	2b10      	cmp	r3, #16
 8006862:	d06a      	beq.n	800693a <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006864:	2b00      	cmp	r3, #0
 8006866:	d16b      	bne.n	8006940 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006868:	4a9d      	ldr	r2, [pc, #628]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	0552      	lsls	r2, r2, #21
 800686e:	d503      	bpl.n	8006878 <HAL_RCC_OscConfig+0xb0>
 8006870:	68e2      	ldr	r2, [r4, #12]
 8006872:	2a00      	cmp	r2, #0
 8006874:	d100      	bne.n	8006878 <HAL_RCC_OscConfig+0xb0>
 8006876:	e1e3      	b.n	8006c40 <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006878:	4899      	ldr	r0, [pc, #612]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800687a:	6842      	ldr	r2, [r0, #4]
 800687c:	499b      	ldr	r1, [pc, #620]	@ (8006aec <HAL_RCC_OscConfig+0x324>)
 800687e:	400a      	ands	r2, r1
 8006880:	6961      	ldr	r1, [r4, #20]
 8006882:	0209      	lsls	r1, r1, #8
 8006884:	430a      	orrs	r2, r1
 8006886:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800688c:	6803      	ldr	r3, [r0, #0]
 800688e:	4998      	ldr	r1, [pc, #608]	@ (8006af0 <HAL_RCC_OscConfig+0x328>)
 8006890:	400b      	ands	r3, r1
 8006892:	6921      	ldr	r1, [r4, #16]
 8006894:	430b      	orrs	r3, r1
 8006896:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006898:	6803      	ldr	r3, [r0, #0]
 800689a:	0adb      	lsrs	r3, r3, #11
 800689c:	2207      	movs	r2, #7
 800689e:	401a      	ands	r2, r3
 80068a0:	4b94      	ldr	r3, [pc, #592]	@ (8006af4 <HAL_RCC_OscConfig+0x32c>)
 80068a2:	40d3      	lsrs	r3, r2
 80068a4:	4a94      	ldr	r2, [pc, #592]	@ (8006af8 <HAL_RCC_OscConfig+0x330>)
 80068a6:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068a8:	4b94      	ldr	r3, [pc, #592]	@ (8006afc <HAL_RCC_OscConfig+0x334>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	f7fe fdc0 	bl	8005430 <HAL_InitTick>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d000      	beq.n	80068b6 <HAL_RCC_OscConfig+0xee>
 80068b4:	e1c6      	b.n	8006c44 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	071b      	lsls	r3, r3, #28
 80068ba:	d400      	bmi.n	80068be <HAL_RCC_OscConfig+0xf6>
 80068bc:	e081      	b.n	80069c2 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80068be:	4b88      	ldr	r3, [pc, #544]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	2338      	movs	r3, #56	@ 0x38
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b18      	cmp	r3, #24
 80068c8:	d073      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068ca:	69a3      	ldr	r3, [r4, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d100      	bne.n	80068d2 <HAL_RCC_OscConfig+0x10a>
 80068d0:	e0b4      	b.n	8006a3c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80068d2:	4a83      	ldr	r2, [pc, #524]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80068d4:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80068d6:	2101      	movs	r1, #1
 80068d8:	430b      	orrs	r3, r1
 80068da:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fe fdf4 	bl	80054c8 <HAL_GetTick>
 80068e0:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068e2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80068e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e6:	079b      	lsls	r3, r3, #30
 80068e8:	d46b      	bmi.n	80069c2 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ea:	f7fe fded 	bl	80054c8 <HAL_GetTick>
 80068ee:	1b40      	subs	r0, r0, r5
 80068f0:	2802      	cmp	r0, #2
 80068f2:	d9f6      	bls.n	80068e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80068f4:	2003      	movs	r0, #3
 80068f6:	e19f      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f8:	4a79      	ldr	r2, [pc, #484]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80068fa:	6811      	ldr	r1, [r2, #0]
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	430b      	orrs	r3, r1
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e786      	b.n	8006814 <HAL_RCC_OscConfig+0x4c>
 8006906:	4b76      	ldr	r3, [pc, #472]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	2280      	movs	r2, #128	@ 0x80
 800690c:	02d2      	lsls	r2, r2, #11
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	2280      	movs	r2, #128	@ 0x80
 8006916:	0252      	lsls	r2, r2, #9
 8006918:	430a      	orrs	r2, r1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e77a      	b.n	8006814 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800691e:	f7fe fdd3 	bl	80054c8 <HAL_GetTick>
 8006922:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006924:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	039b      	lsls	r3, r3, #14
 800692a:	d58f      	bpl.n	800684c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fe fdcc 	bl	80054c8 <HAL_GetTick>
 8006930:	1b40      	subs	r0, r0, r5
 8006932:	2864      	cmp	r0, #100	@ 0x64
 8006934:	d9f6      	bls.n	8006924 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8006936:	2003      	movs	r0, #3
 8006938:	e17e      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800693a:	2a02      	cmp	r2, #2
 800693c:	d192      	bne.n	8006864 <HAL_RCC_OscConfig+0x9c>
 800693e:	e793      	b.n	8006868 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006940:	68e3      	ldr	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d022      	beq.n	800698c <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006946:	4a66      	ldr	r2, [pc, #408]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	4969      	ldr	r1, [pc, #420]	@ (8006af0 <HAL_RCC_OscConfig+0x328>)
 800694c:	400b      	ands	r3, r1
 800694e:	6921      	ldr	r1, [r4, #16]
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8006954:	6811      	ldr	r1, [r2, #0]
 8006956:	2380      	movs	r3, #128	@ 0x80
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	430b      	orrs	r3, r1
 800695c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800695e:	f7fe fdb3 	bl	80054c8 <HAL_GetTick>
 8006962:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	055b      	lsls	r3, r3, #21
 800696a:	d406      	bmi.n	800697a <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800696c:	f7fe fdac 	bl	80054c8 <HAL_GetTick>
 8006970:	1b40      	subs	r0, r0, r5
 8006972:	2802      	cmp	r0, #2
 8006974:	d9f6      	bls.n	8006964 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8006976:	2003      	movs	r0, #3
 8006978:	e15e      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697a:	4959      	ldr	r1, [pc, #356]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800697c:	684b      	ldr	r3, [r1, #4]
 800697e:	4a5b      	ldr	r2, [pc, #364]	@ (8006aec <HAL_RCC_OscConfig+0x324>)
 8006980:	4013      	ands	r3, r2
 8006982:	6962      	ldr	r2, [r4, #20]
 8006984:	0212      	lsls	r2, r2, #8
 8006986:	4313      	orrs	r3, r2
 8006988:	604b      	str	r3, [r1, #4]
 800698a:	e794      	b.n	80068b6 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 800698c:	4a54      	ldr	r2, [pc, #336]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800698e:	6813      	ldr	r3, [r2, #0]
 8006990:	495b      	ldr	r1, [pc, #364]	@ (8006b00 <HAL_RCC_OscConfig+0x338>)
 8006992:	400b      	ands	r3, r1
 8006994:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006996:	f7fe fd97 	bl	80054c8 <HAL_GetTick>
 800699a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699c:	4b50      	ldr	r3, [pc, #320]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	055b      	lsls	r3, r3, #21
 80069a2:	d588      	bpl.n	80068b6 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a4:	f7fe fd90 	bl	80054c8 <HAL_GetTick>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	2802      	cmp	r0, #2
 80069ac:	d9f6      	bls.n	800699c <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 80069ae:	2003      	movs	r0, #3
 80069b0:	e142      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80069b2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80069b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b6:	079b      	lsls	r3, r3, #30
 80069b8:	d503      	bpl.n	80069c2 <HAL_RCC_OscConfig+0x1fa>
 80069ba:	69a3      	ldr	r3, [r4, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d100      	bne.n	80069c2 <HAL_RCC_OscConfig+0x1fa>
 80069c0:	e142      	b.n	8006c48 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	075b      	lsls	r3, r3, #29
 80069c6:	d400      	bmi.n	80069ca <HAL_RCC_OscConfig+0x202>
 80069c8:	e0a2      	b.n	8006b10 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069ca:	4b45      	ldr	r3, [pc, #276]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	2338      	movs	r3, #56	@ 0x38
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d045      	beq.n	8006a62 <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069d6:	4b42      	ldr	r3, [pc, #264]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	d44a      	bmi.n	8006a74 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80069de:	4b40      	ldr	r3, [pc, #256]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 80069e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e2:	2180      	movs	r1, #128	@ 0x80
 80069e4:	0549      	lsls	r1, r1, #21
 80069e6:	430a      	orrs	r2, r1
 80069e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	400b      	ands	r3, r1
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80069f2:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f4:	4b43      	ldr	r3, [pc, #268]	@ (8006b04 <HAL_RCC_OscConfig+0x33c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	05db      	lsls	r3, r3, #23
 80069fa:	d53d      	bpl.n	8006a78 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d04e      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x2d8>
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	d052      	beq.n	8006aac <HAL_RCC_OscConfig+0x2e4>
 8006a06:	4b36      	ldr	r3, [pc, #216]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	438a      	bics	r2, r1
 8006a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a12:	3103      	adds	r1, #3
 8006a14:	438a      	bics	r2, r1
 8006a16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a18:	68a3      	ldr	r3, [r4, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d050      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1e:	f7fe fd53 	bl	80054c8 <HAL_GetTick>
 8006a22:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a24:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a28:	079b      	lsls	r3, r3, #30
 8006a2a:	d46f      	bmi.n	8006b0c <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a2c:	f7fe fd4c 	bl	80054c8 <HAL_GetTick>
 8006a30:	1b80      	subs	r0, r0, r6
 8006a32:	4b35      	ldr	r3, [pc, #212]	@ (8006b08 <HAL_RCC_OscConfig+0x340>)
 8006a34:	4298      	cmp	r0, r3
 8006a36:	d9f5      	bls.n	8006a24 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8006a38:	2003      	movs	r0, #3
 8006a3a:	e0fd      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8006a3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006a3e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8006a40:	2101      	movs	r1, #1
 8006a42:	438b      	bics	r3, r1
 8006a44:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006a46:	f7fe fd3f 	bl	80054c8 <HAL_GetTick>
 8006a4a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a50:	079b      	lsls	r3, r3, #30
 8006a52:	d5b6      	bpl.n	80069c2 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a54:	f7fe fd38 	bl	80054c8 <HAL_GetTick>
 8006a58:	1b40      	subs	r0, r0, r5
 8006a5a:	2802      	cmp	r0, #2
 8006a5c:	d9f6      	bls.n	8006a4c <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8006a5e:	2003      	movs	r0, #3
 8006a60:	e0ea      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	079b      	lsls	r3, r3, #30
 8006a68:	d552      	bpl.n	8006b10 <HAL_RCC_OscConfig+0x348>
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d14f      	bne.n	8006b10 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
 8006a72:	e0e1      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 8006a74:	2500      	movs	r5, #0
 8006a76:	e7bd      	b.n	80069f4 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a78:	4a22      	ldr	r2, [pc, #136]	@ (8006b04 <HAL_RCC_OscConfig+0x33c>)
 8006a7a:	6811      	ldr	r1, [r2, #0]
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	430b      	orrs	r3, r1
 8006a82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a84:	f7fe fd20 	bl	80054c8 <HAL_GetTick>
 8006a88:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <HAL_RCC_OscConfig+0x33c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	05db      	lsls	r3, r3, #23
 8006a90:	d4b4      	bmi.n	80069fc <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a92:	f7fe fd19 	bl	80054c8 <HAL_GetTick>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	2802      	cmp	r0, #2
 8006a9a:	d9f6      	bls.n	8006a8a <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	e0cb      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006aa2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8006aaa:	e7b5      	b.n	8006a18 <HAL_RCC_OscConfig+0x250>
 8006aac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006aae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ab8:	3903      	subs	r1, #3
 8006aba:	430a      	orrs	r2, r1
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006abe:	e7ab      	b.n	8006a18 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fe fd02 	bl	80054c8 <HAL_GetTick>
 8006ac4:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <HAL_RCC_OscConfig+0x318>)
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aca:	079b      	lsls	r3, r3, #30
 8006acc:	d51e      	bpl.n	8006b0c <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fe fcfb 	bl	80054c8 <HAL_GetTick>
 8006ad2:	1b80      	subs	r0, r0, r6
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <HAL_RCC_OscConfig+0x340>)
 8006ad6:	4298      	cmp	r0, r3
 8006ad8:	d9f5      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8006ada:	2003      	movs	r0, #3
 8006adc:	e0ac      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	fffeffff 	.word	0xfffeffff
 8006ae8:	fffbffff 	.word	0xfffbffff
 8006aec:	ffff80ff 	.word	0xffff80ff
 8006af0:	ffffc7ff 	.word	0xffffc7ff
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	200000e0 	.word	0x200000e0
 8006afc:	200000e8 	.word	0x200000e8
 8006b00:	fffffeff 	.word	0xfffffeff
 8006b04:	40007000 	.word	0x40007000
 8006b08:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b0c:	2d01      	cmp	r5, #1
 8006b0e:	d01e      	beq.n	8006b4e <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b10:	69e3      	ldr	r3, [r4, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d100      	bne.n	8006b18 <HAL_RCC_OscConfig+0x350>
 8006b16:	e099      	b.n	8006c4c <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b18:	4a54      	ldr	r2, [pc, #336]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b1a:	6891      	ldr	r1, [r2, #8]
 8006b1c:	2238      	movs	r2, #56	@ 0x38
 8006b1e:	400a      	ands	r2, r1
 8006b20:	2a10      	cmp	r2, #16
 8006b22:	d060      	beq.n	8006be6 <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d018      	beq.n	8006b5a <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b28:	4a50      	ldr	r2, [pc, #320]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	4950      	ldr	r1, [pc, #320]	@ (8006c70 <HAL_RCC_OscConfig+0x4a8>)
 8006b2e:	400b      	ands	r3, r1
 8006b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fe fcc9 	bl	80054c8 <HAL_GetTick>
 8006b36:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b38:	4b4c      	ldr	r3, [pc, #304]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	019b      	lsls	r3, r3, #6
 8006b3e:	d54b      	bpl.n	8006bd8 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fe fcc2 	bl	80054c8 <HAL_GetTick>
 8006b44:	1b00      	subs	r0, r0, r4
 8006b46:	2802      	cmp	r0, #2
 8006b48:	d9f6      	bls.n	8006b38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006b4a:	2003      	movs	r0, #3
 8006b4c:	e074      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b4e:	4a47      	ldr	r2, [pc, #284]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b50:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006b52:	4948      	ldr	r1, [pc, #288]	@ (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b54:	400b      	ands	r3, r1
 8006b56:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006b58:	e7da      	b.n	8006b10 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8006b5a:	4a44      	ldr	r2, [pc, #272]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	4944      	ldr	r1, [pc, #272]	@ (8006c70 <HAL_RCC_OscConfig+0x4a8>)
 8006b60:	400b      	ands	r3, r1
 8006b62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b64:	f7fe fcb0 	bl	80054c8 <HAL_GetTick>
 8006b68:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	019b      	lsls	r3, r3, #6
 8006b70:	d506      	bpl.n	8006b80 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fe fca9 	bl	80054c8 <HAL_GetTick>
 8006b76:	1b40      	subs	r0, r0, r5
 8006b78:	2802      	cmp	r0, #2
 8006b7a:	d9f6      	bls.n	8006b6a <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8006b7c:	2003      	movs	r0, #3
 8006b7e:	e05b      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b80:	4a3a      	ldr	r2, [pc, #232]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006b82:	68d3      	ldr	r3, [r2, #12]
 8006b84:	493c      	ldr	r1, [pc, #240]	@ (8006c78 <HAL_RCC_OscConfig+0x4b0>)
 8006b86:	4019      	ands	r1, r3
 8006b88:	6a23      	ldr	r3, [r4, #32]
 8006b8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006b90:	0200      	lsls	r0, r0, #8
 8006b92:	4303      	orrs	r3, r0
 8006b94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006b96:	4303      	orrs	r3, r0
 8006b98:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006b9a:	4303      	orrs	r3, r0
 8006b9c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	2380      	movs	r3, #128	@ 0x80
 8006ba8:	045b      	lsls	r3, r3, #17
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006bae:	68d1      	ldr	r1, [r2, #12]
 8006bb0:	2380      	movs	r3, #128	@ 0x80
 8006bb2:	055b      	lsls	r3, r3, #21
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006bb8:	f7fe fc86 	bl	80054c8 <HAL_GetTick>
 8006bbc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	019b      	lsls	r3, r3, #6
 8006bc4:	d406      	bmi.n	8006bd4 <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fe fc7f 	bl	80054c8 <HAL_GetTick>
 8006bca:	1b00      	subs	r0, r0, r4
 8006bcc:	2802      	cmp	r0, #2
 8006bce:	d9f6      	bls.n	8006bbe <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 8006bd0:	2003      	movs	r0, #3
 8006bd2:	e031      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e02f      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006bd8:	4a24      	ldr	r2, [pc, #144]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006bda:	68d3      	ldr	r3, [r2, #12]
 8006bdc:	4927      	ldr	r1, [pc, #156]	@ (8006c7c <HAL_RCC_OscConfig+0x4b4>)
 8006bde:	400b      	ands	r3, r1
 8006be0:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006be2:	2000      	movs	r0, #0
 8006be4:	e028      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d032      	beq.n	8006c50 <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 8006bea:	4b20      	ldr	r3, [pc, #128]	@ (8006c6c <HAL_RCC_OscConfig+0x4a4>)
 8006bec:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bee:	2303      	movs	r3, #3
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	6a21      	ldr	r1, [r4, #32]
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	d12d      	bne.n	8006c54 <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf8:	2370      	movs	r3, #112	@ 0x70
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	428b      	cmp	r3, r1
 8006c00:	d12a      	bne.n	8006c58 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c02:	21fe      	movs	r1, #254	@ 0xfe
 8006c04:	01c9      	lsls	r1, r1, #7
 8006c06:	4011      	ands	r1, r2
 8006c08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c0a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	d125      	bne.n	8006c5c <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c10:	23f8      	movs	r3, #248	@ 0xf8
 8006c12:	039b      	lsls	r3, r3, #14
 8006c14:	4013      	ands	r3, r2
 8006c16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	d121      	bne.n	8006c60 <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c1c:	23e0      	movs	r3, #224	@ 0xe0
 8006c1e:	051b      	lsls	r3, r3, #20
 8006c20:	4013      	ands	r3, r2
 8006c22:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d11d      	bne.n	8006c64 <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c28:	0f52      	lsrs	r2, r2, #29
 8006c2a:	0752      	lsls	r2, r2, #29
 8006c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d11a      	bne.n	8006c68 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e000      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
}
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	e7fb      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c40:	2001      	movs	r0, #1
 8006c42:	e7f9      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7f7      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7f5      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7f3      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8006c50:	2001      	movs	r0, #1
 8006c52:	e7f1      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8006c54:	2001      	movs	r0, #1
 8006c56:	e7ef      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e7ed      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	e7eb      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c60:	2001      	movs	r0, #1
 8006c62:	e7e9      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c64:	2001      	movs	r0, #1
 8006c66:	e7e7      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7e5      	b.n	8006c38 <HAL_RCC_OscConfig+0x470>
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	feffffff 	.word	0xfeffffff
 8006c74:	efffffff 	.word	0xefffffff
 8006c78:	11c1808c 	.word	0x11c1808c
 8006c7c:	eefefffc 	.word	0xeefefffc

08006c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c80:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c82:	4b2a      	ldr	r3, [pc, #168]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2238      	movs	r2, #56	@ 0x38
 8006c88:	421a      	tst	r2, r3
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006c8c:	4b27      	ldr	r3, [pc, #156]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	0ad2      	lsrs	r2, r2, #11
 8006c92:	2307      	movs	r3, #7
 8006c94:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006c96:	4826      	ldr	r0, [pc, #152]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c98:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8006c9a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c9c:	4b23      	ldr	r3, [pc, #140]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	2338      	movs	r3, #56	@ 0x38
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d03b      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca8:	4b20      	ldr	r3, [pc, #128]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	2338      	movs	r3, #56	@ 0x38
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d00d      	beq.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	2338      	movs	r3, #56	@ 0x38
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d031      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	2338      	movs	r3, #56	@ 0x38
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b18      	cmp	r3, #24
 8006cca:	d026      	beq.n	8006d1a <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8006ccc:	2000      	movs	r0, #0
  return sysclockfreq;
 8006cce:	e7e4      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006cd0:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006cd2:	68d1      	ldr	r1, [r2, #12]
 8006cd4:	3b0d      	subs	r3, #13
 8006cd6:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cd8:	68d2      	ldr	r2, [r2, #12]
 8006cda:	0912      	lsrs	r2, r2, #4
 8006cdc:	2107      	movs	r1, #7
 8006cde:	4011      	ands	r1, r2
 8006ce0:	3101      	adds	r1, #1
    switch (pllsource)
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d00f      	beq.n	8006d06 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006ce6:	4812      	ldr	r0, [pc, #72]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ce8:	f7fb fa0e 	bl	8002108 <__udivsi3>
 8006cec:	4b0f      	ldr	r3, [pc, #60]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	0a12      	lsrs	r2, r2, #8
 8006cf2:	237f      	movs	r3, #127	@ 0x7f
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006cfa:	68d9      	ldr	r1, [r3, #12]
 8006cfc:	0f49      	lsrs	r1, r1, #29
 8006cfe:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006d00:	f7fb fa02 	bl	8002108 <__udivsi3>
 8006d04:	e7c9      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d06:	480b      	ldr	r0, [pc, #44]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d08:	f7fb f9fe 	bl	8002108 <__udivsi3>
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xac>)
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	0a12      	lsrs	r2, r2, #8
 8006d12:	237f      	movs	r3, #127	@ 0x7f
 8006d14:	4013      	ands	r3, r2
 8006d16:	4358      	muls	r0, r3
        break;
 8006d18:	e7ee      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8006d1a:	20fa      	movs	r0, #250	@ 0xfa
 8006d1c:	01c0      	lsls	r0, r0, #7
 8006d1e:	e7bc      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8006d20:	4804      	ldr	r0, [pc, #16]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d22:	e7ba      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8006d24:	2080      	movs	r0, #128	@ 0x80
 8006d26:	0200      	lsls	r0, r0, #8
 8006d28:	e7b7      	b.n	8006c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	00f42400 	.word	0x00f42400
 8006d34:	007a1200 	.word	0x007a1200

08006d38 <HAL_RCC_ClockConfig>:
{
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	0004      	movs	r4, r0
 8006d3c:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d100      	bne.n	8006d44 <HAL_RCC_ClockConfig+0xc>
 8006d42:	e0aa      	b.n	8006e9a <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d44:	4b57      	ldr	r3, [pc, #348]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	2307      	movs	r3, #7
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	428b      	cmp	r3, r1
 8006d4e:	d321      	bcc.n	8006d94 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	079a      	lsls	r2, r3, #30
 8006d54:	d50e      	bpl.n	8006d74 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d56:	075b      	lsls	r3, r3, #29
 8006d58:	d505      	bpl.n	8006d66 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006d5a:	4a53      	ldr	r2, [pc, #332]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006d5c:	6891      	ldr	r1, [r2, #8]
 8006d5e:	23e0      	movs	r3, #224	@ 0xe0
 8006d60:	01db      	lsls	r3, r3, #7
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d66:	4a50      	ldr	r2, [pc, #320]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006d68:	6893      	ldr	r3, [r2, #8]
 8006d6a:	4950      	ldr	r1, [pc, #320]	@ (8006eac <HAL_RCC_ClockConfig+0x174>)
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	68a1      	ldr	r1, [r4, #8]
 8006d70:	430b      	orrs	r3, r1
 8006d72:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d554      	bpl.n	8006e24 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d020      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d03b      	beq.n	8006dfc <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13f      	bne.n	8006e08 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d88:	4a47      	ldr	r2, [pc, #284]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	0552      	lsls	r2, r2, #21
 8006d8e:	d41c      	bmi.n	8006dca <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006d90:	2001      	movs	r0, #1
 8006d92:	e06a      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d94:	4a43      	ldr	r2, [pc, #268]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	2107      	movs	r1, #7
 8006d9a:	438b      	bics	r3, r1
 8006d9c:	432b      	orrs	r3, r5
 8006d9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006da0:	f7fe fb92 	bl	80054c8 <HAL_GetTick>
 8006da4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006da6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	2307      	movs	r3, #7
 8006dac:	4013      	ands	r3, r2
 8006dae:	42ab      	cmp	r3, r5
 8006db0:	d0ce      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db2:	f7fe fb89 	bl	80054c8 <HAL_GetTick>
 8006db6:	1b80      	subs	r0, r0, r6
 8006db8:	4a3d      	ldr	r2, [pc, #244]	@ (8006eb0 <HAL_RCC_ClockConfig+0x178>)
 8006dba:	4290      	cmp	r0, r2
 8006dbc:	d9f3      	bls.n	8006da6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8006dbe:	2003      	movs	r0, #3
 8006dc0:	e053      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dc2:	4a39      	ldr	r2, [pc, #228]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	0392      	lsls	r2, r2, #14
 8006dc8:	d569      	bpl.n	8006e9e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dca:	4937      	ldr	r1, [pc, #220]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006dcc:	688a      	ldr	r2, [r1, #8]
 8006dce:	2007      	movs	r0, #7
 8006dd0:	4382      	bics	r2, r0
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006dd6:	f7fe fb77 	bl	80054c8 <HAL_GetTick>
 8006dda:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ddc:	4b32      	ldr	r3, [pc, #200]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2238      	movs	r2, #56	@ 0x38
 8006de2:	401a      	ands	r2, r3
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d01b      	beq.n	8006e24 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dec:	f7fe fb6c 	bl	80054c8 <HAL_GetTick>
 8006df0:	1b80      	subs	r0, r0, r6
 8006df2:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb0 <HAL_RCC_ClockConfig+0x178>)
 8006df4:	4298      	cmp	r0, r3
 8006df6:	d9f1      	bls.n	8006ddc <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8006df8:	2003      	movs	r0, #3
 8006dfa:	e036      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	0192      	lsls	r2, r2, #6
 8006e02:	d4e2      	bmi.n	8006dca <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e04:	2001      	movs	r0, #1
 8006e06:	e030      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e0c:	4a26      	ldr	r2, [pc, #152]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006e0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e10:	0792      	lsls	r2, r2, #30
 8006e12:	d4da      	bmi.n	8006dca <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e14:	2001      	movs	r0, #1
 8006e16:	e028      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e18:	4a23      	ldr	r2, [pc, #140]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006e1a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006e1c:	0792      	lsls	r2, r2, #30
 8006e1e:	d4d4      	bmi.n	8006dca <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8006e20:	2001      	movs	r0, #1
 8006e22:	e022      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e24:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2307      	movs	r3, #7
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	d81d      	bhi.n	8006e6c <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	075b      	lsls	r3, r3, #29
 8006e34:	d506      	bpl.n	8006e44 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006e36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006e38:	6893      	ldr	r3, [r2, #8]
 8006e3a:	491e      	ldr	r1, [pc, #120]	@ (8006eb4 <HAL_RCC_ClockConfig+0x17c>)
 8006e3c:	400b      	ands	r3, r1
 8006e3e:	68e1      	ldr	r1, [r4, #12]
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006e44:	f7ff ff1c 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
 8006e48:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <HAL_RCC_ClockConfig+0x170>)
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	0a12      	lsrs	r2, r2, #8
 8006e4e:	230f      	movs	r3, #15
 8006e50:	4013      	ands	r3, r2
 8006e52:	4a19      	ldr	r2, [pc, #100]	@ (8006eb8 <HAL_RCC_ClockConfig+0x180>)
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	589a      	ldr	r2, [r3, r2]
 8006e58:	231f      	movs	r3, #31
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	40d8      	lsrs	r0, r3
 8006e5e:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <HAL_RCC_ClockConfig+0x184>)
 8006e60:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006e62:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <HAL_RCC_ClockConfig+0x188>)
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7fe fae3 	bl	8005430 <HAL_InitTick>
}
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	2107      	movs	r1, #7
 8006e72:	438b      	bics	r3, r1
 8006e74:	432b      	orrs	r3, r5
 8006e76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e78:	f7fe fb26 	bl	80054c8 <HAL_GetTick>
 8006e7c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ea4 <HAL_RCC_ClockConfig+0x16c>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	2307      	movs	r3, #7
 8006e84:	4013      	ands	r3, r2
 8006e86:	42ab      	cmp	r3, r5
 8006e88:	d0d2      	beq.n	8006e30 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e8a:	f7fe fb1d 	bl	80054c8 <HAL_GetTick>
 8006e8e:	1b80      	subs	r0, r0, r6
 8006e90:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <HAL_RCC_ClockConfig+0x178>)
 8006e92:	4298      	cmp	r0, r3
 8006e94:	d9f3      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8006e96:	2003      	movs	r0, #3
 8006e98:	e7e7      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7e5      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	e7e3      	b.n	8006e6a <HAL_RCC_ClockConfig+0x132>
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	40022000 	.word	0x40022000
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	fffff0ff 	.word	0xfffff0ff
 8006eb0:	00001388 	.word	0x00001388
 8006eb4:	ffff8fff 	.word	0xffff8fff
 8006eb8:	08007804 	.word	0x08007804
 8006ebc:	200000e0 	.word	0x200000e0
 8006ec0:	200000e8 	.word	0x200000e8

08006ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eca:	6803      	ldr	r3, [r0, #0]
 8006ecc:	039b      	lsls	r3, r3, #14
 8006ece:	d562      	bpl.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	d41e      	bmi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006edc:	2180      	movs	r1, #128	@ 0x80
 8006ede:	0549      	lsls	r1, r1, #21
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006eec:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eee:	4a67      	ldr	r2, [pc, #412]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ef0:	6811      	ldr	r1, [r2, #0]
 8006ef2:	2380      	movs	r3, #128	@ 0x80
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006efa:	f7fe fae5 	bl	80054c8 <HAL_GetTick>
 8006efe:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f00:	4b62      	ldr	r3, [pc, #392]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	05db      	lsls	r3, r3, #23
 8006f06:	d408      	bmi.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f08:	f7fe fade 	bl	80054c8 <HAL_GetTick>
 8006f0c:	1b40      	subs	r0, r0, r5
 8006f0e:	2802      	cmp	r0, #2
 8006f10:	d9f6      	bls.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 8006f12:	2503      	movs	r5, #3
 8006f14:	e002      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 8006f16:	2600      	movs	r6, #0
 8006f18:	e7e9      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006f1a:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	d123      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f20:	4b59      	ldr	r3, [pc, #356]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f22:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006f24:	22c0      	movs	r2, #192	@ 0xc0
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	000b      	movs	r3, r1
 8006f2a:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f2c:	4211      	tst	r1, r2
 8006f2e:	d010      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8006f30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d00d      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f36:	4a54      	ldr	r2, [pc, #336]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f38:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006f3a:	4955      	ldr	r1, [pc, #340]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f3c:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f3e:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	0249      	lsls	r1, r1, #9
 8006f44:	4301      	orrs	r1, r0
 8006f46:	65d1      	str	r1, [r2, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f48:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8006f4a:	4852      	ldr	r0, [pc, #328]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4c:	4001      	ands	r1, r0
 8006f4e:	65d1      	str	r1, [r2, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f50:	65d3      	str	r3, [r2, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f52:	07db      	lsls	r3, r3, #31
 8006f54:	d410      	bmi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 8006f56:	2d00      	cmp	r5, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f5c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006f5e:	494c      	ldr	r1, [pc, #304]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f60:	400b      	ands	r3, r1
 8006f62:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006f64:	430b      	orrs	r3, r1
 8006f66:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f68:	2e01      	cmp	r6, #1
 8006f6a:	d115      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f6c:	4a46      	ldr	r2, [pc, #280]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f6e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006f70:	4949      	ldr	r1, [pc, #292]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006f76:	e00f      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8006f78:	f7fe faa6 	bl	80054c8 <HAL_GetTick>
 8006f7c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f7e:	4b42      	ldr	r3, [pc, #264]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f82:	079b      	lsls	r3, r3, #30
 8006f84:	d4e7      	bmi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f86:	f7fe fa9f 	bl	80054c8 <HAL_GetTick>
 8006f8a:	1bc0      	subs	r0, r0, r7
 8006f8c:	4b43      	ldr	r3, [pc, #268]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	d9f5      	bls.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 8006f92:	2503      	movs	r5, #3
 8006f94:	e7df      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f96:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d506      	bpl.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fa0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	438b      	bics	r3, r1
 8006fa6:	6861      	ldr	r1, [r4, #4]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	06db      	lsls	r3, r3, #27
 8006fb0:	d506      	bpl.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fb2:	4a35      	ldr	r2, [pc, #212]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fb4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fb6:	493a      	ldr	r1, [pc, #232]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006fb8:	400b      	ands	r3, r1
 8006fba:	68a1      	ldr	r1, [r4, #8]
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	059b      	lsls	r3, r3, #22
 8006fc4:	d506      	bpl.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fc6:	4a30      	ldr	r2, [pc, #192]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fc8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fca:	4936      	ldr	r1, [pc, #216]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fcc:	400b      	ands	r3, r1
 8006fce:	6961      	ldr	r1, [r4, #20]
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	055b      	lsls	r3, r3, #21
 8006fd8:	d506      	bpl.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fda:	4a2b      	ldr	r2, [pc, #172]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fdc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fde:	4932      	ldr	r1, [pc, #200]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	69a1      	ldr	r1, [r4, #24]
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	069b      	lsls	r3, r3, #26
 8006fec:	d506      	bpl.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fee:	4a26      	ldr	r2, [pc, #152]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ff0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006ff2:	492e      	ldr	r1, [pc, #184]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ff4:	400b      	ands	r3, r1
 8006ff6:	68e1      	ldr	r1, [r4, #12]
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	045b      	lsls	r3, r3, #17
 8007000:	d50b      	bpl.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007002:	4a21      	ldr	r2, [pc, #132]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007004:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	089b      	lsrs	r3, r3, #2
 800700a:	69e1      	ldr	r1, [r4, #28]
 800700c:	430b      	orrs	r3, r1
 800700e:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007010:	69e2      	ldr	r2, [r4, #28]
 8007012:	2380      	movs	r3, #128	@ 0x80
 8007014:	05db      	lsls	r3, r3, #23
 8007016:	429a      	cmp	r2, r3
 8007018:	d020      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x198>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	d50b      	bpl.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007020:	4a19      	ldr	r2, [pc, #100]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007022:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007024:	4922      	ldr	r1, [pc, #136]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007026:	400b      	ands	r3, r1
 8007028:	6a21      	ldr	r1, [r4, #32]
 800702a:	430b      	orrs	r3, r1
 800702c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800702e:	6a22      	ldr	r2, [r4, #32]
 8007030:	2380      	movs	r3, #128	@ 0x80
 8007032:	03db      	lsls	r3, r3, #15
 8007034:	429a      	cmp	r2, r3
 8007036:	d018      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	051b      	lsls	r3, r3, #20
 800703c:	d50b      	bpl.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800703e:	4a12      	ldr	r2, [pc, #72]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007040:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007042:	491c      	ldr	r1, [pc, #112]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007044:	400b      	ands	r3, r1
 8007046:	6921      	ldr	r1, [r4, #16]
 8007048:	430b      	orrs	r3, r1
 800704a:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800704c:	6922      	ldr	r2, [r4, #16]
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	01db      	lsls	r3, r3, #7
 8007052:	429a      	cmp	r2, r3
 8007054:	d010      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8007056:	0028      	movs	r0, r5
 8007058:	b003      	add	sp, #12
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800705c:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800705e:	68d1      	ldr	r1, [r2, #12]
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	025b      	lsls	r3, r3, #9
 8007064:	430b      	orrs	r3, r1
 8007066:	60d3      	str	r3, [r2, #12]
 8007068:	e7d7      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800706a:	4a07      	ldr	r2, [pc, #28]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800706c:	68d1      	ldr	r1, [r2, #12]
 800706e:	2380      	movs	r3, #128	@ 0x80
 8007070:	045b      	lsls	r3, r3, #17
 8007072:	430b      	orrs	r3, r1
 8007074:	60d3      	str	r3, [r2, #12]
 8007076:	e7df      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007078:	4a03      	ldr	r2, [pc, #12]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800707a:	68d1      	ldr	r1, [r2, #12]
 800707c:	2380      	movs	r3, #128	@ 0x80
 800707e:	025b      	lsls	r3, r3, #9
 8007080:	430b      	orrs	r3, r1
 8007082:	60d3      	str	r3, [r2, #12]
 8007084:	e7e7      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	40021000 	.word	0x40021000
 800708c:	40007000 	.word	0x40007000
 8007090:	fffffcff 	.word	0xfffffcff
 8007094:	fffeffff 	.word	0xfffeffff
 8007098:	efffffff 	.word	0xefffffff
 800709c:	00001388 	.word	0x00001388
 80070a0:	fffff3ff 	.word	0xfffff3ff
 80070a4:	fff3ffff 	.word	0xfff3ffff
 80070a8:	ffcfffff 	.word	0xffcfffff
 80070ac:	ffffcfff 	.word	0xffffcfff
 80070b0:	ffbfffff 	.word	0xffbfffff
 80070b4:	ffff3fff 	.word	0xffff3fff

080070b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80070ba:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80070bc:	e016      	b.n	80070ec <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	469c      	mov	ip, r3
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80070c2:	68c4      	ldr	r4, [r0, #12]
 80070c4:	002b      	movs	r3, r5
 80070c6:	436b      	muls	r3, r5
 80070c8:	005e      	lsls	r6, r3, #1
 80070ca:	18f6      	adds	r6, r6, r3
 80070cc:	43f7      	mvns	r7, r6
 80070ce:	43b4      	bics	r4, r6
 80070d0:	4666      	mov	r6, ip
 80070d2:	435e      	muls	r6, r3
 80070d4:	4334      	orrs	r4, r6
 80070d6:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80070d8:	684c      	ldr	r4, [r1, #4]
 80070da:	2c02      	cmp	r4, #2
 80070dc:	d025      	beq.n	800712a <LL_GPIO_Init+0x72>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80070de:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80070e0:	6804      	ldr	r4, [r0, #0]
 80070e2:	403c      	ands	r4, r7
 80070e4:	436b      	muls	r3, r5
 80070e6:	4323      	orrs	r3, r4
 80070e8:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80070ea:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80070ec:	680c      	ldr	r4, [r1, #0]
 80070ee:	0023      	movs	r3, r4
 80070f0:	40d3      	lsrs	r3, r2
 80070f2:	d03a      	beq.n	800716a <LL_GPIO_Init+0xb2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80070f4:	2301      	movs	r3, #1
 80070f6:	4093      	lsls	r3, r2
 80070f8:	0025      	movs	r5, r4
 80070fa:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80070fc:	421c      	tst	r4, r3
 80070fe:	d0f4      	beq.n	80070ea <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007100:	684b      	ldr	r3, [r1, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d8da      	bhi.n	80070be <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007108:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800710a:	6883      	ldr	r3, [r0, #8]
 800710c:	002c      	movs	r4, r5
 800710e:	436c      	muls	r4, r5
 8007110:	0066      	lsls	r6, r4, #1
 8007112:	1936      	adds	r6, r6, r4
 8007114:	43b3      	bics	r3, r6
 8007116:	437c      	muls	r4, r7
 8007118:	4323      	orrs	r3, r4
 800711a:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800711c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800711e:	6843      	ldr	r3, [r0, #4]
 8007120:	43ab      	bics	r3, r5
 8007122:	436c      	muls	r4, r5
 8007124:	4323      	orrs	r3, r4
 8007126:	6043      	str	r3, [r0, #4]
}
 8007128:	e7c9      	b.n	80070be <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 800712a:	2dff      	cmp	r5, #255	@ 0xff
 800712c:	d80d      	bhi.n	800714a <LL_GPIO_Init+0x92>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800712e:	694c      	ldr	r4, [r1, #20]
 8007130:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007132:	6a06      	ldr	r6, [r0, #32]
 8007134:	001c      	movs	r4, r3
 8007136:	436c      	muls	r4, r5
 8007138:	436c      	muls	r4, r5
 800713a:	0125      	lsls	r5, r4, #4
 800713c:	1b2d      	subs	r5, r5, r4
 800713e:	43ae      	bics	r6, r5
 8007140:	4665      	mov	r5, ip
 8007142:	436c      	muls	r4, r5
 8007144:	4334      	orrs	r4, r6
 8007146:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8007148:	e7c9      	b.n	80070de <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800714a:	694c      	ldr	r4, [r1, #20]
 800714c:	46a4      	mov	ip, r4
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800714e:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8007150:	0a2d      	lsrs	r5, r5, #8
 8007152:	002c      	movs	r4, r5
 8007154:	436c      	muls	r4, r5
 8007156:	436c      	muls	r4, r5
 8007158:	436c      	muls	r4, r5
 800715a:	0125      	lsls	r5, r4, #4
 800715c:	1b2d      	subs	r5, r5, r4
 800715e:	43ae      	bics	r6, r5
 8007160:	4665      	mov	r5, ip
 8007162:	436c      	muls	r4, r5
 8007164:	4334      	orrs	r4, r6
 8007166:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8007168:	e7b9      	b.n	80070de <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 800716a:	2000      	movs	r0, #0
 800716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007170 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <RCC_GetHCLKClockFreq+0x18>)
 8007172:	689a      	ldr	r2, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007174:	0a12      	lsrs	r2, r2, #8
 8007176:	230f      	movs	r3, #15
 8007178:	4013      	ands	r3, r2
 800717a:	4a04      	ldr	r2, [pc, #16]	@ (800718c <RCC_GetHCLKClockFreq+0x1c>)
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	589a      	ldr	r2, [r3, r2]
 8007180:	231f      	movs	r3, #31
 8007182:	4013      	ands	r3, r2
 8007184:	40d8      	lsrs	r0, r3
}
 8007186:	4770      	bx	lr
 8007188:	40021000 	.word	0x40021000
 800718c:	08007804 	.word	0x08007804

08007190 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <RCC_GetPCLK1ClockFreq+0x18>)
 8007192:	689a      	ldr	r2, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007194:	0b12      	lsrs	r2, r2, #12
 8007196:	2307      	movs	r3, #7
 8007198:	4013      	ands	r3, r2
 800719a:	4a04      	ldr	r2, [pc, #16]	@ (80071ac <RCC_GetPCLK1ClockFreq+0x1c>)
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	589a      	ldr	r2, [r3, r2]
 80071a0:	231f      	movs	r3, #31
 80071a2:	4013      	ands	r3, r2
 80071a4:	40d8      	lsrs	r0, r3
}
 80071a6:	4770      	bx	lr
 80071a8:	40021000 	.word	0x40021000
 80071ac:	080077e4 	.word	0x080077e4

080071b0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80071b0:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80071b2:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	2303      	movs	r3, #3
 80071b8:	4013      	ands	r3, r2
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d013      	beq.n	80071e6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80071be:	4a0c      	ldr	r2, [pc, #48]	@ (80071f0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80071c0:	4c0a      	ldr	r4, [pc, #40]	@ (80071ec <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80071c2:	68e3      	ldr	r3, [r4, #12]
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	207f      	movs	r0, #127	@ 0x7f
 80071c8:	4018      	ands	r0, r3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80071ca:	4350      	muls	r0, r2
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80071cc:	68e3      	ldr	r3, [r4, #12]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	2107      	movs	r1, #7
 80071d2:	4019      	ands	r1, r3
 80071d4:	3101      	adds	r1, #1
 80071d6:	f7fa ff97 	bl	8002108 <__udivsi3>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80071da:	68e1      	ldr	r1, [r4, #12]
 80071dc:	0f49      	lsrs	r1, r1, #29
 80071de:	3101      	adds	r1, #1
 80071e0:	f7fa ff92 	bl	8002108 <__udivsi3>
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80071e4:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 80071e6:	4a03      	ldr	r2, [pc, #12]	@ (80071f4 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80071e8:	e7ea      	b.n	80071c0 <RCC_PLL_GetFreqDomain_SYS+0x10>
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	40021000 	.word	0x40021000
 80071f0:	00f42400 	.word	0x00f42400
 80071f4:	007a1200 	.word	0x007a1200

080071f8 <RCC_GetSystemClockFreq>:
{
 80071f8:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <RCC_GetSystemClockFreq+0x2c>)
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	2338      	movs	r3, #56	@ 0x38
 8007200:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8007202:	2b08      	cmp	r3, #8
 8007204:	d00c      	beq.n	8007220 <RCC_GetSystemClockFreq+0x28>
 8007206:	2b10      	cmp	r3, #16
 8007208:	d102      	bne.n	8007210 <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800720a:	f7ff ffd1 	bl	80071b0 <RCC_PLL_GetFreqDomain_SYS>
}
 800720e:	bd10      	pop	{r4, pc}
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007210:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <RCC_GetSystemClockFreq+0x2c>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	0ad2      	lsrs	r2, r2, #11
 8007216:	2307      	movs	r3, #7
 8007218:	4013      	ands	r3, r2
      frequency = (HSI_VALUE / hsidiv);
 800721a:	4803      	ldr	r0, [pc, #12]	@ (8007228 <RCC_GetSystemClockFreq+0x30>)
 800721c:	40d8      	lsrs	r0, r3
      break;
 800721e:	e7f6      	b.n	800720e <RCC_GetSystemClockFreq+0x16>
  switch (LL_RCC_GetSysClkSource())
 8007220:	4802      	ldr	r0, [pc, #8]	@ (800722c <RCC_GetSystemClockFreq+0x34>)
  return frequency;
 8007222:	e7f4      	b.n	800720e <RCC_GetSystemClockFreq+0x16>
 8007224:	40021000 	.word	0x40021000
 8007228:	00f42400 	.word	0x00f42400
 800722c:	007a1200 	.word	0x007a1200

08007230 <LL_RCC_GetSystemClocksFreq>:
{
 8007230:	b510      	push	{r4, lr}
 8007232:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007234:	f7ff ffe0 	bl	80071f8 <RCC_GetSystemClockFreq>
 8007238:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800723a:	f7ff ff99 	bl	8007170 <RCC_GetHCLKClockFreq>
 800723e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007240:	f7ff ffa6 	bl	8007190 <RCC_GetPCLK1ClockFreq>
 8007244:	60a0      	str	r0, [r4, #8]
}
 8007246:	bd10      	pop	{r4, pc}

08007248 <LL_RCC_GetUSARTClockFreq>:
{
 8007248:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800724a:	2803      	cmp	r0, #3
 800724c:	d001      	beq.n	8007252 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800724e:	2000      	movs	r0, #0
}
 8007250:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8007252:	4b16      	ldr	r3, [pc, #88]	@ (80072ac <LL_RCC_GetUSARTClockFreq+0x64>)
 8007254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007256:	4003      	ands	r3, r0
 8007258:	0400      	lsls	r0, r0, #16
 800725a:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800725c:	4a14      	ldr	r2, [pc, #80]	@ (80072b0 <LL_RCC_GetUSARTClockFreq+0x68>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <LL_RCC_GetUSARTClockFreq+0x3a>
 8007262:	4a14      	ldr	r2, [pc, #80]	@ (80072b4 <LL_RCC_GetUSARTClockFreq+0x6c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d016      	beq.n	8007296 <LL_RCC_GetUSARTClockFreq+0x4e>
 8007268:	4a13      	ldr	r2, [pc, #76]	@ (80072b8 <LL_RCC_GetUSARTClockFreq+0x70>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d006      	beq.n	800727c <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800726e:	f7ff ffc3 	bl	80071f8 <RCC_GetSystemClockFreq>
 8007272:	f7ff ff7d 	bl	8007170 <RCC_GetHCLKClockFreq>
 8007276:	f7ff ff8b 	bl	8007190 <RCC_GetPCLK1ClockFreq>
        break;
 800727a:	e7e9      	b.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 800727c:	f7ff ffbc 	bl	80071f8 <RCC_GetSystemClockFreq>
        break;
 8007280:	e7e6      	b.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <LL_RCC_GetUSARTClockFreq+0x64>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	2380      	movs	r3, #128	@ 0x80
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	0010      	movs	r0, r2
 800728c:	4018      	ands	r0, r3
 800728e:	421a      	tst	r2, r3
 8007290:	d0de      	beq.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = HSI_VALUE;
 8007292:	480a      	ldr	r0, [pc, #40]	@ (80072bc <LL_RCC_GetUSARTClockFreq+0x74>)
 8007294:	e7dc      	b.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007296:	4b05      	ldr	r3, [pc, #20]	@ (80072ac <LL_RCC_GetUSARTClockFreq+0x64>)
 8007298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729a:	2202      	movs	r2, #2
 800729c:	0010      	movs	r0, r2
 800729e:	4018      	ands	r0, r3
 80072a0:	421a      	tst	r2, r3
 80072a2:	d0d5      	beq.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 80072a4:	2080      	movs	r0, #128	@ 0x80
 80072a6:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 80072a8:	e7d2      	b.n	8007250 <LL_RCC_GetUSARTClockFreq+0x8>
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	40021000 	.word	0x40021000
 80072b0:	00030002 	.word	0x00030002
 80072b4:	00030003 	.word	0x00030003
 80072b8:	00030001 	.word	0x00030001
 80072bc:	00f42400 	.word	0x00f42400

080072c0 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80072c0:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007338 <LL_TIM_Init+0x78>)
 80072c4:	4290      	cmp	r0, r2
 80072c6:	d006      	beq.n	80072d6 <LL_TIM_Init+0x16>
 80072c8:	2280      	movs	r2, #128	@ 0x80
 80072ca:	05d2      	lsls	r2, r2, #23
 80072cc:	4290      	cmp	r0, r2
 80072ce:	d002      	beq.n	80072d6 <LL_TIM_Init+0x16>
 80072d0:	4a1a      	ldr	r2, [pc, #104]	@ (800733c <LL_TIM_Init+0x7c>)
 80072d2:	4290      	cmp	r0, r2
 80072d4:	d103      	bne.n	80072de <LL_TIM_Init+0x1e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80072d6:	2270      	movs	r2, #112	@ 0x70
 80072d8:	4393      	bics	r3, r2
 80072da:	684a      	ldr	r2, [r1, #4]
 80072dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072de:	4a16      	ldr	r2, [pc, #88]	@ (8007338 <LL_TIM_Init+0x78>)
 80072e0:	4290      	cmp	r0, r2
 80072e2:	d00f      	beq.n	8007304 <LL_TIM_Init+0x44>
 80072e4:	2280      	movs	r2, #128	@ 0x80
 80072e6:	05d2      	lsls	r2, r2, #23
 80072e8:	4290      	cmp	r0, r2
 80072ea:	d00b      	beq.n	8007304 <LL_TIM_Init+0x44>
 80072ec:	4a13      	ldr	r2, [pc, #76]	@ (800733c <LL_TIM_Init+0x7c>)
 80072ee:	4290      	cmp	r0, r2
 80072f0:	d008      	beq.n	8007304 <LL_TIM_Init+0x44>
 80072f2:	4a13      	ldr	r2, [pc, #76]	@ (8007340 <LL_TIM_Init+0x80>)
 80072f4:	4290      	cmp	r0, r2
 80072f6:	d005      	beq.n	8007304 <LL_TIM_Init+0x44>
 80072f8:	4a12      	ldr	r2, [pc, #72]	@ (8007344 <LL_TIM_Init+0x84>)
 80072fa:	4290      	cmp	r0, r2
 80072fc:	d002      	beq.n	8007304 <LL_TIM_Init+0x44>
 80072fe:	4a12      	ldr	r2, [pc, #72]	@ (8007348 <LL_TIM_Init+0x88>)
 8007300:	4290      	cmp	r0, r2
 8007302:	d103      	bne.n	800730c <LL_TIM_Init+0x4c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007304:	4a11      	ldr	r2, [pc, #68]	@ (800734c <LL_TIM_Init+0x8c>)
 8007306:	401a      	ands	r2, r3
 8007308:	68cb      	ldr	r3, [r1, #12]
 800730a:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800730c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800730e:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007310:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007312:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007314:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <LL_TIM_Init+0x78>)
 8007318:	4298      	cmp	r0, r3
 800731a:	d005      	beq.n	8007328 <LL_TIM_Init+0x68>
 800731c:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <LL_TIM_Init+0x84>)
 800731e:	4298      	cmp	r0, r3
 8007320:	d002      	beq.n	8007328 <LL_TIM_Init+0x68>
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <LL_TIM_Init+0x88>)
 8007324:	4298      	cmp	r0, r3
 8007326:	d101      	bne.n	800732c <LL_TIM_Init+0x6c>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007328:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800732a:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800732c:	6943      	ldr	r3, [r0, #20]
 800732e:	2201      	movs	r2, #1
 8007330:	4313      	orrs	r3, r2
 8007332:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8007334:	2000      	movs	r0, #0
 8007336:	4770      	bx	lr
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40000400 	.word	0x40000400
 8007340:	40002000 	.word	0x40002000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800
 800734c:	fffffcff 	.word	0xfffffcff

08007350 <LL_USART_SetBaudRate>:
{
 8007350:	b510      	push	{r4, lr}
 8007352:	0004      	movs	r4, r0
 8007354:	0008      	movs	r0, r1
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8007356:	2a0b      	cmp	r2, #11
 8007358:	d816      	bhi.n	8007388 <LL_USART_SetBaudRate+0x38>
  else if (BaudRate == 0U)
 800735a:	9902      	ldr	r1, [sp, #8]
 800735c:	2900      	cmp	r1, #0
 800735e:	d013      	beq.n	8007388 <LL_USART_SetBaudRate+0x38>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007360:	2180      	movs	r1, #128	@ 0x80
 8007362:	0209      	lsls	r1, r1, #8
 8007364:	428b      	cmp	r3, r1
 8007366:	d010      	beq.n	800738a <LL_USART_SetBaudRate+0x3a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8007368:	23ff      	movs	r3, #255	@ 0xff
 800736a:	4013      	ands	r3, r2
 800736c:	4a12      	ldr	r2, [pc, #72]	@ (80073b8 <LL_USART_SetBaudRate+0x68>)
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	5899      	ldr	r1, [r3, r2]
 8007372:	f7fa fec9 	bl	8002108 <__udivsi3>
 8007376:	9b02      	ldr	r3, [sp, #8]
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	18c0      	adds	r0, r0, r3
 800737c:	9902      	ldr	r1, [sp, #8]
 800737e:	f7fa fec3 	bl	8002108 <__udivsi3>
 8007382:	0400      	lsls	r0, r0, #16
 8007384:	0c00      	lsrs	r0, r0, #16
 8007386:	60e0      	str	r0, [r4, #12]
}
 8007388:	bd10      	pop	{r4, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800738a:	23ff      	movs	r3, #255	@ 0xff
 800738c:	4013      	ands	r3, r2
 800738e:	4a0a      	ldr	r2, [pc, #40]	@ (80073b8 <LL_USART_SetBaudRate+0x68>)
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	5899      	ldr	r1, [r3, r2]
 8007394:	f7fa feb8 	bl	8002108 <__udivsi3>
 8007398:	0040      	lsls	r0, r0, #1
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	18c0      	adds	r0, r0, r3
 80073a0:	9902      	ldr	r1, [sp, #8]
 80073a2:	f7fa feb1 	bl	8002108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80073a6:	4a05      	ldr	r2, [pc, #20]	@ (80073bc <LL_USART_SetBaudRate+0x6c>)
 80073a8:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073aa:	0400      	lsls	r0, r0, #16
 80073ac:	0c40      	lsrs	r0, r0, #17
 80073ae:	2307      	movs	r3, #7
 80073b0:	4003      	ands	r3, r0
 80073b2:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 80073b4:	60e3      	str	r3, [r4, #12]
 80073b6:	e7e7      	b.n	8007388 <LL_USART_SetBaudRate+0x38>
 80073b8:	08007844 	.word	0x08007844
 80073bc:	0000fff0 	.word	0x0000fff0

080073c0 <LL_USART_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 80073c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <LL_USART_DeInit+0x40>)
 80073c2:	4298      	cmp	r0, r3
 80073c4:	d004      	beq.n	80073d0 <LL_USART_DeInit+0x10>
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
  }
  else if (USARTx == USART2)
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <LL_USART_DeInit+0x44>)
 80073c8:	4298      	cmp	r0, r3
 80073ca:	d00d      	beq.n	80073e8 <LL_USART_DeInit+0x28>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART6);
  }
#endif /* USART6 */
  else
  {
    status = ERROR;
 80073cc:	2001      	movs	r0, #1
  }

  return (status);
}
 80073ce:	4770      	bx	lr
  SET_BIT(RCC->APBRSTR2, Periphs);
 80073d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <LL_USART_DeInit+0x48>)
 80073d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80073d4:	2280      	movs	r2, #128	@ 0x80
 80073d6:	01d2      	lsls	r2, r2, #7
 80073d8:	430a      	orrs	r2, r1
 80073da:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(RCC->APBRSTR2, Periphs);
 80073dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073de:	490b      	ldr	r1, [pc, #44]	@ (800740c <LL_USART_DeInit+0x4c>)
 80073e0:	400a      	ands	r2, r1
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 80073e4:	2000      	movs	r0, #0
}
 80073e6:	e7f2      	b.n	80073ce <LL_USART_DeInit+0xe>
  SET_BIT(RCC->APBRSTR1, Periphs);
 80073e8:	4b07      	ldr	r3, [pc, #28]	@ (8007408 <LL_USART_DeInit+0x48>)
 80073ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80073ec:	2280      	movs	r2, #128	@ 0x80
 80073ee:	0292      	lsls	r2, r2, #10
 80073f0:	430a      	orrs	r2, r1
 80073f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80073f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f6:	4906      	ldr	r1, [pc, #24]	@ (8007410 <LL_USART_DeInit+0x50>)
 80073f8:	400a      	ands	r2, r1
 80073fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073fc:	2000      	movs	r0, #0
}
 80073fe:	e7e6      	b.n	80073ce <LL_USART_DeInit+0xe>
 8007400:	40013800 	.word	0x40013800
 8007404:	40004400 	.word	0x40004400
 8007408:	40021000 	.word	0x40021000
 800740c:	ffffbfff 	.word	0xffffbfff
 8007410:	fffdffff 	.word	0xfffdffff

08007414 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007414:	b530      	push	{r4, r5, lr}
 8007416:	b087      	sub	sp, #28
 8007418:	0004      	movs	r4, r0
 800741a:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800741c:	6803      	ldr	r3, [r0, #0]
 800741e:	07db      	lsls	r3, r3, #31
 8007420:	d442      	bmi.n	80074a8 <LL_USART_Init+0x94>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007422:	6803      	ldr	r3, [r0, #0]
 8007424:	4a21      	ldr	r2, [pc, #132]	@ (80074ac <LL_USART_Init+0x98>)
 8007426:	401a      	ands	r2, r3
 8007428:	688b      	ldr	r3, [r1, #8]
 800742a:	6909      	ldr	r1, [r1, #16]
 800742c:	430b      	orrs	r3, r1
 800742e:	6969      	ldr	r1, [r5, #20]
 8007430:	430b      	orrs	r3, r1
 8007432:	69e9      	ldr	r1, [r5, #28]
 8007434:	430b      	orrs	r3, r1
 8007436:	4313      	orrs	r3, r2
 8007438:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800743a:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800743c:	6842      	ldr	r2, [r0, #4]
 800743e:	491c      	ldr	r1, [pc, #112]	@ (80074b0 <LL_USART_Init+0x9c>)
 8007440:	400a      	ands	r2, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007446:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007448:	6882      	ldr	r2, [r0, #8]
 800744a:	491a      	ldr	r1, [pc, #104]	@ (80074b4 <LL_USART_Init+0xa0>)
 800744c:	400a      	ands	r2, r1
 800744e:	4313      	orrs	r3, r2
 8007450:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007452:	4b19      	ldr	r3, [pc, #100]	@ (80074b8 <LL_USART_Init+0xa4>)
 8007454:	4298      	cmp	r0, r3
 8007456:	d00d      	beq.n	8007474 <LL_USART_Init+0x60>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8007458:	4b18      	ldr	r3, [pc, #96]	@ (80074bc <LL_USART_Init+0xa8>)
 800745a:	4298      	cmp	r0, r3
 800745c:	d015      	beq.n	800748a <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 800745e:	2001      	movs	r0, #1

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8007460:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8007462:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007464:	210f      	movs	r1, #15
 8007466:	438a      	bics	r2, r1
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	4313      	orrs	r3, r2
 800746e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8007470:	b007      	add	sp, #28
 8007472:	bd30      	pop	{r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007474:	2003      	movs	r0, #3
 8007476:	f7ff fee7 	bl	8007248 <LL_RCC_GetUSARTClockFreq>
 800747a:	0001      	movs	r1, r0
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800747c:	2900      	cmp	r1, #0
 800747e:	d011      	beq.n	80074a4 <LL_USART_Init+0x90>
        && (USART_InitStruct->BaudRate != 0U))
 8007480:	6868      	ldr	r0, [r5, #4]
 8007482:	2800      	cmp	r0, #0
 8007484:	d106      	bne.n	8007494 <LL_USART_Init+0x80>
  ErrorStatus status = ERROR;
 8007486:	2001      	movs	r0, #1
 8007488:	e7ea      	b.n	8007460 <LL_USART_Init+0x4c>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800748a:	a803      	add	r0, sp, #12
 800748c:	f7ff fed0 	bl	8007230 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8007490:	9905      	ldr	r1, [sp, #20]
 8007492:	e7f3      	b.n	800747c <LL_USART_Init+0x68>
                           USART_InitStruct->PrescalerValue,
 8007494:	682a      	ldr	r2, [r5, #0]
                           USART_InitStruct->OverSampling,
 8007496:	69eb      	ldr	r3, [r5, #28]
      LL_USART_SetBaudRate(USARTx,
 8007498:	9000      	str	r0, [sp, #0]
 800749a:	0020      	movs	r0, r4
 800749c:	f7ff ff58 	bl	8007350 <LL_USART_SetBaudRate>
      status = SUCCESS;
 80074a0:	2000      	movs	r0, #0
 80074a2:	e7dd      	b.n	8007460 <LL_USART_Init+0x4c>
  ErrorStatus status = ERROR;
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7db      	b.n	8007460 <LL_USART_Init+0x4c>
 80074a8:	2001      	movs	r0, #1
 80074aa:	e7e1      	b.n	8007470 <LL_USART_Init+0x5c>
 80074ac:	efff69f3 	.word	0xefff69f3
 80074b0:	ffffcfff 	.word	0xffffcfff
 80074b4:	fffffcff 	.word	0xfffffcff
 80074b8:	40013800 	.word	0x40013800
 80074bc:	40004400 	.word	0x40004400

080074c0 <calloc>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4b03      	ldr	r3, [pc, #12]	@ (80074d0 <calloc+0x10>)
 80074c4:	000a      	movs	r2, r1
 80074c6:	0001      	movs	r1, r0
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f000 f803 	bl	80074d4 <_calloc_r>
 80074ce:	bd10      	pop	{r4, pc}
 80074d0:	200000ec 	.word	0x200000ec

080074d4 <_calloc_r>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	0c0b      	lsrs	r3, r1, #16
 80074d8:	0c15      	lsrs	r5, r2, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11e      	bne.n	800751c <_calloc_r+0x48>
 80074de:	2d00      	cmp	r5, #0
 80074e0:	d10c      	bne.n	80074fc <_calloc_r+0x28>
 80074e2:	b289      	uxth	r1, r1
 80074e4:	b294      	uxth	r4, r2
 80074e6:	434c      	muls	r4, r1
 80074e8:	0021      	movs	r1, r4
 80074ea:	f000 f843 	bl	8007574 <_malloc_r>
 80074ee:	1e05      	subs	r5, r0, #0
 80074f0:	d01a      	beq.n	8007528 <_calloc_r+0x54>
 80074f2:	0022      	movs	r2, r4
 80074f4:	2100      	movs	r1, #0
 80074f6:	f000 f8cd 	bl	8007694 <memset>
 80074fa:	e016      	b.n	800752a <_calloc_r+0x56>
 80074fc:	1c2b      	adds	r3, r5, #0
 80074fe:	1c0c      	adds	r4, r1, #0
 8007500:	b289      	uxth	r1, r1
 8007502:	b292      	uxth	r2, r2
 8007504:	434a      	muls	r2, r1
 8007506:	b29b      	uxth	r3, r3
 8007508:	b2a1      	uxth	r1, r4
 800750a:	4359      	muls	r1, r3
 800750c:	0c14      	lsrs	r4, r2, #16
 800750e:	190c      	adds	r4, r1, r4
 8007510:	0c23      	lsrs	r3, r4, #16
 8007512:	d107      	bne.n	8007524 <_calloc_r+0x50>
 8007514:	0424      	lsls	r4, r4, #16
 8007516:	b292      	uxth	r2, r2
 8007518:	4314      	orrs	r4, r2
 800751a:	e7e5      	b.n	80074e8 <_calloc_r+0x14>
 800751c:	2d00      	cmp	r5, #0
 800751e:	d101      	bne.n	8007524 <_calloc_r+0x50>
 8007520:	1c14      	adds	r4, r2, #0
 8007522:	e7ed      	b.n	8007500 <_calloc_r+0x2c>
 8007524:	230c      	movs	r3, #12
 8007526:	6003      	str	r3, [r0, #0]
 8007528:	2500      	movs	r5, #0
 800752a:	0028      	movs	r0, r5
 800752c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007530 <sbrk_aligned>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	4e0f      	ldr	r6, [pc, #60]	@ (8007570 <sbrk_aligned+0x40>)
 8007534:	000d      	movs	r5, r1
 8007536:	6831      	ldr	r1, [r6, #0]
 8007538:	0004      	movs	r4, r0
 800753a:	2900      	cmp	r1, #0
 800753c:	d102      	bne.n	8007544 <sbrk_aligned+0x14>
 800753e:	f000 f8b1 	bl	80076a4 <_sbrk_r>
 8007542:	6030      	str	r0, [r6, #0]
 8007544:	0029      	movs	r1, r5
 8007546:	0020      	movs	r0, r4
 8007548:	f000 f8ac 	bl	80076a4 <_sbrk_r>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d103      	bne.n	8007558 <sbrk_aligned+0x28>
 8007550:	2501      	movs	r5, #1
 8007552:	426d      	negs	r5, r5
 8007554:	0028      	movs	r0, r5
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	2303      	movs	r3, #3
 800755a:	1cc5      	adds	r5, r0, #3
 800755c:	439d      	bics	r5, r3
 800755e:	42a8      	cmp	r0, r5
 8007560:	d0f8      	beq.n	8007554 <sbrk_aligned+0x24>
 8007562:	1a29      	subs	r1, r5, r0
 8007564:	0020      	movs	r0, r4
 8007566:	f000 f89d 	bl	80076a4 <_sbrk_r>
 800756a:	3001      	adds	r0, #1
 800756c:	d1f2      	bne.n	8007554 <sbrk_aligned+0x24>
 800756e:	e7ef      	b.n	8007550 <sbrk_aligned+0x20>
 8007570:	20000ec0 	.word	0x20000ec0

08007574 <_malloc_r>:
 8007574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007576:	2203      	movs	r2, #3
 8007578:	1ccb      	adds	r3, r1, #3
 800757a:	4393      	bics	r3, r2
 800757c:	3308      	adds	r3, #8
 800757e:	0005      	movs	r5, r0
 8007580:	001f      	movs	r7, r3
 8007582:	2b0c      	cmp	r3, #12
 8007584:	d234      	bcs.n	80075f0 <_malloc_r+0x7c>
 8007586:	270c      	movs	r7, #12
 8007588:	42b9      	cmp	r1, r7
 800758a:	d833      	bhi.n	80075f4 <_malloc_r+0x80>
 800758c:	0028      	movs	r0, r5
 800758e:	f000 f871 	bl	8007674 <__malloc_lock>
 8007592:	4e37      	ldr	r6, [pc, #220]	@ (8007670 <_malloc_r+0xfc>)
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	001c      	movs	r4, r3
 8007598:	2c00      	cmp	r4, #0
 800759a:	d12f      	bne.n	80075fc <_malloc_r+0x88>
 800759c:	0039      	movs	r1, r7
 800759e:	0028      	movs	r0, r5
 80075a0:	f7ff ffc6 	bl	8007530 <sbrk_aligned>
 80075a4:	0004      	movs	r4, r0
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d15f      	bne.n	800766a <_malloc_r+0xf6>
 80075aa:	6834      	ldr	r4, [r6, #0]
 80075ac:	9400      	str	r4, [sp, #0]
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d14a      	bne.n	800764a <_malloc_r+0xd6>
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	d052      	beq.n	800765e <_malloc_r+0xea>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	0028      	movs	r0, r5
 80075bc:	18e3      	adds	r3, r4, r3
 80075be:	9900      	ldr	r1, [sp, #0]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	f000 f86f 	bl	80076a4 <_sbrk_r>
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	4283      	cmp	r3, r0
 80075ca:	d148      	bne.n	800765e <_malloc_r+0xea>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	0028      	movs	r0, r5
 80075d0:	1aff      	subs	r7, r7, r3
 80075d2:	0039      	movs	r1, r7
 80075d4:	f7ff ffac 	bl	8007530 <sbrk_aligned>
 80075d8:	3001      	adds	r0, #1
 80075da:	d040      	beq.n	800765e <_malloc_r+0xea>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	19db      	adds	r3, r3, r7
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	6833      	ldr	r3, [r6, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d133      	bne.n	8007652 <_malloc_r+0xde>
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	e019      	b.n	8007624 <_malloc_r+0xb0>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dac9      	bge.n	8007588 <_malloc_r+0x14>
 80075f4:	230c      	movs	r3, #12
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	2000      	movs	r0, #0
 80075fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075fc:	6821      	ldr	r1, [r4, #0]
 80075fe:	1bc9      	subs	r1, r1, r7
 8007600:	d420      	bmi.n	8007644 <_malloc_r+0xd0>
 8007602:	290b      	cmp	r1, #11
 8007604:	d90a      	bls.n	800761c <_malloc_r+0xa8>
 8007606:	19e2      	adds	r2, r4, r7
 8007608:	6027      	str	r7, [r4, #0]
 800760a:	42a3      	cmp	r3, r4
 800760c:	d104      	bne.n	8007618 <_malloc_r+0xa4>
 800760e:	6032      	str	r2, [r6, #0]
 8007610:	6863      	ldr	r3, [r4, #4]
 8007612:	6011      	str	r1, [r2, #0]
 8007614:	6053      	str	r3, [r2, #4]
 8007616:	e005      	b.n	8007624 <_malloc_r+0xb0>
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	e7f9      	b.n	8007610 <_malloc_r+0x9c>
 800761c:	6862      	ldr	r2, [r4, #4]
 800761e:	42a3      	cmp	r3, r4
 8007620:	d10e      	bne.n	8007640 <_malloc_r+0xcc>
 8007622:	6032      	str	r2, [r6, #0]
 8007624:	0028      	movs	r0, r5
 8007626:	f000 f82d 	bl	8007684 <__malloc_unlock>
 800762a:	0020      	movs	r0, r4
 800762c:	2207      	movs	r2, #7
 800762e:	300b      	adds	r0, #11
 8007630:	1d23      	adds	r3, r4, #4
 8007632:	4390      	bics	r0, r2
 8007634:	1ac2      	subs	r2, r0, r3
 8007636:	4298      	cmp	r0, r3
 8007638:	d0df      	beq.n	80075fa <_malloc_r+0x86>
 800763a:	1a1b      	subs	r3, r3, r0
 800763c:	50a3      	str	r3, [r4, r2]
 800763e:	e7dc      	b.n	80075fa <_malloc_r+0x86>
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	e7ef      	b.n	8007624 <_malloc_r+0xb0>
 8007644:	0023      	movs	r3, r4
 8007646:	6864      	ldr	r4, [r4, #4]
 8007648:	e7a6      	b.n	8007598 <_malloc_r+0x24>
 800764a:	9c00      	ldr	r4, [sp, #0]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	e7ad      	b.n	80075ae <_malloc_r+0x3a>
 8007652:	001a      	movs	r2, r3
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	42a3      	cmp	r3, r4
 8007658:	d1fb      	bne.n	8007652 <_malloc_r+0xde>
 800765a:	2300      	movs	r3, #0
 800765c:	e7da      	b.n	8007614 <_malloc_r+0xa0>
 800765e:	230c      	movs	r3, #12
 8007660:	0028      	movs	r0, r5
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f000 f80e 	bl	8007684 <__malloc_unlock>
 8007668:	e7c6      	b.n	80075f8 <_malloc_r+0x84>
 800766a:	6007      	str	r7, [r0, #0]
 800766c:	e7da      	b.n	8007624 <_malloc_r+0xb0>
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	20000ec4 	.word	0x20000ec4

08007674 <__malloc_lock>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4802      	ldr	r0, [pc, #8]	@ (8007680 <__malloc_lock+0xc>)
 8007678:	f000 f850 	bl	800771c <__retarget_lock_acquire_recursive>
 800767c:	bd10      	pop	{r4, pc}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	20001004 	.word	0x20001004

08007684 <__malloc_unlock>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4802      	ldr	r0, [pc, #8]	@ (8007690 <__malloc_unlock+0xc>)
 8007688:	f000 f849 	bl	800771e <__retarget_lock_release_recursive>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	20001004 	.word	0x20001004

08007694 <memset>:
 8007694:	0003      	movs	r3, r0
 8007696:	1882      	adds	r2, r0, r2
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	7019      	strb	r1, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <_sbrk_r>:
 80076a4:	2300      	movs	r3, #0
 80076a6:	b570      	push	{r4, r5, r6, lr}
 80076a8:	4d06      	ldr	r5, [pc, #24]	@ (80076c4 <_sbrk_r+0x20>)
 80076aa:	0004      	movs	r4, r0
 80076ac:	0008      	movs	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7fd faa2 	bl	8004bf8 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d103      	bne.n	80076c0 <_sbrk_r+0x1c>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d000      	beq.n	80076c0 <_sbrk_r+0x1c>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	20001000 	.word	0x20001000

080076c8 <__errno>:
 80076c8:	4b01      	ldr	r3, [pc, #4]	@ (80076d0 <__errno+0x8>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	4770      	bx	lr
 80076ce:	46c0      	nop			@ (mov r8, r8)
 80076d0:	200000ec 	.word	0x200000ec

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	2600      	movs	r6, #0
 80076d8:	4c0c      	ldr	r4, [pc, #48]	@ (800770c <__libc_init_array+0x38>)
 80076da:	4d0d      	ldr	r5, [pc, #52]	@ (8007710 <__libc_init_array+0x3c>)
 80076dc:	1b64      	subs	r4, r4, r5
 80076de:	10a4      	asrs	r4, r4, #2
 80076e0:	42a6      	cmp	r6, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	2600      	movs	r6, #0
 80076e6:	f000 f81b 	bl	8007720 <_init>
 80076ea:	4c0a      	ldr	r4, [pc, #40]	@ (8007714 <__libc_init_array+0x40>)
 80076ec:	4d0a      	ldr	r5, [pc, #40]	@ (8007718 <__libc_init_array+0x44>)
 80076ee:	1b64      	subs	r4, r4, r5
 80076f0:	10a4      	asrs	r4, r4, #2
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	00b3      	lsls	r3, r6, #2
 80076fa:	58eb      	ldr	r3, [r5, r3]
 80076fc:	4798      	blx	r3
 80076fe:	3601      	adds	r6, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	00b3      	lsls	r3, r6, #2
 8007704:	58eb      	ldr	r3, [r5, r3]
 8007706:	4798      	blx	r3
 8007708:	3601      	adds	r6, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	08007874 	.word	0x08007874
 8007710:	08007874 	.word	0x08007874
 8007714:	08007878 	.word	0x08007878
 8007718:	08007874 	.word	0x08007874

0800771c <__retarget_lock_acquire_recursive>:
 800771c:	4770      	bx	lr

0800771e <__retarget_lock_release_recursive>:
 800771e:	4770      	bx	lr

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	46c0      	nop			@ (mov r8, r8)
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <__FLASH_Program_Fast_veneer>:
 8007738:	b401      	push	{r0}
 800773a:	4802      	ldr	r0, [pc, #8]	@ (8007744 <__FLASH_Program_Fast_veneer+0xc>)
 800773c:	4684      	mov	ip, r0
 800773e:	bc01      	pop	{r0}
 8007740:	4760      	bx	ip
 8007742:	bf00      	nop
 8007744:	2000013d 	.word	0x2000013d

Disassembly of section .data:

200000c0 <g_device_type>:
200000c0:	                                         ..

200000c2 <g_firmware_version>:
200000c2:	                                         .

200000c3 <g_tail_status>:
200000c3:	                                         .

200000c4 <g_uart_out_transmit_commplete>:
200000c4:	                                         .

200000c5 <g_uart_in_transmit_commplete>:
200000c5:	                                         ...

200000c8 <g_heartbeat_data_pack_buf>:
200000c8:	000355aa 55fcfdff 000000aa              .U.....U....

200000d4 <s_enum_please_data_packet_buf>:
200000d4:	000355aa 55fbfcff                        .U.....U.

200000dd <s_enum_please_nums>:
200000dd:	                                         ...

200000e0 <SystemCoreClock>:
200000e0:	00f42400                                .$..

200000e4 <uwTickFreq>:
200000e4:	00000001                                ....

200000e8 <uwTickPrio>:
200000e8:	00000004                                ....

200000ec <_impure_ptr>:
200000ec:	200000f0                                ... 

200000f0 <_impure_data>:
200000f0:	00000000 20000ec8 20000f30 20000f98     ....... 0.. ... 
	...

2000013c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000013c:	b510      	push	{r4, lr}
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000013e:	4a0c      	ldr	r2, [pc, #48]	@ (20000170 <FLASH_Program_Fast+0x34>)
20000140:	6954      	ldr	r4, [r2, #20]
20000142:	2380      	movs	r3, #128	@ 0x80
20000144:	02db      	lsls	r3, r3, #11
20000146:	4323      	orrs	r3, r4
20000148:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000014a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000014e:	b672      	cpsid	i
  uint8_t index = 0;
20000150:	2300      	movs	r3, #0
}
20000152:	e003      	b.n	2000015c <FLASH_Program_Fast+0x20>
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000154:	c904      	ldmia	r1!, {r2}
20000156:	c004      	stmia	r0!, {r2}
    src += 4U;
    dest += 4U;
    index++;
20000158:	3301      	adds	r3, #1
2000015a:	b2db      	uxtb	r3, r3
  while (index < 64U)
2000015c:	2b3f      	cmp	r3, #63	@ 0x3f
2000015e:	d9f9      	bls.n	20000154 <FLASH_Program_Fast+0x18>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000160:	4b03      	ldr	r3, [pc, #12]	@ (20000170 <FLASH_Program_Fast+0x34>)
20000162:	691b      	ldr	r3, [r3, #16]
20000164:	03db      	lsls	r3, r3, #15
20000166:	d4fb      	bmi.n	20000160 <FLASH_Program_Fast+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000168:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000016c:	bd10      	pop	{r4, pc}
2000016e:	46c0      	nop			@ (mov r8, r8)
20000170:	40022000 	.word	0x40022000
